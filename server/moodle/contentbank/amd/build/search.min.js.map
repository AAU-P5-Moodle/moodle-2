{"version":3,"file":"search.min.js","sources":["../src/search.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Search methods for finding contents in the content bank.\r\n *\r\n * @module     core_contentbank/search\r\n * @copyright  2020 Sara Arjona <sara@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport $ from 'jquery';\r\nimport selectors from 'core_contentbank/selectors';\r\nimport {getString} from 'core/str';\r\nimport Pending from 'core/pending';\r\nimport {debounce} from 'core/utils';\r\n\r\n/**\r\n * Set up the search.\r\n *\r\n * @method init\r\n */\r\nexport const init = () => {\r\n    const pendingPromise = new Pending();\r\n\r\n    const root = $(selectors.regions.contentbank);\r\n    registerListenerEvents(root);\r\n\r\n    pendingPromise.resolve();\r\n};\r\n\r\n/**\r\n * Register contentbank search related event listeners.\r\n *\r\n * @method registerListenerEvents\r\n * @param {Object} root The root element for the contentbank.\r\n */\r\nconst registerListenerEvents = (root) => {\r\n\r\n    const searchInput = root.find(selectors.elements.searchinput)[0];\r\n\r\n    root.on('click', selectors.actions.search, function(e) {\r\n        e.preventDefault();\r\n        toggleSearchResultsView(root, searchInput.value);\r\n    });\r\n\r\n    root.on('click', selectors.actions.clearSearch, function(e) {\r\n        e.preventDefault();\r\n        searchInput.value = \"\";\r\n        searchInput.focus();\r\n        toggleSearchResultsView(root, searchInput.value);\r\n    });\r\n\r\n    // The search input is also triggered.\r\n    searchInput.addEventListener('input', debounce(() => {\r\n        // Display the search results.\r\n        toggleSearchResultsView(root, searchInput.value);\r\n    }, 300));\r\n\r\n};\r\n\r\n/**\r\n * Toggle (display/hide) the search results depending on the value of the search query.\r\n *\r\n * @method toggleSearchResultsView\r\n * @param {HTMLElement} body The root element for the contentbank.\r\n * @param {String} searchQuery The search query.\r\n */\r\nconst toggleSearchResultsView = async(body, searchQuery) => {\r\n    const clearSearchButton = body.find(selectors.actions.clearSearch)[0];\r\n\r\n    const navbarBreadcrumb = body.find(selectors.elements.cbnavbarbreadcrumb)[0];\r\n    const navbarTotal = body.find(selectors.elements.cbnavbartotalsearch)[0];\r\n    // Update the results.\r\n    const filteredContents = filterContents(body, searchQuery);\r\n    if (searchQuery.length > 0) {\r\n        // As the search query is present, search results should be displayed.\r\n\r\n        // Display the \"clear\" search button in the activity chooser search bar.\r\n        clearSearchButton.classList.remove('d-none');\r\n\r\n        // Change the cb-navbar to display total items found.\r\n        navbarBreadcrumb.classList.add('d-none');\r\n        navbarTotal.innerHTML = await getString('itemsfound', 'core_contentbank', filteredContents.length);\r\n        navbarTotal.classList.remove('d-none');\r\n    } else {\r\n        // As search query is not present, the search results should be removed.\r\n\r\n        // Hide the \"clear\" search button in the activity chooser search bar.\r\n        clearSearchButton.classList.add('d-none');\r\n\r\n        // Display again the breadcrumb in the navbar.\r\n        navbarBreadcrumb.classList.remove('d-none');\r\n        navbarTotal.classList.add('d-none');\r\n    }\r\n};\r\n\r\n/**\r\n * Return the list of contents which have a name that matches the given search term.\r\n *\r\n * @method filterContents\r\n * @param {HTMLElement} body The root element for the contentbank.\r\n * @param {String} searchTerm The search term to match.\r\n * @return {Array}\r\n */\r\nconst filterContents = (body, searchTerm) => {\r\n    const contents = Array.from(body.find(selectors.elements.listitem));\r\n    const searchResults = [];\r\n    contents.forEach((content) => {\r\n        const contentName = content.getAttribute('data-name');\r\n        if (searchTerm === '' || contentName.toLowerCase().includes(searchTerm.toLowerCase())) {\r\n            // The content matches the search criteria so it should be displayed and hightlighted.\r\n            searchResults.push(content);\r\n            const contentNameElement = content.querySelector(selectors.regions.cbcontentname);\r\n            contentNameElement.innerHTML = highlight(contentName, searchTerm);\r\n            content.classList.remove('d-none');\r\n        } else {\r\n            content.classList.add('d-none');\r\n        }\r\n    });\r\n\r\n    return searchResults;\r\n};\r\n\r\n/**\r\n * Highlight a given string in a text.\r\n *\r\n * @method highlight\r\n * @param  {String} text The whole text.\r\n * @param  {String} highlightText The piece of text to highlight.\r\n * @return {String}\r\n */\r\nconst highlight = (text, highlightText) => {\r\n    let result = text;\r\n    if (highlightText !== '') {\r\n        const pos = text.toLowerCase().indexOf(highlightText.toLowerCase());\r\n        if (pos > -1) {\r\n            result = text.substr(0, pos) + '<span class=\"matchtext\">' + text.substr(pos, highlightText.length) + '</span>' +\r\n                text.substr(pos + highlightText.length);\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_jquery","_selectors","_pending","_exports","init","pendingPromise","Pending","root","$","selectors","regions","contentbank","registerListenerEvents","resolve","searchInput","find","elements","searchinput","on","actions","search","preventDefault","toggleSearchResultsView","value","clearSearch","focus","addEventListener","debounce","async","body","searchQuery","clearSearchButton","navbarBreadcrumb","cbnavbarbreadcrumb","navbarTotal","cbnavbartotalsearch","filteredContents","filterContents","length","classList","remove","add","innerHTML","getString","searchTerm","contents","Array","from","listitem","searchResults","forEach","content","contentName","getAttribute","toLowerCase","includes","push","querySelector","cbcontentname","highlight","text","highlightText","result","pos","indexOf","substr"],"mappings":"sLA0BmC,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;kFAHnCG,QAAAJ,uBAAAI,SACAC,WAAAL,uBAAAK,YAEAC,SAAAN,uBAAAM,UAeEC,SAAAC,KAPkBA,KAChB,MAAMC,eAAiB,IAAIC,SAAAA,QAErBC,MAAO,EAAAC,QAACT,SAACU,mBAAUC,QAAQC,aACjCC,uBAAuBL,MAEvBF,eAAeQ,SAAS,EAS5B,MAAMD,uBAA0BL,OAE5B,MAAMO,YAAcP,KAAKQ,KAAKN,WAAAA,QAAUO,SAASC,aAAa,GAE9DV,KAAKW,GAAG,QAAST,WAAAA,QAAUU,QAAQC,QAAQ,SAASvB,GAChDA,EAAEwB,iBACFC,wBAAwBf,KAAMO,YAAYS,MAC9C,IAEAhB,KAAKW,GAAG,QAAST,WAAAA,QAAUU,QAAQK,aAAa,SAAS3B,GACrDA,EAAEwB,iBACFP,YAAYS,MAAQ,GACpBT,YAAYW,QACZH,wBAAwBf,KAAMO,YAAYS,MAC9C,IAGAT,YAAYY,iBAAiB,SAAS,EAAAC,OAAAA,WAAS,KAE3CL,wBAAwBf,KAAMO,YAAYS,MAAM,GACjD,KAAK,EAWND,wBAA0BM,MAAMC,KAAMC,eACxC,MAAMC,kBAAoBF,KAAKd,KAAKN,WAAAA,QAAUU,QAAQK,aAAa,GAE7DQ,iBAAmBH,KAAKd,KAAKN,WAAAA,QAAUO,SAASiB,oBAAoB,GACpEC,YAAcL,KAAKd,KAAKN,WAAAA,QAAUO,SAASmB,qBAAqB,GAEhEC,iBAAmBC,eAAeR,KAAMC,aAC1CA,YAAYQ,OAAS,GAIrBP,kBAAkBQ,UAAUC,OAAO,UAGnCR,iBAAiBO,UAAUE,IAAI,UAC/BP,YAAYQ,gBAAkB,EAAAC,KAASA,WAAC,aAAc,mBAAoBP,iBAAiBE,QAC3FJ,YAAYK,UAAUC,OAAO,YAK7BT,kBAAkBQ,UAAUE,IAAI,UAGhCT,iBAAiBO,UAAUC,OAAO,UAClCN,YAAYK,UAAUE,IAAI,UAC9B,EAWEJ,eAAiBA,CAACR,KAAMe,cAC1B,MAAMC,SAAWC,MAAMC,KAAKlB,KAAKd,KAAKN,mBAAUO,SAASgC,WACnDC,cAAgB,GActB,OAbAJ,SAASK,SAASC,UACd,MAAMC,YAAcD,QAAQE,aAAa,aACzC,GAAmB,KAAfT,YAAqBQ,YAAYE,cAAcC,SAASX,WAAWU,eAAgB,CAEnFL,cAAcO,KAAKL,SACQA,QAAQM,cAAchD,WAAAA,QAAUC,QAAQgD,eAChDhB,UAAYiB,UAAUP,YAAaR,YACtDO,QAAQZ,UAAUC,OAAO,SAC7B,MACIW,QAAQZ,UAAUE,IAAI,SAC1B,IAGGQ,aAAa,EAWlBU,UAAYA,CAACC,KAAMC,iBACrB,IAAIC,OAASF,KACb,GAAsB,KAAlBC,cAAsB,CACtB,MAAME,IAAMH,KAAKN,cAAcU,QAAQH,cAAcP,eACjDS,KAAO,IACPD,OAASF,KAAKK,OAAO,EAAGF,KAAO,2BAA6BH,KAAKK,OAAOF,IAAKF,cAAcvB,QAAU,UACjGsB,KAAKK,OAAOF,IAAMF,cAAcvB,QAE5C,CAEA,OAAOwB,MAAM,CACf"}