{"version":3,"file":"categorymanager.min.js","sources":["../src/categorymanager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Reactive module for category manager\r\n *\r\n * @module qbank_managecategories/categorymanager\r\n */\r\n\r\nimport {Reactive} from 'core/reactive';\r\nimport {get_string as getString} from 'core/str';\r\nimport {mutations} from 'qbank_managecategories/mutations';\r\nimport {eventTypes, notifyQbankManagecategoriesStateUpdated} from 'qbank_managecategories/events';\r\nimport Ajax from \"core/ajax\";\r\nimport Notification from \"core/notification\";\r\nimport ModalForm from 'core_form/modalform';\r\n\r\nconst SELECTORS = {\r\n    CATEGORY_LIST: '.qbank_managecategories-categorylist',\r\n    CONTEXT: '.qbank_managecategories-categorylist[data-contextid]',\r\n    CATEGORY_ITEM: '.qbank_managecategories-item[data-categoryid]',\r\n    CATEGORY_ROOT: '#categoryroot',\r\n    SHOWDESCRIPTIONS_TOGGLE: '#showdescriptions-toggle',\r\n    ADD_EDIT_BUTTON: '[data-action=\"addeditcategory\"]',\r\n};\r\n\r\nconst CLASSES = {\r\n    DRAGHANDLE: 'draghandle',\r\n    DANGER: 'alert-danger',\r\n};\r\n\r\n/**\r\n * Load the initial state.\r\n *\r\n * This iterates over the initial tree of category items, and captures the data required for the state from each category.\r\n * It also captures a count of the number of children in each list.\r\n *\r\n * @param {Reactive} reactive\r\n * @return {Promise<void>}\r\n */\r\nconst loadState = async(reactive) => {\r\n    const rootElement = document.querySelector(SELECTORS.CATEGORY_ROOT);\r\n    const stateData = {\r\n        page: {\r\n            contextid: rootElement.dataset.contextid,\r\n            showdescriptions: document.querySelector(SELECTORS.SHOWDESCRIPTIONS_TOGGLE).checked,\r\n        },\r\n        categories: [],\r\n        categoryLists: [],\r\n    };\r\n    const listItems = document.querySelectorAll(SELECTORS.CATEGORY_ITEM);\r\n    listItems.forEach(item => {\r\n        stateData.categories.push({\r\n            id: item.dataset.categoryid,\r\n            name: item.dataset.categoryname,\r\n            parent: item.dataset.parent,\r\n            contextid: item.dataset.contextid,\r\n            sortorder: item.dataset.sortorder,\r\n            draghandle: item.classList.contains(CLASSES.DRAGHANDLE),\r\n        });\r\n    });\r\n    const categoryLists = document.querySelectorAll(SELECTORS.CATEGORY_LIST);\r\n    categoryLists.forEach(categoryList => {\r\n        stateData.categoryLists.push({\r\n            id: categoryList.dataset.categoryid,\r\n            childCount: categoryList.querySelectorAll(SELECTORS.CATEGORY_ITEM).length,\r\n        });\r\n    });\r\n    reactive.setInitialState(stateData);\r\n};\r\n\r\n/**\r\n * Reactive instance for the category manager.\r\n */\r\nclass CategoryManager extends Reactive {\r\n    /**\r\n     * Move a category to a new position within the given parent.\r\n     *\r\n     * This will call the move_category web service function to re-order the categories, then update\r\n     * the state with the returned updates.\r\n     *\r\n     * @param {Number} categoryId The ID of the category being moved.\r\n     * @param {Number} targetParentId The ID of the destination parent category (this may not have changed).\r\n     * @param {Number} precedingSiblingId The ID of the category to put the moved category after.\r\n     *     This may be null if moving to the top of a list.\r\n     */\r\n    moveCategory(\r\n        categoryId,\r\n        targetParentId,\r\n        precedingSiblingId = null,\r\n    ) {\r\n        const call = {\r\n            methodname: 'qbank_managecategories_move_category',\r\n            args: {\r\n                pagecontextid: this.state.page.contextid,\r\n                categoryid: categoryId,\r\n                targetparentid: targetParentId,\r\n                precedingsiblingid: precedingSiblingId,\r\n            }\r\n        };\r\n        Ajax.call([call])[0]\r\n            .then((stateUpdates) => {\r\n                this.stateManager.processUpdates(stateUpdates);\r\n                return stateUpdates;\r\n            })\r\n            .catch(error => {\r\n                Notification.addNotification({\r\n                    message: error.message,\r\n                    type: 'error',\r\n                });\r\n                document.getElementsByClassName(CLASSES.DANGER)[0]?.scrollIntoView();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Return title for the add/edit modal.\r\n     *\r\n     * @param {boolean} isEdit is 'add' or 'edit' form\r\n     * @returns {String} title string\r\n     */\r\n    getTitle(isEdit) {\r\n        return getString(isEdit ? 'editcategory' : 'addcategory', 'question');\r\n    }\r\n\r\n    /**\r\n     * Return save button label for the add/edit modal.\r\n     *\r\n     * @param {boolean} isEdit is 'add' or 'edit' form\r\n     * @returns {String} save string\r\n     */\r\n    getSave(isEdit) {\r\n        return isEdit ? getString('savechanges', 'core') : getString('addcategory', 'question');\r\n    }\r\n\r\n    /**\r\n     * Function handling display of modal form.\r\n     *\r\n     * @param {Event} e The click event triggering the modal.\r\n     */\r\n    showEditModal(e) {\r\n        const addEditButton = e.target.closest(SELECTORS.ADD_EDIT_BUTTON);\r\n\r\n        // Return if it is not 'addeditcategory' button.\r\n        if (!addEditButton) {\r\n            return;\r\n        }\r\n\r\n        // Return if the action type is not specified.\r\n        if (!addEditButton.dataset.actiontype) {\r\n            return;\r\n        }\r\n\r\n        e.preventDefault();\r\n        // Data for the modal.\r\n        const title = categorymanager.getTitle(addEditButton.dataset.actiontype === 'edit');\r\n        const save = categorymanager.getSave(addEditButton.dataset.actiontype === 'edit');\r\n        const cmid = addEditButton.dataset.cmid;\r\n        const courseid = addEditButton.dataset.courseid;\r\n        const questioncount = addEditButton.dataset.questioncount;\r\n        let contextid = addEditButton.dataset.contextid;\r\n        let categoryid = null;\r\n        let sortorder = null;\r\n        let parent = null;\r\n        const categoryItem = e.target.closest(SELECTORS.CATEGORY_ITEM);\r\n        if (categoryItem) {\r\n            contextid = categoryItem.dataset.contextid;\r\n            categoryid = categoryItem.dataset.categoryid;\r\n            sortorder = categoryItem.dataset.sortorder;\r\n            const parentContext = categoryItem.closest(SELECTORS.CONTEXT);\r\n            parent = categoryItem.dataset.parent + ',' + parentContext.dataset.contextid;\r\n        }\r\n\r\n        // Call the modal.\r\n        const modalForm = new ModalForm({\r\n            formClass: \"qbank_managecategories\\\\form\\\\question_category_edit_form\",\r\n            args: {\r\n                cmid,\r\n                courseid,\r\n                questioncount,\r\n                contextid,\r\n                categoryid,\r\n                sortorder,\r\n                parent,\r\n            },\r\n            modalConfig: {\r\n                title: title,\r\n                large: true,\r\n            },\r\n            saveButtonText: save,\r\n            returnFocus: addEditButton,\r\n        });\r\n        // Once the form has been submitted via the web service, update the state with the new or updated\r\n        // category based on the web service response.\r\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (response) => {\r\n            categorymanager.stateManager.processUpdates(response.detail);\r\n        });\r\n        // Show the form.\r\n        modalForm.show();\r\n    }\r\n}\r\n\r\nexport const categorymanager = new CategoryManager({\r\n    name: 'qtype_managecategories_categorymanager',\r\n    eventName: eventTypes.qbankManagecategoriesStateUpdated,\r\n    eventDispatch: notifyQbankManagecategoriesStateUpdated,\r\n    mutations,\r\n});\r\n\r\n/**\r\n * Load the initial state.\r\n */\r\nexport const init = () => {\r\n    loadState(categorymanager);\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_ajax","_notification","_modalform","SELECTORS","CLASSES","CategoryManager","Reactive","moveCategory","categoryId","targetParentId","precedingSiblingId","arguments","length","undefined","call","methodname","args","pagecontextid","this","state","page","contextid","categoryid","targetparentid","precedingsiblingid","Ajax","then","stateUpdates","stateManager","processUpdates","catch","error","Notification","addNotification","message","type","document","getElementsByClassName","scrollIntoView","getTitle","isEdit","getString","get_string","getSave","showEditModal","addEditButton","target","closest","dataset","actiontype","preventDefault","title","categorymanager","save","cmid","courseid","questioncount","sortorder","parent","categoryItem","parentContext","modalForm","ModalForm","formClass","modalConfig","large","saveButtonText","returnFocus","addEventListener","events","FORM_SUBMITTED","response","detail","show","_exports","name","eventName","eventTypes","qbankManagecategoriesStateUpdated","eventDispatch","notifyQbankManagecategoriesStateUpdated","mutations","init","async","stateData","querySelector","showdescriptions","checked","categories","categoryLists","querySelectorAll","forEach","item","push","id","categoryname","draghandle","classList","contains","categoryList","childCount","reactive","setInitialState","loadState"],"mappings":"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"}