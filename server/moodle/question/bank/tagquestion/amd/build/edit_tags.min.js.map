{"version":3,"file":"edit_tags.min.js","sources":["../src/edit_tags.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A javascript module to handle question tags editing.\r\n *\r\n * @module     qbank_tagquestion/edit_tags\r\n * @copyright  2018 Simey Lameze <simey@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([\r\n            'jquery',\r\n            'core/fragment',\r\n            'core/str',\r\n            'core/modal_events',\r\n            'core/modal_save_cancel',\r\n            'core/notification',\r\n            'core/custom_interaction_events',\r\n            'qbank_tagquestion/repository',\r\n            'qbank_tagquestion/selectors',\r\n        ],\r\n        function(\r\n            $,\r\n            Fragment,\r\n            Str,\r\n            ModalEvents,\r\n            ModalSaveCancel,\r\n            Notification,\r\n            CustomEvents,\r\n            Repository,\r\n            QuestionSelectors\r\n        ) {\r\n\r\n    /**\r\n     * Enable the save button in the footer.\r\n     *\r\n     * @param {object} root The container element.\r\n     * @method enableSaveButton\r\n     */\r\n    var enableSaveButton = function(root) {\r\n        root.find(QuestionSelectors.actions.save).prop('disabled', false);\r\n    };\r\n\r\n    /**\r\n     * Disable the save button in the footer.\r\n     *\r\n     * @param {object} root The container element.\r\n     * @method disableSaveButton\r\n     */\r\n    var disableSaveButton = function(root) {\r\n        root.find(QuestionSelectors.actions.save).prop('disabled', true);\r\n    };\r\n\r\n    /**\r\n     * Get the serialised form data.\r\n     *\r\n     * @method getFormData\r\n     * @param {object} modal The modal object.\r\n     * @return {string} serialised form data\r\n     */\r\n    var getFormData = function(modal) {\r\n        return modal.getBody().find('form').serialize();\r\n    };\r\n\r\n    /**\r\n     * Set the element state to loading.\r\n     *\r\n     * @param {object} root The container element\r\n     * @method startLoading\r\n     */\r\n    var startLoading = function(root) {\r\n        var loadingIconContainer = root.find(QuestionSelectors.containers.loadingIcon);\r\n\r\n        loadingIconContainer.removeClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Remove the loading state from the element.\r\n     *\r\n     * @param {object} root The container element\r\n     * @method stopLoading\r\n     */\r\n    var stopLoading = function(root) {\r\n        var loadingIconContainer = root.find(QuestionSelectors.containers.loadingIcon);\r\n\r\n        loadingIconContainer.addClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Set the context Id data attribute on the modal.\r\n     *\r\n     * @param {Promise} modal The modal promise.\r\n     * @param {int} contextId The context id.\r\n     */\r\n    var setContextId = function(modal, contextId) {\r\n        modal.getBody().attr('data-contextid', contextId);\r\n    };\r\n\r\n    /**\r\n     * Get the context Id data attribute value from the modal body.\r\n     *\r\n     * @param {Promise} modal The modal promise.\r\n     * @return {int} The context id.\r\n     */\r\n    var getContextId = function(modal) {\r\n        return modal.getBody().data('contextid');\r\n    };\r\n\r\n    /**\r\n     * Set the question Id data attribute on the modal.\r\n     *\r\n     * @param {Promise} modal The modal promise.\r\n     * @param {int} questionId The question Id.\r\n     */\r\n    var setQuestionId = function(modal, questionId) {\r\n        modal.getBody().attr('data-questionid', questionId);\r\n    };\r\n\r\n    /**\r\n     * Get the question Id data attribute value from the modal body.\r\n     *\r\n     * @param {Promise} modal The modal promise.\r\n     * @return {int} The question Id.\r\n     */\r\n    var getQuestionId = function(modal) {\r\n        return modal.getBody().data('questionid');\r\n    };\r\n\r\n    /**\r\n     * Register event listeners for the module.\r\n     *\r\n     * @param {object} root The calendar root element\r\n     */\r\n    var registerEventListeners = function(root) {\r\n        var modalPromise = ModalSaveCancel.create({\r\n            large: false,\r\n        }).then(function(modal) {\r\n            // All of this code only executes once, when the modal is\r\n            // first created. This allows us to add any code that should\r\n            // only be run once, such as adding event handlers to the modal.\r\n            Str.get_string('questiontags', 'question')\r\n                .then(function(string) {\r\n                    modal.setTitle(string);\r\n                    return string;\r\n                })\r\n                .catch(Notification.exception);\r\n\r\n            modal.getRoot().on(ModalEvents.save, function(e) {\r\n                var form = modal.getBody().find('form');\r\n                form.submit();\r\n                e.preventDefault();\r\n            });\r\n\r\n            modal.getRoot().on('submit', 'form', function(e) {\r\n                save(modal, root).then(function() {\r\n                    modal.hide();\r\n                    location.reload();\r\n                    return;\r\n                }).catch(Notification.exception);\r\n\r\n                // Stop the form from actually submitting and prevent it's\r\n                // propagation because we have already handled the event.\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            });\r\n\r\n            return modal;\r\n        });\r\n\r\n        root.on('click', QuestionSelectors.actions.edittags, function(e) {\r\n            e.preventDefault();\r\n            // eslint-disable-next-line promise/catch-or-return\r\n            modalPromise.then((modal) => modal.show());\r\n        });\r\n\r\n        // We need to add an event handler to the tags link because there are\r\n        // multiple links on the page and without adding a listener we don't know\r\n        // which one the user clicked on the show the modal.\r\n        root.on(CustomEvents.events.activate, QuestionSelectors.actions.edittags, function(e) {\r\n            var currentTarget = $(e.currentTarget);\r\n\r\n            var questionId = currentTarget.data('questionid'),\r\n                canTag = !!currentTarget.data('cantag'),\r\n                contextId = currentTarget.data('contextid');\r\n\r\n            // This code gets called each time the user clicks the tag link\r\n            // so we can use it to reload the contents of the tag modal.\r\n            modalPromise.then(function(modal) {\r\n                // Display spinner and disable save button.\r\n                disableSaveButton(root);\r\n                startLoading(root);\r\n\r\n                var args = {\r\n                    id: questionId\r\n                };\r\n\r\n                var tagsFragment = Fragment.loadFragment('qbank_tagquestion', 'tags_form', contextId, args);\r\n                modal.setBody(tagsFragment);\r\n\r\n                tagsFragment.then(function() {\r\n                        enableSaveButton(root);\r\n                        return;\r\n                    })\r\n                    .always(function() {\r\n                        // Always hide the loading spinner when the request\r\n                        // has completed.\r\n                        stopLoading(root);\r\n                        return;\r\n                    })\r\n                .catch(Notification.exception);\r\n\r\n                // Show or hide the save button depending on whether the user\r\n                // has the capability to edit the tags.\r\n                if (canTag) {\r\n                    modal.getRoot().find(QuestionSelectors.actions.save).show();\r\n                } else {\r\n                    modal.getRoot().find(QuestionSelectors.actions.save).hide();\r\n                }\r\n\r\n                setQuestionId(modal, questionId);\r\n                setContextId(modal, contextId);\r\n\r\n                return modal;\r\n            }).catch(Notification.exception);\r\n\r\n            e.preventDefault();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Send the form data to the server to save question tags.\r\n     *\r\n     * @method save\r\n     * @param {object} modal The modal object.\r\n     * @param {object} root The container element.\r\n     * @return {object} A promise\r\n     */\r\n    var save = function(modal, root) {\r\n        // Display spinner and disable save button.\r\n        disableSaveButton(root);\r\n        startLoading(root);\r\n\r\n        var formData = getFormData(modal);\r\n        var questionId = getQuestionId(modal);\r\n        var contextId = getContextId(modal);\r\n\r\n        // Send the form data to the server for processing.\r\n        return Repository.submitTagCreateUpdateForm(questionId, contextId, formData)\r\n            .always(function() {\r\n                // Regardless of success or error we should always stop\r\n                // the loading icon and re-enable the buttons.\r\n                stopLoading(root);\r\n                enableSaveButton(root);\r\n                return;\r\n            })\r\n            .catch(Notification.exception);\r\n    };\r\n\r\n    return {\r\n        init: function(root) {\r\n            root = $(root);\r\n            registerEventListeners(root);\r\n        }\r\n    };\r\n});\r\n"],"names":["define","$","Fragment","Str","ModalEvents","ModalSaveCancel","Notification","CustomEvents","Repository","QuestionSelectors","enableSaveButton","root","find","actions","save","prop","disableSaveButton","startLoading","containers","loadingIcon","removeClass","stopLoading","addClass","modal","formData","getBody","serialize","getFormData","questionId","data","getQuestionId","contextId","getContextId","submitTagCreateUpdateForm","always","catch","exception","init","modalPromise","create","large","then","get_string","string","setTitle","getRoot","on","e","submit","preventDefault","hide","location","reload","stopPropagation","edittags","show","events","activate","currentTarget","canTag","args","id","tagsFragment","loadFragment","setBody","attr","setQuestionId","setContextId","registerEventListeners"],"mappings":"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"}