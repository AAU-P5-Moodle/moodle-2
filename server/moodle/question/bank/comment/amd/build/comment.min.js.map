{"version":3,"file":"comment.min.js","sources":["../src/comment.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Column selector js.\r\n *\r\n * @module    qbank_comment/comment\r\n * @copyright 2021 Catalyst IT Australia Pty Ltd\r\n * @author    Safat Shahin <safatshahin@catalyst-au.net>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Fragment from 'core/fragment';\r\nimport {get_string as getString} from 'core/str';\r\nimport ModalEvents from 'core/modal_events';\r\nimport SaveCancelModal from 'core/modal_save_cancel';\r\n\r\n/**\r\n * Event listeners for the module.\r\n *\r\n * @method clickEvent\r\n * @param {Number} questionId\r\n * @param {Number} courseID\r\n * @param {Number} contextId\r\n */\r\nconst commentEvent = async(questionId, courseID, contextId) => {\r\n    const args = {\r\n        questionid: questionId,\r\n        courseid: courseID\r\n    };\r\n    const modal = await SaveCancelModal.create({\r\n        title: getString('commentheader', 'qbank_comment'),\r\n        body: Fragment.loadFragment('qbank_comment', 'question_comment', contextId, args),\r\n        large: true,\r\n        show: true,\r\n        buttons: {\r\n            save: getString('addcomment', 'qbank_comment'),\r\n            cancel: getString('close', 'qbank_comment'),\r\n        },\r\n        removeOnClose: true,\r\n    });\r\n    const root = modal.getRoot();\r\n\r\n    // Don't display the default add comment link in the modal.\r\n    root.on(ModalEvents.bodyRendered, function() {\r\n        const submitlink = document.querySelectorAll(\"div.comment-area a\")[0];\r\n        submitlink.style.display = 'none';\r\n    });\r\n\r\n    // Version selection event.\r\n    root.on('change', '#question_comment_version_dropdown', (e) =>{\r\n        args.questionid = e.target.value;\r\n        modal.setBody(Fragment.loadFragment('qbank_comment', 'question_comment', contextId, args));\r\n    });\r\n\r\n    // Reload the page when the modal is closed.\r\n    root.on(ModalEvents.hidden, () => location.reload());\r\n\r\n    // Handle adding the comment when the button in the modal is clicked.\r\n    root.on(ModalEvents.save, function(e) {\r\n        e.preventDefault();\r\n        const submitlink = document.querySelectorAll(\"div.comment-area a\")[0];\r\n        const textarea = document.querySelectorAll(\"div.comment-area textarea\")[0];\r\n\r\n        // Check there is a valid comment to add, and trigger adding if there is.\r\n        if (textarea.value != textarea.getAttribute('aria-label') && textarea.value != '') {\r\n            submitlink.click();\r\n        }\r\n\r\n    });\r\n};\r\n\r\n/**\r\n * Entrypoint of the js.\r\n *\r\n * @method init\r\n */\r\nexport const init = () => {\r\n    const target = document.querySelector('#categoryquestions');\r\n    if (target !== null) {\r\n        target.addEventListener('click', (e) => {\r\n            if (e.target.dataset.target && e.target.dataset.target.includes('questioncommentpreview')) {\r\n                // Call for the event listener to listed for clicks in any comment count row.\r\n                commentEvent(e.target.dataset.questionid, e.target.dataset.courseid, e.target.dataset.contextid);\r\n            }\r\n        });\r\n    }\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_fragment","_modal_events","_modal_save_cancel","_exports","init","target","document","querySelector","addEventListener","dataset","includes","async","questionId","courseID","contextId","args","questionid","courseid","modal","SaveCancelModal","create","title","getString","body","Fragment","loadFragment","large","show","buttons","save","cancel","removeOnClose","root","getRoot","on","ModalEvents","bodyRendered","querySelectorAll","style","display","value","setBody","hidden","location","reload","preventDefault","submitlink","textarea","getAttribute","click","commentEvent","contextid"],"mappings":"uLA2BqD,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;;kFAHrDG,UAAAJ,uBAAAI,WAEAC,cAAAL,uBAAAK,eACAC,mBAAAN,uBAAAM,oBAwEEC,SAAAC,KAVkBA,KAChB,MAAMC,OAASC,SAASC,cAAc,sBACvB,OAAXF,QACAA,OAAOG,iBAAiB,SAAUX,IAC1BA,EAAEQ,OAAOI,QAAQJ,QAAUR,EAAEQ,OAAOI,QAAQJ,OAAOK,SAAS,2BAxDvDC,OAAMC,WAAYC,SAAUC,aAC7C,MAAMC,KAAO,CACTC,WAAYJ,WACZK,SAAUJ,UAERK,YAAcC,mBAAepB,QAACqB,OAAO,CACvCC,OAAO,EAAAC,KAAAA,YAAU,gBAAiB,iBAClCC,KAAMC,UAAAA,QAASC,aAAa,gBAAiB,mBAAoBX,UAAWC,MAC5EW,OAAO,EACPC,MAAM,EACNC,QAAS,CACLC,MAAM,EAAAP,KAAAA,YAAU,aAAc,iBAC9BQ,QAAQ,EAAAR,KAAAA,YAAU,QAAS,kBAE/BS,eAAe,IAEbC,KAAOd,MAAMe,UAGnBD,KAAKE,GAAGC,sBAAYC,cAAc,WACX9B,SAAS+B,iBAAiB,sBAAsB,GACxDC,MAAMC,QAAU,MAC/B,IAGAP,KAAKE,GAAG,SAAU,sCAAuCrC,IACrDkB,KAAKC,WAAanB,EAAEQ,OAAOmC,MAC3BtB,MAAMuB,QAAQjB,UAAAA,QAASC,aAAa,gBAAiB,mBAAoBX,UAAWC,MAAM,IAI9FiB,KAAKE,GAAGC,cAAAA,QAAYO,QAAQ,IAAMC,SAASC,WAG3CZ,KAAKE,GAAGC,cAAAA,QAAYN,MAAM,SAAShC,GAC/BA,EAAEgD,iBACF,MAAMC,WAAaxC,SAAS+B,iBAAiB,sBAAsB,GAC7DU,SAAWzC,SAAS+B,iBAAiB,6BAA6B,GAGpEU,SAASP,OAASO,SAASC,aAAa,eAAmC,IAAlBD,SAASP,OAClEM,WAAWG,OAGnB,GAAE,EAcUC,CAAarD,EAAEQ,OAAOI,QAAQO,WAAYnB,EAAEQ,OAAOI,QAAQQ,SAAUpB,EAAEQ,OAAOI,QAAQ0C,UAC1F,GAER,CACF"}