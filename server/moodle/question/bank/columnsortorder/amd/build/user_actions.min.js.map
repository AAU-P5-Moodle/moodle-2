{"version":3,"file":"user_actions.min.js","sources":["../src/user_actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript for customising the user's view of the question bank\r\n *\r\n * @module     qbank_columnsortorder/user_actions\r\n * @copyright  2021 Catalyst IT Australia Pty Ltd\r\n * @author     Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport * as actions from 'qbank_columnsortorder/actions';\r\nimport * as repository from 'qbank_columnsortorder/repository';\r\nimport {get_string as getString} from 'core/str';\r\nimport ModalEvents from 'core/modal_events';\r\nimport ModalSaveCancel from 'core/modal_save_cancel';\r\nimport Notification from \"core/notification\";\r\nimport SortableList from 'core/sortable_list';\r\nimport Templates from \"core/templates\";\r\n\r\n\r\nconst SELECTORS = {\r\n    uiRoot: '.questionbankwindow',\r\n    moveAction: '.menu-action[data-action=move]',\r\n    resizeAction: '.menu-action[data-action=resize]',\r\n    resizeHandle: '.qbank_columnsortorder-action-handle.resize',\r\n    handleContainer: '.handle-container',\r\n    headerContainer: '.header-container',\r\n    tableColumn: identifier => `td[data-columnid=\"${identifier.replace(/[\"\\\\]/g, '\\\\$&')}\"]`,\r\n};\r\n\r\n/** To track mouse event on a table header */\r\nlet currentHeader;\r\n\r\n/** Current mouse x postion, to track mouse event on a table header */\r\nlet currentX;\r\n\r\n/** Minimum size for the column currently being resized. */\r\nlet currentMin;\r\n\r\n/**\r\n * Flag to temporarily prevent move and resize handles from being shown or hidden.\r\n *\r\n * @type {boolean}\r\n */\r\nlet suspendShowHideHandles = false;\r\n\r\n/**\r\n * Add handle containers for move and resize handles.\r\n *\r\n * @param {Element} uiRoot The root element of the quesiton bank UI.\r\n * @return {Promise} Resolved after the containers have been added to each column header.\r\n */\r\nconst addHandleContainers = uiRoot => {\r\n    return new Promise((resolve) => {\r\n        const headerContainers = uiRoot.querySelectorAll(SELECTORS.headerContainer);\r\n        Templates.renderForPromise('qbank_columnsortorder/handle_container', {})\r\n            .then(({html, js}) => {\r\n                headerContainers.forEach(container => {\r\n                    Templates.prependNodeContents(container, html, js);\r\n                });\r\n                resolve();\r\n                return headerContainers;\r\n            }).catch(Notification.exception);\r\n    });\r\n};\r\n\r\n/**\r\n * Render move handles in each container.\r\n *\r\n * This takes a list of the move actions rendered in each column header, and creates a corresponding drag handle for each.\r\n *\r\n * @param {NodeList} moveActions Menu actions for moving columns.\r\n */\r\nconst setUpMoveHandles = moveActions => {\r\n    moveActions.forEach(moveAction => {\r\n        const header = moveAction.closest('th');\r\n        header.classList.add('qbank-sortable-column');\r\n        const handleContainer = header.querySelector(SELECTORS.handleContainer);\r\n        const context = {\r\n            action: \"move\",\r\n            dragtype: \"move\",\r\n            target: '',\r\n            title: moveAction.title,\r\n            pixicon: \"i/dragdrop\",\r\n            pixcomponent: \"core\",\r\n            popup: true\r\n        };\r\n        return Templates.renderForPromise('qbank_columnsortorder/action_handle', context)\r\n            .then(({html, js}) => {\r\n                Templates.prependNodeContents(handleContainer, html, js);\r\n                return handleContainer;\r\n            }).catch(Notification.exception);\r\n    });\r\n};\r\n\r\n/**\r\n * Serialise the current column sizes.\r\n *\r\n * This finds the current width set in each column header's style property, and returns them encoded as a JSON string.\r\n *\r\n * @param {Element} uiRoot The root element of the quesiton bank UI.\r\n * @return {String} JSON array containing a list of objects with column and width properties.\r\n */\r\nconst serialiseColumnSizes = (uiRoot) => {\r\n    const columnSizes = [];\r\n    const tableHeaders = uiRoot.querySelectorAll('th');\r\n    tableHeaders.forEach(header => {\r\n        // Only get the width set via style attribute (set by move action).\r\n        const width = parseInt(header.style.width);\r\n        if (!width || isNaN(width)) {\r\n            return;\r\n        }\r\n        columnSizes.push({\r\n            column: header.dataset.columnid,\r\n            width: width\r\n        });\r\n    });\r\n    return JSON.stringify(columnSizes);\r\n};\r\n\r\n/**\r\n * Find the minimum width for a header, based on the width of its contents.\r\n *\r\n * This is to simulate `min-width: min-content;`, which doesn't work on Chrome because\r\n * min-width is ignored width `table-layout: fixed;`.\r\n *\r\n * @param {Element} header The table header\r\n * @return {Number} The minimum width in pixels\r\n */\r\nconst getMinWidth = (header) => {\r\n    const contents = Array.from(header.querySelector('.header-text').children);\r\n    const contentWidth = contents.reduce((width, contentElement) => width + contentElement.getBoundingClientRect().width, 0);\r\n    return Math.ceil(contentWidth);\r\n};\r\n\r\n/**\r\n * Render resize handles in each container.\r\n *\r\n * This takes a list of the resize actions rendered in each column header, and creates a corresponding drag handle for each.\r\n * It also initialises the event handlers for the drag handles and resize modal.\r\n *\r\n * @param {Element} uiRoot Question bank UI root element.\r\n */\r\nconst setUpResizeHandles = (uiRoot) => {\r\n    const resizeActions = uiRoot.querySelectorAll(SELECTORS.resizeAction);\r\n    resizeActions.forEach(resizeAction => {\r\n        const headerContainer = resizeAction.closest(SELECTORS.headerContainer);\r\n        const header = resizeAction.closest(actions.SELECTORS.sortableColumn);\r\n        const minWidth = getMinWidth(header);\r\n        if (header.offsetWidth < minWidth) {\r\n            header.style.width = minWidth + 'px';\r\n        }\r\n        const handleContainer = headerContainer.querySelector(SELECTORS.handleContainer);\r\n        const context = {\r\n            action: \"resize\",\r\n            target: '',\r\n            title: resizeAction.title,\r\n            pixicon: 'i/twoway',\r\n            pixcomponent: 'core',\r\n            popup: true\r\n        };\r\n        return Templates.renderForPromise('qbank_columnsortorder/action_handle', context)\r\n            .then(({html, js}) => {\r\n                Templates.appendNodeContents(handleContainer, html, js);\r\n                return handleContainer;\r\n            }).catch(Notification.exception);\r\n    });\r\n\r\n    let moveTracker = false;\r\n    let currentResizeHandle = null;\r\n    // Start mouse event on headers.\r\n    uiRoot.addEventListener('mousedown', e => {\r\n        currentResizeHandle = e.target.closest(SELECTORS.resizeHandle);\r\n        // Return if it is not ' resize' button.\r\n        if (!currentResizeHandle) {\r\n            return;\r\n        }\r\n        // Save current position.\r\n        currentX = e.pageX;\r\n        // Find the header.\r\n        currentHeader = e.target.closest(actions.SELECTORS.sortableColumn);\r\n        currentMin = getMinWidth(currentHeader);\r\n        moveTracker = false;\r\n        suspendShowHideHandles = true;\r\n    });\r\n\r\n    // Resize column as the mouse move.\r\n    document.addEventListener('mousemove', e => {\r\n        if (!currentHeader || !currentResizeHandle || currentX === 0) {\r\n            return;\r\n        }\r\n\r\n        // Prevent text selection as the handle is dragged.\r\n        document.getSelection().removeAllRanges();\r\n\r\n        // Adjust the column width according the amount the handle was dragged.\r\n        const offset = e.pageX - currentX;\r\n        currentX = e.pageX;\r\n        const newWidth = currentHeader.offsetWidth + offset;\r\n        if (newWidth >= currentMin) {\r\n            currentHeader.style.width = newWidth + 'px';\r\n        }\r\n        moveTracker = true;\r\n    });\r\n\r\n    // Set new size when mouse is up.\r\n    document.addEventListener('mouseup', () => {\r\n        if (!currentHeader || !currentResizeHandle || currentX === 0) {\r\n            return;\r\n        }\r\n        if (moveTracker) {\r\n            // If the mouse moved, we are changing the size by drag, so save the change.\r\n            repository.setColumnSize(serialiseColumnSizes(uiRoot)).catch(Notification.exception);\r\n        } else {\r\n            // If the mouse didn't move, display a modal to change the size using a form.\r\n            showResizeModal(currentHeader, uiRoot);\r\n        }\r\n        currentMin = null;\r\n        currentHeader = null;\r\n        currentResizeHandle = null;\r\n        currentX = 0;\r\n        moveTracker = false;\r\n        suspendShowHideHandles = false;\r\n    });\r\n};\r\n\r\n/**\r\n * Event handler for resize actions in each column header.\r\n *\r\n * This will listen for a click on any resize action, and activate the corresponding resize modal.\r\n *\r\n * @param {Element} uiRoot Question bank UI root element.\r\n */\r\nconst setUpResizeActions = uiRoot => {\r\n    uiRoot.addEventListener('click', (e) => {\r\n        const resizeAction = e.target.closest(SELECTORS.resizeAction);\r\n        if (resizeAction) {\r\n            e.preventDefault();\r\n            const currentHeader = resizeAction.closest('th');\r\n            showResizeModal(currentHeader, uiRoot);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Show a modal containing a number input for changing a column width without click-and-drag.\r\n *\r\n * @param {Element} currentHeader The header element that is being resized.\r\n * @param {Element} uiRoot The question bank UI root element.\r\n * @returns {Promise<void>}\r\n */\r\nconst showResizeModal = async(currentHeader, uiRoot) => {\r\n    const initialWidth = currentHeader.offsetWidth;\r\n    const minWidth = getMinWidth(currentHeader);\r\n\r\n    const modal = await ModalSaveCancel.create({\r\n        title: getString('resizecolumn', 'qbank_columnsortorder', currentHeader.dataset.name),\r\n        body: Templates.render('qbank_columnsortorder/resize_modal', {width: initialWidth, min: minWidth}),\r\n        show: true,\r\n    });\r\n    const root = modal.getRoot();\r\n    root.on(ModalEvents.cancel, () => {\r\n        currentHeader.style.width = `${initialWidth}px`;\r\n    });\r\n    root.on(ModalEvents.save, () => {\r\n        repository.setColumnSize(serialiseColumnSizes(uiRoot)).catch(Notification.exception);\r\n    });\r\n\r\n    const body = await modal.bodyPromise;\r\n    const input = body.get(0).querySelector('input');\r\n\r\n    input.addEventListener('change', e => {\r\n        const valid = e.target.checkValidity();\r\n        e.target.closest('.has-validation').classList.add('was-validated');\r\n        if (valid) {\r\n            const newWidth = e.target.value;\r\n            currentHeader.style.width = `${newWidth}px`;\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Event handler for move actions in each column header.\r\n *\r\n * This will listen for a click on any move action, pass the click to the corresponding move handle, causing its modal to be shown.\r\n *\r\n * @param {Element} uiRoot Question bank UI root element.\r\n */\r\nconst setUpMoveActions = uiRoot => {\r\n    uiRoot.addEventListener('click', e => {\r\n        const moveAction = e.target.closest(SELECTORS.moveAction);\r\n        if (moveAction) {\r\n            e.preventDefault();\r\n            const sortableColumn = moveAction.closest(actions.SELECTORS.sortableColumn);\r\n            const moveHandle = sortableColumn.querySelector(actions.SELECTORS.moveHandler);\r\n            moveHandle.click();\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Event handler for showing and hiding handles when the mouse is over a column header.\r\n *\r\n * Implementing this behaviour using the :hover CSS pseudoclass is not sufficient, as the mouse may move over the neighbouring\r\n * header while dragging, leading to some odd behaviour. This allows us to suspend the show/hide behaviour while a handle is being\r\n * dragged, and so keep the active handle visible until the drag is finished.\r\n *\r\n * @param {Element} uiRoot Question bank UI root element.\r\n */\r\nconst setupShowHideHandles = uiRoot => {\r\n    let shownHeader = null;\r\n    let tableHead = uiRoot.querySelector('thead');\r\n    uiRoot.addEventListener('mouseover', e => {\r\n        if (suspendShowHideHandles) {\r\n            return;\r\n        }\r\n        const header = e.target.closest(actions.SELECTORS.sortableColumn);\r\n        if (!header && !shownHeader) {\r\n            return;\r\n        }\r\n        if (!header || header !== shownHeader) {\r\n            tableHead.querySelector('.show-handles')?.classList.remove('show-handles');\r\n            shownHeader = header;\r\n            if (header) {\r\n                header.classList.add('show-handles');\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Event handler for sortable list DROP event.\r\n *\r\n * Find all table cells corresponding to the column of the dropped header, and move them to the new position.\r\n *\r\n * @param {Event} event\r\n */\r\nconst reorderColumns = event => {\r\n    // Current header.\r\n    const header = event.target;\r\n    // Find the previous sibling of the header, which will be used when moving columns.\r\n    const insertAfter = header.previousElementSibling;\r\n    // Move columns.\r\n    const uiRoot = document.querySelector(SELECTORS.uiRoot);\r\n    const columns = uiRoot.querySelectorAll(SELECTORS.tableColumn(header.dataset.columnid));\r\n    columns.forEach(column => {\r\n        const row = column.parentElement;\r\n        if (insertAfter) {\r\n            // Find the column to insert after.\r\n            const insertAfterColumn = row.querySelector(SELECTORS.tableColumn(insertAfter.dataset.columnid));\r\n            // Insert the column.\r\n            insertAfterColumn.after(column);\r\n        } else {\r\n            // Insert as the first child (first column in the table).\r\n            row.insertBefore(column, row.firstChild);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Initialize module\r\n *\r\n * Add containers for the drag handles to each column header, then render handles, enable show/hide behaviour, set up drag/drop\r\n * column sorting, then enable the move and resize modals to be triggered from menu actions.\r\n */\r\nexport const init = async() => {\r\n    const uiRoot = document.getElementById('questionscontainer');\r\n    await addHandleContainers(uiRoot);\r\n    setUpMoveHandles(uiRoot.querySelectorAll(SELECTORS.moveAction));\r\n    setUpResizeHandles(uiRoot);\r\n    setupShowHideHandles(uiRoot);\r\n    const sortableColumns = actions.setupSortableLists(uiRoot.querySelector(actions.SELECTORS.columnList));\r\n    sortableColumns.on(SortableList.EVENTS.DROP, reorderColumns);\r\n    sortableColumns.on(SortableList.EVENTS.DRAGSTART, () => {\r\n        suspendShowHideHandles = true;\r\n    });\r\n    sortableColumns.on(SortableList.EVENTS.DRAGEND, () => {\r\n        suspendShowHideHandles = false;\r\n    });\r\n    setUpMoveActions(uiRoot);\r\n    setUpResizeActions(uiRoot);\r\n    actions.setupActionButtons(uiRoot);\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","_interopRequireWildcard","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","actions","repository","_modal_events","_modal_save_cancel","_notification","_sortable_list","_templates","SELECTORS","identifier","replace","currentHeader","currentX","currentMin","suspendShowHideHandles","serialiseColumnSizes","uiRoot","columnSizes","querySelectorAll","forEach","header","width","parseInt","style","isNaN","push","column","dataset","columnid","JSON","stringify","getMinWidth","contentWidth","Array","from","querySelector","children","reduce","contentElement","getBoundingClientRect","Math","ceil","showResizeModal","async","initialWidth","offsetWidth","minWidth","modal","ModalSaveCancel","create","title","getString","get_string","name","body","Templates","render","min","show","root","getRoot","on","ModalEvents","cancel","save","setColumnSize","catch","Notification","exception","bodyPromise","addEventListener","valid","target","checkValidity","closest","classList","add","newWidth","value","reorderColumns","event","insertAfter","previousElementSibling","document","row","parentElement","after","insertBefore","firstChild","_exports","init","getElementById","Promise","resolve","headerContainers","renderForPromise","then","_ref","html","js","container","prependNodeContents","addHandleContainers","moveAction","handleContainer","context","action","dragtype","pixicon","pixcomponent","popup","_ref2","resizeAction","headerContainer","sortableColumn","_ref3","appendNodeContents","moveTracker","currentResizeHandle","pageX","getSelection","removeAllRanges","offset","setUpResizeHandles","shownHeader","tableHead","remove","setupShowHideHandles","sortableColumns","setupSortableLists","columnList","SortableList","EVENTS","DROP","DRAGSTART","DRAGEND","preventDefault","moveHandler","click","setUpMoveActions","setUpResizeActions","setupActionButtons"],"mappings":"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"}