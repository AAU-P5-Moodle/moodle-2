{"version":3,"file":"drag_reorder.min.js","sources":["../src/drag_reorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/*\r\n * To make a set of things draggable, create a new instance of this object passing the\r\n * necessary config, as explained in the comment on the constructor.\r\n *\r\n * @package   qtype_ordering\\drag_reorder\r\n * @copyright 2018 The Open University\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n'use strict';\r\n\r\nimport $ from 'jquery';\r\nimport drag from 'core/dragdrop';\r\nimport Templates from 'core/templates';\r\nimport Notification from 'core/notification';\r\nimport {getString} from 'core/str';\r\nimport {prefetchString} from 'core/prefetch';\r\n\r\nexport default class DragReorder {\r\n\r\n    // Class variables handling state.\r\n    config = {reorderStart: undefined, reorderEnd: undefined}; // Config object with some basic definitions.\r\n    dragStart = null; // Information about when and where the drag started.\r\n    originalOrder = null; // Array of ids that's used to compare the state after the drag event finishes.\r\n\r\n    // DOM Nodes and jQuery representations.\r\n    orderList = null; // Order list (HTMLElement).\r\n    itemDragging = null; // Item being moved by dragging (jQuery object).\r\n    proxy = null; // Drag proxy (jQuery object).\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * To make a list draggable, create a new instance of this object, passing the necessary config.\r\n     * For example:\r\n     * {\r\n     *      // Selector for the list (or lists) to be reordered.\r\n     *      list: 'ul.my-list',\r\n     *\r\n     *      // Selector, relative to the list selector, for the items that can be moved.\r\n     *      item: '> li',\r\n     *\r\n     *      // While the proxy is being dragged, this class is added to the item being moved.\r\n     *      // You can probably use \"osep-itemmoving\" here.\r\n     *      itemMovingClass: \"osep-itemmoving\",\r\n     *\r\n     *      // This is a callback which, when called with the DOM node for an item,\r\n     *      // returns the string that uniquely identifies each item.\r\n     *      // Therefore, the result of the drag action will be represented by the array\r\n     *      // obtained by calling this method on each item in the list in order.\r\n     *      idGetter: function(item) { return node.id; },\r\n     *\r\n     *      // Function that will be called when a re-order starts (optional, can be not set).\r\n     *      // Useful if you need to save information about the initial state.\r\n     *      // This function should have two parameters. The first will be a\r\n     *      // jQuery object for the list that was reordered, the second will\r\n     *      // be the jQuery object for the item moved - which will not yet have been moved.\r\n     *      // Note, it is quite possible for reorderStart to be called with no\r\n     *      // subsequent call to reorderDone.\r\n     *      reorderStart: function($list, $item) { ... }\r\n     *\r\n     *      // Function that will be called when a drag has finished, and the list\r\n     *      // has been reordered. This function should have three parameters. The first will be\r\n     *      // a jQuery object for the list that was reordered, the second will be the jQuery\r\n     *      // object for the item moved, and the third will be the new order, which is\r\n     *      // an array of ids obtained by calling idGetter on each item in the list in order.\r\n     *      // This callback will only be called in the new order is actually different from the old order.\r\n     *      reorderDone: function($list, $item, newOrder) { ... }\r\n     *\r\n     *      // Function that is always called when a re-order ends (optional, can be not set)\r\n     *      // whether the order has changed. Useful if you need to undo changes made\r\n     *      // in reorderStart, since reorderDone is only called if the new order is different\r\n     *      // from the original order.\r\n     *      reorderEnd: function($list, $item) { ... }\r\n     *  }\r\n     *\r\n     * There is a subtlety, If you have items in your list that do not have a drag handle,\r\n     * they are considered to be placeholders in otherwise empty containers.\r\n     *\r\n     * @param {Object} config As above.\r\n     */\r\n    constructor(config) {\r\n        // Bring in the config to our state.\r\n        this.config = config;\r\n\r\n        // Get the list we'll be working with this time.\r\n        this.orderList = document.querySelector(this.config.list);\r\n\r\n        this.startListeners();\r\n    }\r\n\r\n    /**\r\n     * Start the listeners for the list.\r\n     */\r\n    startListeners() {\r\n        /**\r\n         * Handle mousedown or touchstart events on the list.\r\n         *\r\n         * @param {Event} e The event.\r\n         */\r\n        const pointerHandle = e => {\r\n            if (e.target.closest(this.config.item) && !e.target.closest(this.config.actionButton)) {\r\n                this.itemDragging = $(e.target.closest(this.config.item));\r\n                const details = drag.prepare(e);\r\n                if (details.start) {\r\n                    this.startDrag(e, details);\r\n                }\r\n            }\r\n        };\r\n        // Set up the list listeners for moving list items around.\r\n        this.orderList.addEventListener('mousedown', pointerHandle);\r\n        this.orderList.addEventListener('touchstart', pointerHandle);\r\n        this.orderList.addEventListener('click', this.itemMovedByClick.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Start dragging.\r\n     *\r\n     * @param {Event} e The event which is either mousedown or touchstart.\r\n     * @param {Object} details Object with start (boolean flag) and x, y (only if flag true) values\r\n     */\r\n    startDrag(e, details) {\r\n        this.dragStart = {\r\n            time: new Date().getTime(),\r\n            x: details.x,\r\n            y: details.y\r\n        };\r\n\r\n        if (typeof this.config.reorderStart !== 'undefined') {\r\n            this.config.reorderStart(this.itemDragging.closest(this.config.list), this.itemDragging);\r\n        }\r\n\r\n        this.originalOrder = this.getCurrentOrder();\r\n\r\n        Templates.renderForPromise('qtype_ordering/proxyhtml', {\r\n            itemHtml: this.itemDragging.html(),\r\n            itemClassName: this.itemDragging.attr('class'),\r\n            listClassName: this.orderList.classList.toString(),\r\n            proxyStyles: [\r\n                `width: ${this.itemDragging.outerWidth()}px;`,\r\n                `height: ${this.itemDragging.outerHeight()}px;`,\r\n            ].join(' '),\r\n        }).then(({html, js}) => {\r\n            this.proxy = $(Templates.appendNodeContents(document.body, html, js)[0]);\r\n            this.proxy.css(this.itemDragging.offset());\r\n\r\n            this.itemDragging.addClass(this.config.itemMovingClass);\r\n\r\n            this.updateProxy();\r\n            // Start drag.\r\n            drag.start(e, this.proxy, this.dragMove.bind(this), this.dragEnd.bind(this));\r\n        }).catch(Notification.exception);\r\n    }\r\n\r\n    /**\r\n     * Move the proxy to the current mouse position.\r\n     */\r\n    dragMove() {\r\n        let closestItem = null;\r\n        let closestDistance = null;\r\n        this.orderList.querySelectorAll(this.config.item).forEach(element => {\r\n            const distance = this.distanceBetweenElements(element);\r\n            if (closestItem === null || distance < closestDistance) {\r\n                closestItem = $(element);\r\n                closestDistance = distance;\r\n            }\r\n        });\r\n\r\n        if (closestItem[0] === this.itemDragging[0]) {\r\n            return;\r\n        }\r\n\r\n        // Set offset depending on if item is being dragged downwards/upwards.\r\n        const offsetValue = this.midY(this.proxy) < this.midY(closestItem) ? 20 : -20;\r\n        if (this.midY(this.proxy) + offsetValue < this.midY(closestItem)) {\r\n            this.itemDragging.insertBefore(closestItem);\r\n        } else {\r\n            this.itemDragging.insertAfter(closestItem);\r\n        }\r\n        this.updateProxy();\r\n    }\r\n\r\n    /**\r\n     * Update proxy's position.\r\n     */\r\n    updateProxy() {\r\n        const items = [...this.orderList.querySelectorAll(this.config.item)];\r\n        for (let i = 0; i < items.length; ++i) {\r\n            if (this.itemDragging[0] === items[i]) {\r\n                this.proxy.find('li').attr('value', i + 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * End dragging.\r\n     */\r\n    dragEnd() {\r\n        if (typeof this.config.reorderEnd !== 'undefined') {\r\n            this.config.reorderEnd(this.itemDragging.closest(this.config.list), this.itemDragging);\r\n        }\r\n\r\n        if (!this.arrayEquals(this.originalOrder, this.getCurrentOrder())) {\r\n            // Order has changed, call the callback.\r\n            this.config.reorderDone(this.itemDragging.closest(this.config.list), this.itemDragging, this.getCurrentOrder());\r\n\r\n            getString('moved', 'qtype_ordering', {\r\n                item: this.itemDragging.find('[data-itemcontent]').text().trim(),\r\n                position: this.itemDragging.index() + 1,\r\n                total: this.orderList.querySelectorAll(this.config.item).length\r\n            }).then((str) => {\r\n                this.config.announcementRegion.innerHTML = str;\r\n            });\r\n        }\r\n\r\n        // Clean up after the drag is finished.\r\n        this.proxy.remove();\r\n        this.proxy = null;\r\n        this.itemDragging.removeClass(this.config.itemMovingClass);\r\n        this.itemDragging = null;\r\n        this.dragStart = null;\r\n    }\r\n\r\n    /**\r\n     * Handles the movement of an item by click.\r\n     *\r\n     * @param {MouseEvent} e The pointer event.\r\n     */\r\n    itemMovedByClick(e) {\r\n        const actionButton = e.target.closest(this.config.actionButton);\r\n        if (actionButton) {\r\n            this.itemDragging = $(e.target.closest(this.config.item));\r\n\r\n            // Store the current state of the list.\r\n            this.originalOrder = this.getCurrentOrder();\r\n\r\n            switch (actionButton.dataset.action) {\r\n                case 'move-backward':\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    if (this.itemDragging.prev().length) {\r\n                        this.itemDragging.prev().insertAfter(this.itemDragging);\r\n                    }\r\n                    break;\r\n                case 'move-forward':\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    if (this.itemDragging.next().length) {\r\n                        this.itemDragging.next().insertBefore(this.itemDragging);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            // After we have potentially moved the item, we need to check if the order has changed.\r\n            if (!this.arrayEquals(this.originalOrder, this.getCurrentOrder())) {\r\n                // Order has changed, call the callback.\r\n                this.config.reorderDone(this.itemDragging.closest(this.config.list), this.itemDragging, this.getCurrentOrder());\r\n\r\n                // When moving an item to the first or last position, the button that was clicked will be hidden.\r\n                // In this case, we need to focus the other button.\r\n                if (!this.itemDragging.prev().length) {\r\n                    // Focus the 'next' action button.\r\n                    this.itemDragging.find('[data-action=\"move-forward\"]').focus();\r\n                } else if (!this.itemDragging.next().length) {\r\n                    // Focus the 'previous' action button.\r\n                    this.itemDragging.find('[data-action=\"move-backward\"]').focus();\r\n                }\r\n\r\n                getString('moved', 'qtype_ordering', {\r\n                    item: this.itemDragging.find('[data-itemcontent]').text().trim(),\r\n                    position: this.itemDragging.index() + 1,\r\n                    total: this.orderList.querySelectorAll(this.config.item).length\r\n                }).then((str) => {\r\n                    this.config.announcementRegion.innerHTML = str;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the x-position of the middle of the DOM node represented by the given jQuery object.\r\n     *\r\n     * @param {jQuery} node jQuery wrapping a DOM node.\r\n     * @returns {number} Number the x-coordinate of the middle (left plus half outerWidth).\r\n     */\r\n    midX(node) {\r\n        return node.offset().left + node.outerWidth() / 2;\r\n    }\r\n\r\n    /**\r\n     * Get the y-position of the middle of the DOM node represented by the given jQuery object.\r\n     *\r\n     * @param {jQuery} node jQuery wrapped DOM node.\r\n     * @returns {number} Number the y-coordinate of the middle (top plus half outerHeight).\r\n     */\r\n    midY(node) {\r\n        return node.offset().top + node.outerHeight() / 2;\r\n    }\r\n\r\n    /**\r\n     * Calculate the distance between the centres of two elements.\r\n     *\r\n     * @param {HTMLLIElement} element DOM node of a list item.\r\n     * @return {number} number the distance in pixels.\r\n     */\r\n    distanceBetweenElements(element) {\r\n        const [e1, e2] = [$(element), $(this.proxy)];\r\n        const [dx, dy] = [this.midX(e1) - this.midX(e2), this.midY(e1) - this.midY(e2)];\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n\r\n    /**\r\n     * Get the current order of the list containing itemDragging.\r\n     *\r\n     * @returns {Array} Array of strings, the id of each element in order.\r\n     */\r\n    getCurrentOrder() {\r\n        return this.itemDragging.closest(this.config.list).find(this.config.item).map(\r\n            (index, item) => {\r\n                return this.config.idGetter(item);\r\n            }).get();\r\n    }\r\n\r\n    /**\r\n     * Compare two arrays which contain primitive types to see if they are equal.\r\n     * @param {Array} a1 first array.\r\n     * @param {Array} a2 second array.\r\n     * @return {Boolean} boolean true if they both contain the same elements in the same order, else false.\r\n     */\r\n    arrayEquals(a1, a2) {\r\n        return a1.length === a2.length &&\r\n            a1.every((v, i) => {\r\n                return v === a2[i];\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Initialise one ordering question.\r\n     *\r\n     * @param {String} sortableid id of ul for this question.\r\n     * @param {String} responseid id of hidden field for this question.\r\n     */\r\n    static init(sortableid, responseid) {\r\n        new DragReorder({\r\n            actionButton: '[data-action]',\r\n            announcementRegion: document.querySelector(`#${sortableid}-announcement`),\r\n            list: 'ul#' + sortableid,\r\n            item: 'li.sortableitem',\r\n            itemMovingClass: \"current-drop\",\r\n            idGetter: item => {\r\n                return item.id;\r\n            },\r\n            reorderDone: (list, item, newOrder) => {\r\n                $('input#' + responseid)[0].value = newOrder.join(',');\r\n            }\r\n        });\r\n\r\n        prefetchString('qtype_ordering', 'moved');\r\n    }\r\n}\r\n"],"names":["_interopRequireDefault","e","__esModule","default","Object","defineProperty","_exports","value","_jquery","_dragdrop","_templates","_notification","DragReorder","config","reorderStart","undefined","reorderEnd","dragStart","originalOrder","orderList","itemDragging","proxy","constructor","this","document","querySelector","list","startListeners","pointerHandle","target","closest","item","actionButton","$","details","drag","prepare","start","startDrag","addEventListener","itemMovedByClick","bind","time","Date","getTime","x","y","getCurrentOrder","Templates","renderForPromise","itemHtml","html","itemClassName","attr","listClassName","classList","toString","proxyStyles","outerWidth","outerHeight","join","then","_ref","js","appendNodeContents","body","css","offset","addClass","itemMovingClass","updateProxy","dragMove","dragEnd","catch","Notification","exception","closestItem","closestDistance","querySelectorAll","forEach","element","distance","distanceBetweenElements","offsetValue","midY","insertBefore","insertAfter","items","i","length","find","arrayEquals","reorderDone","getString","text","trim","position","index","total","str","announcementRegion","innerHTML","remove","removeClass","dataset","action","preventDefault","stopPropagation","prev","next","focus","midX","node","left","top","e1","e2","dx","dy","Math","sqrt","map","idGetter","get","a1","a2","every","v","init","sortableid","responseid","id","newOrder","prefetchString"],"mappings":"wNA6B6C,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA,CALhCG,OAAAC,eAAAC,SAAA,aAAA,CAAAC,OAAA,IAAAD,SAAAH,aAAA,EAEbK,QAAAR,uBAAAQ,SACAC,UAAAT,uBAAAS,WACAC,WAAAV,uBAAAU,YACAC,cAAAX,uBAAAW,eAIe,MAAMC,YAGjBC,OAAS,CAACC,kBAAcC,EAAWC,gBAAYD,GAC/CE,UAAY,KACZC,cAAgB,KAGhBC,UAAY,KACZC,aAAe,KACfC,MAAQ,KAqDRC,WAAAA,CAAYT,QAERU,KAAKV,OAASA,OAGdU,KAAKJ,UAAYK,SAASC,cAAcF,KAAKV,OAAOa,MAEpDH,KAAKI,gBACT,CAKAA,cAAAA,GAMI,MAAMC,cAAgB3B,IAClB,GAAIA,EAAE4B,OAAOC,QAAQP,KAAKV,OAAOkB,QAAU9B,EAAE4B,OAAOC,QAAQP,KAAKV,OAAOmB,cAAe,CACnFT,KAAKH,cAAe,EAAAa,QAAC9B,SAACF,EAAE4B,OAAOC,QAAQP,KAAKV,OAAOkB,OACnD,MAAMG,QAAUC,UAAAA,QAAKC,QAAQnC,GACzBiC,QAAQG,OACRd,KAAKe,UAAUrC,EAAGiC,QAE1B,GAGJX,KAAKJ,UAAUoB,iBAAiB,YAAaX,eAC7CL,KAAKJ,UAAUoB,iBAAiB,aAAcX,eAC9CL,KAAKJ,UAAUoB,iBAAiB,QAAShB,KAAKiB,iBAAiBC,KAAKlB,MACxE,CAQAe,SAAAA,CAAUrC,EAAGiC,SACTX,KAAKN,UAAY,CACbyB,MAAM,IAAIC,MAAOC,UACjBC,EAAGX,QAAQW,EACXC,EAAGZ,QAAQY,QAGyB,IAA7BvB,KAAKV,OAAOC,cACnBS,KAAKV,OAAOC,aAAaS,KAAKH,aAAaU,QAAQP,KAAKV,OAAOa,MAAOH,KAAKH,cAG/EG,KAAKL,cAAgBK,KAAKwB,kBAE1BC,WAAAA,QAAUC,iBAAiB,2BAA4B,CACnDC,SAAU3B,KAAKH,aAAa+B,OAC5BC,cAAe7B,KAAKH,aAAaiC,KAAK,SACtCC,cAAe/B,KAAKJ,UAAUoC,UAAUC,WACxCC,YAAa,CACT,UAAUlC,KAAKH,aAAasC,kBAC5B,WAAWnC,KAAKH,aAAauC,oBAC/BC,KAAK,OACRC,MAAKC,OAAgB,IAAfX,KAACA,KAAIY,GAAEA,IAAGD,KACfvC,KAAKF,OAAQ,EAAAY,iBAAEe,WAAAA,QAAUgB,mBAAmBxC,SAASyC,KAAMd,KAAMY,IAAI,IACrExC,KAAKF,MAAM6C,IAAI3C,KAAKH,aAAa+C,UAEjC5C,KAAKH,aAAagD,SAAS7C,KAAKV,OAAOwD,iBAEvC9C,KAAK+C,cAELnC,UAAIhC,QAACkC,MAAMpC,EAAGsB,KAAKF,MAAOE,KAAKgD,SAAS9B,KAAKlB,MAAOA,KAAKiD,QAAQ/B,KAAKlB,MAAM,IAC7EkD,MAAMC,cAAYvE,QAACwE,UAC1B,CAKAJ,QAAAA,GACI,IAAIK,YAAc,KACdC,gBAAkB,KAStB,GARAtD,KAAKJ,UAAU2D,iBAAiBvD,KAAKV,OAAOkB,MAAMgD,SAAQC,UACtD,MAAMC,SAAW1D,KAAK2D,wBAAwBF,UAC1B,OAAhBJ,aAAwBK,SAAWJ,mBACnCD,aAAc,EAAA3C,QAAC9B,SAAC6E,SAChBH,gBAAkBI,SACtB,IAGAL,YAAY,KAAOrD,KAAKH,aAAa,GACrC,OAIJ,MAAM+D,YAAc5D,KAAK6D,KAAK7D,KAAKF,OAASE,KAAK6D,KAAKR,aAAe,IAAM,GACvErD,KAAK6D,KAAK7D,KAAKF,OAAS8D,YAAc5D,KAAK6D,KAAKR,aAChDrD,KAAKH,aAAaiE,aAAaT,aAE/BrD,KAAKH,aAAakE,YAAYV,aAElCrD,KAAK+C,aACT,CAKAA,WAAAA,GACI,MAAMiB,MAAQ,IAAIhE,KAAKJ,UAAU2D,iBAAiBvD,KAAKV,OAAOkB,OAC9D,IAAK,IAAIyD,EAAI,EAAGA,EAAID,MAAME,SAAUD,EAChC,GAAIjE,KAAKH,aAAa,KAAOmE,MAAMC,GAAI,CACnCjE,KAAKF,MAAMqE,KAAK,MAAMrC,KAAK,QAASmC,EAAI,GACxC,KACJ,CAER,CAKAhB,OAAAA,QAC0C,IAA3BjD,KAAKV,OAAOG,YACnBO,KAAKV,OAAOG,WAAWO,KAAKH,aAAaU,QAAQP,KAAKV,OAAOa,MAAOH,KAAKH,cAGxEG,KAAKoE,YAAYpE,KAAKL,cAAeK,KAAKwB,qBAE3CxB,KAAKV,OAAO+E,YAAYrE,KAAKH,aAAaU,QAAQP,KAAKV,OAAOa,MAAOH,KAAKH,aAAcG,KAAKwB,oBAE7F,EAAA8C,KAASA,WAAC,QAAS,iBAAkB,CACjC9D,KAAMR,KAAKH,aAAasE,KAAK,sBAAsBI,OAAOC,OAC1DC,SAAUzE,KAAKH,aAAa6E,QAAU,EACtCC,MAAO3E,KAAKJ,UAAU2D,iBAAiBvD,KAAKV,OAAOkB,MAAM0D,SAC1D5B,MAAMsC,MACL5E,KAAKV,OAAOuF,mBAAmBC,UAAYF,GAAG,KAKtD5E,KAAKF,MAAMiF,SACX/E,KAAKF,MAAQ,KACbE,KAAKH,aAAamF,YAAYhF,KAAKV,OAAOwD,iBAC1C9C,KAAKH,aAAe,KACpBG,KAAKN,UAAY,IACrB,CAOAuB,gBAAAA,CAAiBvC,GACb,MAAM+B,aAAe/B,EAAE4B,OAAOC,QAAQP,KAAKV,OAAOmB,cAClD,GAAIA,aAAc,CAMd,OALAT,KAAKH,cAAe,EAAAa,QAAC9B,SAACF,EAAE4B,OAAOC,QAAQP,KAAKV,OAAOkB,OAGnDR,KAAKL,cAAgBK,KAAKwB,kBAElBf,aAAawE,QAAQC,QACzB,IAAK,gBACDxG,EAAEyG,iBACFzG,EAAE0G,kBACEpF,KAAKH,aAAawF,OAAOnB,QACzBlE,KAAKH,aAAawF,OAAOtB,YAAY/D,KAAKH,cAE9C,MACJ,IAAK,eACDnB,EAAEyG,iBACFzG,EAAE0G,kBACEpF,KAAKH,aAAayF,OAAOpB,QACzBlE,KAAKH,aAAayF,OAAOxB,aAAa9D,KAAKH,cAMlDG,KAAKoE,YAAYpE,KAAKL,cAAeK,KAAKwB,qBAE3CxB,KAAKV,OAAO+E,YAAYrE,KAAKH,aAAaU,QAAQP,KAAKV,OAAOa,MAAOH,KAAKH,aAAcG,KAAKwB,mBAIxFxB,KAAKH,aAAawF,OAAOnB,OAGlBlE,KAAKH,aAAayF,OAAOpB,QAEjClE,KAAKH,aAAasE,KAAK,iCAAiCoB,QAHxDvF,KAAKH,aAAasE,KAAK,gCAAgCoB,SAM3D,EAAAjB,KAASA,WAAC,QAAS,iBAAkB,CACjC9D,KAAMR,KAAKH,aAAasE,KAAK,sBAAsBI,OAAOC,OAC1DC,SAAUzE,KAAKH,aAAa6E,QAAU,EACtCC,MAAO3E,KAAKJ,UAAU2D,iBAAiBvD,KAAKV,OAAOkB,MAAM0D,SAC1D5B,MAAMsC,MACL5E,KAAKV,OAAOuF,mBAAmBC,UAAYF,GAAG,IAG1D,CACJ,CAQAY,IAAAA,CAAKC,MACD,OAAOA,KAAK7C,SAAS8C,KAAOD,KAAKtD,aAAe,CACpD,CAQA0B,IAAAA,CAAK4B,MACD,OAAOA,KAAK7C,SAAS+C,IAAMF,KAAKrD,cAAgB,CACpD,CAQAuB,uBAAAA,CAAwBF,SACpB,MAAOmC,GAAIC,IAAM,EAAC,EAAAnF,QAAC9B,SAAC6E,UAAU,EAAA/C,QAAC9B,SAACoB,KAAKF,SAC9BgG,GAAIC,IAAM,CAAC/F,KAAKwF,KAAKI,IAAM5F,KAAKwF,KAAKK,IAAK7F,KAAK6D,KAAK+B,IAAM5F,KAAK6D,KAAKgC,KAC3E,OAAOG,KAAKC,KAAKH,GAAKA,GAAKC,GAAKA,GACpC,CAOAvE,eAAAA,GACI,OAAOxB,KAAKH,aAAaU,QAAQP,KAAKV,OAAOa,MAAMgE,KAAKnE,KAAKV,OAAOkB,MAAM0F,KACtE,CAACxB,MAAOlE,OACGR,KAAKV,OAAO6G,SAAS3F,QAC7B4F,KACX,CAQAhC,WAAAA,CAAYiC,GAAIC,IACZ,OAAOD,GAAGnC,SAAWoC,GAAGpC,QACpBmC,GAAGE,OAAM,CAACC,EAAGvC,IACFuC,IAAMF,GAAGrC,IAE5B,CAQA,WAAOwC,CAAKC,WAAYC,YACpB,IAAItH,YAAY,CACZoB,aAAc,gBACdoE,mBAAoB5E,SAASC,cAAc,IAAIwG,2BAC/CvG,KAAM,MAAQuG,WACdlG,KAAM,kBACNsC,gBAAiB,eACjBqD,SAAU3F,MACCA,KAAKoG,GAEhBvC,YAAaA,CAAClE,KAAMK,KAAMqG,aACtB,EAAAnG,iBAAE,SAAWiG,YAAY,GAAG3H,MAAQ6H,SAASxE,KAAK,IAAI,KAI9D,EAAAyE,UAAcA,gBAAC,iBAAkB,QACrC,EACH,OAAA/H,SAAAH,QAAAS,YAAAN,SAAAH,OAAA"}