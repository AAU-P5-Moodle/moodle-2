{"version":3,"file":"question.min.js","sources":["../src/question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Question class for drag and drop marker question type, used to support the question and preview pages.\r\n *\r\n * @module     qtype_ddmarker/question\r\n * @copyright  2018 The Open University\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'core/dragdrop',\r\n    'qtype_ddmarker/shapes',\r\n    'core/key_codes',\r\n    'core_form/changechecker',\r\n    'core_filters/events',\r\n], function(\r\n    $,\r\n    dragDrop,\r\n    Shapes,\r\n    keys,\r\n    FormChangeChecker,\r\n    filterEvent\r\n) {\r\n\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Object to handle one drag-drop markers question.\r\n     *\r\n     * @param {String} containerId id of the outer div for this question.\r\n     * @param {boolean} readOnly whether the question is being displayed read-only.\r\n     * @param {Object[]} visibleDropZones the geometry of any drop-zones to show.\r\n     *      Objects have fields shape, coords and markertext.\r\n     * @constructor\r\n     */\r\n    function DragDropMarkersQuestion(containerId, readOnly, visibleDropZones) {\r\n        var thisQ = this;\r\n        this.containerId = containerId;\r\n        this.visibleDropZones = visibleDropZones;\r\n        this.shapes = [];\r\n        this.shapeSVGs = [];\r\n        this.isPrinting = false;\r\n        this.questionAnswer = {};\r\n        if (readOnly) {\r\n            this.getRoot().addClass('qtype_ddmarker-readonly');\r\n        }\r\n        thisQ.allImagesLoaded = false;\r\n        thisQ.getNotYetLoadedImages().one('load', function() {\r\n            thisQ.waitForAllImagesToBeLoaded();\r\n        });\r\n        thisQ.waitForAllImagesToBeLoaded();\r\n    }\r\n\r\n    /**\r\n     * Draws the svg shapes of any drop zones that should be visible for feedback purposes.\r\n     */\r\n    DragDropMarkersQuestion.prototype.drawDropzones = function() {\r\n        if (this.visibleDropZones.length > 0) {\r\n            var bgImage = this.bgImage();\r\n\r\n            this.getRoot().find('div.dropzones').html('<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"dropzones\" ' +\r\n                'width=\"' + bgImage.outerWidth() + '\" ' +\r\n                'height=\"' + bgImage.outerHeight() + '\"></svg>');\r\n            var svg = this.getRoot().find('svg.dropzones');\r\n\r\n            var nextColourIndex = 0;\r\n            for (var dropZoneNo = 0; dropZoneNo < this.visibleDropZones.length; dropZoneNo++) {\r\n                var colourClass = 'color' + nextColourIndex;\r\n                nextColourIndex = (nextColourIndex + 1) % 8;\r\n                this.addDropzone(svg, dropZoneNo, colourClass);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Adds a dropzone shape with colour, coords and link provided to the array of shapes.\r\n     *\r\n     * @param {jQuery} svg the SVG image to which to add this drop zone.\r\n     * @param {int} dropZoneNo which drop-zone to add.\r\n     * @param {string} colourClass class name\r\n     */\r\n    DragDropMarkersQuestion.prototype.addDropzone = function(svg, dropZoneNo, colourClass) {\r\n        var dropZone = this.visibleDropZones[dropZoneNo],\r\n            shape = Shapes.make(dropZone.shape, ''),\r\n            existingmarkertext,\r\n            bgRatio = this.bgRatio();\r\n        if (!shape.parse(dropZone.coords, bgRatio)) {\r\n            return;\r\n        }\r\n\r\n        existingmarkertext = this.getRoot().find('div.markertexts span.markertext' + dropZoneNo);\r\n        if (existingmarkertext.length) {\r\n            if (dropZone.markertext !== '') {\r\n                existingmarkertext.html(dropZone.markertext);\r\n                filterEvent.notifyFilterContentUpdated(existingmarkertext);\r\n            } else {\r\n                existingmarkertext.remove();\r\n            }\r\n        } else if (dropZone.markertext !== '') {\r\n            var classnames = 'markertext markertext' + dropZoneNo;\r\n            this.getRoot().find('div.markertexts').append('<span class=\"' + classnames + '\">' +\r\n                dropZone.markertext + '</span>');\r\n            var markerspan = this.getRoot().find('div.ddarea div.markertexts span.markertext' + dropZoneNo);\r\n            if (markerspan.length) {\r\n                var handles = shape.getHandlePositions();\r\n                var positionLeft = handles.moveHandle.x - (markerspan.outerWidth() / 2) - 4;\r\n                var positionTop = handles.moveHandle.y - (markerspan.outerHeight() / 2);\r\n                markerspan\r\n                    .css('left', positionLeft)\r\n                    .css('top', positionTop);\r\n                markerspan\r\n                    .data('originX', markerspan.position().left / bgRatio)\r\n                    .data('originY', markerspan.position().top / bgRatio);\r\n                this.handleElementScale(markerspan, 'center');\r\n            }\r\n            filterEvent.notifyFilterContentUpdated(markerspan);\r\n        }\r\n\r\n        var shapeSVG = shape.makeSvg(svg[0]);\r\n        shapeSVG.setAttribute('class', 'dropzone ' + colourClass);\r\n\r\n        this.shapes[this.shapes.length] = shape;\r\n        this.shapeSVGs[this.shapeSVGs.length] = shapeSVG;\r\n    };\r\n\r\n    /**\r\n     * Draws the drag items on the page (and drop zones if required).\r\n     * The idea is to re-draw all the drags and drops whenever there is a change\r\n     * like a widow resize or an item dropped in place.\r\n     */\r\n    DragDropMarkersQuestion.prototype.repositionDrags = function() {\r\n        var root = this.getRoot(),\r\n            thisQ = this;\r\n\r\n        root.find('div.draghomes .marker').not('.dragplaceholder').each(function(key, item) {\r\n            $(item).addClass('unneeded');\r\n        });\r\n\r\n        root.find('input.choices').each(function(key, input) {\r\n            var choiceNo = thisQ.getChoiceNoFromElement(input),\r\n                imageCoords = thisQ.getImageCoords(input);\r\n            if (imageCoords.length) {\r\n                var drag = thisQ.getRoot().find('.draghomes' + ' span.marker' + '.choice' + choiceNo).not('.dragplaceholder');\r\n                drag.remove();\r\n                for (var i = 0; i < imageCoords.length; i++) {\r\n                    var dragInDrop = drag.clone();\r\n                    // Convert image coords to screen coords.\r\n                    const screenCoords = thisQ.convertToWindowXY(imageCoords[i]);\r\n                    dragInDrop.data('pagex', screenCoords.x).data('pagey', screenCoords.y);\r\n                    // Save image coords to the drag item so we can use it later.\r\n                    dragInDrop.data('imageCoords', imageCoords[i]);\r\n                    // We always save the coordinates in the 1:1 ratio.\r\n                    // So we need to set the scale ratio to 1 for the initial load.\r\n                    dragInDrop.data('scaleRatio', 1);\r\n                    thisQ.sendDragToDrop(dragInDrop, false, true);\r\n                }\r\n                thisQ.getDragClone(drag).addClass('active');\r\n                thisQ.cloneDragIfNeeded(drag);\r\n            }\r\n        });\r\n\r\n        // Save the question answer.\r\n        thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\r\n    };\r\n\r\n    /**\r\n     * Get the question answered values.\r\n     *\r\n     * @return {Object} Contain key-value with key is the input id and value is the input value.\r\n     */\r\n    DragDropMarkersQuestion.prototype.getQuestionAnsweredValues = function() {\r\n        let result = {};\r\n        this.getRoot().find('input.choices').each((i, inputNode) => {\r\n            result[inputNode.id] = inputNode.value;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Check if the question is being interacted or not.\r\n     *\r\n     * @return {boolean} Return true if the user has changed the question-answer.\r\n     */\r\n    DragDropMarkersQuestion.prototype.isQuestionInteracted = function() {\r\n        const oldAnswer = this.questionAnswer;\r\n        const newAnswer = this.getQuestionAnsweredValues();\r\n        let isInteracted = false;\r\n\r\n        // First, check both answers have the same structure or not.\r\n        if (JSON.stringify(newAnswer) !== JSON.stringify(oldAnswer)) {\r\n            isInteracted = true;\r\n            return isInteracted;\r\n        }\r\n        // Check the values.\r\n        Object.keys(newAnswer).forEach(key => {\r\n            if (newAnswer[key] !== oldAnswer[key]) {\r\n                isInteracted = true;\r\n            }\r\n        });\r\n\r\n        return isInteracted;\r\n    };\r\n\r\n    /**\r\n     * Determine what drag items need to be shown and\r\n     * return coords of all drag items except any that are currently being dragged\r\n     * based on contents of hidden inputs and whether drags are 'infinite' or how many\r\n     * drags should be shown.\r\n     *\r\n     * @param {jQuery} inputNode\r\n     * @returns {Point[]} image coordinates of however many copies of the drag item should be shown.\r\n     */\r\n    DragDropMarkersQuestion.prototype.getImageCoords = function(inputNode) {\r\n        var imageCoords = [],\r\n            val = $(inputNode).val();\r\n        if (val !== '') {\r\n            var coordsStrings = val.split(';');\r\n            for (var i = 0; i < coordsStrings.length; i++) {\r\n                imageCoords[i] = Shapes.Point.parse(coordsStrings[i]);\r\n            }\r\n        }\r\n        return imageCoords;\r\n    };\r\n\r\n    /**\r\n     * Converts the relative x and y position coordinates into\r\n     * absolute x and y position coordinates.\r\n     *\r\n     * @param {Point} point relative to the background image.\r\n     * @returns {Point} point relative to the page.\r\n     */\r\n    DragDropMarkersQuestion.prototype.convertToWindowXY = function(point) {\r\n        var bgImage = this.bgImage();\r\n        // The +1 seems rather odd, but seems to give the best results in\r\n        // the three main browsers at a range of zoom levels.\r\n        // (Its due to the 1px border around the image, that shifts the\r\n        // image pixels by 1 down and to the left.)\r\n        return point.offset(bgImage.offset().left + 1, bgImage.offset().top + 1);\r\n    };\r\n\r\n    /**\r\n     * Utility function converting window coordinates to relative to the\r\n     * background image coordinates.\r\n     *\r\n     * @param {Point} point relative to the page.\r\n     * @returns {Point} point relative to the background image.\r\n     */\r\n    DragDropMarkersQuestion.prototype.convertToBgImgXY = function(point) {\r\n        var bgImage = this.bgImage();\r\n        return point.offset(-bgImage.offset().left - 1, -bgImage.offset().top - 1);\r\n    };\r\n\r\n    /**\r\n     * Is the point within the background image?\r\n     *\r\n     * @param {Point} point relative to the BG image.\r\n     * @return {boolean} true it they are.\r\n     */\r\n    DragDropMarkersQuestion.prototype.coordsInBgImg = function(point) {\r\n        var bgImage = this.bgImage();\r\n        var bgPosition = bgImage.offset();\r\n\r\n        return point.x >= bgPosition.left && point.x < bgPosition.left + bgImage.width()\r\n            && point.y >= bgPosition.top && point.y < bgPosition.top + bgImage.height();\r\n    };\r\n\r\n    /**\r\n     * Get the outer div for this question.\r\n     * @returns {jQuery} containing that div.\r\n     */\r\n    DragDropMarkersQuestion.prototype.getRoot = function() {\r\n        return $(document.getElementById(this.containerId));\r\n    };\r\n\r\n    /**\r\n     * Get the img that is the background image.\r\n     * @returns {jQuery} containing that img.\r\n     */\r\n    DragDropMarkersQuestion.prototype.bgImage = function() {\r\n        return this.getRoot().find('img.dropbackground');\r\n    };\r\n\r\n    DragDropMarkersQuestion.prototype.handleDragStart = function(e) {\r\n        var thisQ = this,\r\n            dragged = $(e.target).closest('.marker');\r\n\r\n        var info = dragDrop.prepare(e);\r\n        if (!info.start) {\r\n            return;\r\n        }\r\n\r\n        dragged.addClass('beingdragged').css('transform', '');\r\n\r\n        var placed = !dragged.hasClass('unneeded');\r\n        if (!placed) {\r\n            var hiddenDrag = thisQ.getDragClone(dragged);\r\n            if (hiddenDrag.length) {\r\n                hiddenDrag.addClass('active');\r\n                dragged.offset(hiddenDrag.offset());\r\n            }\r\n        }\r\n\r\n        dragDrop.start(e, dragged, function() {\r\n            void (1);\r\n        }, function(x, y, dragged) {\r\n            thisQ.dragEnd(dragged);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Functionality at the end of a drag drop.\r\n     * @param {jQuery} dragged the marker that was dragged.\r\n     */\r\n    DragDropMarkersQuestion.prototype.dragEnd = function(dragged) {\r\n        var placed = false,\r\n            choiceNo = this.getChoiceNoFromElement(dragged),\r\n            bgRatio = this.bgRatio(),\r\n            dragXY;\r\n\r\n        dragged.data('pagex', dragged.offset().left).data('pagey', dragged.offset().top);\r\n        dragXY = new Shapes.Point(dragged.data('pagex'), dragged.data('pagey'));\r\n        if (this.coordsInBgImg(dragXY)) {\r\n            this.sendDragToDrop(dragged, true);\r\n            placed = true;\r\n            // Since we already move the drag item to new position.\r\n            // Remove the image coords if this drag item have it.\r\n            // We will get the new image coords for this drag item in saveCoordsForChoice.\r\n            if (dragged.data('imageCoords')) {\r\n                dragged.data('imageCoords', null);\r\n            }\r\n            // It seems that the dragdrop sometimes leaves the drag\r\n            // one pixel out of position. Put it in exactly the right place.\r\n            var bgImgXY = this.convertToBgImgXY(dragXY);\r\n            bgImgXY = new Shapes.Point(bgImgXY.x / bgRatio, bgImgXY.y / bgRatio);\r\n            dragged.data('originX', bgImgXY.x).data('originY', bgImgXY.y);\r\n        }\r\n\r\n        if (!placed) {\r\n            this.sendDragHome(dragged);\r\n            this.removeDragIfNeeded(dragged);\r\n        } else {\r\n            this.cloneDragIfNeeded(dragged);\r\n        }\r\n\r\n        this.saveCoordsForChoice(choiceNo);\r\n    };\r\n\r\n    /**\r\n     * Save the coordinates for a dropped item in the form field.\r\n     * @param {Number} choiceNo which copy of the choice this was.\r\n     */\r\n    DragDropMarkersQuestion.prototype.saveCoordsForChoice = function(choiceNo) {\r\n        let imageCoords = [];\r\n        var items = this.getRoot().find('div.droparea span.marker.choice' + choiceNo),\r\n            thiQ = this,\r\n            bgRatio = this.bgRatio();\r\n\r\n        if (items.length) {\r\n            items.each(function() {\r\n                var drag = $(this);\r\n                if (!drag.hasClass('beingdragged') && !drag.data('imageCoords')) {\r\n                    if (drag.data('scaleRatio') !== bgRatio) {\r\n                        // The scale ratio for the draggable item was changed. We need to update that.\r\n                        drag.data('pagex', drag.offset().left).data('pagey', drag.offset().top);\r\n                    }\r\n                    var dragXY = new Shapes.Point(drag.data('pagex'), drag.data('pagey'));\r\n                    if (thiQ.coordsInBgImg(dragXY)) {\r\n                        var bgImgXY = thiQ.convertToBgImgXY(dragXY);\r\n                        bgImgXY = new Shapes.Point(bgImgXY.x / bgRatio, bgImgXY.y / bgRatio);\r\n                        imageCoords[imageCoords.length] = bgImgXY;\r\n                    }\r\n                } else if (drag.data('imageCoords')) {\r\n                    imageCoords[imageCoords.length] = drag.data('imageCoords');\r\n                }\r\n            });\r\n        }\r\n\r\n        this.getRoot().find('input.choice' + choiceNo).val(imageCoords.join(';'));\r\n        if (this.isQuestionInteracted()) {\r\n            // The user has interacted with the draggable items. We need to mark the form as dirty.\r\n            questionManager.handleFormDirty();\r\n            // Save the new answered value.\r\n            this.questionAnswer = this.getQuestionAnsweredValues();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handle key down / press events on markers.\r\n     * @param {KeyboardEvent} e\r\n     */\r\n    DragDropMarkersQuestion.prototype.handleKeyPress = function(e) {\r\n        var drag = $(e.target).closest('.marker'),\r\n            point = new Shapes.Point(drag.offset().left, drag.offset().top),\r\n            choiceNo = this.getChoiceNoFromElement(drag);\r\n\r\n        switch (e.keyCode) {\r\n            case keys.arrowLeft:\r\n            case 65: // A.\r\n                point.x -= 1;\r\n                break;\r\n            case keys.arrowRight:\r\n            case 68: // D.\r\n                point.x += 1;\r\n                break;\r\n            case keys.arrowDown:\r\n            case 83: // S.\r\n                point.y += 1;\r\n                break;\r\n            case keys.arrowUp:\r\n            case 87: // W.\r\n                point.y -= 1;\r\n                break;\r\n            case keys.space:\r\n            case keys.escape:\r\n                point = null;\r\n                break;\r\n            default:\r\n                return; // Ingore other keys.\r\n        }\r\n        e.preventDefault();\r\n\r\n        if (point !== null) {\r\n            point = this.constrainToBgImg(point);\r\n            drag.offset({'left': point.x, 'top': point.y});\r\n            drag.data('pagex', drag.offset().left).data('pagey', drag.offset().top);\r\n            var dragXY = this.convertToBgImgXY(new Shapes.Point(drag.data('pagex'), drag.data('pagey')));\r\n            drag.data('originX', dragXY.x / this.bgRatio()).data('originY', dragXY.y / this.bgRatio());\r\n            if (this.coordsInBgImg(new Shapes.Point(drag.offset().left, drag.offset().top))) {\r\n                if (drag.hasClass('unneeded')) {\r\n                    this.sendDragToDrop(drag, true);\r\n                    var hiddenDrag = this.getDragClone(drag);\r\n                    if (hiddenDrag.length) {\r\n                        hiddenDrag.addClass('active');\r\n                    }\r\n                    this.cloneDragIfNeeded(drag);\r\n                }\r\n            }\r\n        } else {\r\n            drag.css('left', '').css('top', '');\r\n            drag.data('pagex', drag.offset().left).data('pagey', drag.offset().top);\r\n            this.sendDragHome(drag);\r\n            this.removeDragIfNeeded(drag);\r\n        }\r\n        drag.focus();\r\n        this.saveCoordsForChoice(choiceNo);\r\n    };\r\n\r\n    /**\r\n     * Makes sure the dragged item always exists within the background image area.\r\n     *\r\n     * @param {Point} windowxy\r\n     * @returns {Point} coordinates\r\n     */\r\n    DragDropMarkersQuestion.prototype.constrainToBgImg = function(windowxy) {\r\n        var bgImg = this.bgImage(),\r\n            bgImgXY = this.convertToBgImgXY(windowxy);\r\n        bgImgXY.x = Math.max(0, bgImgXY.x);\r\n        bgImgXY.y = Math.max(0, bgImgXY.y);\r\n        bgImgXY.x = Math.min(bgImg.width(), bgImgXY.x);\r\n        bgImgXY.y = Math.min(bgImg.height(), bgImgXY.y);\r\n        return this.convertToWindowXY(bgImgXY);\r\n    };\r\n\r\n    /**\r\n     * Returns the choice number for a node.\r\n     *\r\n     * @param {Element|jQuery} node\r\n     * @returns {Number}\r\n     */\r\n    DragDropMarkersQuestion.prototype.getChoiceNoFromElement = function(node) {\r\n        return Number(this.getClassnameNumericSuffix(node, 'choice'));\r\n    };\r\n\r\n    /**\r\n     * Returns the numeric part of a class with the given prefix.\r\n     *\r\n     * @param {Element|jQuery} node\r\n     * @param {String} prefix\r\n     * @returns {Number|null}\r\n     */\r\n    DragDropMarkersQuestion.prototype.getClassnameNumericSuffix = function(node, prefix) {\r\n        var classes = $(node).attr('class');\r\n        if (classes !== undefined && classes !== '') {\r\n            var classesarr = classes.split(' ');\r\n            for (var index = 0; index < classesarr.length; index++) {\r\n                var patt1 = new RegExp('^' + prefix + '([0-9])+$');\r\n                if (patt1.test(classesarr[index])) {\r\n                    var patt2 = new RegExp('([0-9])+$');\r\n                    var match = patt2.exec(classesarr[index]);\r\n                    return Number(match[0]);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Handle when the window is resized.\r\n     */\r\n    DragDropMarkersQuestion.prototype.handleResize = function() {\r\n        var thisQ = this,\r\n            bgRatio = this.bgRatio();\r\n        if (this.isPrinting) {\r\n            bgRatio = 1;\r\n        }\r\n\r\n        this.getRoot().find('div.droparea .marker').not('.beingdragged').each(function(key, drag) {\r\n            $(drag)\r\n                .css('left', parseFloat($(drag).data('originX')) * parseFloat(bgRatio))\r\n                .css('top', parseFloat($(drag).data('originY')) * parseFloat(bgRatio));\r\n            thisQ.handleElementScale(drag, 'left top');\r\n        });\r\n\r\n        this.getRoot().find('div.droparea svg.dropzones')\r\n            .width(this.bgImage().width())\r\n            .height(this.bgImage().height());\r\n\r\n        for (var dropZoneNo = 0; dropZoneNo < this.visibleDropZones.length; dropZoneNo++) {\r\n            var dropZone = thisQ.visibleDropZones[dropZoneNo];\r\n            var originCoords = dropZone.coords;\r\n            var shape = thisQ.shapes[dropZoneNo];\r\n            var shapeSVG = thisQ.shapeSVGs[dropZoneNo];\r\n            shape.parse(originCoords, bgRatio);\r\n            shape.updateSvg(shapeSVG);\r\n\r\n            var handles = shape.getHandlePositions();\r\n            var markerSpan = this.getRoot().find('div.ddarea div.markertexts span.markertext' + dropZoneNo);\r\n            markerSpan\r\n                .css('left', handles.moveHandle.x - (markerSpan.outerWidth() / 2) - 4)\r\n                .css('top', handles.moveHandle.y - (markerSpan.outerHeight() / 2));\r\n            thisQ.handleElementScale(markerSpan, 'center');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Clone the drag.\r\n     */\r\n    DragDropMarkersQuestion.prototype.cloneDrags = function() {\r\n        var thisQ = this;\r\n        this.getRoot().find('div.draghomes span.marker').each(function(index, draghome) {\r\n            var drag = $(draghome);\r\n            var placeHolder = drag.clone();\r\n            placeHolder.removeClass();\r\n            placeHolder.addClass('marker');\r\n            placeHolder.addClass('choice' + thisQ.getChoiceNoFromElement(drag));\r\n            placeHolder.addClass(thisQ.getDragNoClass(drag, false));\r\n            placeHolder.addClass('dragplaceholder');\r\n            drag.before(placeHolder);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get the drag number of a drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @returns {Number} the drag number.\r\n     */\r\n    DragDropMarkersQuestion.prototype.getDragNo = function(drag) {\r\n        return this.getClassnameNumericSuffix(drag, 'dragno');\r\n    };\r\n\r\n    /**\r\n     * Get the drag number prefix of a drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @param {Boolean} includeSelector include the CSS selector prefix or not.\r\n     * @return {String} Class name\r\n     */\r\n    DragDropMarkersQuestion.prototype.getDragNoClass = function(drag, includeSelector) {\r\n        var className = 'dragno' + this.getDragNo(drag);\r\n        if (this.isInfiniteDrag(drag)) {\r\n            className = 'infinite';\r\n        }\r\n\r\n        if (includeSelector) {\r\n            return '.' + className;\r\n        }\r\n\r\n        return className;\r\n    };\r\n\r\n    /**\r\n     * Get drag clone for a given drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @returns {jQuery} the drag's clone.\r\n     */\r\n    DragDropMarkersQuestion.prototype.getDragClone = function(drag) {\r\n        return this.getRoot().find('.draghomes' + ' span.marker' +\r\n            '.choice' + this.getChoiceNoFromElement(drag) + this.getDragNoClass(drag, true) + '.dragplaceholder');\r\n    };\r\n\r\n    /**\r\n     * Get the drop area element.\r\n     * @returns {jQuery} droparea element.\r\n     */\r\n    DragDropMarkersQuestion.prototype.dropArea = function() {\r\n        return this.getRoot().find('div.droparea');\r\n    };\r\n\r\n    /**\r\n     * Animate a drag back to its home.\r\n     *\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropMarkersQuestion.prototype.sendDragHome = function(drag) {\r\n        drag.removeClass('beingdragged')\r\n            .addClass('unneeded')\r\n            .css('top', '')\r\n            .css('left', '')\r\n            .css('transform', '');\r\n        var placeHolder = this.getDragClone(drag);\r\n        placeHolder.after(drag);\r\n        placeHolder.removeClass('active');\r\n    };\r\n\r\n    /**\r\n     * Animate a drag item into a given place.\r\n     *\r\n     * @param {jQuery} drag the item to place.\r\n     * @param {boolean} isScaling Scaling or not.\r\n     * @param {boolean} initialLoad Whether it is the initial load or not.\r\n     */\r\n    DragDropMarkersQuestion.prototype.sendDragToDrop = function(drag, isScaling, initialLoad = false) {\r\n        var dropArea = this.dropArea(),\r\n            bgRatio = this.bgRatio();\r\n        drag.removeClass('beingdragged').removeClass('unneeded');\r\n        var dragXY = this.convertToBgImgXY(new Shapes.Point(drag.data('pagex'), drag.data('pagey')));\r\n        if (isScaling) {\r\n            drag.data('originX', dragXY.x / bgRatio).data('originY', dragXY.y / bgRatio);\r\n            drag.css('left', dragXY.x).css('top', dragXY.y);\r\n        } else {\r\n            drag.data('originX', dragXY.x).data('originY', dragXY.y);\r\n            drag.css('left', dragXY.x * bgRatio).css('top', dragXY.y * bgRatio);\r\n        }\r\n        // We need to save the original scale ratio for each draggable item.\r\n        if (!initialLoad) {\r\n            // Only set the scale ratio for a current being-dragged item, not for the initial loading.\r\n            drag.data('scaleRatio', bgRatio);\r\n        }\r\n        dropArea.append(drag);\r\n        this.handleElementScale(drag, 'left top');\r\n    };\r\n\r\n    /**\r\n     * Clone the drag at the draghome area if needed.\r\n     *\r\n     * @param {jQuery} drag the item to place.\r\n     */\r\n    DragDropMarkersQuestion.prototype.cloneDragIfNeeded = function(drag) {\r\n        var inputNode = this.getInput(drag),\r\n            noOfDrags = Number(this.getClassnameNumericSuffix(inputNode, 'noofdrags')),\r\n            displayedDragsInDropArea = this.getRoot().find('div.droparea .marker.choice' +\r\n                this.getChoiceNoFromElement(drag) + this.getDragNoClass(drag, true)).length,\r\n            displayedDragsInDragHomes = this.getRoot().find('div.draghomes .marker.choice' +\r\n                this.getChoiceNoFromElement(drag) + this.getDragNoClass(drag, true)).not('.dragplaceholder').length;\r\n\r\n        if ((this.isInfiniteDrag(drag) ||\r\n                !this.isInfiniteDrag(drag) && displayedDragsInDropArea < noOfDrags) && displayedDragsInDragHomes === 0) {\r\n            var dragClone = drag.clone();\r\n            dragClone.addClass('unneeded')\r\n                .css('top', '')\r\n                .css('left', '')\r\n                .css('transform', '');\r\n            this.getDragClone(drag)\r\n                .removeClass('active')\r\n                .after(dragClone);\r\n            questionManager.addEventHandlersToMarker(dragClone);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Remove the clone drag at the draghome area if needed.\r\n     *\r\n     * @param {jQuery} drag the item to place.\r\n     */\r\n    DragDropMarkersQuestion.prototype.removeDragIfNeeded = function(drag) {\r\n        var dragsInHome = this.getRoot().find('div.draghomes .marker.choice' +\r\n            this.getChoiceNoFromElement(drag) + this.getDragNoClass(drag, true)).not('.dragplaceholder');\r\n        var displayedDrags = dragsInHome.length;\r\n        while (displayedDrags > 1) {\r\n            dragsInHome.first().remove();\r\n            displayedDrags--;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the input belong to drag.\r\n     *\r\n     * @param {jQuery} drag the item to place.\r\n     * @returns {jQuery} input element.\r\n     */\r\n    DragDropMarkersQuestion.prototype.getInput = function(drag) {\r\n        var choiceNo = this.getChoiceNoFromElement(drag);\r\n        return this.getRoot().find('input.choices.choice' + choiceNo);\r\n    };\r\n\r\n    /**\r\n     * Return the background ratio.\r\n     *\r\n     * @returns {number} Background ratio.\r\n     */\r\n    DragDropMarkersQuestion.prototype.bgRatio = function() {\r\n        var bgImg = this.bgImage();\r\n        var bgImgNaturalWidth = bgImg.get(0).naturalWidth;\r\n        var bgImgClientWidth = bgImg.width();\r\n\r\n        return bgImgClientWidth / bgImgNaturalWidth;\r\n    };\r\n\r\n    /**\r\n     * Scale the drag if needed.\r\n     *\r\n     * @param {jQuery} element the item to place.\r\n     * @param {String} type scaling type\r\n     */\r\n    DragDropMarkersQuestion.prototype.handleElementScale = function(element, type) {\r\n        var bgRatio = parseFloat(this.bgRatio());\r\n        if (this.isPrinting) {\r\n            bgRatio = 1;\r\n        }\r\n        $(element).css({\r\n            '-webkit-transform': 'scale(' + bgRatio + ')',\r\n            '-moz-transform': 'scale(' + bgRatio + ')',\r\n            '-ms-transform': 'scale(' + bgRatio + ')',\r\n            '-o-transform': 'scale(' + bgRatio + ')',\r\n            'transform': 'scale(' + bgRatio + ')',\r\n            'transform-origin': type\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Check if the given drag is in infinite mode or not.\r\n     *\r\n     * @param {jQuery} drag The drag item need to check.\r\n     */\r\n    DragDropMarkersQuestion.prototype.isInfiniteDrag = function(drag) {\r\n        return drag.hasClass('infinite');\r\n    };\r\n\r\n    /**\r\n     * Waits until all images are loaded before calling setupQuestion().\r\n     *\r\n     * This function is called from the onLoad of each image, and also polls with\r\n     * a time-out, because image on-loads are allegedly unreliable.\r\n     */\r\n    DragDropMarkersQuestion.prototype.waitForAllImagesToBeLoaded = function() {\r\n        var thisQ = this;\r\n        // This method may get called multiple times (via image on-loads or timeouts.\r\n        // If we are already done, don't do it again.\r\n        if (this.allImagesLoaded) {\r\n            return;\r\n        }\r\n\r\n        // Clear any current timeout, if set.\r\n        if (this.imageLoadingTimeoutId !== null) {\r\n            clearTimeout(this.imageLoadingTimeoutId);\r\n        }\r\n\r\n        // If we have not yet loaded all images, set a timeout to\r\n        // call ourselves again, since apparently images on-load\r\n        // events are flakey.\r\n        if (this.getNotYetLoadedImages().length > 0) {\r\n            this.imageLoadingTimeoutId = setTimeout(function() {\r\n                this.waitForAllImagesToBeLoaded();\r\n            }, 100);\r\n            return;\r\n        }\r\n\r\n        // We now have all images. Carry on, but only after giving the layout a chance to settle down.\r\n        this.allImagesLoaded = true;\r\n        this.cloneDrags();\r\n        this.repositionDrags();\r\n        this.drawDropzones();\r\n        // Wait for all dynamic content loaded by filter to be completed.\r\n        document.addEventListener(filterEvent.eventTypes.filterContentRenderingComplete, (elements) => {\r\n            elements.detail.nodes.forEach((element) => {\r\n                thisQ.changeAllMakerToFilteredContent(element);\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Change all the maker related to the item that has been changed by filter to correct size and content.\r\n     *\r\n     *  @param {object} filteredElement the element has been modified by filter.\r\n     */\r\n    DragDropMarkersQuestion.prototype.changeAllMakerToFilteredContent = function(filteredElement) {\r\n        let currentFilteredItem = $(filteredElement);\r\n        const parentIsMarker = currentFilteredItem.parent().closest('span.marker');\r\n        const isMarker = currentFilteredItem.hasClass('marker');\r\n        const root = this.getRoot();\r\n        // The filtered element or parent element should a drag or drop item.\r\n        if (!parentIsMarker && !isMarker) {\r\n            return;\r\n        }\r\n        if (parentIsMarker) {\r\n            currentFilteredItem = currentFilteredItem.parent().closest('span.marker');\r\n        }\r\n        if (root.find(currentFilteredItem).length <= 0) {\r\n            // If the maker doesn't belong to this question\r\n            // In case we have multiple questions in the same page.\r\n            return;\r\n        }\r\n        const dragNo = this.getDragNo(currentFilteredItem);\r\n        const choiceNo = this.getChoiceNoFromElement(currentFilteredItem);\r\n        const listOfContainerToBeModifed = [\r\n            'div.draghomes .marker:not(.dragplaceholder).dragno' + dragNo + '.choice' + choiceNo,\r\n            'div.droparea .marker:not(.dragplaceholder).dragno' + dragNo + '.choice' + choiceNo,\r\n            'div.draghomes .marker:not(.dragplaceholder).infinite.choice' + choiceNo,\r\n            'div.droparea .marker:not(.dragplaceholder).infinite.choice' + choiceNo\r\n        ];\r\n        let listOfModifiedDragDrop = [];\r\n        // We want to keep all the handler and event for filtered item, so using clone is the only choice.\r\n        const filteredDragDropClone = currentFilteredItem.clone();\r\n        listOfContainerToBeModifed.forEach(function(selector) {\r\n            root.find(selector).each(function(i, node) {\r\n                const originalClass = $(node).attr('class');\r\n                const originalStyle = $(node).attr('style');\r\n                // Replace the class and style of the maker we want to replace for the clone.\r\n                filteredDragDropClone.attr('class', originalClass);\r\n                filteredDragDropClone.attr('style', originalStyle);\r\n                // Add event for the clone.\r\n                questionManager.addEventHandlersToMarker(filteredDragDropClone);\r\n                // Insert into DOM.\r\n                $(node).before(filteredDragDropClone);\r\n                listOfModifiedDragDrop.push(node);\r\n            });\r\n        });\r\n        listOfModifiedDragDrop.forEach(function(node) {\r\n            $(node).remove();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get any of the images in the drag-drop area that are not yet fully loaded.\r\n     *\r\n     * @returns {jQuery} those images.\r\n     */\r\n    DragDropMarkersQuestion.prototype.getNotYetLoadedImages = function() {\r\n        return this.getRoot().find('.ddmarker img.dropbackground').not(function(i, imgNode) {\r\n            return this.imageIsLoaded(imgNode);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Check if an image has loaded without errors.\r\n     *\r\n     * @param {HTMLImageElement} imgElement an image.\r\n     * @returns {boolean} true if this image has loaded without errors.\r\n     */\r\n    DragDropMarkersQuestion.prototype.imageIsLoaded = function(imgElement) {\r\n        return imgElement.complete && imgElement.naturalHeight !== 0;\r\n    };\r\n\r\n    /**\r\n     * Singleton that tracks all the DragDropToTextQuestions on this page, and deals\r\n     * with event dispatching.\r\n     *\r\n     * @type {Object}\r\n     */\r\n    var questionManager = {\r\n\r\n        /**\r\n         * {boolean} ensures that the event handlers are only initialised once per page.\r\n         */\r\n        eventHandlersInitialised: false,\r\n\r\n        /**\r\n         * {Object} ensures that the marker event handlers are only initialised once per question,\r\n         * indexed by containerId (id on the .que div).\r\n         */\r\n        markerEventHandlersInitialised: {},\r\n\r\n        /**\r\n         * {boolean} is printing or not.\r\n         */\r\n        isPrinting: false,\r\n\r\n        /**\r\n         * {boolean} is keyboard navigation.\r\n         */\r\n        isKeyboardNavigation: false,\r\n\r\n        /**\r\n         * {Object} all the questions on this page, indexed by containerId (id on the .que div).\r\n         */\r\n        questions: {}, // An object containing all the information about each question on the page.\r\n\r\n        /**\r\n         * Initialise one question.\r\n         *\r\n         * @param {String} containerId the id of the div.que that contains this question.\r\n         * @param {boolean} readOnly whether the question is read-only.\r\n         * @param {Object[]} visibleDropZones data on any drop zones to draw as part of the feedback.\r\n         */\r\n        init: function(containerId, readOnly, visibleDropZones) {\r\n            questionManager.questions[containerId] =\r\n                new DragDropMarkersQuestion(containerId, readOnly, visibleDropZones);\r\n            if (!questionManager.eventHandlersInitialised) {\r\n                questionManager.setupEventHandlers();\r\n                questionManager.eventHandlersInitialised = true;\r\n            }\r\n            if (!questionManager.markerEventHandlersInitialised.hasOwnProperty(containerId)) {\r\n                questionManager.markerEventHandlersInitialised[containerId] = true;\r\n                // We do not use the body event here to prevent the other event on Mobile device, such as scroll event.\r\n                var questionContainer = document.getElementById(containerId);\r\n                if (questionContainer.classList.contains('ddmarker') &&\r\n                    !questionContainer.classList.contains('qtype_ddmarker-readonly')) {\r\n                    // TODO: Convert all the jQuery selectors and events to native Javascript.\r\n                    questionManager.addEventHandlersToMarker($(questionContainer).find('div.draghomes .marker'));\r\n                    questionManager.addEventHandlersToMarker($(questionContainer).find('div.droparea .marker'));\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set up the event handlers that make this question type work. (Done once per page.)\r\n         */\r\n        setupEventHandlers: function() {\r\n            $(window).on('resize', function() {\r\n                questionManager.handleWindowResize(false);\r\n            });\r\n            window.addEventListener('beforeprint', function() {\r\n                questionManager.isPrinting = true;\r\n                questionManager.handleWindowResize(questionManager.isPrinting);\r\n            });\r\n            window.addEventListener('afterprint', function() {\r\n                questionManager.isPrinting = false;\r\n                questionManager.handleWindowResize(questionManager.isPrinting);\r\n            });\r\n            setTimeout(function() {\r\n                questionManager.fixLayoutIfThingsMoved();\r\n            }, 100);\r\n        },\r\n\r\n        /**\r\n         * Binding the event again for newly created element.\r\n         *\r\n         * @param {jQuery} element Element to bind the event\r\n         */\r\n        addEventHandlersToMarker: function(element) {\r\n            element\r\n                .on('mousedown touchstart', questionManager.handleDragStart)\r\n                .on('keydown keypress', questionManager.handleKeyPress)\r\n                .focusin(function(e) {\r\n                    questionManager.handleKeyboardFocus(e, true);\r\n                })\r\n                .focusout(function(e) {\r\n                    questionManager.handleKeyboardFocus(e, false);\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Handle mouse down / touch start events on markers.\r\n         * @param {Event} e the DOM event.\r\n         */\r\n        handleDragStart: function(e) {\r\n            e.preventDefault();\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleDragStart(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle key down / press events on markers.\r\n         * @param {Event} e\r\n         */\r\n        handleKeyPress: function(e) {\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleKeyPress(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle when the window is resized.\r\n         * @param {boolean} isPrinting\r\n         */\r\n        handleWindowResize: function(isPrinting) {\r\n            for (var containerId in questionManager.questions) {\r\n                if (questionManager.questions.hasOwnProperty(containerId)) {\r\n                    questionManager.questions[containerId].isPrinting = isPrinting;\r\n                    questionManager.questions[containerId].handleResize();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle focus lost events on markers.\r\n         * @param {Event} e\r\n         * @param {boolean} isNavigating\r\n         */\r\n        handleKeyboardFocus: function(e, isNavigating) {\r\n            questionManager.isKeyboardNavigation = isNavigating;\r\n        },\r\n\r\n        /**\r\n         * Sometimes, despite our best efforts, things change in a way that cannot\r\n         * be specifically caught (e.g. dock expanding or collapsing in Boost).\r\n         * Therefore, we need to periodically check everything is in the right position.\r\n         */\r\n        fixLayoutIfThingsMoved: function() {\r\n            if (!questionManager.isKeyboardNavigation) {\r\n                this.handleWindowResize(questionManager.isPrinting);\r\n            }\r\n            // We use setTimeout after finishing work, rather than setInterval,\r\n            // in case positioning things is slow. We want 100 ms gap\r\n            // between executions, not what setInterval does.\r\n            setTimeout(function() {\r\n                questionManager.fixLayoutIfThingsMoved(questionManager.isPrinting);\r\n            }, 100);\r\n        },\r\n\r\n        /**\r\n         * Given an event, work out which question it effects.\r\n         * @param {Event} e the event.\r\n         * @returns {DragDropMarkersQuestion|undefined} The question, or undefined.\r\n         */\r\n        getQuestionForEvent: function(e) {\r\n            var containerId = $(e.currentTarget).closest('.que.ddmarker').attr('id');\r\n            return questionManager.questions[containerId];\r\n        },\r\n\r\n        /**\r\n         * Handle when the form is dirty.\r\n         */\r\n        handleFormDirty: function() {\r\n            const responseForm = document.getElementById('responseform');\r\n            FormChangeChecker.markFormAsDirty(responseForm);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @alias module:qtype_ddmarker/question\r\n     */\r\n    return {\r\n        /**\r\n         * Initialise one drag-drop markers question.\r\n         *\r\n         * @param {String} containerId id of the outer div for this question.\r\n         * @param {String} bgImgUrl the URL of the background image.\r\n         * @param {boolean} readOnly whether the question is being displayed read-only.\r\n         * @param {String[]} visibleDropZones the geometry of any drop-zones to show.\r\n         */\r\n        init: questionManager.init\r\n    };\r\n});\r\n"],"names":["define","$","dragDrop","Shapes","keys","FormChangeChecker","filterEvent","DragDropMarkersQuestion","containerId","readOnly","visibleDropZones","thisQ","this","shapes","shapeSVGs","isPrinting","questionAnswer","getRoot","addClass","allImagesLoaded","getNotYetLoadedImages","one","waitForAllImagesToBeLoaded","prototype","drawDropzones","length","bgImage","find","html","outerWidth","outerHeight","svg","nextColourIndex","dropZoneNo","colourClass","addDropzone","existingmarkertext","dropZone","shape","make","bgRatio","parse","coords","markertext","notifyFilterContentUpdated","remove","classnames","append","markerspan","handles","getHandlePositions","positionLeft","moveHandle","x","positionTop","y","css","data","position","left","top","handleElementScale","shapeSVG","makeSvg","setAttribute","repositionDrags","root","not","each","key","item","input","choiceNo","getChoiceNoFromElement","imageCoords","getImageCoords","drag","i","dragInDrop","clone","screenCoords","convertToWindowXY","sendDragToDrop","getDragClone","cloneDragIfNeeded","getQuestionAnsweredValues","result","inputNode","id","value","isQuestionInteracted","oldAnswer","newAnswer","isInteracted","JSON","stringify","Object","forEach","val","coordsStrings","split","Point","point","offset","convertToBgImgXY","coordsInBgImg","bgPosition","width","height","document","getElementById","handleDragStart","e","dragged","target","closest","prepare","start","hasClass","hiddenDrag","dragEnd","dragXY","placed","bgImgXY","sendDragHome","removeDragIfNeeded","saveCoordsForChoice","items","thiQ","join","questionManager","handleFormDirty","handleKeyPress","keyCode","arrowLeft","arrowRight","arrowDown","arrowUp","space","escape","preventDefault","constrainToBgImg","focus","windowxy","bgImg","Math","max","min","node","Number","getClassnameNumericSuffix","prefix","classes","attr","undefined","classesarr","index","RegExp","test","match","exec","handleResize","parseFloat","originCoords","updateSvg","markerSpan","cloneDrags","draghome","placeHolder","removeClass","getDragNoClass","before","getDragNo","includeSelector","className","isInfiniteDrag","dropArea","after","isScaling","initialLoad","arguments","getInput","noOfDrags","displayedDragsInDropArea","displayedDragsInDragHomes","dragClone","addEventHandlersToMarker","dragsInHome","displayedDrags","first","bgImgNaturalWidth","get","naturalWidth","element","type","transform","imageLoadingTimeoutId","clearTimeout","setTimeout","addEventListener","eventTypes","filterContentRenderingComplete","elements","detail","nodes","changeAllMakerToFilteredContent","filteredElement","currentFilteredItem","parentIsMarker","parent","isMarker","dragNo","listOfContainerToBeModifed","listOfModifiedDragDrop","filteredDragDropClone","selector","originalClass","originalStyle","push","imgNode","imageIsLoaded","imgElement","complete","naturalHeight","eventHandlersInitialised","markerEventHandlersInitialised","isKeyboardNavigation","questions","init","setupEventHandlers","hasOwnProperty","questionContainer","classList","contains","window","on","handleWindowResize","fixLayoutIfThingsMoved","focusin","handleKeyboardFocus","focusout","question","getQuestionForEvent","isNavigating","currentTarget","responseForm","markFormAsDirty"],"mappings":"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"}