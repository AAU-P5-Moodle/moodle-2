{"version":3,"file":"filter.min.js","sources":["../src/filter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Question bank filter management.\r\n *\r\n * @module     core_question/filter\r\n * @copyright  2021 Tomo Tsuyuki <tomotsuyuki@catalyst-au.net>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport CoreFilter from 'core/datafilter';\r\nimport Notification from 'core/notification';\r\nimport Selectors from 'core/datafilter/selectors';\r\nimport Templates from 'core/templates';\r\nimport Fragment from 'core/fragment';\r\n\r\n/**\r\n * Initialise the question bank filter on the element with the given id.\r\n *\r\n * @param {String} filterRegionId ID of the HTML element containing the filters.\r\n * @param {String} defaultcourseid Course ID for the default course to pass back to the view.\r\n * @param {String} defaultcategoryid Question bank category ID for the default course to pass back to the view.\r\n * @param {Number} perpage The number of questions to display per page.\r\n * @param {Number} contextId Context ID of the question bank view.\r\n * @param {string} component Frankenstyle name of the component for the fragment API callback (e.g. core_question)\r\n * @param {string} callback Name of the callback for the fragment API (e.g question_data)\r\n * @param {string} view The class name of the question bank view class used for this page.\r\n * @param {Number} cmid If we are in an activitiy, the course module ID.\r\n * @param {string} pagevars JSON-encoded parameters from passed from the view, including filters and jointype.\r\n * @param {string} extraparams JSON-encoded additional parameters specific to this view class, used for re-rendering the view.\r\n */\r\nexport const init = (\r\n    filterRegionId,\r\n    defaultcourseid,\r\n    defaultcategoryid,\r\n    perpage,\r\n    contextId,\r\n    component,\r\n    callback,\r\n    view,\r\n    cmid,\r\n    pagevars,\r\n    extraparams\r\n) => {\r\n\r\n    const SELECTORS = {\r\n        QUESTION_CONTAINER_ID: '#questionscontainer',\r\n        QUESTION_TABLE: '#questionscontainer table',\r\n        SORT_LINK: '#questionscontainer div.sorters a',\r\n        PAGINATION_LINK: '#questionscontainer a[href].page-link',\r\n        LASTCHANGED_FIELD: '#questionsubmit input[name=lastchanged]',\r\n        BULK_ACTIONS: '#bulkactionsui-container input',\r\n        MENU_ACTIONS: '.menu-action',\r\n        EDIT_SWITCH: '.editmode-switch-form input[name=setmode]',\r\n        EDIT_SWITCH_URL: '.editmode-switch-form input[name=pageurl]',\r\n    };\r\n\r\n    const filterSet = document.querySelector(`#${filterRegionId}`);\r\n\r\n    const viewData = {\r\n        extraparams,\r\n        cmid,\r\n        view,\r\n        cat: defaultcategoryid,\r\n        courseid: defaultcourseid,\r\n        filter: {},\r\n        jointype: 0,\r\n        qpage: 0,\r\n        qperpage: perpage,\r\n        sortdata: {},\r\n        lastchanged: document.querySelector(SELECTORS.LASTCHANGED_FIELD)?.value ?? null,\r\n    };\r\n\r\n    let sortData = {};\r\n    const defaultSort = document.querySelector(SELECTORS.QUESTION_TABLE)?.dataset?.defaultsort;\r\n    if (defaultSort) {\r\n        sortData = JSON.parse(defaultSort);\r\n    }\r\n\r\n    /**\r\n     * Retrieve table data.\r\n     *\r\n     * @param {Object} filterdata data\r\n     * @param {Promise} pendingPromise pending promise\r\n     */\r\n    const applyFilter = (filterdata, pendingPromise) => {\r\n        // Reload the questions based on the specified filters. If no filters are provided,\r\n        // use the default category filter condition.\r\n        if (filterdata) {\r\n            // Main join types.\r\n            viewData.jointype = parseInt(filterSet.dataset.filterverb, 10);\r\n            delete filterdata.jointype;\r\n            // Retrieve filter info.\r\n            viewData.filter = filterdata;\r\n            if (Object.keys(filterdata).length !== 0) {\r\n                if (!isNaN(viewData.jointype)) {\r\n                    filterdata.jointype = viewData.jointype;\r\n                }\r\n                updateUrlParams(filterdata);\r\n            }\r\n        }\r\n        // Load questions for first page.\r\n        viewData.filter = JSON.stringify(filterdata);\r\n        viewData.sortdata = JSON.stringify(sortData);\r\n        Fragment.loadFragment(component, callback, contextId, viewData)\r\n            // Render questions for first page and pagination.\r\n            .then((questionhtml, jsfooter) => {\r\n                const questionscontainer = document.querySelector(SELECTORS.QUESTION_CONTAINER_ID);\r\n                if (questionhtml === undefined) {\r\n                    questionhtml = '';\r\n                }\r\n                if (jsfooter === undefined) {\r\n                    jsfooter = '';\r\n                }\r\n                Templates.replaceNode(questionscontainer, questionhtml, jsfooter);\r\n                // Resolve filter promise.\r\n                if (pendingPromise) {\r\n                    pendingPromise.resolve();\r\n                }\r\n                return {questionhtml, jsfooter};\r\n            })\r\n            .catch(Notification.exception);\r\n    };\r\n\r\n    // Init core filter processor with apply callback.\r\n    const coreFilter = new CoreFilter(filterSet, applyFilter);\r\n    coreFilter.activeFilters = {}; // Unset useless courseid filter.\r\n    coreFilter.init();\r\n\r\n    /**\r\n     * Update URL Param based upon the current filter.\r\n     *\r\n     * @param {Object} filters Active filters.\r\n     */\r\n    const updateUrlParams = (filters) => {\r\n        const url = new URL(location.href);\r\n        const filterQuery = JSON.stringify(filters);\r\n        url.searchParams.set('filter', filterQuery);\r\n        history.pushState(filters, '', url);\r\n        const editSwitch = document.querySelector(SELECTORS.EDIT_SWITCH);\r\n        if (editSwitch) {\r\n            const editSwitchUrlInput = document.querySelector(SELECTORS.EDIT_SWITCH_URL);\r\n            const editSwitchUrl = new URL(editSwitchUrlInput.value);\r\n            editSwitchUrl.searchParams.set('filter', filterQuery);\r\n            editSwitchUrlInput.value = editSwitchUrl;\r\n            editSwitch.dataset.pageurl = editSwitchUrl;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Cleans URL parameters.\r\n     */\r\n    const cleanUrlParams = () => {\r\n        const queryString = location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        if (urlParams.has('cmid')) {\r\n            const cleanedUrl = new URL(location.href.replace(location.search, ''));\r\n            cleanedUrl.searchParams.set('cmid', urlParams.get('cmid'));\r\n            history.pushState({}, '', cleanedUrl);\r\n        }\r\n\r\n        if (urlParams.has('courseid')) {\r\n            const cleanedUrl = new URL(location.href.replace(location.search, ''));\r\n            cleanedUrl.searchParams.set('courseid', urlParams.get('courseid'));\r\n            history.pushState({}, '', cleanedUrl);\r\n        }\r\n    };\r\n\r\n    // Add listeners for the sorting, paging and clear actions.\r\n    document.addEventListener('click', e => {\r\n        const sortableLink = e.target.closest(SELECTORS.SORT_LINK);\r\n        const paginationLink = e.target.closest(SELECTORS.PAGINATION_LINK);\r\n        const clearLink = e.target.closest(Selectors.filterset.actions.resetFilters);\r\n        if (sortableLink) {\r\n            e.preventDefault();\r\n            const oldSort = sortData;\r\n            sortData = {};\r\n            sortData[sortableLink.dataset.sortname] = sortableLink.dataset.sortorder;\r\n            for (const sortname in oldSort) {\r\n                if (sortname !== sortableLink.dataset.sortname) {\r\n                    sortData[sortname] = oldSort[sortname];\r\n                }\r\n            }\r\n            viewData.qpage = 0;\r\n            coreFilter.updateTableFromFilter();\r\n        }\r\n        if (paginationLink) {\r\n            e.preventDefault();\r\n            const paginationURL = new URL(paginationLink.getAttribute(\"href\"));\r\n            const qpage = paginationURL.searchParams.get('qpage');\r\n            if (paginationURL.search !== null) {\r\n                viewData.qpage = qpage;\r\n                coreFilter.updateTableFromFilter();\r\n            }\r\n        }\r\n        if (clearLink) {\r\n            cleanUrlParams();\r\n        }\r\n    });\r\n\r\n    // Run apply filter at page load.\r\n    pagevars = JSON.parse(pagevars);\r\n    let initialFilters;\r\n    let jointype = null;\r\n    if (pagevars.filter) {\r\n        // Load initial filter based on page vars.\r\n        initialFilters = pagevars.filter;\r\n        if (pagevars.jointype) {\r\n            jointype = pagevars.jointype;\r\n        }\r\n    }\r\n\r\n    if (Object.entries(initialFilters).length !== 0) {\r\n        // Remove the default empty filter row.\r\n        const emptyFilterRow = filterSet.querySelector(Selectors.filterset.regions.emptyFilterRow);\r\n        if (emptyFilterRow) {\r\n            emptyFilterRow.remove();\r\n        }\r\n\r\n        // Add filters.\r\n        let rowcount = 0;\r\n        for (const urlFilter in initialFilters) {\r\n            if (urlFilter === 'jointype') {\r\n                jointype = initialFilters[urlFilter];\r\n                continue;\r\n            }\r\n            // Add each filter row.\r\n            rowcount += 1;\r\n            const filterdata = {\r\n                filtertype: urlFilter,\r\n                values:  initialFilters[urlFilter].values,\r\n                jointype: initialFilters[urlFilter].jointype,\r\n                filteroptions: initialFilters[urlFilter].filteroptions,\r\n                rownum: rowcount\r\n            };\r\n            coreFilter.addFilterRow(filterdata);\r\n        }\r\n        coreFilter.filterSet.dataset.filterverb = jointype;\r\n\r\n        // Since we must filter by category, it does not make sense to allow the top-level \"match any\" or \"match none\" conditions,\r\n        // as this would exclude the category. Remove those options and disable the select.\r\n        const join = coreFilter.filterSet.querySelector(Selectors.filterset.fields.join);\r\n        join.querySelectorAll(`option:not([value=\"${jointype}\"])`).forEach((option) => option.remove());\r\n        join.disabled = true;\r\n    }\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_datafilter","_notification","_selectors","_templates","_fragment","_exports","init","filterRegionId","defaultcourseid","defaultcategoryid","perpage","contextId","component","callback","view","cmid","pagevars","extraparams","SELECTORS","filterSet","document","querySelector","viewData","cat","courseid","filter","jointype","qpage","qperpage","sortdata","lastchanged","value","sortData","defaultSort","dataset","defaultsort","JSON","parse","coreFilter","CoreFilter","applyFilter","filterdata","pendingPromise","parseInt","filterverb","Object","keys","length","isNaN","updateUrlParams","stringify","Fragment","loadFragment","then","questionhtml","jsfooter","questionscontainer","undefined","Templates","replaceNode","resolve","catch","Notification","exception","activeFilters","filters","url","URL","location","href","filterQuery","searchParams","set","history","pushState","editSwitch","editSwitchUrlInput","editSwitchUrl","pageurl","initialFilters","addEventListener","sortableLink","target","closest","paginationLink","clearLink","Selectors","filterset","actions","resetFilters","preventDefault","oldSort","sortname","sortorder","updateTableFromFilter","paginationURL","getAttribute","get","search","cleanUrlParams","queryString","urlParams","URLSearchParams","has","cleanedUrl","replace","entries","emptyFilterRow","regions","remove","rowcount","urlFilter","filtertype","values","filteroptions","rownum","addFilterRow","join","fields","querySelectorAll","forEach","option","disabled"],"mappings":"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"}