{"version":3,"file":"actions.min.js","sources":["../src/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Various actions on badges - enabling, disabling, etc.\r\n *\r\n * @module      core_badges/actions\r\n * @copyright   2024 Sara Arjona <sara@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport selectors from 'core_badges/selectors';\r\nimport Notification from 'core/notification';\r\nimport {prefetchStrings} from 'core/prefetch';\r\nimport {getString} from 'core/str';\r\nimport Ajax from 'core/ajax';\r\nimport Pending from 'core/pending';\r\nimport {dispatchEvent} from 'core/event_dispatcher';\r\nimport {add as addToast} from 'core/toast';\r\nimport * as reportEvents from 'core_reportbuilder/local/events';\r\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\r\n\r\n/**\r\n * Initialize module.\r\n */\r\nexport const init = () => {\r\n    prefetchStrings('core_badges', [\r\n        'reviewconfirm',\r\n        'activatesuccess',\r\n        'deactivatesuccess',\r\n        'awardoncron',\r\n        'numawardstat',\r\n    ]);\r\n    prefetchStrings('core', [\r\n        'confirm',\r\n        'enable',\r\n    ]);\r\n\r\n    registerEventListeners();\r\n};\r\n\r\n/**\r\n * Register events for delete preset option in action menu.\r\n */\r\nconst registerEventListeners = () => {\r\n    document.addEventListener('click', (event) => {\r\n        const enableOption = event.target.closest(selectors.actions.enablebadge);\r\n\r\n        if (enableOption) {\r\n            event.preventDefault();\r\n\r\n            // Use triggerElement to return focus to the action menu toggle.\r\n            const reportElement = event.target.closest(reportSelectors.regions.report);\r\n            const triggerElement = reportElement ? enableOption.closest('.dropdown').querySelector('.dropdown-toggle') : null;\r\n            const badgeId = enableOption.dataset.badgeid;\r\n            const badgeName = enableOption.dataset.badgename;\r\n\r\n            Notification.saveCancelPromise(\r\n                getString('confirm', 'core'),\r\n                getString('reviewconfirm', 'core_badges', badgeName),\r\n                getString('enable', 'core'),\r\n                {triggerElement}\r\n            ).then(() => {\r\n                return enableBadge(badgeId, badgeName, reportElement);\r\n            }).catch(() => {\r\n                return;\r\n            });\r\n        }\r\n\r\n        const disableOption = event.target.closest(selectors.actions.disablebadge);\r\n        if (disableOption) {\r\n            event.preventDefault();\r\n            const badgeId = disableOption.dataset.badgeid;\r\n            const badgeName = disableOption.dataset.badgename;\r\n            const reportElement = event.target.closest(reportSelectors.regions.report);\r\n            disableBadge(badgeId, badgeName, reportElement);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Enable the badge.\r\n *\r\n * @param {Number} badgeId The id of the badge to enable.\r\n * @param {String} badgeName The name of the badge to enable.\r\n * @param {HTMLElement} reportElement the report element.\r\n */\r\nasync function enableBadge(badgeId, badgeName, reportElement) {\r\n    var request = {\r\n        methodname: 'core_badges_enable_badges',\r\n        args: {\r\n            badgeids: [badgeId],\r\n        }\r\n    };\r\n\r\n    const pendingPromise = new Pending('core_badges/enable');\r\n    try {\r\n        const result = await Ajax.call([request])[0];\r\n        if (reportElement) {\r\n            showEnableResultToast(badgeName, result);\r\n            // Report element is present, reload the table.\r\n            dispatchEvent(reportEvents.tableReload, {preservePagination: true}, reportElement);\r\n        } else {\r\n            // Report element is not present, add the parameters to the current page to display the message.\r\n            const awards = result.result?.pop().awards;\r\n            document.location = document.location.pathname + `?id=${badgeId}&awards=${awards}`;\r\n        }\r\n    } catch (error) {\r\n        Notification.exception(error);\r\n    }\r\n    pendingPromise.resolve();\r\n}\r\n\r\n/**\r\n * Show the result of enabling a badge.\r\n *\r\n * @param {String} badgeName The name of the badge to enable.\r\n * @param {Object} result The result of enabling a badge.\r\n */\r\nfunction showEnableResultToast(badgeName, result) {\r\n    if (result.result?.length > 0) {\r\n        addToast(getString('activatesuccess', 'core_badges', badgeName), {type: 'success'});\r\n        const awards = result.result?.pop().awards;\r\n        if (awards == 'cron') {\r\n            addToast(getString('awardoncron', 'core_badges', {badgename: badgeName}));\r\n        } else if (awards > 0) {\r\n            addToast(getString('numawardstat', 'core_badges', {badgename: badgeName, awards: awards}));\r\n        }\r\n    } else if (result.warnings.length > 0) {\r\n        addToast(result.warnings[0].message, {type: 'danger'});\r\n    }\r\n}\r\n\r\n/**\r\n * Disable the badge.\r\n *\r\n * @param {Number} badgeId The id of the badge to disable.\r\n * @param {String} badgeName The name of the badge to enable.\r\n * @param {HTMLElement} reportElement the report element.\r\n */\r\nasync function disableBadge(badgeId, badgeName, reportElement) {\r\n    var request = {\r\n        methodname: 'core_badges_disable_badges',\r\n        args: {\r\n            badgeids: [badgeId],\r\n        }\r\n    };\r\n\r\n    try {\r\n        const result = await Ajax.call([request])[0];\r\n        if (reportElement) {\r\n            // Report element is present, show the message in a toast and reload the table.\r\n            showDisableResultToast(badgeName, result);\r\n            dispatchEvent(reportEvents.tableReload, {preservePagination: true}, reportElement);\r\n        } else {\r\n            // Report element is not present, the page should be reloaded.\r\n            document.location = document.location.pathname + `?id=${badgeId}`;\r\n        }\r\n    } catch (error) {\r\n        Notification.exception(error);\r\n    }\r\n}\r\n\r\n/**\r\n * Show the result of disabling a badge.\r\n *\r\n * @param {String} badgeName The name of the badge to disable.\r\n * @param {Object} result The result of disabling a badge.\r\n */\r\nfunction showDisableResultToast(badgeName, result) {\r\n    if (result.result) {\r\n        addToast(\r\n            getString('deactivatesuccess', 'core_badges', badgeName),\r\n            {type: 'success'}\r\n        );\r\n    } else if (result.warnings.length > 0) {\r\n        addToast(\r\n            result.warnings[0].message,\r\n            {type: 'danger'}\r\n        );\r\n    }\r\n}\r\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireDefault","_selectors","_notification","_ajax","_pending","reportEvents","reportSelectors","_exports","init","prefetchStrings","registerEventListeners","document","addEventListener","event","enableOption","target","closest","selectors","actions","enablebadge","preventDefault","reportElement","regions","report","triggerElement","querySelector","badgeId","dataset","badgeid","badgeName","badgename","Notification","saveCancelPromise","getString","then","async","request","methodname","args","badgeids","pendingPromise","Pending","result","Ajax","length","addToast","type","awards","pop","warnings","message","showEnableResultToast","dispatchEvent","tableReload","preservePagination","location","pathname","error","exception","resolve","enableBadge","catch","disableOption","disablebadge","showDisableResultToast","disableBadge"],"mappings":"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"}