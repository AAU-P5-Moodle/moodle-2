{"version":3,"file":"group.min.js","sources":["../../src/comboboxsearch/group.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Allow the user to search for groups.\r\n *\r\n * @module    core_group/comboboxsearch/group\r\n * @copyright 2023 Mathew May <mathew.solutions>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport search_combobox from 'core/comboboxsearch/search_combobox';\r\nimport {groupFetch} from 'core_group/comboboxsearch/repository';\r\nimport {renderForPromise, replaceNodeContents} from 'core/templates';\r\nimport {debounce} from 'core/utils';\r\nimport Notification from 'core/notification';\r\n\r\nexport default class GroupSearch extends search_combobox {\r\n\r\n    courseID;\r\n    cmID;\r\n    bannedFilterFields = ['id', 'link', 'groupimageurl'];\r\n\r\n    /**\r\n     * Construct the class.\r\n     *\r\n     * @param {int|null} cmid ID of the course module initiating the group search (optional).\r\n     */\r\n    constructor(cmid = null) {\r\n        super();\r\n        this.selectors = {...this.selectors,\r\n            courseid: '[data-region=\"courseid\"]',\r\n            placeholder: '.groupsearchdropdown [data-region=\"searchplaceholder\"]',\r\n        };\r\n        const component = document.querySelector(this.componentSelector());\r\n        this.courseID = component.querySelector(this.selectors.courseid).dataset.courseid;\r\n        // Override the instance since the body is built outside the constructor for the combobox.\r\n        this.instance = component.querySelector(this.selectors.instance).dataset.instance;\r\n        this.cmID = cmid;\r\n\r\n        const searchValueElement = this.component.querySelector(`#${this.searchInput.dataset.inputElement}`);\r\n        searchValueElement.addEventListener('change', () => {\r\n            this.toggleDropdown(); // Otherwise the dropdown stays open when user choose an option using keyboard.\r\n\r\n            const valueElement = this.component.querySelector(`#${this.combobox.dataset.inputElement}`);\r\n            if (valueElement.value !== searchValueElement.value) {\r\n                valueElement.value = searchValueElement.value;\r\n                valueElement.dispatchEvent(new Event('change', {bubbles: true}));\r\n            }\r\n\r\n            searchValueElement.value = '';\r\n        });\r\n\r\n        this.$component.on('hide.bs.dropdown', () => {\r\n            this.searchInput.removeAttribute('aria-activedescendant');\r\n\r\n            const listbox = document.querySelector(`#${this.searchInput.getAttribute('aria-controls')}[role=\"listbox\"]`);\r\n            listbox.querySelectorAll('.active[role=\"option\"]').forEach(option => {\r\n                option.classList.remove('active');\r\n            });\r\n            listbox.scrollTop = 0;\r\n\r\n            // Use setTimeout to make sure the following code is executed after the click event is handled.\r\n            setTimeout(() => {\r\n                if (this.searchInput.value !== '') {\r\n                    this.searchInput.value = '';\r\n                    this.searchInput.dispatchEvent(new Event('input', {bubbles: true}));\r\n                }\r\n            });\r\n        });\r\n\r\n        this.renderDefault().catch(Notification.exception);\r\n    }\r\n\r\n    /**\r\n     * Initialise an instance of the class.\r\n     *\r\n     * @param {int|null} cmid ID of the course module initiating the group search (optional).\r\n     */\r\n    static init(cmid = null) {\r\n        return new GroupSearch(cmid);\r\n    }\r\n\r\n    /**\r\n     * The overall div that contains the searching widget.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    componentSelector() {\r\n        return '.group-search';\r\n    }\r\n\r\n    /**\r\n     * The dropdown div that contains the searching widget result space.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    dropdownSelector() {\r\n        return '.groupsearchdropdown';\r\n    }\r\n\r\n    /**\r\n     * Build the content then replace the node.\r\n     */\r\n    async renderDropdown() {\r\n        const {html, js} = await renderForPromise('core_group/comboboxsearch/resultset', {\r\n            groups: this.getMatchedResults(),\r\n            hasresults: this.getMatchedResults().length > 0,\r\n            instance: this.instance,\r\n            searchterm: this.getSearchTerm(),\r\n        });\r\n        replaceNodeContents(this.selectors.placeholder, html, js);\r\n        // Remove aria-activedescendant when the available options change.\r\n        this.searchInput.removeAttribute('aria-activedescendant');\r\n    }\r\n\r\n    /**\r\n     * Build the content then replace the node by default we want our form to exist.\r\n     */\r\n    async renderDefault() {\r\n        this.setMatchedResults(await this.filterDataset(await this.getDataset()));\r\n        this.filterMatchDataset();\r\n\r\n        await this.renderDropdown();\r\n\r\n        this.updateNodes();\r\n    }\r\n\r\n    /**\r\n     * Get the data we will be searching against in this component.\r\n     *\r\n     * @returns {Promise<*>}\r\n     */\r\n    async fetchDataset() {\r\n        return await groupFetch(this.courseID, this.cmID).then((r) => r.groups);\r\n    }\r\n\r\n    /**\r\n     * Dictate to the search component how and what we want to match upon.\r\n     *\r\n     * @param {Array} filterableData\r\n     * @returns {Array} The users that match the given criteria.\r\n     */\r\n    async filterDataset(filterableData) {\r\n        // Sometimes we just want to show everything.\r\n        if (this.getPreppedSearchTerm() === '') {\r\n            return filterableData;\r\n        }\r\n        return filterableData.filter((group) => Object.keys(group).some((key) => {\r\n            if (group[key] === \"\" || this.bannedFilterFields.includes(key)) {\r\n                return false;\r\n            }\r\n            return group[key].toString().toLowerCase().includes(this.getPreppedSearchTerm());\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\r\n     */\r\n    filterMatchDataset() {\r\n        this.setMatchedResults(\r\n            this.getMatchedResults().map((group) => {\r\n                return {\r\n                    id: group.id,\r\n                    name: group.name,\r\n                    groupimageurl: group.groupimageurl,\r\n                };\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * The handler for when a user interacts with the component.\r\n     *\r\n     * @param {MouseEvent} e The triggering event that we are working with.\r\n     */\r\n    async clickHandler(e) {\r\n        if (e.target.closest(this.selectors.clearSearch)) {\r\n            e.stopPropagation();\r\n            // Clear the entered search query in the search bar.\r\n            this.searchInput.value = '';\r\n            this.setSearchTerms(this.searchInput.value);\r\n            this.searchInput.focus();\r\n            this.clearSearchButton.classList.add('d-none');\r\n            // Display results.\r\n            await this.filterrenderpipe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The handler for when a user changes the value of the component (selects an option from the dropdown).\r\n     *\r\n     * @param {Event} e The change event.\r\n     */\r\n    changeHandler(e) {\r\n        window.location = this.selectOneLink(e.target.value);\r\n    }\r\n\r\n    /**\r\n     * Override the input event listener for the text input area.\r\n     */\r\n    registerInputHandlers() {\r\n        // Register & handle the text input.\r\n        this.searchInput.addEventListener('input', debounce(async() => {\r\n            this.setSearchTerms(this.searchInput.value);\r\n            // We can also require a set amount of input before search.\r\n            if (this.getSearchTerm() === '') {\r\n                // Hide the \"clear\" search button in the search bar.\r\n                this.clearSearchButton.classList.add('d-none');\r\n            } else {\r\n                // Display the \"clear\" search button in the search bar.\r\n                this.clearSearchButton.classList.remove('d-none');\r\n            }\r\n            // User has given something for us to filter against.\r\n            await this.filterrenderpipe();\r\n        }, 300));\r\n    }\r\n\r\n    /**\r\n     * Build up the view all link that is dedicated to a particular result.\r\n     * We will call this function when a user interacts with the combobox to redirect them to show their results in the page.\r\n     *\r\n     * @param {Number} groupID The ID of the group selected.\r\n     */\r\n    selectOneLink(groupID) {\r\n        throw new Error(`selectOneLink(${groupID}) must be implemented in ${this.constructor.name}`);\r\n    }\r\n}\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_search_combobox","_notification","GroupSearch","search_combobox","courseID","cmID","bannedFilterFields","constructor","cmid","arguments","length","undefined","super","this","selectors","courseid","placeholder","component","document","querySelector","componentSelector","dataset","instance","searchValueElement","searchInput","inputElement","addEventListener","toggleDropdown","valueElement","combobox","value","dispatchEvent","Event","bubbles","$component","on","removeAttribute","listbox","getAttribute","querySelectorAll","forEach","option","classList","remove","scrollTop","setTimeout","renderDefault","catch","Notification","exception","init","dropdownSelector","renderDropdown","html","js","renderForPromise","groups","getMatchedResults","hasresults","searchterm","getSearchTerm","replaceNodeContents","setMatchedResults","filterDataset","getDataset","filterMatchDataset","updateNodes","fetchDataset","groupFetch","then","r","filterableData","getPreppedSearchTerm","filter","group","Object","keys","some","key","includes","toString","toLowerCase","map","id","name","groupimageurl","clickHandler","target","closest","clearSearch","stopPropagation","setSearchTerms","focus","clearSearchButton","add","filterrenderpipe","changeHandler","window","location","selectOneLink","registerInputHandlers","debounce","async","groupID","Error","_exports"],"mappings":"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"}