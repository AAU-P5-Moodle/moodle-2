{"version":3,"file":"grouppicker.min.js","sources":["../src/grouppicker.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n/**\r\n * @module     core_group/groupPicker\r\n * @copyright  2022 Matthew Hilton <matthewhilton@catalyst-au.net>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n/**\r\n * Class used for interfacing with the group select picker.\r\n *\r\n * @class core_group/GroupPicker\r\n */\r\nexport default class GroupPicker {\r\n    /**\r\n     * Creates the group picker class and finds the corresponding DOM element.\r\n     *\r\n     * @param {String} elementId The DOM element id of the <select> input\r\n     * @throws Error if the element was not found.\r\n     */\r\n    constructor(elementId = \"groups\") {\r\n        const pickerDomElement = document.getElementById(elementId);\r\n\r\n        if (!pickerDomElement) {\r\n            throw new Error(\"Groups picker was not found.\");\r\n        }\r\n\r\n        this.element = pickerDomElement;\r\n    }\r\n\r\n    /**\r\n     * Returns the DOM element this class is linked to.\r\n     *\r\n     * @returns {HTMLElement} The DOM element\r\n     */\r\n    getDomElement() {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Returns the selected group values.\r\n     *\r\n     * @returns {Number[]} The group IDs that are currently selected.\r\n     */\r\n    getSelectedValues() {\r\n        const selectedOptionElements = Array.from(this.element.querySelectorAll(\"option:checked\"));\r\n        const selectedGroups = selectedOptionElements.map(el => parseInt(el.value));\r\n\r\n        return selectedGroups;\r\n    }\r\n}\r\n"],"names":["_exports","default","constructor","elementId","arguments","length","undefined","pickerDomElement","document","getElementById","Error","this","element","getDomElement","getSelectedValues","Array","from","querySelectorAll","map","el","parseInt","value"],"mappings":"gJA8DC,OAAAA,SAAAC;;;;;;AArCc,MAOXC,WAAAA,GAAkC,IAAtBC,UAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,SACpB,MAAMG,iBAAmBC,SAASC,eAAeN,WAEjD,IAAKI,iBACD,MAAM,IAAIG,MAAM,gCAGpBC,KAAKC,QAAUL,gBACnB,CAOAM,aAAAA,GACI,OAAOF,KAAKC,OAChB,CAOAE,iBAAAA,GAII,OAH+BC,MAAMC,KAAKL,KAAKC,QAAQK,iBAAiB,mBAC1BC,KAAIC,IAAMC,SAASD,GAAGE,QAGxE,GACHrB,SAAAC,OAAA"}