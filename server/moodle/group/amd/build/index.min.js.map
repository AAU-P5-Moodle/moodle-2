{"version":3,"file":"index.min.js","sources":["../src/index.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n/**\r\n * @module     core_group/index\r\n * @copyright  2022 Matthew Hilton <matthewhilton@catalyst-au.net>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport GroupPicker from \"./grouppicker\";\r\n\r\nconst groupPicker = new GroupPicker();\r\n\r\n/**\r\n * Initialise page.\r\n */\r\nexport const init = () => {\r\n    // Init event listeners.\r\n    groupPicker.getDomElement().addEventListener(\"change\", updateBulkActionButtons);\r\n\r\n    // Call initially to set initial button state.\r\n    updateBulkActionButtons();\r\n};\r\n\r\n/**\r\n * Updates the bulk action buttons depending on specific conditions.\r\n */\r\nexport const updateBulkActionButtons = () => {\r\n    const groupsSelected = groupPicker.getSelectedValues();\r\n    const aGroupIsSelected = groupsSelected.length !== 0;\r\n\r\n    // Collate the conditions where each button is enabled/disabled.\r\n    const bulkActionsEnabledStatuses = {\r\n        'enablemessaging': aGroupIsSelected,\r\n        'disablemessaging': aGroupIsSelected\r\n    };\r\n\r\n    // Update the status of each button.\r\n    Object.entries(bulkActionsEnabledStatuses).map(([buttonId, enabled]) => setElementEnabled(buttonId, enabled));\r\n};\r\n\r\n/**\r\n * Adds or removes the given element's disabled attribute.\r\n * @param {string} domElementId ID of the dom element (without the #)\r\n * @param {bool} enabled If false, the disable attribute is applied, else it is removed.\r\n */\r\nexport const setElementEnabled = (domElementId, enabled) => {\r\n    const element = document.getElementById(domElementId);\r\n\r\n    if (!element) {\r\n        // If there is no element, we do nothing.\r\n        // The element could be purposefully hidden or removed.\r\n        return;\r\n    }\r\n\r\n    if (!enabled) {\r\n        element.setAttribute('disabled', 'disabled');\r\n    } else {\r\n        element.removeAttribute('disabled');\r\n    }\r\n};\r\n"],"names":["e","groupPicker","_grouppicker","__esModule","default","GroupPicker","_exports","init","getDomElement","addEventListener","updateBulkActionButtons","aGroupIsSelected","getSelectedValues","length","bulkActionsEnabledStatuses","enablemessaging","disablemessaging","Object","entries","map","_ref","buttonId","enabled","setElementEnabled","domElementId","element","document","getElementById","removeAttribute","setAttribute"],"mappings":"uFAoBwC,IAAAA;;;;;8IAExC,MAAMC,YAAc,IAFpBC,cAAwCF,EAAxCE,eAAwCF,EAAAG,WAAAH,EAAAI,CAAAA,QAAAJ,IAEhBK,QAWtBC,SAAAC,KANkBA,KAEhBN,YAAYO,gBAAgBC,iBAAiB,SAAUC,yBAGvDA,yBAAyB,EAMtB,MAAMA,wBAA0BA,KACnC,MACMC,iBAA6C,IAD5BV,YAAYW,oBACKC,OAGlCC,2BAA6B,CAC/BC,gBAAmBJ,iBACnBK,iBAAoBL,kBAIxBM,OAAOC,QAAQJ,4BAA4BK,KAAIC,OAAA,IAAEC,SAAUC,SAAQF,KAAA,OAAKG,kBAAkBF,SAAUC,QAAQ,GAAC,EAC/GhB,SAAAI,wBAAAA,wBAOK,MAAMa,kBAAoBA,CAACC,aAAcF,WAC5C,MAAMG,QAAUC,SAASC,eAAeH,cAEnCC,UAMAH,QAGDG,QAAQG,gBAAgB,YAFxBH,QAAQI,aAAa,WAAY,YAGrC,EACFvB,SAAAiB,kBAAAA,iBAAA"}