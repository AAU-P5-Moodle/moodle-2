{"version":3,"file":"notification_processor_settings.min.js","sources":["../src/notification_processor_settings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Load the settings for a message processor.\r\n *\r\n * @module     core_message/notification_processor_settings\r\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n\r\nimport $ from 'jquery';\r\nimport * as Ajax from 'core/ajax';\r\nimport * as Str from 'core/str';\r\nimport * as Notification from 'core/notification';\r\nimport * as CustomEvents from 'core/custom_interaction_events';\r\nimport Modal from 'core/modal';\r\nimport * as Fragment from 'core/fragment';\r\n\r\nconst SELECTORS = {\r\n    SAVE_BUTTON: '[data-action=\"save\"]',\r\n    CANCEL_BUTTON: '[data-action=\"cancel\"]',\r\n    PROCESSOR: '[data-processor-name]',\r\n    PREFERENCE_ROW: '[data-region=\"preference-row\"]',\r\n};\r\n\r\nexport default class NotificationProcessorSettings extends Modal {\r\n    static TYPE = 'core_message-notification_processor_settings';\r\n    static TEMPLATE = 'core/modal_save_cancel';\r\n\r\n    /**\r\n     * Constructor for the Modal.\r\n     *\r\n     * @class\r\n     * @param {object} root The root jQuery element for the modal.\r\n     */\r\n    constructor(root) {\r\n        super(root);\r\n        this.name = null;\r\n        this.userId = null;\r\n        this.contextId = null;\r\n        this.element = null;\r\n        this.saveButton = this.getFooter().find(SELECTORS.SAVE_BUTTON);\r\n        this.cancelButton = this.getFooter().find(SELECTORS.CANCEL_BUTTON);\r\n    }\r\n\r\n    /**\r\n     * Set the userid to the given value.\r\n     *\r\n     * @method setUserId\r\n     * @param {int} id The notification userid\r\n     */\r\n    setUserId(id) {\r\n        this.userId = id;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the current userid, if any.\r\n     *\r\n     * @method getUserId\r\n     * @return {int|null} The notification userid\r\n     */\r\n    getUserId() {\r\n        return this.userId;\r\n    }\r\n\r\n    /**\r\n     * Set the object to the given value.\r\n     *\r\n     * @method setElement\r\n     * @param {object} element The notification node element.\r\n     */\r\n    setElement(element) {\r\n        this.element = element;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the current element, if any.\r\n     *\r\n     * @method getElement\r\n     * @return {object|null} The notification node element.\r\n     */\r\n    getElement() {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Set the name to the given value.\r\n     *\r\n     * @method setName\r\n     * @param {string} name The notification name.\r\n     */\r\n    setName(name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the current name, if any.\r\n     *\r\n     * @method getName\r\n     * @return {string|null} The notification name.\r\n     */\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    /**\r\n     * Set the context id to the given value.\r\n     *\r\n     * @method setContextId\r\n     * @param {Number} id The notification context id\r\n     */\r\n    setContextId(id) {\r\n        this.contextId = id;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the current context id, if any.\r\n     *\r\n     * @method getContextId\r\n     * @return {Number|null} The notification context id\r\n     */\r\n    getContextId() {\r\n        return this.contextId;\r\n    }\r\n\r\n    /**\r\n     * Get the form element from the modal.\r\n     *\r\n     * @method getForm\r\n     * @return {object}\r\n     */\r\n    getForm() {\r\n        return this.getBody().find('form');\r\n    }\r\n\r\n    /**\r\n     * Disable the buttons in the footer.\r\n     *\r\n     * @method disableButtons\r\n     */\r\n    disableButtons() {\r\n        this.saveButton.prop('disabled', true);\r\n        this.cancelButton.prop('disabled', true);\r\n    }\r\n\r\n    /**\r\n     * Enable the buttons in the footer.\r\n     *\r\n     * @method enableButtons\r\n     */\r\n    enableButtons() {\r\n        this.saveButton.prop('disabled', false);\r\n        this.cancelButton.prop('disabled', false);\r\n    }\r\n\r\n    /**\r\n     * Load the title for the modal to the appropriate value\r\n     * depending on message outputs.\r\n     *\r\n     * @method loadTitleContent\r\n     * @return {object} A promise resolved with the new title text.\r\n     */\r\n    loadTitleContent() {\r\n        this.titlePromise = Str.get_string('processorsettings', 'message');\r\n        this.setTitle(this.titlePromise);\r\n\r\n        return this.titlePromise;\r\n    }\r\n\r\n    /**\r\n     * Load the body for the modal to the appropriate value\r\n     * depending on message outputs.\r\n     *\r\n     * @method loadBodyContent\r\n     * @return {object} A promise resolved with the fragment html and js from\r\n     */\r\n    loadBodyContent() {\r\n        this.disableButtons();\r\n\r\n        const args = {\r\n            userid: this.getUserId(),\r\n            type: this.getName(),\r\n        };\r\n\r\n        this.bodyPromise = Fragment.loadFragment('message', 'processor_settings', this.getContextId(), args);\r\n        this.setBody(this.bodyPromise);\r\n\r\n        this.bodyPromise.then(() => {\r\n            this.enableButtons();\r\n            return;\r\n        })\r\n        .catch(Notification.exception);\r\n\r\n        return this.bodyPromise;\r\n    }\r\n\r\n    /**\r\n     * Load both the title and body content.\r\n     *\r\n     * @method loadAllContent\r\n     * @return {object} promise\r\n     */\r\n    loadAllContent() {\r\n        return $.when(this.loadTitleContent(), this.loadBodyContent());\r\n    }\r\n\r\n    /**\r\n     * Load the modal content before showing it. This\r\n     * is to allow us to re-use the same modal for creating and\r\n     * editing different message outputs within the page.\r\n     *\r\n     * @method show\r\n     */\r\n    show() {\r\n        this.loadAllContent();\r\n        super.show(this);\r\n    }\r\n\r\n    /**\r\n     * Clear the notification from the modal when it's closed so\r\n     * that it is loaded fresh next time it's displayed.\r\n     *\r\n     * @method hide\r\n     */\r\n    hide() {\r\n        super.hide(this);\r\n        this.setContextId(null);\r\n        this.setName(null);\r\n        this.setUserId(null);\r\n    }\r\n\r\n    /**\r\n     * Checks if the processor has been configured. If so then remove the unconfigured\r\n     * status from the interface.\r\n     *\r\n     * @method updateConfiguredStatus\r\n     * @return {Promise|boolean}\r\n     */\r\n    updateConfiguredStatus() {\r\n        const processorHeader = $(this.getElement()).closest(SELECTORS.PROCESSOR);\r\n\r\n        if (!processorHeader.hasClass('unconfigured')) {\r\n            return false;\r\n        }\r\n\r\n        const processorName = processorHeader.attr('data-processor-name');\r\n        const request = {\r\n            methodname: 'core_message_get_message_processor',\r\n            args: {\r\n                name: processorName,\r\n                userid: this.userId,\r\n            },\r\n        };\r\n\r\n        return Ajax.call([request])[0]\r\n            .then((result) => {\r\n                // Check if the user has figured configuring the processor.\r\n                if (result.userconfigured) {\r\n                    // If they have then we can enable the settings.\r\n                    const notifications = $(SELECTORS.PREFERENCE_ROW + ' [data-processor-name=\"' + processorName + '\"]');\r\n                    processorHeader.removeClass('unconfigured');\r\n                    notifications.removeClass('disabled');\r\n                }\r\n                return result;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Set up all of the event handling for the modal.\r\n     *\r\n     * @method registerEventListeners\r\n     */\r\n    registerEventListeners() {\r\n        // Apply parent event listeners.\r\n        super.registerEventListeners(this);\r\n\r\n        // When the user clicks the save button we trigger the form submission.\r\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.SAVE_BUTTON, (e, data) => {\r\n            this.getForm().submit();\r\n            data.originalEvent.preventDefault();\r\n        });\r\n\r\n        this.getModal().on('mpp:formsubmitted', (e) => {\r\n            this.hide();\r\n            this.updateConfiguredStatus();\r\n            e.stopPropagation();\r\n        });\r\n\r\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.CANCEL_BUTTON, (e, data) => {\r\n            this.hide();\r\n            data.originalEvent.preventDefault();\r\n            e.stopPropagation();\r\n        });\r\n    }\r\n}\r\n\r\nNotificationProcessorSettings.registerModalType();\r\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireDefault","_jquery","Ajax","Str","Notification","CustomEvents","_modal","Fragment","SELECTORS","NotificationProcessorSettings","Modal","static","constructor","root","super","this","name","userId","contextId","element","saveButton","getFooter","find","cancelButton","setUserId","id","getUserId","setElement","getElement","setName","getName","setContextId","getContextId","getForm","getBody","disableButtons","prop","enableButtons","loadTitleContent","titlePromise","get_string","setTitle","loadBodyContent","args","userid","type","bodyPromise","loadFragment","setBody","then","catch","exception","loadAllContent","$","when","show","hide","updateConfiguredStatus","processorHeader","closest","hasClass","processorName","attr","request","methodname","result","userconfigured","notifications","removeClass","registerEventListeners","getModal","on","events","activate","data","submit","originalEvent","preventDefault","stopPropagation","_exports","registerModalType"],"mappings":"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"}