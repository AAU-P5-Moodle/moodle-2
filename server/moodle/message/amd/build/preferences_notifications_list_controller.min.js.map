{"version":3,"file":"preferences_notifications_list_controller.min.js","sources":["../src/preferences_notifications_list_controller.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Controls the preferences for the list of notification types on the\r\n * message preference page\r\n *\r\n * @module     core_message/preferences_notifications_list_controller\r\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery',\r\n        'core/ajax',\r\n        'core/notification',\r\n        'core/custom_interaction_events',\r\n        'core_message/notification_preference',\r\n        'core_message/notification_processor_settings',\r\n        ],\r\n        function(\r\n          $,\r\n          Ajax,\r\n          Notification,\r\n          CustomEvents,\r\n          NotificationPreference,\r\n          NotificationProcessorSettings,\r\n        ) {\r\n\r\n    var SELECTORS = {\r\n        DISABLE_NOTIFICATIONS: '[data-region=\"disable-notification-container\"] [data-disable-notifications]',\r\n        DISABLE_NOTIFICATIONS_CONTAINER: '[data-region=\"disable-notification-container\"]',\r\n        PREFERENCE: '.preference-state',\r\n        PREFERENCE_ROW: '[data-region=\"preference-row\"]',\r\n        PREFERENCE_INPUT: '.preference-state input',\r\n        PROCESSOR_SETTING: '[data-processor-setting]',\r\n    };\r\n\r\n    /**\r\n     * Constructor for the PreferencesController.\r\n     *\r\n     * @class\r\n     * @param {object} element jQuery object root element of the preference\r\n     */\r\n    var PreferencesController = function(element) {\r\n        this.root = $(element);\r\n        this.userId = this.root.attr('data-user-id');\r\n\r\n        this.registerEventListeners();\r\n    };\r\n\r\n    /**\r\n     * Check if the preferences are all disabled.\r\n     *\r\n     * @method isDisabled\r\n     * @return {bool}\r\n     */\r\n    PreferencesController.prototype.isDisabled = function() {\r\n        return this.root.hasClass('disabled');\r\n    };\r\n\r\n    /**\r\n     * Disable all of the preferences.\r\n     *\r\n     * @method setDisabled\r\n     */\r\n    PreferencesController.prototype.setDisabled = function() {\r\n        this.root.addClass('disabled');\r\n        this.root.find(SELECTORS.PREFERENCE_INPUT).prop('disabled', true);\r\n    };\r\n\r\n    /**\r\n     * Enable all of the preferences.\r\n     *\r\n     * @method setEnabled\r\n     */\r\n    PreferencesController.prototype.setEnabled = function() {\r\n        this.root.removeClass('disabled');\r\n        this.root.find(SELECTORS.PREFERENCE_INPUT).prop('disabled', false);\r\n    };\r\n\r\n    /**\r\n     * Update the disable all notifications user property in the DOM and\r\n     * send a request to update on the server.\r\n     *\r\n     * @method toggleDisableAllStatus\r\n     * @return {Promise}\r\n     */\r\n    PreferencesController.prototype.toggleDisableAllStatus = function() {\r\n        var checkbox = $(SELECTORS.DISABLE_NOTIFICATIONS);\r\n        var container = $(SELECTORS.DISABLE_NOTIFICATIONS_CONTAINER);\r\n        var ischecked = checkbox.prop('checked');\r\n\r\n        if (container.hasClass('loading')) {\r\n            return $.Deferred().resolve();\r\n        }\r\n\r\n        container.addClass('loading');\r\n\r\n        var request = {\r\n            methodname: 'core_user_update_user_preferences',\r\n            args: {\r\n                userid: this.userId,\r\n                emailstop: ischecked ? 1 : 0,\r\n            }\r\n        };\r\n\r\n        return Ajax.call([request])[0]\r\n            .done(function() {\r\n                if (ischecked) {\r\n                    this.setDisabled();\r\n                } else {\r\n                    this.setEnabled();\r\n                }\r\n            }.bind(this))\r\n            .always(function() {\r\n                container.removeClass('loading');\r\n            })\r\n            .fail(Notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Set up all of the event listeners for the PreferencesController.\r\n     *\r\n     * @method registerEventListeners\r\n     */\r\n    PreferencesController.prototype.registerEventListeners = function() {\r\n        var disabledNotificationsElement = $(SELECTORS.DISABLE_NOTIFICATIONS);\r\n\r\n        CustomEvents.define(this.root, [\r\n            CustomEvents.events.activate,\r\n        ]);\r\n\r\n        this.root.on('change', function(e) {\r\n            if (!this.isDisabled()) {\r\n                var preferenceElement = $(e.target).closest(SELECTORS.PREFERENCE);\r\n                var preferenceRow = $(e.target).closest(SELECTORS.PREFERENCE_ROW);\r\n                var preference = new NotificationPreference(preferenceRow, this.userId);\r\n\r\n                preferenceElement.addClass('loading');\r\n                preference.save().always(function() {\r\n                    preferenceElement.removeClass('loading');\r\n                });\r\n            }\r\n        }.bind(this));\r\n\r\n        var eventFormPromise = NotificationProcessorSettings.create({});\r\n\r\n        this.root.on(CustomEvents.events.activate, SELECTORS.PROCESSOR_SETTING, function(e, data) {\r\n            var element = $(e.target).closest(SELECTORS.PROCESSOR_SETTING);\r\n\r\n            data.originalEvent.preventDefault();\r\n\r\n            eventFormPromise.then(function(modal) {\r\n                // Configure modal with element settings.\r\n                modal.setUserId($(element).attr('data-user-id'));\r\n                modal.setName($(element).attr('data-name'));\r\n                modal.setContextId($(element).attr('data-context-id'));\r\n                modal.setElement(element);\r\n                modal.show();\r\n\r\n                e.stopImmediatePropagation();\r\n                return;\r\n            }).catch(Notification.exception);\r\n        });\r\n\r\n        CustomEvents.define(disabledNotificationsElement, [\r\n            CustomEvents.events.activate\r\n        ]);\r\n\r\n        disabledNotificationsElement.on(CustomEvents.events.activate, function() {\r\n            this.toggleDisableAllStatus();\r\n        }.bind(this));\r\n    };\r\n\r\n    return PreferencesController;\r\n});\r\n"],"names":["define","$","Ajax","Notification","CustomEvents","NotificationPreference","NotificationProcessorSettings","SELECTORS","PreferencesController","element","this","root","userId","attr","registerEventListeners","prototype","isDisabled","hasClass","setDisabled","addClass","find","prop","setEnabled","removeClass","toggleDisableAllStatus","checkbox","container","ischecked","Deferred","resolve","request","methodname","args","userid","emailstop","call","done","bind","always","fail","exception","disabledNotificationsElement","events","activate","on","e","preferenceElement","target","closest","preferenceRow","preference","save","eventFormPromise","create","data","originalEvent","preventDefault","then","modal","setUserId","setName","setContextId","setElement","show","stopImmediatePropagation","catch"],"mappings":";;;;;;;;AAuBAA,OAAM,yDAAC,CAAC,SACA,YACA,oBACA,iCACA,uCACA,iDAEA,SACEC,EACAC,KACAC,aACAC,aACAC,uBACAC,+BAGN,IAAIC,gCACuB,8EADvBA,0CAEiC,iDAFjCA,qBAGY,oBAHZA,yBAIgB,iCAJhBA,2BAKkB,0BALlBA,4BAMmB,2BASnBC,sBAAwB,SAASC,SACjCC,KAAKC,KAAOV,EAAEQ,SACdC,KAAKE,OAASF,KAAKC,KAAKE,KAAK,gBAE7BH,KAAKI,0BA+HT,OAtHAN,sBAAsBO,UAAUC,WAAa,WACzC,OAAON,KAAKC,KAAKM,SAAS,aAQ9BT,sBAAsBO,UAAUG,YAAc,WAC1CR,KAAKC,KAAKQ,SAAS,YACnBT,KAAKC,KAAKS,KAAKb,4BAA4Bc,KAAK,YAAY,IAQhEb,sBAAsBO,UAAUO,WAAa,WACzCZ,KAAKC,KAAKY,YAAY,YACtBb,KAAKC,KAAKS,KAAKb,4BAA4Bc,KAAK,YAAY,IAUhEb,sBAAsBO,UAAUS,uBAAyB,WACrD,IAAIC,SAAWxB,EAAEM,iCACbmB,UAAYzB,EAAEM,2CACdoB,UAAYF,SAASJ,KAAK,WAE9B,GAAIK,UAAUT,SAAS,WACnB,OAAOhB,EAAE2B,WAAWC,UAGxBH,UAAUP,SAAS,WAEnB,IAAIW,QAAU,CACVC,WAAY,oCACZC,KAAM,CACFC,OAAQvB,KAAKE,OACbsB,UAAWP,UAAY,EAAI,IAInC,OAAOzB,KAAKiC,KAAK,CAACL,UAAU,GACvBM,KAAK,WACET,UACAjB,KAAKQ,cAELR,KAAKY,YAEZ,EAACe,KAAK3B,OACN4B,QAAO,WACJZ,UAAUH,YAAY,UACzB,IACAgB,KAAKpC,aAAaqC,YAQ3BhC,sBAAsBO,UAAUD,uBAAyB,WACrD,IAAI2B,6BAA+BxC,EAAEM,iCAErCH,aAAaJ,OAAOU,KAAKC,KAAM,CAC3BP,aAAasC,OAAOC,WAGxBjC,KAAKC,KAAKiC,GAAG,SAAU,SAASC,GAC5B,IAAKnC,KAAKM,aAAc,CACpB,IAAI8B,kBAAoB7C,EAAE4C,EAAEE,QAAQC,QAAQzC,sBACxC0C,cAAgBhD,EAAE4C,EAAEE,QAAQC,QAAQzC,0BACpC2C,WAAa,IAAI7C,uBAAuB4C,cAAevC,KAAKE,QAEhEkC,kBAAkB3B,SAAS,WAC3B+B,WAAWC,OAAOb,QAAO,WACrBQ,kBAAkBvB,YAAY,UAClC,GACJ,CACJ,EAAEc,KAAK3B,OAEP,IAAI0C,iBAAmB9C,8BAA8B+C,OAAO,CAAE,GAE9D3C,KAAKC,KAAKiC,GAAGxC,aAAasC,OAAOC,SAAUpC,6BAA6B,SAASsC,EAAGS,MAChF,IAAI7C,QAAUR,EAAE4C,EAAEE,QAAQC,QAAQzC,6BAElC+C,KAAKC,cAAcC,iBAEnBJ,iBAAiBK,MAAK,SAASC,OAE3BA,MAAMC,UAAU1D,EAAEQ,SAASI,KAAK,iBAChC6C,MAAME,QAAQ3D,EAAEQ,SAASI,KAAK,cAC9B6C,MAAMG,aAAa5D,EAAEQ,SAASI,KAAK,oBACnC6C,MAAMI,WAAWrD,SACjBiD,MAAMK,OAENlB,EAAEmB,0BAEL,IAAEC,MAAM9D,aAAaqC,UAC1B,IAEApC,aAAaJ,OAAOyC,6BAA8B,CAC9CrC,aAAasC,OAAOC,WAGxBF,6BAA6BG,GAAGxC,aAAasC,OAAOC,SAAU,WAC1DjC,KAAKc,wBACT,EAAEa,KAAK3B,QAGJF,qBACX"}