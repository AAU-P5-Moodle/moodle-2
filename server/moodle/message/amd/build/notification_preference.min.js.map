{"version":3,"file":"notification_preference.min.js","sources":["../src/notification_preference.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Controls the preference for an individual notification type on the\r\n * message preference page.\r\n *\r\n * @module     core_message/notification_preference\r\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/ajax', 'core/notification', 'core_message/notification_processor'],\r\n        function($, Ajax, Notification, NotificationProcessor) {\r\n\r\n    const SELECTORS = {\r\n        PROCESSOR: '[data-processor-name]',\r\n        STATE_INPUTS: '[data-state] input',\r\n    };\r\n\r\n    /**\r\n     * Constructor for the Preference.\r\n     *\r\n     * @class\r\n     * @param {object} element jQuery object root element of the preference\r\n     * @param {int} userId The current user id\r\n     */\r\n    const NotificationPreference = function(element, userId) {\r\n        this.root = $(element);\r\n        this.userId = userId;\r\n    };\r\n\r\n    /**\r\n     * Get the unique prefix key that identifies this user preference.\r\n     *\r\n     * @method getPreferenceKey\r\n     * @return {string}\r\n     */\r\n    NotificationPreference.prototype.getPreferenceKey = function() {\r\n        return this.root.attr('data-preference-key');\r\n    };\r\n\r\n    /**\r\n     * Get the unique key for the enabled preference.\r\n     *\r\n     * @method getEnabledPreferenceKey\r\n     * @return {string}\r\n     */\r\n    NotificationPreference.prototype.getEnabledPreferenceKey = function() {\r\n        return this.getPreferenceKey() + '_enabled';\r\n    };\r\n\r\n    /**\r\n     * Get the list of Processors available for this preference.\r\n     *\r\n     * @method getProcessors\r\n     * @return {array}\r\n     */\r\n    NotificationPreference.prototype.getProcessors = function() {\r\n        return this.root.find(SELECTORS.PROCESSOR).map(function(index, element) {\r\n            return new NotificationProcessor($(element));\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Flag the preference as loading.\r\n     *\r\n     * @method startLoading\r\n     */\r\n    NotificationPreference.prototype.startLoading = function() {\r\n        this.root.addClass('loading');\r\n        this.root.find(SELECTORS.STATE_INPUTS).prop('disabled', true);\r\n    };\r\n\r\n    /**\r\n     * Remove the loading flag for this preference.\r\n     *\r\n     * @method stopLoading\r\n     */\r\n    NotificationPreference.prototype.stopLoading = function() {\r\n        this.root.removeClass('loading');\r\n        this.root.find(SELECTORS.STATE_INPUTS).prop('disabled', false);\r\n    };\r\n\r\n    /**\r\n     * Check if the preference is loading.\r\n     *\r\n     * @method isLoading\r\n     * @return {Boolean}\r\n     */\r\n    NotificationPreference.prototype.isLoading = function() {\r\n        return this.root.hasClass('loading');\r\n    };\r\n\r\n    /**\r\n     * Persist the current state of the processors for this preference.\r\n     *\r\n     * @method save\r\n     * @return {object} jQuery promise\r\n     */\r\n    NotificationPreference.prototype.save = function() {\r\n        if (this.isLoading()) {\r\n            return $.Deferred().resolve();\r\n        }\r\n\r\n        this.startLoading();\r\n\r\n        let enabledValue = '';\r\n\r\n        this.getProcessors().each(function(index, processor) {\r\n            if (processor.isEnabled()) {\r\n                if (enabledValue === '') {\r\n                    enabledValue = processor.getName();\r\n                } else {\r\n                    enabledValue += ',' + processor.getName();\r\n                }\r\n            }\r\n        });\r\n\r\n        if (enabledValue === '') {\r\n            enabledValue = 'none';\r\n        }\r\n\r\n        const args = {\r\n            userid: this.userId,\r\n            preferences: [\r\n                {\r\n                    type: this.getEnabledPreferenceKey(),\r\n                    value: enabledValue,\r\n                }\r\n            ],\r\n        };\r\n\r\n        const request = {\r\n            methodname: 'core_user_update_user_preferences',\r\n            args: args,\r\n        };\r\n\r\n        return Ajax.call([request])[0]\r\n            .fail(Notification.exception)\r\n            .always(function() {\r\n                this.stopLoading();\r\n            }.bind(this));\r\n    };\r\n\r\n    return NotificationPreference;\r\n});\r\n"],"names":["define","$","Ajax","Notification","NotificationProcessor","SELECTORS","NotificationPreference","element","userId","this","root","prototype","getPreferenceKey","attr","getEnabledPreferenceKey","getProcessors","find","map","index","startLoading","addClass","prop","stopLoading","removeClass","isLoading","hasClass","save","Deferred","resolve","enabledValue","each","processor","isEnabled","getName","request","methodname","args","userid","preferences","type","value","call","fail","exception","always","bind"],"mappings":";;;;;;;;AAuBAA,8CAAO,CAAC,SAAU,YAAa,oBAAqB,wCAC5C,SAASC,EAAGC,KAAMC,aAAcC,uBAEpC,MAAMC,oBACS,wBADTA,uBAEY,qBAUZC,uBAAyB,SAASC,QAASC,QAC7CC,KAAKC,KAAOT,EAAEM,SACdE,KAAKD,OAASA,QAoHlB,OA3GAF,uBAAuBK,UAAUC,iBAAmB,WAChD,OAAOH,KAAKC,KAAKG,KAAK,wBAS1BP,uBAAuBK,UAAUG,wBAA0B,WACvD,OAAOL,KAAKG,mBAAqB,YASrCN,uBAAuBK,UAAUI,cAAgB,WAC7C,OAAON,KAAKC,KAAKM,KAAKX,qBAAqBY,KAAI,SAASC,MAAOX,SAC3D,OAAO,IAAIH,sBAAsBH,EAAEM,SACvC,KAQJD,uBAAuBK,UAAUQ,aAAe,WAC5CV,KAAKC,KAAKU,SAAS,WACnBX,KAAKC,KAAKM,KAAKX,wBAAwBgB,KAAK,YAAY,IAQ5Df,uBAAuBK,UAAUW,YAAc,WAC3Cb,KAAKC,KAAKa,YAAY,WACtBd,KAAKC,KAAKM,KAAKX,wBAAwBgB,KAAK,YAAY,IAS5Df,uBAAuBK,UAAUa,UAAY,WACzC,OAAOf,KAAKC,KAAKe,SAAS,YAS9BnB,uBAAuBK,UAAUe,KAAO,WACpC,GAAIjB,KAAKe,YACL,OAAOvB,EAAE0B,WAAWC,UAGxBnB,KAAKU,eAEL,IAAIU,aAAe,GAEnBpB,KAAKM,gBAAgBe,MAAK,SAASZ,MAAOa,WAClCA,UAAUC,cACW,KAAjBH,aACAA,aAAeE,UAAUE,UAEzBJ,cAAgB,IAAME,UAAUE,UAG5C,IAEqB,KAAjBJ,eACAA,aAAe,QAGnB,MAUMK,QAAU,CACZC,WAAY,oCACZC,KAZS,CACTC,OAAQ5B,KAAKD,OACb8B,YAAa,CACT,CACIC,KAAM9B,KAAKK,0BACX0B,MAAOX,iBAUnB,OAAO3B,KAAKuC,KAAK,CAACP,UAAU,GACvBQ,KAAKvC,aAAawC,WAClBC,OAAO,WACJnC,KAAKa,aACT,EAAEuB,KAAKpC,QAGRH,sBACX"}