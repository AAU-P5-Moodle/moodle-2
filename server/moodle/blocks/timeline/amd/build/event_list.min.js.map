{"version":3,"file":"event_list.min.js","sources":["../src/event_list.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript to load and render the list of calendar events for a\r\n * given day range.\r\n *\r\n * @module     block_timeline/event_list\r\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(\r\n[\r\n    'jquery',\r\n    'core/notification',\r\n    'core/templates',\r\n    'core/str',\r\n    'core/user_date',\r\n    'block_timeline/calendar_events_repository',\r\n    'core/pending'\r\n],\r\nfunction(\r\n    $,\r\n    Notification,\r\n    Templates,\r\n    Str,\r\n    UserDate,\r\n    CalendarEventsRepository,\r\n    Pending\r\n) {\r\n\r\n    var SECONDS_IN_DAY = 60 * 60 * 24;\r\n    var courseview = false;\r\n\r\n    var SELECTORS = {\r\n        EMPTY_MESSAGE: '[data-region=\"no-events-empty-message\"]',\r\n        ROOT: '[data-region=\"event-list-container\"]',\r\n        EVENT_LIST_CONTENT: '[data-region=\"event-list-content\"]',\r\n        EVENT_LIST_WRAPPER: '[data-region=\"event-list-wrapper\"]',\r\n        EVENT_LIST_LOADING_PLACEHOLDER: '[data-region=\"event-list-loading-placeholder\"]',\r\n        TIMELINE_BLOCK: '[data-region=\"timeline\"]',\r\n        TIMELINE_SEARCH: '[data-action=\"search\"]',\r\n        MORE_ACTIVITIES_BUTTON: '[data-action=\"more-events\"]',\r\n        MORE_ACTIVITIES_BUTTON_CONTAINER: '[data-region=\"more-events-button-container\"]'\r\n    };\r\n\r\n    var TEMPLATES = {\r\n        EVENT_LIST_CONTENT: 'block_timeline/event-list-content',\r\n        MORE_ACTIVITIES_BUTTON: 'block_timeline/event-list-loadmore',\r\n        LOADING_ICON: 'core/loading'\r\n    };\r\n\r\n    /** @property {number} The total items will be shown on the first load. */\r\n    const DEFAULT_LAZY_LOADING_ITEMS_FIRST_LOAD = 5;\r\n    /** @property {number} The total items will be shown when click on the Show more activities button. */\r\n    const DEFAULT_LAZY_LOADING_ITEMS_OTHER_LOAD = 10;\r\n\r\n    /**\r\n     * Hide the content area and display the empty content message.\r\n     *\r\n     * @param {object} root The container element\r\n     */\r\n    var hideContent = function(root) {\r\n        root.find(SELECTORS.EVENT_LIST_CONTENT).addClass('hidden');\r\n        root.find(SELECTORS.EMPTY_MESSAGE).removeClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Show the content area and hide the empty content message.\r\n     *\r\n     * @param {object} root The container element\r\n     */\r\n    var showContent = function(root) {\r\n        root.find(SELECTORS.EVENT_LIST_CONTENT).removeClass('hidden');\r\n        root.find(SELECTORS.EMPTY_MESSAGE).addClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Empty the content area.\r\n     *\r\n     * @param {object} root The container element\r\n     */\r\n    var emptyContent = function(root) {\r\n        root.find(SELECTORS.EVENT_LIST_CONTENT).empty();\r\n    };\r\n\r\n    /**\r\n     * Construct the template context from a list of calendar events. The events\r\n     * are grouped by which day they are on. The day is calculated from the user's\r\n     * midnight timestamp to ensure that the calculation is timezone agnostic.\r\n     *\r\n     * The return data structure will look like:\r\n     * {\r\n     *      eventsbyday: [\r\n     *          {\r\n     *              dayTimestamp: 1533744000,\r\n     *              events: [\r\n     *                  { ...event 1 data... },\r\n     *                  { ...event 2 data... }\r\n     *              ]\r\n     *          },\r\n     *          {\r\n     *              dayTimestamp: 1533830400,\r\n     *              events: [\r\n     *                  { ...event 3 data... },\r\n     *                  { ...event 4 data... }\r\n     *              ]\r\n     *          }\r\n     *      ]\r\n     * }\r\n     *\r\n     * Each day timestamp is the day's midnight in the user's timezone.\r\n     *\r\n     * @param {array} calendarEvents List of calendar events\r\n     * @return {object}\r\n     */\r\n    var buildTemplateContext = function(calendarEvents) {\r\n        var eventsByDay = {};\r\n        var templateContext = {\r\n            courseview,\r\n            eventsbyday: []\r\n        };\r\n\r\n        calendarEvents.forEach(function(calendarEvent) {\r\n            var dayTimestamp = calendarEvent.timeusermidnight;\r\n            if (eventsByDay[dayTimestamp]) {\r\n                eventsByDay[dayTimestamp].push(calendarEvent);\r\n            } else {\r\n                eventsByDay[dayTimestamp] = [calendarEvent];\r\n            }\r\n        });\r\n\r\n        Object.keys(eventsByDay).forEach(function(dayTimestamp) {\r\n            var events = eventsByDay[dayTimestamp];\r\n            templateContext.eventsbyday.push({\r\n                dayTimestamp: dayTimestamp,\r\n                events: events\r\n            });\r\n        });\r\n\r\n        return templateContext;\r\n    };\r\n\r\n    /**\r\n     * Render the HTML for the given calendar events.\r\n     *\r\n     * @param {array} calendarEvents  A list of calendar events\r\n     * @return {promise} Resolved with HTML and JS strings.\r\n     */\r\n    var render = function(calendarEvents) {\r\n        var templateContext = buildTemplateContext(calendarEvents);\r\n        var templateName = TEMPLATES.EVENT_LIST_CONTENT;\r\n\r\n        return Templates.render(templateName, templateContext);\r\n    };\r\n\r\n    /**\r\n     * Retrieve a list of calendar events from the server for the given\r\n     * constraints.\r\n     *\r\n     * @param {Number} midnight The user's midnight time in unix timestamp.\r\n     * @param {Number} limit Limit the result set to this number of items\r\n     * @param {Number} daysOffset How many days (from midnight) to offset the results from\r\n     * @param {int|undefined} daysLimit How many dates (from midnight) to limit the result to\r\n     * @param {int|false} lastId The ID of the last seen event (if any)\r\n     * @param {int|undefined} courseId Course ID to restrict events to\r\n     * @param {string|undefined} searchValue Search value\r\n     * @return {Promise} A jquery promise\r\n     */\r\n    var load = function(midnight, limit, daysOffset, daysLimit, lastId, courseId, searchValue) {\r\n        var startTime = midnight + (daysOffset * SECONDS_IN_DAY);\r\n        var endTime = daysLimit != undefined ? midnight + (daysLimit * SECONDS_IN_DAY) : false;\r\n\r\n        var args = {\r\n            starttime: startTime,\r\n            limit: limit,\r\n        };\r\n\r\n        if (lastId) {\r\n            args.aftereventid = lastId;\r\n        }\r\n\r\n        if (endTime) {\r\n            args.endtime = endTime;\r\n        }\r\n\r\n        if (searchValue) {\r\n            args.searchvalue = searchValue;\r\n        }\r\n\r\n        if (courseId) {\r\n            // If we have a course id then we only want events from that course.\r\n            args.courseid = courseId;\r\n            return CalendarEventsRepository.queryByCourse(args);\r\n        } else {\r\n            // Otherwise we want events from any course.\r\n            return CalendarEventsRepository.queryByTime(args);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Create a lazy-loading region for the calendar events in the given root element.\r\n     *\r\n     * @param {object} root The event list container element.\r\n     * @param {object} additionalConfig Additional config options to pass to pagedContentFactory.\r\n     */\r\n    var init = function(root, additionalConfig = {}) {\r\n        const pendingPromise = new Pending('block/timeline:event-init');\r\n        root = $(root);\r\n\r\n        courseview = !!additionalConfig.courseview;\r\n\r\n        // Create a promise that will be resolved once the first set of page\r\n        // data has been loaded. This ensures that the loading placeholder isn't\r\n        // hidden until we have all of the data back to prevent the page elements\r\n        // jumping around.\r\n        var firstLoad = $.Deferred();\r\n        var eventListContent = root.find(SELECTORS.EVENT_LIST_CONTENT);\r\n        var loadingPlaceholder = root.find(SELECTORS.EVENT_LIST_LOADING_PLACEHOLDER);\r\n        var courseId = root.attr('data-course-id');\r\n        var daysOffset = parseInt(root.attr('data-days-offset'), 10);\r\n        var daysLimit = root.attr('data-days-limit');\r\n        var midnight = parseInt(root.attr('data-midnight'), 10);\r\n        const searchValue = root.closest(SELECTORS.TIMELINE_BLOCK).find(SELECTORS.TIMELINE_SEARCH).val();\r\n\r\n        // Make sure the content area and loading placeholder is visible.\r\n        // This is because the init function can be called to re-initialise\r\n        // an existing event list area.\r\n        emptyContent(root);\r\n        showContent(root);\r\n        loadingPlaceholder.removeClass('hidden');\r\n\r\n        // Days limit isn't mandatory.\r\n        if (daysLimit != undefined) {\r\n            daysLimit = parseInt(daysLimit, 10);\r\n        }\r\n\r\n        // Create the lazy loading content element.\r\n        return createLazyLoadingContent(root, firstLoad,\r\n            DEFAULT_LAZY_LOADING_ITEMS_FIRST_LOAD, midnight, 0, courseId, daysOffset, daysLimit, searchValue)\r\n            .then(function(html, js) {\r\n                firstLoad.then(function(data) {\r\n                    if (!data.hasContent) {\r\n                        loadingPlaceholder.addClass('hidden');\r\n                        // If we didn't get any data then show the empty data message.\r\n                        return hideContent(root);\r\n                    }\r\n\r\n                    html = $(html);\r\n                    // Hide the content for now.\r\n                    html.addClass('hidden');\r\n                    // Replace existing elements with the newly created lazy-loading region.\r\n                    Templates.replaceNodeContents(eventListContent, html, js);\r\n\r\n                    // Prevent changing page elements too much by only showing the content\r\n                    // once we've loaded some data for the first time. This allows our\r\n                    // fancy loading placeholder to shine.\r\n                    html.removeClass('hidden');\r\n                    loadingPlaceholder.addClass('hidden');\r\n\r\n                    if (!data.loadedAll) {\r\n                        Templates.render(TEMPLATES.MORE_ACTIVITIES_BUTTON, {courseview}).then(function(html) {\r\n                            eventListContent.append(html);\r\n                            setLastTimestamp(root, data.lastTimeStamp);\r\n                            // Init the event handler.\r\n                            initEventListener(root);\r\n                            return html;\r\n                        }).catch(function() {\r\n                            return false;\r\n                        });\r\n                    }\r\n\r\n                    return data;\r\n                })\r\n                .catch(function() {\r\n                    return false;\r\n                });\r\n\r\n                return html;\r\n            }).then(() => {\r\n                return pendingPromise.resolve();\r\n            })\r\n            .catch(Notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Create a lazy-loading content element for showing the event list for the initial load.\r\n     *\r\n     * @param {object} root The event list container element.\r\n     * @param {object} firstLoad A jQuery promise to be resolved after the first set of data is loaded.\r\n     * @param {int} itemLimit Limit the number of items.\r\n     * @param {Number} midnight The user's midnight time in unix timestamp.\r\n     * @param {int} lastId The last event ID for each loaded page. Page number is key, id is value.\r\n     * @param {int|undefined} courseId Course ID to restrict events to.\r\n     * @param {Number} daysOffset How many days (from midnight) to offset the results from.\r\n     * @param {int|undefined} daysLimit How many dates (from midnight) to limit the result to.\r\n     * @param {string|undefined} searchValue Search value.\r\n     * @return {object} jQuery promise resolved with calendar events.\r\n     */\r\n    const createLazyLoadingContent = (root, firstLoad, itemLimit, midnight, lastId,\r\n        courseId, daysOffset, daysLimit, searchValue) => {\r\n        return loadEventsForLazyLoading(\r\n            root,\r\n            itemLimit,\r\n            midnight,\r\n            lastId,\r\n            courseId,\r\n            daysOffset,\r\n            daysLimit,\r\n            searchValue\r\n        ).then(data => {\r\n            if (data.calendarEvents.length) {\r\n                const lastEventId = data.calendarEvents.at(-1).id;\r\n                const lastTimeStamp = data.calendarEvents.at(-1).timeusermidnight;\r\n                firstLoad.resolve({\r\n                    hasContent: true,\r\n                    lastId: lastEventId,\r\n                    lastTimeStamp: lastTimeStamp,\r\n                    loadedAll: data.loadedAll\r\n                });\r\n                return render(data.calendarEvents, midnight);\r\n            } else {\r\n                firstLoad.resolve({\r\n                    hasContent: false,\r\n                    lastId: 0,\r\n                    lastTimeStamp: 0,\r\n                    loadedAll: true\r\n                });\r\n                return data.calendarEvents;\r\n            }\r\n        }).catch(Notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Handle the request from the lazy-loading region.\r\n     * Uses the given data like course id, offset... to request the events from the server.\r\n     *\r\n     * @param {object} root The event list container element.\r\n     * @param {int} itemLimit Limit the number of items.\r\n     * @param {Number} midnight The user's midnight time in unix timestamp.\r\n     * @param {int} lastId The last event ID for each loaded page.\r\n     * @param {int|undefined} courseId Course ID to restrict events to.\r\n     * @param {Number} daysOffset How many days (from midnight) to offset the results from.\r\n     * @param {int|undefined} daysLimit How many dates (from midnight) to limit the result to.\r\n     * @param {string|undefined} searchValue Search value.\r\n     * @return {object} jQuery promise resolved with calendar events.\r\n     */\r\n    const loadEventsForLazyLoading = (root, itemLimit, midnight, lastId, courseId, daysOffset, daysLimit, searchValue) => {\r\n        // Load one more than the given limit so that we can tell if there\r\n        // is more content to load after this.\r\n        const eventsPromise = load(midnight, itemLimit + 1, daysOffset, daysLimit, lastId, courseId, searchValue);\r\n        let calendarEvents = [];\r\n        let loadedAll = true;\r\n\r\n        return eventsPromise.then(result => {\r\n            if (!result.events.length) {\r\n                return {calendarEvents, loadedAll};\r\n            }\r\n\r\n            // Determine if the overdue filter is applied.\r\n            const overdueFilter = document.querySelector(\"[data-filtername='overdue']\");\r\n            const filterByOverdue = (overdueFilter && overdueFilter.getAttribute('aria-current'));\r\n\r\n            calendarEvents = result.events.filter(event => {\r\n                if (event.eventtype == 'open' || event.eventtype == 'opensubmission') {\r\n                    const dayTimestamp = UserDate.getUserMidnightForTimestamp(event.timesort, midnight);\r\n                    return dayTimestamp > midnight;\r\n                }\r\n                // When filtering by overdue, we fetch all events due today, in case any have elapsed already and are overdue.\r\n                // This means if filtering by overdue, some events fetched might not be required (eg if due later today).\r\n                return (!filterByOverdue || event.overdue);\r\n            });\r\n\r\n            loadedAll = calendarEvents.length <= itemLimit;\r\n\r\n            if (!loadedAll) {\r\n                // Remove the last element from the array because it isn't\r\n                // needed in this result set.\r\n                calendarEvents.pop();\r\n            }\r\n\r\n            if (calendarEvents.length) {\r\n                const lastEventId = calendarEvents.at(-1).id;\r\n                setOffset(root, lastEventId);\r\n            }\r\n\r\n            return {calendarEvents, loadedAll};\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Load new events and append to current list.\r\n     *\r\n     * @param {object} root The event list container element.\r\n     */\r\n    const loadMoreEvents = root => {\r\n        const midnight = parseInt(root.attr('data-midnight'), 10);\r\n        const courseId = root.attr('data-course-id');\r\n        const daysOffset = parseInt(root.attr('data-days-offset'), 10);\r\n        const daysLimit = root.attr('data-days-limit');\r\n        const lastId = getOffset(root);\r\n        const eventListWrapper = root.find(SELECTORS.EVENT_LIST_WRAPPER);\r\n        const searchValue = root.closest(SELECTORS.TIMELINE_BLOCK).find(SELECTORS.TIMELINE_SEARCH).val();\r\n        const eventsPromise = loadEventsForLazyLoading(\r\n            root,\r\n            DEFAULT_LAZY_LOADING_ITEMS_OTHER_LOAD,\r\n            midnight,\r\n            lastId,\r\n            courseId,\r\n            daysOffset,\r\n            daysLimit,\r\n            searchValue\r\n        );\r\n        eventsPromise.then(data => {\r\n            if (data.calendarEvents.length) {\r\n                const renderPromise = render(data.calendarEvents);\r\n                const lastTimestamp = getLastTimestamp(root);\r\n                renderPromise.then((html, js) => {\r\n                    html = $(html);\r\n\r\n                    // Remove the date heading if it has the same value as the previous one.\r\n                    html.find(`[data-timestamp=\"${lastTimestamp}\"]`).remove();\r\n                    Templates.appendNodeContents(eventListWrapper, html.html(), js);\r\n\r\n                    if (!data.loadedAll) {\r\n                        Templates.render(TEMPLATES.MORE_ACTIVITIES_BUTTON, {}).then(html => {\r\n                            eventListWrapper.append(html);\r\n                            setLastTimestamp(root, data.calendarEvents.at(-1).timeusermidnight);\r\n                            // Init the event handler.\r\n                            initEventListener(root);\r\n\r\n                            return html;\r\n                        }).catch(() => {\r\n                            return false;\r\n                        });\r\n                    }\r\n\r\n                    return html;\r\n                }).catch(Notification.exception);\r\n            }\r\n\r\n            return data;\r\n        }).then(() => {\r\n            return disableMoreActivitiesButtonLoading(root);\r\n        }).catch(Notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Return the offset value for lazy loading fetching.\r\n     *\r\n     * @param {object} element The event list container element.\r\n     * @return {Number} Offset value.\r\n     */\r\n    const getOffset = element => {\r\n        return parseInt(element.attr('data-lazyload-offset'), 10);\r\n    };\r\n\r\n    /**\r\n     * Set the offset value for lazy loading fetching.\r\n     *\r\n     * @param {object} element The event list container element.\r\n     * @param {Number} offset Offset value.\r\n     */\r\n    const setOffset = (element, offset) => {\r\n        element.attr('data-lazyload-offset', offset);\r\n    };\r\n\r\n    /**\r\n     * Return the timestamp value for lazy loading fetching.\r\n     *\r\n     * @param {object} element The event list container element.\r\n     * @return {Number} Timestamp value.\r\n     */\r\n    const getLastTimestamp = element => {\r\n        return parseInt(element.attr('data-timestamp'), 10);\r\n    };\r\n\r\n    /**\r\n     * Set the timestamp value for lazy loading fetching.\r\n     *\r\n     * @param {object} element The event list container element.\r\n     * @param {Number} timestamp Timestamp value.\r\n     */\r\n    const setLastTimestamp = (element, timestamp) => {\r\n        element.attr('data-timestamp', timestamp);\r\n    };\r\n\r\n    /**\r\n     * Add the \"Show more activities\" button and remove and loading spinner.\r\n     *\r\n     * @param {object} root The event list container element.\r\n     */\r\n    const enableMoreActivitiesButtonLoading = root => {\r\n        const loadMoreButton = root.find(SELECTORS.MORE_ACTIVITIES_BUTTON);\r\n        loadMoreButton.prop('disabled', true);\r\n        Templates.render(TEMPLATES.LOADING_ICON, {}).then(html => {\r\n            loadMoreButton.append(html);\r\n            return html;\r\n        }).catch(() => {\r\n            // It's not important if this false so just do so silently.\r\n            return false;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Remove the \"Show more activities\" button and remove and loading spinner.\r\n     *\r\n     * @param {object} root The event list container element.\r\n     */\r\n    const disableMoreActivitiesButtonLoading = root => {\r\n        const loadMoreButtonContainer = root.find(SELECTORS.MORE_ACTIVITIES_BUTTON_CONTAINER);\r\n        loadMoreButtonContainer.remove();\r\n    };\r\n\r\n    /**\r\n     * Event initialise.\r\n     *\r\n     * @param {object} root The event list container element.\r\n     */\r\n    const initEventListener = root => {\r\n        const loadMoreButton = root.find(SELECTORS.MORE_ACTIVITIES_BUTTON);\r\n        loadMoreButton.on('click', () => {\r\n            enableMoreActivitiesButtonLoading(root);\r\n            loadMoreEvents(root);\r\n        });\r\n    };\r\n\r\n    return {\r\n        init: init,\r\n        rootSelector: SELECTORS.ROOT,\r\n    };\r\n});\r\n"],"names":["define","$","Notification","Templates","Str","UserDate","CalendarEventsRepository","Pending","courseview","SELECTORS","TEMPLATES","render","calendarEvents","templateContext","eventsByDay","eventsbyday","forEach","calendarEvent","dayTimestamp","timeusermidnight","push","Object","keys","events","buildTemplateContext","templateName","createLazyLoadingContent","root","firstLoad","itemLimit","midnight","lastId","courseId","daysOffset","daysLimit","searchValue","loadEventsForLazyLoading","then","data","length","lastEventId","at","id","lastTimeStamp","resolve","hasContent","loadedAll","catch","exception","eventsPromise","limit","endTime","undefined","args","starttime","aftereventid","endtime","searchvalue","courseid","queryByCourse","queryByTime","load","result","overdueFilter","document","querySelector","filterByOverdue","getAttribute","filter","event","eventtype","getUserMidnightForTimestamp","timesort","overdue","pop","setOffset","getOffset","element","parseInt","attr","offset","getLastTimestamp","setLastTimestamp","timestamp","disableMoreActivitiesButtonLoading","find","remove","initEventListener","on","loadMoreButton","prop","html","append","enableMoreActivitiesButtonLoading","eventListWrapper","closest","val","renderPromise","lastTimestamp","js","appendNodeContents","loadMoreEvents","init","additionalConfig","arguments","pendingPromise","Deferred","eventListContent","loadingPlaceholder","empty","emptyContent","removeClass","addClass","showContent","replaceNodeContents","hideContent","rootSelector"],"mappings":"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"}