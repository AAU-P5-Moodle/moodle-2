{"version":3,"file":"view_courses.min.js","sources":["../src/view_courses.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Manage the timeline courses view for the timeline block.\r\n *\r\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(\r\n[\r\n    'jquery',\r\n    'core/notification',\r\n    'core/custom_interaction_events',\r\n    'core/templates',\r\n    'block_timeline/event_list',\r\n    'core_course/repository',\r\n    'block_timeline/calendar_events_repository',\r\n    'core/pending'\r\n],\r\nfunction(\r\n    $,\r\n    Notification,\r\n    CustomEvents,\r\n    Templates,\r\n    EventList,\r\n    CourseRepository,\r\n    EventsRepository,\r\n    Pending\r\n) {\r\n\r\n    var SELECTORS = {\r\n        MORE_COURSES_BUTTON: '[data-action=\"more-courses\"]',\r\n        MORE_COURSES_BUTTON_CONTAINER: '[data-region=\"more-courses-button-container\"]',\r\n        NO_COURSES_EMPTY_MESSAGE: '[data-region=\"no-courses-empty-message\"]',\r\n        NO_COURSES_WITH_EVENTS_MESSAGE: '[data-region=\"no-events-empty-message\"]',\r\n        COURSES_LIST: '[data-region=\"courses-list\"]',\r\n        COURSE_ITEMS_LOADING_PLACEHOLDER: '[data-region=\"course-items-loading-placeholder\"]',\r\n        COURSE_EVENTS_CONTAINER: '[data-region=\"course-events-container\"]',\r\n        COURSE_NAME: '[data-region=\"course-name\"]',\r\n        LOADING_ICON: '.loading-icon',\r\n        TIMELINE_BLOCK: '[data-region=\"timeline\"]',\r\n        TIMELINE_SEARCH: '[data-action=\"search\"]'\r\n    };\r\n\r\n    var TEMPLATES = {\r\n        COURSE_ITEMS: 'block_timeline/course-items',\r\n        LOADING_ICON: 'core/loading'\r\n    };\r\n\r\n    var COURSE_CLASSIFICATION = 'all';\r\n    var COURSE_SORT = 'fullname asc';\r\n    var COURSE_EVENT_LIMIT = 5;\r\n    var COURSE_LIMIT = 2;\r\n    var SECONDS_IN_DAY = 60 * 60 * 24;\r\n\r\n    const additionalConfig = {courseview: true};\r\n\r\n    /**\r\n     * Hide the loading placeholder elements.\r\n     *\r\n     * @param {object} root The rool element.\r\n     */\r\n    var hideLoadingPlaceholder = function(root) {\r\n        root.find(SELECTORS.COURSE_ITEMS_LOADING_PLACEHOLDER).addClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Show the loading placeholder elements.\r\n     *\r\n     * @param {object} root The rool element.\r\n     */\r\n    const showLoadingPlaceholder = function(root) {\r\n        root.find(SELECTORS.COURSE_ITEMS_LOADING_PLACEHOLDER).removeClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Hide the \"more courses\" button.\r\n     *\r\n     * @param {object} root The rool element.\r\n     */\r\n    var hideMoreCoursesButton = function(root) {\r\n        root.find(SELECTORS.MORE_COURSES_BUTTON_CONTAINER).addClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Show the \"more courses\" button.\r\n     *\r\n     * @param {object} root The rool element.\r\n     */\r\n    var showMoreCoursesButton = function(root) {\r\n        root.find(SELECTORS.MORE_COURSES_BUTTON_CONTAINER).removeClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Disable the \"more courses\" button and show the loading spinner.\r\n     *\r\n     * @param {object} root The rool element.\r\n     */\r\n    var enableMoreCoursesButtonLoading = function(root) {\r\n        var button = root.find(SELECTORS.MORE_COURSES_BUTTON);\r\n        button.prop('disabled', true);\r\n        Templates.render(TEMPLATES.LOADING_ICON, {})\r\n            .then(function(html) {\r\n                button.append(html);\r\n                return html;\r\n            })\r\n            .catch(function() {\r\n                // It's not important if this false so just do so silently.\r\n                return false;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Enable the \"more courses\" button and remove the loading spinner.\r\n     *\r\n     * @param {object} root The rool element.\r\n     */\r\n    var disableMoreCoursesButtonLoading = function(root) {\r\n        var button = root.find(SELECTORS.MORE_COURSES_BUTTON);\r\n        button.prop('disabled', false);\r\n        button.find(SELECTORS.LOADING_ICON).remove();\r\n    };\r\n\r\n    /**\r\n     * Display the message for when courses have no events available (within the current filtering).\r\n     *\r\n     * @param {object} root The rool element.\r\n     */\r\n    const showNoCoursesWithEventsMessage = function(root) {\r\n        // Remove any course list contents, since we will display the no events message.\r\n        const container = root.find(SELECTORS.COURSES_LIST);\r\n        Templates.replaceNodeContents(container, '', '');\r\n        root.find(SELECTORS.NO_COURSES_WITH_EVENTS_MESSAGE).removeClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Hide the message for when courses have no events available (within the current filtering).\r\n     *\r\n     * @param {object} root The rool element.\r\n     */\r\n    const hideNoCoursesWithEventsMessage = function(root) {\r\n        root.find(SELECTORS.NO_COURSES_WITH_EVENTS_MESSAGE).addClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Render the course items HTML to the page.\r\n     *\r\n     * @param {object} root The rool element.\r\n     * @param {string} html The course items HTML to render.\r\n     * @param {boolean} append Whether the HTML should be appended (eg pressed \"show more courses\").\r\n     *                         Defaults to false - replaces the existing content (eg when modifying filter values).\r\n     */\r\n    var renderCourseItemsHTML = function(root, html, append = false) {\r\n        var container = root.find(SELECTORS.COURSES_LIST);\r\n\r\n        if (append) {\r\n            Templates.appendNodeContents(container, html, '');\r\n        } else {\r\n            Templates.replaceNodeContents(container, html, '');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Return the offset value for fetching courses.\r\n     *\r\n     * @param {object} root The rool element.\r\n     * @return {Number}\r\n     */\r\n    var getOffset = function(root) {\r\n        return parseInt(root.attr('data-offset'), 10);\r\n    };\r\n\r\n    /**\r\n     * Set the offset value for fetching courses.\r\n     *\r\n     * @param {object} root The rool element.\r\n     * @param {Number} offset Offset value.\r\n     */\r\n    var setOffset = function(root, offset) {\r\n        root.attr('data-offset', offset);\r\n    };\r\n\r\n    /**\r\n     * Return the limit value for fetching courses.\r\n     *\r\n     * @param {object} root The rool element.\r\n     * @return {Number}\r\n     */\r\n    var getLimit = function(root) {\r\n        return parseInt(root.attr('data-limit'), 10);\r\n    };\r\n\r\n    /**\r\n     * Return the days offset value for fetching events.\r\n     *\r\n     * @param {object} root The rool element.\r\n     * @return {Number}\r\n     */\r\n    var getDaysOffset = function(root) {\r\n        return parseInt(root.attr('data-days-offset'), 10);\r\n    };\r\n\r\n    /**\r\n     * Return the days limit value for fetching events. The days\r\n     * limit is optional so undefined will be returned if it isn't\r\n     * set.\r\n     *\r\n     * @param {object} root The rool element.\r\n     * @return {int|undefined}\r\n     */\r\n    var getDaysLimit = function(root) {\r\n        var daysLimit = root.attr('data-days-limit');\r\n        return daysLimit != undefined ? parseInt(daysLimit, 10) : undefined;\r\n    };\r\n\r\n    /**\r\n     * Return the timestamp for the user's midnight.\r\n     *\r\n     * @param {object} root The rool element.\r\n     * @return {Number}\r\n     */\r\n    var getMidnight = function(root) {\r\n        return parseInt(root.attr('data-midnight'), 10);\r\n    };\r\n\r\n    /**\r\n     * Return the start time for fetching events. This is calculated\r\n     * based on the user's midnight value so that timezones are\r\n     * preserved.\r\n     *\r\n     * @param {object} root The rool element.\r\n     * @return {Number}\r\n     */\r\n    var getStartTime = function(root) {\r\n        var midnight = getMidnight(root);\r\n        var daysOffset = getDaysOffset(root);\r\n        return midnight + (daysOffset * SECONDS_IN_DAY);\r\n    };\r\n\r\n    /**\r\n     * Return the end time for fetching events. This is calculated\r\n     * based on the user's midnight value so that timezones are\r\n     * preserved, unless filtering by overdue, where the current UNIX timestamp is used.\r\n     *\r\n     * @param {object} root The rool element.\r\n     * @return {Number}\r\n     */\r\n    var getEndTime = function(root) {\r\n        let endTime = null;\r\n\r\n        if (root.attr('data-filter-overdue')) {\r\n            // If filtering by overdue, end time will be the current timestamp in seconds.\r\n            endTime = Math.floor(Date.now() / 1000);\r\n        } else {\r\n            const midnight = getMidnight(root);\r\n            const daysLimit = getDaysLimit(root);\r\n\r\n            if (daysLimit != undefined) {\r\n                endTime = midnight + (daysLimit * SECONDS_IN_DAY);\r\n            }\r\n        }\r\n\r\n        return endTime;\r\n    };\r\n\r\n    /**\r\n     * Get a list of events for the given course ids. Returns a promise that will\r\n     * be resolved with the events.\r\n     *\r\n     * @param {array} courseIds The list of course ids to fetch events for.\r\n     * @param {Number} startTime Timestamp to fetch events from.\r\n     * @param {Number} limit Limit to the number of events (this applies per course, not total)\r\n     * @param {Number} endTime Timestamp to fetch events to.\r\n     * @param {string|undefined} searchValue Search value\r\n     * @return {object} jQuery promise.\r\n     */\r\n    var getEventsForCourseIds = function(courseIds, startTime, limit, endTime, searchValue) {\r\n        var args = {\r\n            courseids: courseIds,\r\n            starttime: startTime,\r\n            limit: limit\r\n        };\r\n\r\n        if (endTime) {\r\n            args.endtime = endTime;\r\n        }\r\n\r\n        if (searchValue) {\r\n            args.searchvalue = searchValue;\r\n        }\r\n\r\n        return EventsRepository.queryByCourses(args);\r\n    };\r\n\r\n    /**\r\n     * Get the last time the events were reloaded.\r\n     *\r\n     * @param {object} root The rool element.\r\n     * @return {Number}\r\n     */\r\n    var getEventReloadTime = function(root) {\r\n        return root.data('last-event-load-time');\r\n    };\r\n\r\n    /**\r\n     * Set the last time the events were reloaded.\r\n     *\r\n     * @param {object} root The rool element.\r\n     * @param {Number} time Timestamp in milliseconds.\r\n     */\r\n    var setEventReloadTime = function(root, time) {\r\n        root.data('last-event-load-time', time);\r\n    };\r\n\r\n    /**\r\n     * Check if events have begun reloading since the given\r\n     * time.\r\n     *\r\n     * @param {object} root The rool element.\r\n     * @param {Number} time Timestamp in milliseconds.\r\n     * @return {bool}\r\n     */\r\n    var hasReloadedEventsSince = function(root, time) {\r\n        return getEventReloadTime(root) > time;\r\n    };\r\n\r\n    /**\r\n     * Send a request to the server to load the events for the courses.\r\n     *\r\n     * @param {array} courses List of course objects.\r\n     * @param {Number} startTime Timestamp to load events after.\r\n     * @param {int|undefined} endTime Timestamp to load events up until.\r\n     * @param {string|undefined} searchValue Search value\r\n     * @return {object} jQuery promise resolved with the events.\r\n     */\r\n    var loadEventsForCourses = function(courses, startTime, endTime, searchValue) {\r\n        var courseIds = courses.map(function(course) {\r\n            return course.id;\r\n        });\r\n\r\n        return getEventsForCourseIds(courseIds, startTime, COURSE_EVENT_LIMIT + 1, endTime, searchValue);\r\n    };\r\n\r\n    /**\r\n     * Render the courses in the DOM once the server has returned the courses.\r\n     *\r\n     * @param {array} courses List of course objects.\r\n     * @param {object} root The root element\r\n     * @param {Number} midnight The midnight timestamp in the user's timezone.\r\n     * @param {Number} daysOffset Number of days from today to offset the events.\r\n     * @param {Number} daysLimit Number of days from today to limit the events to.\r\n     * @param {boolean} append Whether new content should be appended instead of replaced (eg \"show more courses\").\r\n     * @return {object} jQuery promise resolved after rendering is complete.\r\n     */\r\n    var updateDisplayFromCourses = function(courses, root, midnight, daysOffset, daysLimit, append) {\r\n        // Render the courses template.\r\n        return Templates.render(TEMPLATES.COURSE_ITEMS, {\r\n            courses: courses,\r\n            midnight: midnight,\r\n            hasdaysoffset: true,\r\n            hasdayslimit: daysLimit != undefined,\r\n            daysoffset: daysOffset,\r\n            dayslimit: daysLimit,\r\n            nodayslimit: daysLimit == undefined,\r\n            courseview: true,\r\n            hascourses: true\r\n        }).then(function(html) {\r\n            hideLoadingPlaceholder(root);\r\n\r\n            if (html) {\r\n                // Template rendering is complete and we have the HTML so we can\r\n                // add it to the DOM.\r\n                renderCourseItemsHTML(root, html, append);\r\n            }\r\n\r\n            return html;\r\n        })\r\n        .then(function(html) {\r\n            if (courses.length < COURSE_LIMIT) {\r\n                // We know there aren't any more courses because we got back less\r\n                // than we asked for so hide the button to request more.\r\n                hideMoreCoursesButton(root);\r\n            } else {\r\n                // Make sure the button is visible if there are more courses to load.\r\n                showMoreCoursesButton(root);\r\n            }\r\n\r\n            return html;\r\n        })\r\n        .catch(function() {\r\n            hideLoadingPlaceholder(root);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Find all of the visible course blocks and initialise the event\r\n     * list module to being loading the events for the course block.\r\n     *\r\n     * @param {object} root The root element for the timeline courses view.\r\n     * @param {boolean} append Whether content should be appended instead of replaced (eg \"show more courses\"). False by default.\r\n     * @return {object} jQuery promise resolved with courses and events.\r\n     */\r\n    var loadMoreCourses = function(root, append = false) {\r\n        const pendingPromise = new Pending('block/timeline:load-more-courses');\r\n        var offset = getOffset(root);\r\n        var limit = getLimit(root);\r\n        const startTime = getStartTime(root);\r\n        const endTime = getEndTime(root);\r\n        const searchValue = root.closest(SELECTORS.TIMELINE_BLOCK).find(SELECTORS.TIMELINE_SEARCH).val();\r\n\r\n        // Start loading the next set of courses.\r\n        // Fetch up to limit number of courses with at least one action event in the time filtering specified.\r\n        // Courses without events will also be fetched, but hidden in case they have events in other timespans.\r\n        return CourseRepository.getEnrolledCoursesWithEventsByTimelineClassification(\r\n            COURSE_CLASSIFICATION,\r\n            limit,\r\n            offset,\r\n            COURSE_SORT,\r\n            searchValue,\r\n            startTime,\r\n            endTime\r\n        ).then(function(result) {\r\n            var startEventLoadingTime = Date.now();\r\n            var courses = result.courses;\r\n            var nextOffset = result.nextoffset;\r\n            var daysOffset = getDaysOffset(root);\r\n            var daysLimit = getDaysLimit(root);\r\n            var midnight = getMidnight(root);\r\n            const moreCoursesAvailable = result.morecoursesavailable;\r\n\r\n            // Record the next offset if we want to request more courses.\r\n            setOffset(root, nextOffset);\r\n            // Load the events for these courses.\r\n            var eventsPromise = loadEventsForCourses(courses, startTime, endTime, searchValue);\r\n            // Render the courses in the DOM.\r\n            var renderPromise = updateDisplayFromCourses(courses, root, midnight, daysOffset, daysLimit, append);\r\n\r\n            return $.when(eventsPromise, renderPromise)\r\n                .then(function(eventsByCourse) {\r\n                    if (hasReloadedEventsSince(root, startEventLoadingTime)) {\r\n                        // All of the events are being reloaded so ignore our results.\r\n                        return eventsByCourse;\r\n                    }\r\n\r\n                    if (courses.length > 0) {\r\n                        // Render the events in the correct course event list.\r\n                        courses.forEach(function(course) {\r\n                            const courseId = course.id;\r\n                            const containerSelector = '[data-region=\"course-events-container\"][data-course-id=\"' + courseId + '\"]';\r\n                            const courseEventsContainer = root.find(containerSelector);\r\n                            const eventListRoot = courseEventsContainer.find(EventList.rootSelector);\r\n\r\n                            EventList.init(eventListRoot, additionalConfig);\r\n                        });\r\n\r\n                        if (!moreCoursesAvailable) {\r\n                            // If no more courses with events matching the current filtering exist, hide the more courses button.\r\n                            hideMoreCoursesButton(root);\r\n                        } else {\r\n                            // If more courses exist with events matching the current filtering, show the more courses button.\r\n                            showMoreCoursesButton(root);\r\n                        }\r\n                    } else {\r\n                        // No more courses to load, hide the more courses button.\r\n                        hideMoreCoursesButton(root);\r\n\r\n                        // A zero offset means this was not loading \"more courses\", so we need to display the no results message.\r\n                        if (offset == 0) {\r\n                            showNoCoursesWithEventsMessage(root);\r\n                        }\r\n                    }\r\n\r\n                    return eventsByCourse;\r\n                });\r\n        }).then(() => {\r\n            return pendingPromise.resolve();\r\n        }).catch(Notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Add event listeners to load more courses for the courses view.\r\n     *\r\n     * @param {object} root The root element for the timeline courses view.\r\n     */\r\n    var registerEventListeners = function(root) {\r\n        CustomEvents.define(root, [CustomEvents.events.activate]);\r\n        // Show more courses and load their events when the user clicks the \"more courses\" button.\r\n        root.on(CustomEvents.events.activate, SELECTORS.MORE_COURSES_BUTTON, function(e, data) {\r\n            enableMoreCoursesButtonLoading(root);\r\n            loadMoreCourses(root, true)\r\n                .then(function() {\r\n                    disableMoreCoursesButtonLoading(root);\r\n                    return;\r\n                })\r\n                .catch(function() {\r\n                    disableMoreCoursesButtonLoading(root);\r\n                });\r\n\r\n            if (data) {\r\n                data.originalEvent.preventDefault();\r\n                data.originalEvent.stopPropagation();\r\n            }\r\n            e.stopPropagation();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Initialise the timeline courses view. Begin loading the events\r\n     * if this view is active. Add the relevant event listeners.\r\n     *\r\n     * This function should only be called once per page load because it\r\n     * is adding event listeners to the page.\r\n     *\r\n     * @param {object} root The root element for the timeline courses view.\r\n     */\r\n    var init = function(root) {\r\n        root = $(root);\r\n\r\n        // Only need to handle course loading if the user is actively enrolled in a course.\r\n        if (!root.find(SELECTORS.NO_COURSES_EMPTY_MESSAGE).length) {\r\n            setEventReloadTime(root, Date.now());\r\n\r\n            if (root.hasClass('active')) {\r\n                // Only load if this is active otherwise it will be lazy loaded later.\r\n                loadMoreCourses(root);\r\n                root.attr('data-seen', true);\r\n            }\r\n\r\n            registerEventListeners(root);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Reset the element back to it's initial state. Begin loading the events again\r\n     * if this view is active.\r\n     *\r\n     * @param {object} root The root element for the timeline courses view.\r\n     */\r\n    var reset = function(root) {\r\n\r\n        setOffset(root, 0);\r\n        showLoadingPlaceholder(root);\r\n        hideNoCoursesWithEventsMessage(root);\r\n        root.removeAttr('data-seen');\r\n\r\n        if (root.hasClass('active')) {\r\n            shown(root);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Begin loading the events unless we know there are no actively enrolled courses.\r\n     *\r\n     * @param {object} root The root element for the timeline courses view.\r\n     */\r\n    var shown = function(root) {\r\n        if (!root.attr('data-seen') && !root.find(SELECTORS.NO_COURSES_EMPTY_MESSAGE).length) {\r\n            loadMoreCourses(root);\r\n            root.attr('data-seen', true);\r\n        }\r\n    };\r\n\r\n    return {\r\n        init: init,\r\n        reset: reset,\r\n        shown: shown\r\n    };\r\n});\r\n"],"names":["define","$","Notification","CustomEvents","Templates","EventList","CourseRepository","EventsRepository","Pending","SELECTORS","TEMPLATES","additionalConfig","courseview","hideLoadingPlaceholder","root","find","addClass","hideMoreCoursesButton","showMoreCoursesButton","removeClass","disableMoreCoursesButtonLoading","button","prop","remove","setOffset","offset","attr","getDaysOffset","parseInt","getDaysLimit","daysLimit","undefined","getMidnight","loadEventsForCourses","courses","startTime","endTime","searchValue","courseIds","limit","args","courseids","starttime","endtime","searchvalue","queryByCourses","getEventsForCourseIds","map","course","id","COURSE_EVENT_LIMIT","updateDisplayFromCourses","midnight","daysOffset","append","render","hasdaysoffset","hasdayslimit","daysoffset","dayslimit","nodayslimit","hascourses","then","html","arguments","length","container","appendNodeContents","replaceNodeContents","renderCourseItemsHTML","catch","loadMoreCourses","pendingPromise","getOffset","getLimit","getStartTime","Math","floor","Date","now","getEndTime","closest","val","getEnrolledCoursesWithEventsByTimelineClassification","result","startEventLoadingTime","nextOffset","nextoffset","moreCoursesAvailable","morecoursesavailable","eventsPromise","renderPromise","when","eventsByCourse","time","data","getEventReloadTime","hasReloadedEventsSince","forEach","containerSelector","eventListRoot","rootSelector","init","showNoCoursesWithEventsMessage","resolve","exception","registerEventListeners","events","activate","on","e","enableMoreCoursesButtonLoading","originalEvent","preventDefault","stopPropagation","shown","setEventReloadTime","hasClass","reset","showLoadingPlaceholder","hideNoCoursesWithEventsMessage","removeAttr"],"mappings":"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"}