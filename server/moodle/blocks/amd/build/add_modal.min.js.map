{"version":3,"file":"add_modal.min.js","sources":["../src/add_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Show an add block modal instead of doing it on a separate page.\r\n *\r\n * @module     core_block/add_modal\r\n * @copyright  2016 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Templates from 'core/templates';\r\nimport {getString} from 'core/str';\r\nimport Ajax from 'core/ajax';\r\nimport ModalForm from \"core_form/modalform\";\r\nimport CancelModal from 'core/modal_cancel';\r\n\r\nconst SELECTORS = {\r\n    ADD_BLOCK: '[data-key=\"addblock\"]',\r\n    SHOW_BLOCK_FORM: '[data-action=\"showaddblockform\"][data-blockname][data-blockform]'\r\n};\r\n\r\n// Ensure we only add our listeners once.\r\nlet listenerEventsRegistered = false;\r\n\r\n/**\r\n * Register related event listeners.\r\n *\r\n * @method registerListenerEvents\r\n * @param {String|null} addBlockUrl The add block URL\r\n * @param {String} pagehash\r\n */\r\nconst registerListenerEvents = (addBlockUrl, pagehash) => {\r\n    let addBlockModal = null;\r\n    document.addEventListener('click', e => {\r\n\r\n        const showAddBlockForm = e.target.closest(SELECTORS.SHOW_BLOCK_FORM);\r\n        if (showAddBlockForm) {\r\n            e.preventDefault();\r\n\r\n            const modalForm = new ModalForm({\r\n                modalConfig: {\r\n                    title: getString('addblock', 'core_block',\r\n                        showAddBlockForm.getAttribute('data-blocktitle')),\r\n                },\r\n                args: {blockname: showAddBlockForm.getAttribute('data-blockname'), pagehash,\r\n                    blockregion: showAddBlockForm.getAttribute('data-blockregion')},\r\n                formClass: showAddBlockForm.getAttribute('data-blockform'),\r\n                returnFocus: showAddBlockForm,\r\n            });\r\n\r\n            modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\r\n                addBlockModal.destroy();\r\n                window.location.reload();\r\n            });\r\n\r\n            modalForm.show();\r\n        }\r\n\r\n        const addBlock = e.target.closest(SELECTORS.ADD_BLOCK);\r\n        if (addBlock) {\r\n            e.preventDefault();\r\n\r\n            let addBlockModalUrl = addBlockUrl ?? addBlock.dataset.url;\r\n\r\n            buildAddBlockModal()\r\n                .then(modal => {\r\n                    addBlockModal = modal;\r\n                    const modalBody = renderBlocks(addBlockModalUrl, pagehash,\r\n                        addBlock.getAttribute('data-blockregion'));\r\n                    modal.setBody(modalBody);\r\n                    modal.show();\r\n\r\n                    return modalBody;\r\n                })\r\n                .catch(() => {\r\n                    addBlockModal.destroy();\r\n                });\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Method that creates the 'add block' modal.\r\n *\r\n * @method buildAddBlockModal\r\n * @returns {Promise} The modal promise (modal's body will be rendered later).\r\n */\r\nconst buildAddBlockModal = () => CancelModal.create({\r\n    title: getString('addblock'),\r\n});\r\n\r\n/**\r\n * Method that renders the list of available blocks.\r\n *\r\n * @method renderBlocks\r\n * @param {String} addBlockUrl The add block URL\r\n * @param {String} pagehash\r\n * @param {String} region\r\n * @return {Promise}\r\n */\r\nconst renderBlocks = async(addBlockUrl, pagehash, region) => {\r\n    // Fetch all addable blocks in the given page.\r\n    const blocks = await getAddableBlocks(pagehash);\r\n\r\n    return Templates.render('core/add_block_body', {\r\n        blocks: blocks,\r\n        url: addBlockUrl,\r\n        blockregion: region,\r\n        pagehash\r\n    });\r\n};\r\n\r\n/**\r\n * Method that fetches all addable blocks in a given page.\r\n *\r\n * @method getAddableBlocks\r\n * @param {String} pagehash\r\n * @return {Promise}\r\n */\r\nconst getAddableBlocks = async(pagehash) => {\r\n    const request = {\r\n        methodname: 'core_block_fetch_addable_blocks',\r\n        args: {\r\n            pagecontextid: 0,\r\n            pagetype: '',\r\n            pagelayout: '',\r\n            subpage: '',\r\n            pagehash: pagehash,\r\n        },\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Set up the actions.\r\n *\r\n * @method init\r\n * @param {String} addBlockUrl The add block URL\r\n * @param {String} pagehash\r\n */\r\nexport const init = (addBlockUrl = null, pagehash = '') => {\r\n    if (!listenerEventsRegistered) {\r\n        registerListenerEvents(addBlockUrl, pagehash);\r\n        listenerEventsRegistered = true;\r\n    }\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_templates","_ajax","_modalform","_modal_cancel","SELECTORS","listenerEventsRegistered","buildAddBlockModal","CancelModal","create","title","getString","renderBlocks","async","addBlockUrl","pagehash","region","blocks","getAddableBlocks","Templates","render","url","blockregion","request","methodname","args","pagecontextid","pagetype","pagelayout","subpage","Ajax","call","_exports","init","registerListenerEvents","addBlockModal","document","addEventListener","showAddBlockForm","target","closest","preventDefault","modalForm","ModalForm","modalConfig","getAttribute","blockname","formClass","returnFocus","events","FORM_SUBMITTED","destroy","window","location","reload","show","addBlock","addBlockModalUrl","dataset","then","modal","modalBody","setBody","catch","arguments","length","undefined"],"mappings":"+LA2B4C,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;kFAJ5CG,WAAAJ,uBAAAI,YAEAC,MAAAL,uBAAAK,OACAC,WAAAN,uBAAAM,YACAC,cAAAP,uBAAAO,eAEA,MAAMC,oBACS,wBADTA,0BAEe,mEAIrB,IAAIC,0BAA2B,EAS/B,MAwDMC,mBAAqBA,IAAMC,cAAWR,QAACS,OAAO,CAChDC,OAAO,EAAAC,KAASA,WAAC,cAYfC,aAAeC,MAAMC,YAAaC,SAAUC,UAE9C,MAAMC,aAAeC,iBAAiBH,UAEtC,OAAOI,WAASnB,QAACoB,OAAO,sBAAuB,CAC3CH,OAAQA,OACRI,IAAKP,YACLQ,YAAaN,OACbD,mBACF,EAUAG,iBAAmBL,iBACrB,MAAMU,QAAU,CACZC,WAAY,kCACZC,KAAM,CACFC,cAAe,EACfC,SAAU,GACVC,WAAY,GACZC,QAAS,GACTd,SAAUA,WAIlB,OAAOe,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EAehCS,SAAAC,KALkB,WACX3B,2BA/GsB4B,EAACpB,YAAaC,YACzC,IAAIoB,cAAgB,KACpBC,SAASC,iBAAiB,SAASvC,IAE/B,MAAMwC,iBAAmBxC,EAAEyC,OAAOC,QAAQnC,2BAC1C,GAAIiC,iBAAkB,CAClBxC,EAAE2C,iBAEF,MAAMC,UAAY,IAAIC,WAAAA,QAAU,CAC5BC,YAAa,CACTlC,OAAO,EAAAC,KAASA,WAAC,WAAY,aACzB2B,iBAAiBO,aAAa,qBAEtCpB,KAAM,CAACqB,UAAWR,iBAAiBO,aAAa,kBAAmB9B,kBAC/DO,YAAagB,iBAAiBO,aAAa,qBAC/CE,UAAWT,iBAAiBO,aAAa,kBACzCG,YAAaV,mBAGjBI,UAAUL,iBAAiBK,UAAUO,OAAOC,gBAAgB,KACxDf,cAAcgB,UACdC,OAAOC,SAASC,QAAQ,IAG5BZ,UAAUa,MACd,CAEA,MAAMC,SAAW1D,EAAEyC,OAAOC,QAAQnC,qBAClC,GAAImD,SAAU,CACV1D,EAAE2C,iBAEF,IAAIgB,iBAAmB3C,aAAe0C,SAASE,QAAQrC,IAEvDd,qBACKoD,MAAKC,QACFzB,cAAgByB,MAChB,MAAMC,UAAYjD,aAAa6C,iBAAkB1C,SAC7CyC,SAASX,aAAa,qBAI1B,OAHAe,MAAME,QAAQD,WACdD,MAAML,OAECM,SAAS,IAEnBE,OAAM,KACH5B,cAAcgB,SAAS,GAEnC,IACF,EAiEEjB,CAFwB8B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAcA,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAG5C1D,0BAA2B,GAEjC"}