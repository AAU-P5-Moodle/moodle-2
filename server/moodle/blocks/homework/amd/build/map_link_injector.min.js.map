{"version":3,"file":"map_link_injector.min.js","sources":["../src/map_link_injector.js"],"sourcesContent":["define(function() {\n    return {\n        init: function() {\n            if (!document.querySelector('[data-region=\"calendar\"]')) {\n                return;\n            }\n\n            function DisplayMapLink() {\n                // Run a timeout of 500ms to make sure the modal and content are there.\n                setTimeout(() => {\n                    // Select the element containing location details.\n                    const locationContent = document.querySelector('.location-content');\n\n                    if (!locationContent) {\n                        return;\n                    }\n\n                    /*\n                    Define a regular expression to match and extract specific parts of the location text.\n                    The regex is designed to capture:\n                    1. The street address (e.g., \"Alfred Nobels Vej 27\").\n                    2. The city name (e.g., \"Aalborg\").\n\n                    Example of input:\n                    S.B2.02 (Auditorium), Alfred Nobels Vej 27 - Novi 8 (Anv27), Aalborg\n                    */\n                    const regex = /,\\s*(([a-zA-Zæøå 0-9]|-[^\\s])+)\\s*[^)]*\\),\\s*(.*)/;\n\n                    const realLocation = locationContent.textContent\n                        .split(\"\\n\") // Split the text into an array of lines\n                        .map(str => {\n                            const match = str.match(regex);\n                            if (match) {\n                                const location = match[1];\n                                const city = match[3];\n                                return `${location}, ${city}`;\n                            }\n                            return str;\n                        }).join(\"\\n\");\n\n                    const link = document.createElement('a');\n\n                    // Set the Google Maps search URL as the hyperlink, using the formatted location details.\n                    link.href = `https://www.google.com/maps/search/?api=1&query=${realLocation}`;\n\n                    link.textContent = locationContent.textContent;\n\n                    // Open the link in a new browser tab or window.\n                    link.target = '_blank';\n\n                    locationContent.innerHTML = '';\n                    locationContent.appendChild(link);\n\n                }, 500);\n            }\n\n            // Observer setup\n            const observer = new MutationObserver((mutations) => {\n                mutations.forEach((mutation) => {\n                    // Determine if the modal is shown based on the \"show\" class\n\n                    if (mutation.target.classList.contains('show')) {\n                        DisplayMapLink();\n                    }\n                });\n            });\n\n            // Observe function called when the event button is clicked\n            const observeBackdrop = () => {\n                // Get the modal\n                const modalBackdrop = document.querySelector('[data-region=\"modal-backdrop\"]');\n\n                // Determine if the modal backdrop is there\n                if (modalBackdrop) {\n                    // Start observing when the modal has appeared\n                    observer.observe(modalBackdrop, {attributes: true, attributeFilter: ['class']});\n                } else {\n                    // If the modal was not found, try again every 100 ms\n                    setTimeout(observeBackdrop, 100);\n                }\n            };\n\n            // Perform an initial check for the modal\n            DisplayMapLink();\n\n            // Add an event listener to all event buttons\n            document.querySelectorAll('[data-region]').forEach((element) => {\n                element.addEventListener('click', addEventListenerToButtons);\n            });\n\n            function addEventListenerToButtons(event) {\n                // Determine if the data region is an event button\n                const target = event.target;\n                if (target.classList.contains('eventname') || target.closest('.eventname')) {\n                    DisplayMapLink();\n                    observeBackdrop();\n                    // Remove the event listener after modal has appeared due to the observer being better\n                    removeEventListeners();\n                }\n            }\n\n            function removeEventListeners() {\n                document.querySelectorAll('[data-region]').forEach((element) => {\n                    element.removeEventListener('click', addEventListenerToButtons);\n                });\n            }\n        }\n    };\n});\n"],"names":["define","init","document","querySelector","DisplayMapLink","setTimeout","locationContent","regex","realLocation","textContent","split","map","str","match","join","link","createElement","href","target","innerHTML","appendChild","observer","MutationObserver","mutations","forEach","mutation","classList","contains","observeBackdrop","modalBackdrop","observe","attributes","attributeFilter","addEventListenerToButtons","event","closest","querySelectorAll","element","removeEventListener","addEventListener"],"mappings":"AAAAA,2CAAO,WACH,MAAO,CACHC,KAAM,WACF,IAAKC,SAASC,cAAc,4BACxB,OAGJ,SAASC,iBAELC,YAAW,KAEP,MAAMC,gBAAkBJ,SAASC,cAAc,qBAE/C,IAAKG,gBACD,OAYJ,MAAMC,MAAQ,oDAERC,aAAeF,gBAAgBG,YAChCC,MAAM,MACNC,KAAIC,MACD,MAAMC,MAAQD,IAAIC,MAAMN,OACxB,GAAIM,MAAO,CAGP,MAAO,GAFUA,MAAM,OACVA,MAAM,IAEvB,CACA,OAAOD,GAAG,IACXE,KAAK,MAENC,KAAOb,SAASc,cAAc,KAGpCD,KAAKE,KAAO,mDAAmDT,eAE/DO,KAAKN,YAAcH,gBAAgBG,YAGnCM,KAAKG,OAAS,SAEdZ,gBAAgBa,UAAY,GAC5Bb,gBAAgBc,YAAYL,KAAK,GAElC,IACP,CAGA,MAAMM,SAAW,IAAIC,kBAAkBC,YACnCA,UAAUC,SAASC,WAGXA,SAASP,OAAOQ,UAAUC,SAAS,SACnCvB,gBACJ,GACF,IAIAwB,gBAAkBA,KAEpB,MAAMC,cAAgB3B,SAASC,cAAc,kCAGzC0B,cAEAR,SAASS,QAAQD,cAAe,CAACE,YAAY,EAAMC,gBAAiB,CAAC,WAGrE3B,WAAWuB,gBAAiB,IAChC,EAWJ,SAASK,0BAA0BC,OAE/B,MAAMhB,OAASgB,MAAMhB,QACjBA,OAAOQ,UAAUC,SAAS,cAAgBT,OAAOiB,QAAQ,iBACzD/B,iBACAwB,kBAOJ1B,SAASkC,iBAAiB,iBAAiBZ,SAASa,UAChDA,QAAQC,oBAAoB,QAASL,0BAA0B,IAJvE,CAhBA7B,iBAGAF,SAASkC,iBAAiB,iBAAiBZ,SAASa,UAChDA,QAAQE,iBAAiB,QAASN,0BAA0B,GAmBpE,EAER"}