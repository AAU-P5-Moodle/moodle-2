{"version":3,"file":"repository.min.js","sources":["../src/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Module to handle AJAX interactions.\r\n *\r\n * @module     core_user/repository\r\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Config from 'core/config';\r\nimport {call as fetchMany} from 'core/ajax';\r\nimport Fetch from 'core/fetch';\r\n\r\nconst checkUserId = (userid) => {\r\n    if (Number(userid) === 0) {\r\n        return;\r\n    }\r\n    if (Number(userid) === Config.userId) {\r\n        return;\r\n    }\r\n    throw new Error(\r\n        `Invalid user ID: ${userid}. It is only possible to manage preferences for the current user.`,\r\n    );\r\n};\r\n\r\n/**\r\n * Turn the response object into a Proxy object that will log a warning if the saved property is accessed.\r\n *\r\n * @param {Object} response\r\n * @param {Object} preferences The preferences that might be in the response\r\n * @return {Promise<Proxy>}\r\n */\r\nconst addLegacySavedProperty = (response, preferences) => {\r\n    const debugLogger = {\r\n        get(target, prop, receiver) {\r\n            if (prop === 'then') {\r\n                // To proxy a Promise we have to return null when the then key is requested.\r\n                return null;\r\n            }\r\n            if (prop === 'saved') {\r\n                window.console.warn(\r\n                    'The saved property is deprecated. Please use the response object directly.',\r\n                );\r\n\r\n                return preferences\r\n                    .filter((preference) => target.hasOwnProperty(preference.name))\r\n                    .map((preference) => ({\r\n                        name: preference.name,\r\n                        userid: Config.userid,\r\n                    }));\r\n            }\r\n            return Reflect.get(target, prop, receiver);\r\n        },\r\n    };\r\n\r\n    return Promise.resolve(new Proxy(response, debugLogger));\r\n};\r\n\r\n/**\r\n * Get single user preference\r\n *\r\n * @param {String} name Name of the preference\r\n * @param {Number} userid User ID (defaults to current user)\r\n * @return {Promise}\r\n */\r\nexport const getUserPreference = (name, userid = 0) => getUserPreferences(name, userid)\r\n    .then((response) => response[name]);\r\n\r\n/**\r\n * Get multiple user preferences\r\n *\r\n * @param {String|null} name Name of the preference (omit if you want to retrieve all)\r\n * @param {Number} userid User ID (defaults to current user)\r\n * @return {Promise<object<string, string>>}\r\n */\r\nexport const getUserPreferences = (name = null, userid = 0) => {\r\n    checkUserId(userid);\r\n    const endpoint = ['current', 'preferences'];\r\n\r\n    if (name) {\r\n        endpoint.push(name);\r\n    }\r\n\r\n    return Fetch.performGet('core_user', endpoint.join('/')).then((response) => response.json());\r\n};\r\n\r\n/**\r\n * Set single user preference\r\n *\r\n * @param {String} name Name of the preference\r\n * @param {String|null} value Value of the preference (omit if you want to remove the current value)\r\n * @param {Number} userid User ID (defaults to current user)\r\n * @return {Promise}\r\n */\r\nexport const setUserPreference = (name, value = null, userid = 0) => {\r\n    checkUserId(userid);\r\n    return Fetch.performPost(\r\n        'core_user',\r\n        `current/preferences/${name}`,\r\n        {\r\n            body: {value},\r\n        },\r\n    )\r\n    // Return the result of the fetch call, and also add in the legacy saved property.\r\n    .then((response) => response.json())\r\n    .then((response) => addLegacySavedProperty(response, [{name}]));\r\n};\r\n\r\n/**\r\n * Set multiple user preferences\r\n *\r\n * @param {Object[]} preferences Array of preferences containing name/value/userid attributes\r\n * @return {Promise}\r\n */\r\nexport const setUserPreferences = (preferences) => {\r\n    preferences.forEach((preference) => checkUserId(preference.userid));\r\n    return Fetch.performPost(\r\n        'core_user',\r\n        'current/preferences',\r\n        {\r\n            body: {\r\n                preferences: Object.fromEntries (preferences.map((preference) => ([preference.name, preference.value]))),\r\n            },\r\n        },\r\n    )\r\n    // Return the result of the fetch call, and also add in the legacy saved property.\r\n    .then((response) => response.json())\r\n    .then((response) => addLegacySavedProperty(response, preferences));\r\n};\r\n\r\n/**\r\n * Unenrol the user with the specified user enrolmentid ID.\r\n *\r\n * @param {Number} userEnrolmentId\r\n * @return {Promise}\r\n */\r\nexport const unenrolUser = userEnrolmentId => {\r\n    return fetchMany([{\r\n        methodname: 'core_enrol_unenrol_user_enrolment',\r\n        args: {\r\n            ueid: userEnrolmentId,\r\n        },\r\n    }])[0];\r\n};\r\n\r\n/**\r\n * Submit the user enrolment form with the specified form data.\r\n *\r\n * @param {String} formdata\r\n * @return {Promise}\r\n */\r\nexport const submitUserEnrolmentForm = formdata => {\r\n    return fetchMany([{\r\n        methodname: 'core_enrol_submit_user_enrolment_form',\r\n        args: {\r\n            formdata,\r\n        },\r\n    }])[0];\r\n};\r\n\r\nexport const createNotesForUsers = notes => {\r\n    return fetchMany([{\r\n        methodname: 'core_notes_create_notes',\r\n        args: {\r\n            notes\r\n        }\r\n    }])[0];\r\n};\r\n\r\nexport const sendMessagesToUsers = messages => {\r\n    return fetchMany([{\r\n        methodname: 'core_message_send_instant_messages',\r\n        args: {messages}\r\n    }])[0];\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_config","_fetch","checkUserId","userid","Number","Config","userId","Error","addLegacySavedProperty","response","preferences","debugLogger","get","target","prop","receiver","window","console","warn","filter","preference","hasOwnProperty","name","map","Reflect","Promise","resolve","Proxy","_exports","getUserPreference","getUserPreferences","arguments","length","undefined","then","endpoint","push","Fetch","performGet","join","json","setUserPreference","value","performPost","body","setUserPreferences","forEach","Object","fromEntries","unenrolUser","userEnrolmentId","fetchMany","call","methodname","args","ueid","submitUserEnrolmentForm","formdata","createNotesForUsers","notes","sendMessagesToUsers","messages"],"mappings":"0HAyB+B,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;kSAF/BG,QAAAJ,uBAAAI,SAEAC,OAAAL,uBAAAK,QAEA,MAAMC,YAAeC,SACjB,GAAuB,IAAnBC,OAAOD,SAGPC,OAAOD,UAAYE,QAAMN,QAACO,OAG9B,MAAM,IAAIC,MACN,oBAAoBJ,0EACvB,EAUCK,uBAAyBA,CAACC,SAAUC,eACtC,MAAMC,YAAc,CAChBC,IAAGA,CAACC,OAAQC,KAAMC,WACD,SAATD,KAEO,KAEE,UAATA,MACAE,OAAOC,QAAQC,KACX,8EAGGR,YACFS,QAAQC,YAAeP,OAAOQ,eAAeD,WAAWE,QACxDC,KAAKH,aAAgB,CAClBE,KAAMF,WAAWE,KACjBnB,OAAQE,gBAAOF,YAGpBqB,QAAQZ,IAAIC,OAAQC,KAAMC,WAIzC,OAAOU,QAAQC,QAAQ,IAAIC,MAAMlB,SAAUE,aAAa,EAWpBiB,SAAAC,kBADP,SAACP,MAAgB,OAAKQ,mBAAmBR,KAA5BS,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAC5CG,MAAMzB,UAAaA,SAASa,OAAM,EAShC,MAAMQ,mBAAqB,WAA6B,IAA5BR,KAAIS,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACtC7B,YADkD6B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAErD,MAAMI,SAAW,CAAC,UAAW,eAM7B,OAJIb,MACAa,SAASC,KAAKd,MAGXe,OAAAA,QAAMC,WAAW,YAAaH,SAASI,KAAK,MAAML,MAAMzB,UAAaA,SAAS+B,UACvFZ,SAAAE,mBAAAA,mBAsBAF,SAAAa,kBAZ+B,SAACnB,MAAmC,IAA7BoB,MAAKX,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAE5C,OADA7B,YADwD6B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAEpDM,OAAAA,QAAMM,YACT,YACA,uBAAuBrB,OACvB,CACIsB,KAAM,CAACF,eAIdR,MAAMzB,UAAaA,SAAS+B,SAC5BN,MAAMzB,UAAaD,uBAAuBC,SAAU,CAAC,CAACa,gBAuBzDM,SAAAiB,mBAdiCnC,cAC/BA,YAAYoC,SAAS1B,YAAelB,YAAYkB,WAAWjB,UACpDkC,eAAMM,YACT,YACA,sBACA,CACIC,KAAM,CACFlC,YAAaqC,OAAOC,YAAatC,YAAYa,KAAKH,YAAgB,CAACA,WAAWE,KAAMF,WAAWsB,aAK1GR,MAAMzB,UAAaA,SAAS+B,SAC5BN,MAAMzB,UAAaD,uBAAuBC,SAAUC,gBAgBvDkB,SAAAqB,YAPyBC,kBAChB,EAAAC,MAASC,MAAC,CAAC,CACdC,WAAY,oCACZC,KAAM,CACFC,KAAML,oBAEV,GAgBNtB,SAAA4B,wBAPqCC,WAC5B,EAAAN,MAASC,MAAC,CAAC,CACdC,WAAY,wCACZC,KAAM,CACFG,sBAEJ,GAUN7B,SAAA8B,oBAPiCC,QACxB,EAAAR,MAASC,MAAC,CAAC,CACdC,WAAY,0BACZC,KAAM,CACFK,gBAEJ,GAQN/B,SAAAgC,oBALiCC,WACxB,EAAAV,MAASC,MAAC,CAAC,CACdC,WAAY,qCACZC,KAAM,CAACO,sBACP,EACN"}