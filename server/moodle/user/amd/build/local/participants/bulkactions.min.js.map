{"version":3,"file":"bulkactions.min.js","sources":["../../../src/local/participants/bulkactions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Bulk actions for lists of participants.\r\n *\r\n * @module     core_user/local/participants/bulkactions\r\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport * as Repository from 'core_user/repository';\r\nimport * as Str from 'core/str';\r\nimport ModalEvents from 'core/modal_events';\r\nimport SaveCancelModal from 'core/modal_save_cancel';\r\nimport Notification from 'core/notification';\r\nimport Templates from 'core/templates';\r\nimport {add as notifyUser} from 'core/toast';\r\n\r\n/**\r\n * Show the add note popup\r\n *\r\n * @param {Number} courseid\r\n * @param {Number[]} users\r\n * @param {String[]} noteStateNames\r\n * @param {HTMLElement} stateHelpIcon\r\n * @return {Promise}\r\n */\r\nexport const showAddNote = (courseid, users, noteStateNames, stateHelpIcon) => {\r\n    if (!users.length) {\r\n        // No users were selected.\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const states = [];\r\n    for (let key in noteStateNames) {\r\n        switch (key) {\r\n            case 'draft':\r\n                states.push({value: 'personal', label: noteStateNames[key]});\r\n                break;\r\n            case 'public':\r\n                states.push({value: 'course', label: noteStateNames[key], selected: 1});\r\n                break;\r\n            case 'site':\r\n                states.push({value: key, label: noteStateNames[key]});\r\n                break;\r\n        }\r\n    }\r\n\r\n    const context = {\r\n        stateNames: states,\r\n        stateHelpIcon: stateHelpIcon.innerHTML,\r\n    };\r\n\r\n    let titlePromise = null;\r\n    if (users.length === 1) {\r\n        titlePromise = Str.get_string('addbulknotesingle', 'core_notes');\r\n    } else {\r\n        titlePromise = Str.get_string('addbulknote', 'core_notes', users.length);\r\n    }\r\n\r\n    return SaveCancelModal.create({\r\n        body: Templates.render('core_user/add_bulk_note', context),\r\n        title: titlePromise,\r\n        buttons: {\r\n            save: titlePromise,\r\n        },\r\n        removeOnClose: true,\r\n        show: true,\r\n    })\r\n    .then(modal => {\r\n        modal.getRoot().on(ModalEvents.save, () => submitAddNote(courseid, users, modal));\r\n        return modal;\r\n    });\r\n};\r\n\r\n/**\r\n * Add a note to this list of users.\r\n *\r\n * @param {Number} courseid\r\n * @param {Number[]} users\r\n * @param {Modal} modal\r\n * @return {Promise}\r\n */\r\nconst submitAddNote = (courseid, users, modal) => {\r\n    const text = modal.getRoot().find('form textarea').val();\r\n    const publishstate = modal.getRoot().find('form select').val();\r\n\r\n    const notes = users.map(userid => {\r\n        return {\r\n            userid,\r\n            text,\r\n            courseid,\r\n            publishstate,\r\n        };\r\n    });\r\n\r\n    return Repository.createNotesForUsers(notes)\r\n    .then(noteIds => {\r\n        if (noteIds.length === 1) {\r\n            return Str.get_string('addbulknotedonesingle', 'core_notes');\r\n        } else {\r\n            return Str.get_string('addbulknotedone', 'core_notes', noteIds.length);\r\n        }\r\n    })\r\n    .then(msg => notifyUser(msg))\r\n    .catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Show the send message popup.\r\n *\r\n * @param {Number[]} users\r\n * @return {Promise}\r\n */\r\nexport const showSendMessage = users => {\r\n    if (!users.length) {\r\n        // Nothing to do.\r\n        return Promise.resolve();\r\n    }\r\n\r\n    let titlePromise;\r\n    if (users.length === 1) {\r\n        titlePromise = Str.get_string('sendbulkmessagesingle', 'core_message');\r\n    } else {\r\n        titlePromise = Str.get_string('sendbulkmessage', 'core_message', users.length);\r\n    }\r\n\r\n    return SaveCancelModal.create({\r\n        body: Templates.render('core_user/send_bulk_message', {}),\r\n        title: titlePromise,\r\n        buttons: {\r\n            save: titlePromise,\r\n        },\r\n        removeOnClose: true,\r\n        show: true,\r\n    })\r\n    .then(modal => {\r\n        modal.getRoot().on(ModalEvents.save, (e) => {\r\n            const text = modal.getRoot().find('form textarea').val();\r\n            if (text.trim() === '') {\r\n                modal.getRoot().find('[data-role=\"messagetextrequired\"]').removeAttr('hidden');\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n\r\n            submitSendMessage(modal, users, text);\r\n        });\r\n\r\n        return modal;\r\n    });\r\n};\r\n\r\n/**\r\n * Send a message to these users.\r\n *\r\n * @param {Modal} modal\r\n * @param {Number[]} users\r\n * @param {String} text\r\n * @return {Promise}\r\n */\r\nconst submitSendMessage = (modal, users, text) => {\r\n    const messages = users.map(touserid => {\r\n        return {\r\n            touserid,\r\n            text,\r\n        };\r\n    });\r\n\r\n    return Repository.sendMessagesToUsers(messages)\r\n    .then(messageIds => {\r\n        if (messageIds.length == 1) {\r\n            return Str.get_string('sendbulkmessagesentsingle', 'core_message');\r\n        } else {\r\n            return Str.get_string('sendbulkmessagesent', 'core_message', messageIds.length);\r\n        }\r\n    })\r\n    .then(msg => notifyUser(msg))\r\n    .catch(Notification.exception);\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","_interopRequireWildcard","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","Repository","Str","_modal_events","_modal_save_cancel","_notification","_templates","_exports","showAddNote","courseid","users","noteStateNames","stateHelpIcon","length","Promise","resolve","states","key","push","value","label","selected","context","stateNames","innerHTML","titlePromise","get_string","SaveCancelModal","create","body","Templates","render","title","buttons","save","removeOnClose","show","then","modal","getRoot","on","ModalEvents","submitAddNote","text","find","val","publishstate","notes","map","userid","createNotesForUsers","noteIds","msg","notifyUser","add","catch","Notification","exception","showSendMessage","trim","removeAttr","preventDefault","submitSendMessage","messages","touserid","sendMessagesToUsers","messageIds"],"mappings":"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"}