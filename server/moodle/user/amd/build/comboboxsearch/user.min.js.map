{"version":3,"file":"user.min.js","sources":["../../src/comboboxsearch/user.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Allow the user to search for learners.\r\n *\r\n * @module    core_user/comboboxsearch/user\r\n * @copyright 2023 Mathew May <mathew.solutions>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport search_combobox from 'core/comboboxsearch/search_combobox';\r\nimport {getStrings} from 'core/str';\r\nimport {renderForPromise, replaceNodeContents} from 'core/templates';\r\nimport $ from 'jquery';\r\n\r\nexport default class UserSearch extends search_combobox {\r\n\r\n    courseID;\r\n    groupID;\r\n\r\n    // A map of user profile field names that is human-readable.\r\n    profilestringmap = null;\r\n\r\n    constructor() {\r\n        super();\r\n        // Register a couple of events onto the document since we need to check if they are moving off the component.\r\n        ['click', 'focus'].forEach(eventType => {\r\n            // Since we are handling dropdowns manually, ensure we can close it when moving off.\r\n            document.addEventListener(eventType, e => {\r\n                if (this.searchDropdown.classList.contains('show') && !this.combobox.contains(e.target)) {\r\n                    this.toggleDropdown();\r\n                }\r\n            }, true);\r\n        });\r\n\r\n        // Register keyboard events.\r\n        this.component.addEventListener('keydown', this.keyHandler.bind(this));\r\n\r\n        // Define our standard lookups.\r\n        this.selectors = {...this.selectors,\r\n            courseid: '[data-region=\"courseid\"]',\r\n            groupid: '[data-region=\"groupid\"]',\r\n            resetPageButton: '[data-action=\"resetpage\"]',\r\n        };\r\n\r\n        this.courseID = this.component.querySelector(this.selectors.courseid).dataset.courseid;\r\n        this.groupID = document.querySelector(this.selectors.groupid)?.dataset?.groupid;\r\n        this.instance = this.component.querySelector(this.selectors.instance).dataset.instance;\r\n\r\n        // We need to render some content by default for ARIA purposes.\r\n        this.renderDefault();\r\n    }\r\n\r\n    static init() {\r\n        return new UserSearch();\r\n    }\r\n\r\n    /**\r\n     * The overall div that contains the searching widget.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    componentSelector() {\r\n        return '.user-search';\r\n    }\r\n\r\n    /**\r\n     * The dropdown div that contains the searching widget result space.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    dropdownSelector() {\r\n        return '.usersearchdropdown';\r\n    }\r\n\r\n    /**\r\n     * Build the content then replace the node.\r\n     */\r\n    async renderDropdown() {\r\n        const {html, js} = await renderForPromise('core_user/comboboxsearch/resultset', {\r\n            users: this.getMatchedResults().slice(0, 5),\r\n            hasresults: this.getMatchedResults().length > 0,\r\n            instance: this.instance,\r\n            matches: this.getMatchedResults().length,\r\n            searchterm: this.getSearchTerm(),\r\n            selectall: this.selectAllResultsLink(),\r\n        });\r\n        replaceNodeContents(this.getHTMLElements().searchDropdown, html, js);\r\n        // Remove aria-activedescendant when the available options change.\r\n        this.searchInput.removeAttribute('aria-activedescendant');\r\n    }\r\n\r\n    /**\r\n     * Build the content then replace the node by default we want our form to exist.\r\n     */\r\n    async renderDefault() {\r\n        this.setMatchedResults(await this.filterDataset(await this.getDataset()));\r\n        this.filterMatchDataset();\r\n\r\n        await this.renderDropdown();\r\n    }\r\n\r\n    /**\r\n     * Get the data we will be searching against in this component.\r\n     *\r\n     * @returns {Promise<*>}\r\n     */\r\n    fetchDataset() {\r\n        throw new Error(`fetchDataset() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Dictate to the search component how and what we want to match upon.\r\n     *\r\n     * @param {Array} filterableData\r\n     * @returns {Array} The users that match the given criteria.\r\n     */\r\n    async filterDataset(filterableData) {\r\n        if (this.getPreppedSearchTerm()) {\r\n            const stringMap = await this.getStringMap();\r\n            return filterableData.filter((user) => Object.keys(user).some((key) => {\r\n                if (user[key] === \"\" || user[key] === null || !stringMap.get(key)) {\r\n                    return false;\r\n                }\r\n                return user[key].toString().toLowerCase().includes(this.getPreppedSearchTerm());\r\n            }));\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\r\n     *\r\n     * @returns {Array} The results with the matched fields inserted.\r\n     */\r\n    async filterMatchDataset() {\r\n        const stringMap = await this.getStringMap();\r\n        this.setMatchedResults(\r\n            this.getMatchedResults().map((user) => {\r\n                for (const [key, value] of Object.entries(user)) {\r\n                    // Sometimes users have null values in their profile fields.\r\n                    if (value === null) {\r\n                        continue;\r\n                    }\r\n\r\n                    const valueString = value.toString().toLowerCase();\r\n                    const preppedSearchTerm = this.getPreppedSearchTerm();\r\n                    const searchTerm = this.getSearchTerm();\r\n\r\n                    // Ensure we match only on expected keys.\r\n                    const matchingFieldName = stringMap.get(key);\r\n                    if (matchingFieldName && valueString.includes(preppedSearchTerm)) {\r\n                        user.matchingFieldName = matchingFieldName;\r\n\r\n                        // Safely prepare our matching results.\r\n                        const escapedValueString = valueString.replace(/</g, '&lt;');\r\n                        const escapedMatchingField = escapedValueString.replace(\r\n                            preppedSearchTerm.replace(/</g, '&lt;'),\r\n                            `<span class=\"font-weight-bold\">${searchTerm.replace(/</g, '&lt;')}</span>`\r\n                        );\r\n\r\n                        if (user.email) {\r\n                            user.matchingField = `${escapedMatchingField} (${user.email})`;\r\n                        } else {\r\n                            user.matchingField = escapedMatchingField;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                return user;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * The handler for when a user changes the value of the component (selects an option from the dropdown).\r\n     *\r\n     * @param {Event} e The change event.\r\n     */\r\n    changeHandler(e) {\r\n        this.toggleDropdown(); // Otherwise the dropdown stays open when user choose an option using keyboard.\r\n\r\n        if (e.target.value === '0') {\r\n            window.location = this.selectAllResultsLink();\r\n        } else {\r\n            window.location = this.selectOneLink(e.target.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The handler for when a user presses a key within the component.\r\n     *\r\n     * @param {KeyboardEvent} e The triggering event that we are working with.\r\n     */\r\n    keyHandler(e) {\r\n        // Switch the key presses to handle keyboard nav.\r\n        switch (e.key) {\r\n            case 'ArrowUp':\r\n            case 'ArrowDown':\r\n                if (\r\n                    this.getSearchTerm() !== ''\r\n                    && !this.searchDropdown.classList.contains('show')\r\n                    && e.target.contains(this.combobox)\r\n                ) {\r\n                    this.renderAndShow();\r\n                }\r\n                break;\r\n            case 'Enter':\r\n            case ' ':\r\n                if (e.target.closest(this.selectors.resetPageButton)) {\r\n                    e.stopPropagation();\r\n                    window.location = e.target.closest(this.selectors.resetPageButton).href;\r\n                    break;\r\n                }\r\n                break;\r\n            case 'Escape':\r\n                this.toggleDropdown();\r\n                this.searchInput.focus({preventScroll: true});\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When called, hide or show the users dropdown.\r\n     *\r\n     * @param {Boolean} on Flag to toggle hiding or showing values.\r\n     */\r\n    toggleDropdown(on = false) {\r\n        if (on) {\r\n            this.searchDropdown.classList.add('show');\r\n            $(this.searchDropdown).show();\r\n            this.getHTMLElements().searchInput.setAttribute('aria-expanded', 'true');\r\n            this.searchInput.focus({preventScroll: true});\r\n        } else {\r\n            this.searchDropdown.classList.remove('show');\r\n            $(this.searchDropdown).hide();\r\n\r\n            // As we are manually handling the dropdown, we need to do some housekeeping manually.\r\n            this.getHTMLElements().searchInput.setAttribute('aria-expanded', 'false');\r\n            this.searchInput.removeAttribute('aria-activedescendant');\r\n            this.searchDropdown.querySelectorAll('.active[role=\"option\"]').forEach(option => {\r\n                option.classList.remove('active');\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Build up the view all link.\r\n     */\r\n    selectAllResultsLink() {\r\n        throw new Error(`selectAllResultsLink() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Build up the view all link that is dedicated to a particular result.\r\n     * We will call this function when a user interacts with the combobox to redirect them to show their results in the page.\r\n     *\r\n     * @param {Number} userID The ID of the user selected.\r\n     */\r\n    selectOneLink(userID) {\r\n        throw new Error(`selectOneLink(${userID}) must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Given the set of profile fields we can possibly search, fetch their strings,\r\n     * so we can report to screen readers the field that matched.\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    getStringMap() {\r\n        if (!this.profilestringmap) {\r\n            const requiredStrings = [\r\n                'username',\r\n                'fullname',\r\n                'firstname',\r\n                'lastname',\r\n                'email',\r\n                'city',\r\n                'country',\r\n                'department',\r\n                'institution',\r\n                'idnumber',\r\n                'phone1',\r\n                'phone2',\r\n            ];\r\n            this.profilestringmap = getStrings(requiredStrings.map((key) => ({key})))\r\n                .then((stringArray) => new Map(\r\n                    requiredStrings.map((key, index) => ([key, stringArray[index]]))\r\n                ));\r\n        }\r\n        return this.profilestringmap;\r\n    }\r\n}\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_search_combobox","_jquery","UserSearch","search_combobox","courseID","groupID","profilestringmap","constructor","super","forEach","eventType","document","addEventListener","this","searchDropdown","classList","contains","combobox","target","toggleDropdown","component","keyHandler","bind","selectors","courseid","groupid","resetPageButton","querySelector","dataset","instance","renderDefault","init","componentSelector","dropdownSelector","renderDropdown","html","js","renderForPromise","users","getMatchedResults","slice","hasresults","length","matches","searchterm","getSearchTerm","selectall","selectAllResultsLink","replaceNodeContents","getHTMLElements","searchInput","removeAttribute","setMatchedResults","filterDataset","getDataset","filterMatchDataset","fetchDataset","Error","name","filterableData","getPreppedSearchTerm","stringMap","getStringMap","filter","user","Object","keys","some","key","get","toString","toLowerCase","includes","map","value","entries","valueString","preppedSearchTerm","searchTerm","matchingFieldName","escapedMatchingField","replace","email","matchingField","changeHandler","window","location","selectOneLink","renderAndShow","closest","stopPropagation","href","focus","preventScroll","arguments","undefined","add","$","show","setAttribute","remove","hide","querySelectorAll","option","userID","requiredStrings","getStrings","then","stringArray","Map","index","_exports"],"mappings":"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"}