{"version":3,"file":"aria.min.js","sources":["../src/aria.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Enhancements to Bootstrap components for accessibility.\r\n *\r\n * @module     theme_boost/aria\r\n * @copyright  2018 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport $ from 'jquery';\r\nimport Pending from 'core/pending';\r\nimport * as FocusLockManager from 'core/local/aria/focuslock';\r\n\r\n/**\r\n * Drop downs from bootstrap don't support keyboard accessibility by default.\r\n */\r\nconst dropdownFix = () => {\r\n    let focusEnd = false;\r\n    const setFocusEnd = (end = true) => {\r\n        focusEnd = end;\r\n    };\r\n    const getFocusEnd = () => {\r\n        const result = focusEnd;\r\n        focusEnd = false;\r\n        return result;\r\n    };\r\n\r\n    // Special handling for navigation keys when menu is open.\r\n    const shiftFocus = (element, focusCheck = null) => {\r\n        const pendingPromise = new Pending('core/aria:delayed-focus');\r\n        setTimeout(() => {\r\n            if (!focusCheck || focusCheck()) {\r\n                element.focus();\r\n            }\r\n\r\n            pendingPromise.resolve();\r\n        }, 50);\r\n    };\r\n\r\n    // Event handling for the dropdown menu button.\r\n    const handleMenuButton = e => {\r\n        const trigger = e.key;\r\n        let fixFocus = false;\r\n\r\n        // Space key or Enter key opens the menu.\r\n        if (trigger === ' ' || trigger === 'Enter') {\r\n            fixFocus = true;\r\n            // Cancel random scroll.\r\n            e.preventDefault();\r\n            // Open the menu instead.\r\n            e.target.click();\r\n        }\r\n\r\n        // Up and Down keys also open the menu.\r\n        if (trigger === 'ArrowUp' || trigger === 'ArrowDown') {\r\n            fixFocus = true;\r\n        }\r\n\r\n        if (!fixFocus) {\r\n            // No need to fix the focus. Return early.\r\n            return;\r\n        }\r\n\r\n        // Fix the focus on the menu items when the menu is opened.\r\n        const menu = e.target.parentElement.querySelector('[role=\"menu\"]');\r\n        let menuItems = false;\r\n        let foundMenuItem = false;\r\n\r\n        if (menu) {\r\n            menuItems = menu.querySelectorAll('[role=\"menuitem\"]');\r\n        }\r\n        if (menuItems && menuItems.length > 0) {\r\n            // Up key opens the menu at the end.\r\n            if (trigger === 'ArrowUp') {\r\n                setFocusEnd();\r\n            } else {\r\n                setFocusEnd(false);\r\n            }\r\n\r\n            if (getFocusEnd()) {\r\n                foundMenuItem = menuItems[menuItems.length - 1];\r\n            } else {\r\n                // The first menu entry, pretty reasonable.\r\n                foundMenuItem = menuItems[0];\r\n            }\r\n        }\r\n\r\n        if (foundMenuItem) {\r\n            shiftFocus(foundMenuItem);\r\n        }\r\n    };\r\n\r\n    // Search for menu items by finding the first item that has\r\n    // text starting with the typed character (case insensitive).\r\n    document.addEventListener('keypress', e => {\r\n        if (e.target.matches('.dropdown [role=\"menu\"] [role=\"menuitem\"]')) {\r\n            const menu = e.target.closest('[role=\"menu\"]');\r\n            if (!menu) {\r\n                return;\r\n            }\r\n            const menuItems = menu.querySelectorAll('[role=\"menuitem\"]');\r\n            if (!menuItems) {\r\n                return;\r\n            }\r\n\r\n            const trigger = e.key.toLowerCase();\r\n\r\n            for (let i = 0; i < menuItems.length; i++) {\r\n                const item = menuItems[i];\r\n                const itemText = item.text.trim().toLowerCase();\r\n                if (itemText.indexOf(trigger) == 0) {\r\n                    shiftFocus(item);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    // Keyboard navigation for arrow keys, home and end keys.\r\n    document.addEventListener('keydown', e => {\r\n\r\n        // We only want to set focus when users access the dropdown via keyboard as per\r\n        // guidelines defined in w3 aria practices 1.1 menu-button.\r\n        if (e.target.matches('[data-toggle=\"dropdown\"]')) {\r\n            handleMenuButton(e);\r\n        }\r\n\r\n        if (e.target.matches('.dropdown [role=\"menu\"] [role=\"menuitem\"]')) {\r\n            const trigger = e.key;\r\n            let next = false;\r\n            const menu = e.target.closest('[role=\"menu\"]');\r\n\r\n            if (!menu) {\r\n                return;\r\n            }\r\n            const menuItems = menu.querySelectorAll('[role=\"menuitem\"]');\r\n            if (!menuItems) {\r\n                return;\r\n            }\r\n            // Down key.\r\n            if (trigger == 'ArrowDown') {\r\n                for (let i = 0; i < menuItems.length - 1; i++) {\r\n                    if (menuItems[i] == e.target) {\r\n                        next = menuItems[i + 1];\r\n                        break;\r\n                    }\r\n                }\r\n                if (!next) {\r\n                    // Wrap to first item.\r\n                    next = menuItems[0];\r\n                }\r\n            } else if (trigger == 'ArrowUp') {\r\n                // Up key.\r\n                for (let i = 1; i < menuItems.length; i++) {\r\n                    if (menuItems[i] == e.target) {\r\n                        next = menuItems[i - 1];\r\n                        break;\r\n                    }\r\n                }\r\n                if (!next) {\r\n                    // Wrap to last item.\r\n                    next = menuItems[menuItems.length - 1];\r\n                }\r\n            } else if (trigger == 'Home') {\r\n                // Home key.\r\n                next = menuItems[0];\r\n\r\n            } else if (trigger == 'End') {\r\n                // End key.\r\n                next = menuItems[menuItems.length - 1];\r\n            }\r\n\r\n            // Variable next is set if we do want to act on the keypress.\r\n            if (next) {\r\n                e.preventDefault();\r\n                shiftFocus(next);\r\n            }\r\n            return;\r\n        }\r\n    });\r\n\r\n    $('.dropdown').on('shown.bs.dropdown', e => {\r\n        const dialog = e.target.querySelector(`#${e.relatedTarget.getAttribute('aria-controls')}[role=\"dialog\"]`);\r\n        if (dialog) {\r\n            // Use setTimeout to make sure the dialog is positioned correctly to prevent random scrolling.\r\n            setTimeout(() => {\r\n                FocusLockManager.trapFocus(dialog);\r\n            });\r\n        }\r\n    });\r\n\r\n    $('.dropdown').on('hidden.bs.dropdown', e => {\r\n        const dialog = e.target.querySelector(`#${e.relatedTarget.getAttribute('aria-controls')}[role=\"dialog\"]`);\r\n        if (dialog) {\r\n            FocusLockManager.untrapFocus();\r\n        }\r\n\r\n        // We need to focus on the menu trigger.\r\n        const trigger = e.target.querySelector('[data-toggle=\"dropdown\"]');\r\n        // If it's a click event, then no element is focused because the clicked element is inside a closed dropdown.\r\n        const focused = e.clickEvent?.target || (document.activeElement !== document.body ? document.activeElement : null);\r\n        if (trigger && focused && e.target.contains(focused)) {\r\n            shiftFocus(trigger, () => {\r\n                if (document.activeElement === document.body) {\r\n                    // If the focus is currently on the body, then we can safely assume that the focus needs to be updated.\r\n                    return true;\r\n                }\r\n\r\n                // If the focus is on a child of the clicked element still, then update the focus.\r\n                return e.target.contains(document.activeElement);\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * A lot of Bootstrap's out of the box features don't work if dropdown items are not focusable.\r\n */\r\nconst comboboxFix = () => {\r\n    $(document).on('show.bs.dropdown', e => {\r\n        if (e.relatedTarget.matches('[role=\"combobox\"]')) {\r\n            const combobox = e.relatedTarget;\r\n            const listbox = document.querySelector(`#${combobox.getAttribute('aria-controls')}[role=\"listbox\"]`);\r\n\r\n            if (listbox) {\r\n                const selectedOption = listbox.querySelector('[role=\"option\"][aria-selected=\"true\"]');\r\n\r\n                // To make sure ArrowDown doesn't move the active option afterwards.\r\n                setTimeout(() => {\r\n                    if (selectedOption) {\r\n                        selectedOption.classList.add('active');\r\n                        combobox.setAttribute('aria-activedescendant', selectedOption.id);\r\n                    } else {\r\n                        const firstOption = listbox.querySelector('[role=\"option\"]');\r\n                        firstOption.setAttribute('aria-selected', 'true');\r\n                        firstOption.classList.add('active');\r\n                        combobox.setAttribute('aria-activedescendant', firstOption.id);\r\n                    }\r\n                }, 0);\r\n            }\r\n        }\r\n    });\r\n\r\n    $(document).on('hidden.bs.dropdown', e => {\r\n        if (e.relatedTarget.matches('[role=\"combobox\"]')) {\r\n            const combobox = e.relatedTarget;\r\n            const listbox = document.querySelector(`#${combobox.getAttribute('aria-controls')}[role=\"listbox\"]`);\r\n\r\n            combobox.removeAttribute('aria-activedescendant');\r\n\r\n            if (listbox) {\r\n                setTimeout(() => {\r\n                    // Undo all previously highlighted options.\r\n                    listbox.querySelectorAll('.active[role=\"option\"]').forEach(option => {\r\n                        option.classList.remove('active');\r\n                    });\r\n                }, 0);\r\n            }\r\n        }\r\n    });\r\n\r\n    // Handling keyboard events for both navigating through and selecting options.\r\n    document.addEventListener('keydown', e => {\r\n        if (e.target.matches('[role=\"combobox\"][aria-controls]:not([aria-haspopup=dialog])')) {\r\n            const combobox = e.target;\r\n            const trigger = e.key;\r\n            let next = null;\r\n            const listbox = document.querySelector(`#${combobox.getAttribute('aria-controls')}[role=\"listbox\"]`);\r\n            const options = listbox.querySelectorAll('[role=\"option\"]');\r\n            const activeOption = listbox.querySelector('.active[role=\"option\"]');\r\n            const editable = combobox.hasAttribute('aria-autocomplete');\r\n\r\n            // Under the special case that the dropdown menu is being shown as a result of the key press (like when the user\r\n            // presses ArrowDown or Enter or ... to open the dropdown menu), activeOption is not set yet.\r\n            // It's because of a race condition with show.bs.dropdown event handler.\r\n            if (options && (activeOption || editable)) {\r\n                if (trigger == 'ArrowDown') {\r\n                    for (let i = 0; i < options.length - 1; i++) {\r\n                        if (options[i] == activeOption) {\r\n                            next = options[i + 1];\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (editable && !next) {\r\n                        next = options[0];\r\n                    }\r\n                } if (trigger == 'ArrowUp') {\r\n                    for (let i = 1; i < options.length; i++) {\r\n                        if (options[i] == activeOption) {\r\n                            next = options[i - 1];\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (editable && !next) {\r\n                        next = options[options.length - 1];\r\n                    }\r\n                } else if (trigger == 'Home' && !editable) {\r\n                    next = options[0];\r\n                } else if (trigger == 'End' && !editable) {\r\n                    next = options[options.length - 1];\r\n                } else if ((trigger == ' ' && !editable) || trigger == 'Enter') {\r\n                    e.preventDefault();\r\n                    selectOption(combobox, activeOption);\r\n                } else if (!editable) {\r\n                    // Search for options by finding the first option that has\r\n                    // text starting with the typed character (case insensitive).\r\n                    for (let i = 0; i < options.length; i++) {\r\n                        const option = options[i];\r\n                        const optionText = option.textContent.trim().toLowerCase();\r\n                        const keyPressed = e.key.toLowerCase();\r\n                        if (optionText.indexOf(keyPressed) == 0) {\r\n                            next = option;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Variable next is set if we do want to act on the keypress.\r\n                if (next) {\r\n                    e.preventDefault();\r\n                    if (activeOption) {\r\n                        activeOption.classList.remove('active');\r\n                    }\r\n                    next.classList.add('active');\r\n                    combobox.setAttribute('aria-activedescendant', next.id);\r\n                    next.scrollIntoView({block: 'nearest'});\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    document.addEventListener('click', e => {\r\n        const option = e.target.closest('[role=\"listbox\"] [role=\"option\"]');\r\n        if (option) {\r\n            const listbox = option.closest('[role=\"listbox\"]');\r\n            const combobox = document.querySelector(`[role=\"combobox\"][aria-controls=\"${listbox.id}\"]`);\r\n            if (combobox) {\r\n                selectOption(combobox, option);\r\n            }\r\n        }\r\n    });\r\n\r\n    // In case some code somewhere else changes the value of the combobox.\r\n    document.addEventListener('change', e => {\r\n        if (e.target.matches('input[type=\"hidden\"][id]')) {\r\n            const combobox = document.querySelector(`[role=\"combobox\"][data-input-element=\"${e.target.id}\"]`);\r\n            const option = e.target.parentElement.querySelector(`[role=\"option\"][data-value=\"${e.target.value}\"]`);\r\n\r\n            if (combobox && option) {\r\n                selectOption(combobox, option);\r\n            }\r\n        }\r\n    });\r\n\r\n    const selectOption = (combobox, option) => {\r\n        const listbox = option.closest('[role=\"listbox\"]');\r\n        const oldSelectedOption = listbox.querySelector('[role=\"option\"][aria-selected=\"true\"]');\r\n\r\n        if (oldSelectedOption != option) {\r\n            if (oldSelectedOption) {\r\n                oldSelectedOption.removeAttribute('aria-selected');\r\n            }\r\n            option.setAttribute('aria-selected', 'true');\r\n        }\r\n\r\n        if (combobox.hasAttribute('value')) {\r\n            combobox.value = option.dataset.shortText || option.textContent.replace(/[\\n\\r]+|[\\s]{2,}/g, ' ').trim();\r\n        } else {\r\n            const selectedOptionContainer = combobox.querySelector('[data-selected-option]');\r\n            if (selectedOptionContainer) {\r\n                selectedOptionContainer.textContent = option.dataset.shortText || option.textContent;\r\n            } else {\r\n                combobox.textContent = option.dataset.shortText || option.textContent;\r\n            }\r\n        }\r\n\r\n        if (combobox.dataset.inputElement) {\r\n            const inputElement = document.getElementById(combobox.dataset.inputElement);\r\n            if (inputElement && (inputElement.value != option.dataset.value)) {\r\n                inputElement.value = option.dataset.value;\r\n                inputElement.dispatchEvent(new Event('change', {bubbles: true}));\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * After page load, focus on any element with special autofocus attribute.\r\n */\r\nconst autoFocus = () => {\r\n    window.addEventListener(\"load\", () => {\r\n        const alerts = document.querySelectorAll('[data-aria-autofocus=\"true\"][role=\"alert\"]');\r\n        Array.prototype.forEach.call(alerts, autofocusElement => {\r\n            // According to the specification an role=\"alert\" region is only read out on change to the content\r\n            // of that region.\r\n            autofocusElement.innerHTML += ' ';\r\n            autofocusElement.removeAttribute('data-aria-autofocus');\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Changes the focus to the correct tab based on the key that is pressed.\r\n * @param {KeyboardEvent} e\r\n */\r\nconst updateTabFocus = e => {\r\n    const tabList = e.target.closest('[role=\"tablist\"]');\r\n    const vertical = tabList.getAttribute('aria-orientation') == 'vertical';\r\n    const rtl = window.right_to_left();\r\n    const arrowNext = vertical ? 'ArrowDown' : (rtl ? 'ArrowLeft' : 'ArrowRight');\r\n    const arrowPrevious = vertical ? 'ArrowUp' : (rtl ? 'ArrowRight' : 'ArrowLeft');\r\n    const tabs = Array.prototype.filter.call(\r\n        tabList.querySelectorAll('[role=\"tab\"]'),\r\n        tab => !!tab.offsetHeight); // We only work with the visible tabs.\r\n\r\n    for (let i = 0; i < tabs.length; i++) {\r\n        tabs[i].index = i;\r\n    }\r\n\r\n    switch (e.key) {\r\n        case arrowNext:\r\n            e.preventDefault();\r\n            if (e.target.index !== undefined && tabs[e.target.index + 1]) {\r\n                tabs[e.target.index + 1].focus();\r\n            } else {\r\n                tabs[0].focus();\r\n            }\r\n            break;\r\n        case arrowPrevious:\r\n            e.preventDefault();\r\n            if (e.target.index !== undefined && tabs[e.target.index - 1]) {\r\n                tabs[e.target.index - 1].focus();\r\n            } else {\r\n                tabs[tabs.length - 1].focus();\r\n            }\r\n            break;\r\n        case 'Home':\r\n            e.preventDefault();\r\n            tabs[0].focus();\r\n            break;\r\n        case 'End':\r\n            e.preventDefault();\r\n            tabs[tabs.length - 1].focus();\r\n    }\r\n};\r\n\r\n/**\r\n * Fix accessibility issues regarding tab elements focus and their tab order in Bootstrap navs.\r\n */\r\nconst tabElementFix = () => {\r\n    document.addEventListener('keydown', e => {\r\n        if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Home', 'End'].includes(e.key)) {\r\n            if (e.target.matches('[role=\"tablist\"] [role=\"tab\"]')) {\r\n                updateTabFocus(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    document.addEventListener('click', e => {\r\n        if (e.target.matches('[role=\"tablist\"] [data-toggle=\"tab\"], [role=\"tablist\"] [data-toggle=\"pill\"]')) {\r\n            const tabs = e.target.closest('[role=\"tablist\"]').querySelectorAll('[data-toggle=\"tab\"], [data-toggle=\"pill\"]');\r\n            e.preventDefault();\r\n            $(e.target).tab('show');\r\n            tabs.forEach(tab => {\r\n                tab.tabIndex = -1;\r\n            });\r\n            e.target.tabIndex = 0;\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Fix keyboard interaction with Bootstrap Collapse elements.\r\n *\r\n * @see {@link https://www.w3.org/TR/wai-aria-practices-1.1/#disclosure|WAI-ARIA Authoring Practices 1.1 - Disclosure (Show/Hide)}\r\n */\r\nconst collapseFix = () => {\r\n    document.addEventListener('keydown', e => {\r\n        if (e.target.matches('[data-toggle=\"collapse\"]')) {\r\n            // Pressing space should toggle expand/collapse.\r\n            if (e.key === ' ') {\r\n                e.preventDefault();\r\n                e.target.click();\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nexport const init = () => {\r\n    dropdownFix();\r\n    comboboxFix();\r\n    autoFocus();\r\n    tabElementFix();\r\n    collapseFix();\r\n};\r\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireDefault","__esModule","default","_jquery","_pending","FocusLockManager","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","dropdownFix","focusEnd","setFocusEnd","arguments","length","undefined","shiftFocus","element","focusCheck","pendingPromise","Pending","setTimeout","focus","resolve","handleMenuButton","trigger","key","fixFocus","preventDefault","target","click","menu","parentElement","querySelector","menuItems","foundMenuItem","querySelectorAll","getFocusEnd","result","document","addEventListener","matches","closest","toLowerCase","item","text","trim","indexOf","next","$","on","dialog","relatedTarget","getAttribute","trapFocus","untrapFocus","focused","clickEvent","activeElement","body","contains","tabElementFix","includes","tabList","vertical","rtl","window","right_to_left","arrowNext","arrowPrevious","tabs","Array","prototype","filter","tab","offsetHeight","index","updateTabFocus","forEach","tabIndex","_exports","init","comboboxFix","combobox","listbox","selectedOption","classList","add","setAttribute","id","firstOption","removeAttribute","option","remove","options","activeOption","editable","hasAttribute","selectOption","optionText","textContent","keyPressed","scrollIntoView","block","value","oldSelectedOption","dataset","shortText","replace","selectedOptionContainer","inputElement","getElementById","dispatchEvent","Event","bubbles","alerts","autofocusElement","innerHTML"],"mappings":"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"}