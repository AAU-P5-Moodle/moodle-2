{"version":3,"file":"block_management_table.min.js","sources":["../src/block_management_table.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport PluginManagementTable from './plugin_management_table';\r\nimport {refreshTableContent} from 'core_table/dynamic';\r\nimport {call as fetchMany} from 'core/ajax';\r\nimport Pending from 'core/pending';\r\nimport {fetchNotifications} from 'core/notification';\r\n\r\nexport default class extends PluginManagementTable {\r\n    constructor() {\r\n        super();\r\n        this.addClickHandler(this.handleBlockProtectToggle);\r\n    }\r\n\r\n    /**\r\n     * Set the block protection state.\r\n     *\r\n     * @param {string} plugin\r\n     * @param {number} state\r\n     * @returns {Promise}\r\n     */\r\n    setBlockProtectState(plugin, state) {\r\n        return fetchMany([{\r\n            methodname: 'core_admin_set_block_protection',\r\n            args: {\r\n                plugin,\r\n                state,\r\n            },\r\n        }])[0];\r\n    }\r\n\r\n    /**\r\n     * Handle toggling of block protection.\r\n     *\r\n     * @param {HTMLElement} tableRoot\r\n     * @param {Event} e\r\n     */\r\n    async handleBlockProtectToggle(tableRoot, e) {\r\n        const stateToggle = e.target.closest('[data-action=\"toggleprotectstate\"]');\r\n        if (stateToggle) {\r\n            e.preventDefault();\r\n            const pendingPromise = new Pending('core_table/dynamic:processAction');\r\n\r\n            await this.setBlockProtectState(\r\n                stateToggle.dataset.plugin,\r\n                stateToggle.dataset.targetState === '1' ? 1 : 0\r\n            );\r\n\r\n            const [updatedRoot] = await Promise.all([\r\n                refreshTableContent(tableRoot),\r\n                fetchNotifications(),\r\n            ]);\r\n\r\n            // Refocus on the link that as pressed in the first place.\r\n            updatedRoot.querySelector(`[data-action=\"toggleprotectstate\"][data-plugin=\"${stateToggle.dataset.plugin}\"]`).focus();\r\n            pendingPromise.resolve();\r\n        }\r\n    }\r\n}\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_plugin_management_table","_pending","_default","PluginManagementTable","constructor","super","this","addClickHandler","handleBlockProtectToggle","setBlockProtectState","plugin","state","fetchMany","call","methodname","args","tableRoot","stateToggle","target","closest","preventDefault","pendingPromise","Pending","dataset","targetState","updatedRoot","Promise","all","refreshTableContent","fetchNotifications","querySelector","focus","resolve","_exports"],"mappings":"0OAkBmC,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA,iFAHnCG,yBAAAJ,uBAAAI,0BAGAC,SAAAL,uBAAAK,UAGe,MAAAC,iBAAcC,yBAAAA,QACzBC,WAAAA,GACIC,QACAC,KAAKC,gBAAgBD,KAAKE,yBAC9B,CASAC,oBAAAA,CAAqBC,OAAQC,OACzB,OAAO,EAAAC,MAASC,MAAC,CAAC,CACdC,WAAY,kCACZC,KAAM,CACFL,cACAC,gBAEJ,EACR,CAQA,8BAAMH,CAAyBQ,UAAWnB,GACtC,MAAMoB,YAAcpB,EAAEqB,OAAOC,QAAQ,sCACrC,GAAIF,YAAa,CACbpB,EAAEuB,iBACF,MAAMC,eAAiB,IAAIC,SAAOvB,QAAC,0CAE7BO,KAAKG,qBACPQ,YAAYM,QAAQb,OACgB,MAApCO,YAAYM,QAAQC,YAAsB,EAAI,GAGlD,MAAOC,mBAAqBC,QAAQC,IAAI,EACpC,EAAAC,SAAmBA,qBAACZ,YACpB,EAAAa,cAAkBA,wBAItBJ,YAAYK,cAAc,mDAAmDb,YAAYM,QAAQb,YAAYqB,QAC7GV,eAAeW,SACnB,CACJ,EACH,OAAAC,SAAAlC,QAAAG,SAAA+B,SAAAlC,OAAA"}