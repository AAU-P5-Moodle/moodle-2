{"version":3,"file":"plugin_management_table.min.js","sources":["../src/plugin_management_table.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport {refreshTableContent} from 'core_table/dynamic';\r\nimport * as Selectors from 'core_table/local/dynamic/selectors';\r\nimport {call as fetchMany} from 'core/ajax';\r\nimport Pending from 'core/pending';\r\nimport {fetchNotifications} from 'core/notification';\r\n\r\nlet watching = false;\r\n\r\nexport default class {\r\n    /**\r\n     * @property {function[]} clickHandlers a list of handlers to call on click.\r\n     */\r\n    clickHandlers = [];\r\n\r\n    constructor() {\r\n        this.addClickHandler(this.handleStateToggle);\r\n        this.addClickHandler(this.handleMoveUpDown);\r\n        this.registerEventListeners();\r\n    }\r\n\r\n    /**\r\n     * Initialise an instance of the class.\r\n     *\r\n     * This is just a way of making it easier to initialise an instance of the class from PHP.\r\n     */\r\n    static init() {\r\n        if (watching) {\r\n            return;\r\n        }\r\n        watching = true;\r\n        new this();\r\n    }\r\n\r\n    /**\r\n     * Add a click handler to the list of handlers.\r\n     *\r\n     * @param {Function} handler A handler to call on a click event\r\n     */\r\n    addClickHandler(handler) {\r\n        this.clickHandlers.push(handler.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Register the event listeners for this instance.\r\n     */\r\n    registerEventListeners() {\r\n        document.addEventListener('click', function(e) {\r\n            const tableRoot = this.getTableRoot(e);\r\n\r\n            if (!tableRoot) {\r\n                return;\r\n            }\r\n\r\n            this.clickHandlers.forEach((handler) => handler(tableRoot, e));\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Get the table root from an event.\r\n     *\r\n     * @param {Event} e\r\n     * @returns {HTMLElement|bool}\r\n     */\r\n    getTableRoot(e) {\r\n        const tableRoot = e.target.closest(Selectors.main.region);\r\n        if (!tableRoot) {\r\n            return false;\r\n        }\r\n\r\n        return tableRoot;\r\n    }\r\n\r\n    /**\r\n     * Set the plugin state (enabled or disabled)\r\n     *\r\n     * @param {string} methodname The web service to call\r\n     * @param {string} plugin The name of the plugin to set the state for\r\n     * @param {number} state The state to set\r\n     * @returns {Promise}\r\n     */\r\n    setPluginState(methodname, plugin, state) {\r\n        return fetchMany([{\r\n            methodname,\r\n            args: {\r\n                plugin,\r\n                state,\r\n            },\r\n        }])[0];\r\n    }\r\n\r\n    setPluginOrder(methodname, plugin, direction) {\r\n        return fetchMany([{\r\n            methodname,\r\n            args: {\r\n                plugin,\r\n                direction,\r\n            },\r\n        }])[0];\r\n    }\r\n\r\n    /**\r\n     * Handle state toggling.\r\n     *\r\n     * @param {HTMLElement} tableRoot\r\n     * @param {Event} e\r\n     */\r\n    async handleStateToggle(tableRoot, e) {\r\n        const stateToggle = e.target.closest('[data-action=\"togglestate\"][data-toggle-method]');\r\n        if (stateToggle) {\r\n            e.preventDefault();\r\n            const pendingPromise = new Pending('core_table/dynamic:togglestate');\r\n\r\n            await this.setPluginState(\r\n                stateToggle.dataset.toggleMethod,\r\n                stateToggle.dataset.plugin,\r\n                stateToggle.dataset.state === '1' ? 0 : 1\r\n            );\r\n\r\n            const [updatedRoot] = await Promise.all([\r\n                refreshTableContent(tableRoot),\r\n                fetchNotifications(),\r\n            ]);\r\n\r\n            // Refocus on the link that as pressed in the first place.\r\n            updatedRoot.querySelector(`[data-action=\"togglestate\"][data-plugin=\"${stateToggle.dataset.plugin}\"]`).focus();\r\n\r\n            // When clicking the toggle and it remains focused, a new tooltip will be generated.\r\n            // Therefore, the old tooltip should be removed.\r\n            this.removeTooltips();\r\n            pendingPromise.resolve();\r\n        }\r\n    }\r\n\r\n    async handleMoveUpDown(tableRoot, e) {\r\n        const actionLink = e.target.closest('[data-action=\"move\"][data-method][data-direction]');\r\n        if (!actionLink) {\r\n            return;\r\n        }\r\n\r\n        e.preventDefault();\r\n\r\n        const pendingPromise = new Pending('core_table/dynamic:processAction');\r\n\r\n        await this.setPluginOrder(\r\n            actionLink.dataset.method,\r\n            actionLink.dataset.plugin,\r\n            actionLink.dataset.direction === 'up' ? -1 : 1,\r\n        );\r\n\r\n        const [updatedRoot] = await Promise.all([\r\n            refreshTableContent(tableRoot),\r\n            fetchNotifications(),\r\n        ]);\r\n\r\n        // Refocus on the link that as pressed in the first place.\r\n        const exactMatch = updatedRoot.querySelector(\r\n            `[data-action=\"move\"][data-plugin=\"${actionLink.dataset.plugin}\"][data-direction=\"${actionLink.dataset.direction}\"]`\r\n        );\r\n        if (exactMatch) {\r\n            exactMatch.focus();\r\n        } else {\r\n            // The move link is not present anymore, so we need to focus on the other one.\r\n            updatedRoot.querySelector(`[data-action=\"move\"][data-plugin=\"${actionLink.dataset.plugin}\"]`)?.focus();\r\n        }\r\n\r\n        pendingPromise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Remove tooltips.\r\n     */\r\n    removeTooltips() {\r\n        const tooltips = document.querySelectorAll('[id*=\"tooltip\"]');\r\n        if (tooltips.length > 0) {\r\n            tooltips.forEach(tooltip => {\r\n                tooltip.remove();\r\n            });\r\n        }\r\n    }\r\n}\r\n"],"names":["e","_getRequireWildcardCache","WeakMap","r","t","Selectors","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","_pending","watching","_exports","clickHandlers","constructor","this","addClickHandler","handleStateToggle","handleMoveUpDown","registerEventListeners","init","handler","push","bind","document","addEventListener","tableRoot","getTableRoot","forEach","target","closest","main","region","setPluginState","methodname","plugin","state","fetchMany","args","setPluginOrder","direction","stateToggle","preventDefault","pendingPromise","Pending","dataset","toggleMethod","updatedRoot","Promise","all","refreshTableContent","fetchNotifications","querySelector","focus","removeTooltips","resolve","actionLink","method","exactMatch","tooltips","querySelectorAll","length","tooltip","remove"],"mappings":"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"}