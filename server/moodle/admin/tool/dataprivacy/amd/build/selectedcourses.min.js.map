{"version":3,"file":"selectedcourses.min.js","sources":["../src/selectedcourses.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Selected courses.\r\n *\r\n * @module     tool_dataprivacy/selectedcourses\r\n * @copyright  2021 The Open University\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      Moodle 4.3\r\n */\r\n\r\nimport Ajax from 'core/ajax';\r\nimport Notification from 'core/notification';\r\nimport ModalSaveCancel from 'core/modal_save_cancel';\r\nimport ModalEvents from 'core/modal_events';\r\nimport Fragment from 'core/fragment';\r\nimport {prefetchStrings} from 'core/prefetch';\r\nimport {getString} from 'core/str';\r\n\r\nprefetchStrings('tool_dataprivacy', [\r\n    'selectcourses',\r\n    'approverequest',\r\n    'errornoselectedcourse',\r\n]);\r\n\r\n/**\r\n * Selected Courses popup modal.\r\n *\r\n */\r\nexport default class SelectedCourses {\r\n    /**\r\n     * @var {String} contextId Context ID to load the fragment.\r\n     * @private\r\n     */\r\n    contextId = 0;\r\n\r\n    /**\r\n     * @var {String} requestId ID of data export request.\r\n     * @private\r\n     */\r\n    requestId = 0;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {String} contextId Context ID to load the fragment.\r\n     * @param {String} requestId ID of data export request.\r\n     */\r\n    constructor(contextId, requestId) {\r\n        this.contextId = contextId;\r\n        this.requestId = requestId;\r\n        // Now create the modal.\r\n        ModalSaveCancel.create({\r\n            title: getString('selectcourses', 'tool_dataprivacy'),\r\n            body: this.getBody({requestid: requestId}),\r\n            large: true,\r\n            removeOnClose: true,\r\n            buttons: {\r\n                save: getString('approverequest', 'tool_dataprivacy'),\r\n            },\r\n        }).then((modal) => {\r\n            this.modal = modal;\r\n\r\n            return modal;\r\n        }).then((modal) => {\r\n            // We catch the modal save event, and use it to submit the form inside the modal.\r\n            // Triggering a form submission will give JS validation scripts a chance to check for errors.\r\n            modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\r\n\r\n            // We also catch the form submit event and use it to submit the form with ajax.\r\n            modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\r\n            modal.show();\r\n            return modal;\r\n        }).catch(Notification.exception);\r\n    }\r\n\r\n    /**\r\n     * Get body of modal.\r\n     *\r\n     * @method getBody\r\n     * @param {Object} formdata\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    getBody(formdata) {\r\n        const params = formdata ? {jsonformdata: JSON.stringify(formdata)} : null;\r\n\r\n        // Get the content of the modal.\r\n        return Fragment.loadFragment('tool_dataprivacy', 'selectcourses_form', this.contextId, params);\r\n    }\r\n\r\n    /**\r\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\r\n     *\r\n     * @method submitForm\r\n     * @param {Event} e Form submission event.\r\n     * @private\r\n     */\r\n    submitForm(e) {\r\n        e.preventDefault();\r\n        this.modal.getRoot().find('form').submit();\r\n    }\r\n\r\n    /**\r\n     * Submit select courses form using ajax.\r\n     *\r\n     * @method submitFormAjax\r\n     * @private\r\n     * @param {Event} e Form submission event.\r\n     */\r\n    submitFormAjax(e) {\r\n        e.preventDefault();\r\n\r\n        // Convert all the form elements values to a serialised string.\r\n        let formData = this.modal.getRoot().find('form').serialize();\r\n\r\n        if (formData.indexOf('coursecontextids') === -1) {\r\n            const customSelect = this.modal.getRoot().find('.custom-select');\r\n            const invalidText = this.modal.getRoot().find('.invalid-feedback');\r\n            customSelect.addClass('is-invalid');\r\n            invalidText.attr('style', 'display: block');\r\n            getString('errornoselectedcourse', 'tool_dataprivacy').then(value => {\r\n                invalidText.empty().append(value);\r\n                return;\r\n            }).catch(Notification.exception);\r\n            return;\r\n        }\r\n\r\n        Ajax.call([{\r\n            methodname: 'tool_dataprivacy_submit_selected_courses_form',\r\n            args: {requestid: this.requestId, jsonformdata: JSON.stringify(formData)},\r\n        }])[0]\r\n        .then((data) => {\r\n            if (data.warnings.length > 0) {\r\n                this.modal.setBody(this.getBody(formData));\r\n            } else {\r\n                this.modal.destroy();\r\n                document.location.reload();\r\n            }\r\n            return data;\r\n        })\r\n        .catch((error) => Notification.exception(error));\r\n    }\r\n}\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_ajax","_notification","_modal_save_cancel","_modal_events","_fragment","prefetchStrings","_exports","contextId","requestId","constructor","this","ModalSaveCancel","create","title","getString","body","getBody","requestid","large","removeOnClose","buttons","save","then","modal","getRoot","on","ModalEvents","submitForm","bind","submitFormAjax","show","catch","Notification","exception","formdata","params","jsonformdata","JSON","stringify","Fragment","loadFragment","preventDefault","find","submit","formData","serialize","indexOf","customSelect","invalidText","addClass","attr","value","empty","append","Ajax","call","methodname","args","data","warnings","length","setBody","destroy","document","location","reload","error"],"mappings":"gRA4BqC,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;;qFAJrCG,MAAAJ,uBAAAI,OACAC,cAAAL,uBAAAK,eACAC,mBAAAN,uBAAAM,oBACAC,cAAAP,uBAAAO,eACAC,UAAAR,uBAAAQ,YAIA,EAAAC,UAAAA,iBAAgB,mBAAoB,CAChC,gBACA,iBACA,0BAyHH,OAAAC,SAAAP,QAlHc,MAKXQ,UAAY,EAMZC,UAAY,EAQZC,WAAAA,CAAYF,UAAWC,WACnBE,KAAKH,UAAYA,UACjBG,KAAKF,UAAYA,UAEjBG,mBAAeZ,QAACa,OAAO,CACnBC,OAAO,EAAAC,KAAAA,WAAU,gBAAiB,oBAClCC,KAAML,KAAKM,QAAQ,CAACC,UAAWT,YAC/BU,OAAO,EACPC,eAAe,EACfC,QAAS,CACLC,MAAM,EAAAP,KAAAA,WAAU,iBAAkB,uBAEvCQ,MAAMC,QACLb,KAAKa,MAAQA,MAENA,SACRD,MAAMC,QAGLA,MAAMC,UAAUC,GAAGC,cAAW3B,QAACsB,KAAMX,KAAKiB,WAAWC,KAAKlB,OAG1Da,MAAMC,UAAUC,GAAG,SAAU,OAAQf,KAAKmB,eAAeD,KAAKlB,OAC9Da,MAAMO,OACCP,SACRQ,MAAMC,cAAYjC,QAACkC,UAC1B,CAUAjB,OAAAA,CAAQkB,UACJ,MAAMC,OAASD,SAAW,CAACE,aAAcC,KAAKC,UAAUJ,WAAa,KAGrE,OAAOK,UAAQxC,QAACyC,aAAa,mBAAoB,qBAAsB9B,KAAKH,UAAW4B,OAC3F,CASAR,UAAAA,CAAW9B,GACPA,EAAE4C,iBACF/B,KAAKa,MAAMC,UAAUkB,KAAK,QAAQC,QACtC,CASAd,cAAAA,CAAehC,GACXA,EAAE4C,iBAGF,IAAIG,SAAWlC,KAAKa,MAAMC,UAAUkB,KAAK,QAAQG,YAEjD,IAA8C,IAA1CD,SAASE,QAAQ,oBAA4B,CAC7C,MAAMC,aAAerC,KAAKa,MAAMC,UAAUkB,KAAK,kBACzCM,YAActC,KAAKa,MAAMC,UAAUkB,KAAK,qBAO9C,OANAK,aAAaE,SAAS,cACtBD,YAAYE,KAAK,QAAS,uBAC1B,EAAApC,KAAAA,WAAU,wBAAyB,oBAAoBQ,MAAK6B,QACxDH,YAAYI,QAAQC,OAAOF,MAC3B,IACDpB,MAAMC,cAAYjC,QAACkC,UAE1B,CAEAqB,MAAIvD,QAACwD,KAAK,CAAC,CACPC,WAAY,gDACZC,KAAM,CAACxC,UAAWP,KAAKF,UAAW4B,aAAcC,KAAKC,UAAUM,cAC/D,GACHtB,MAAMoC,OACCA,KAAKC,SAASC,OAAS,EACvBlD,KAAKa,MAAMsC,QAAQnD,KAAKM,QAAQ4B,YAEhClC,KAAKa,MAAMuC,UACXC,SAASC,SAASC,UAEfP,QAEV3B,OAAOmC,OAAUlC,cAAYjC,QAACkC,UAAUiC,QAC7C,GACH5D,SAAAP,OAAA"}