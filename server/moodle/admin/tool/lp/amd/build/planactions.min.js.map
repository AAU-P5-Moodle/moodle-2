{"version":3,"file":"planactions.min.js","sources":["../src/planactions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Plan actions via ajax.\r\n *\r\n * @module     tool_lp/planactions\r\n * @copyright  2015 David Monllao\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery',\r\n        'core/templates',\r\n        'core/ajax',\r\n        'core/notification',\r\n        'core/str',\r\n        'tool_lp/menubar',\r\n        'tool_lp/dialogue'],\r\n        function($, templates, ajax, notification, str, Menubar, Dialogue) {\r\n\r\n    /**\r\n     * PlanActions class.\r\n     *\r\n     * Note that presently this cannot be instantiated more than once per page.\r\n     *\r\n     * @param {String} type The type of page we're in.\r\n     */\r\n    var PlanActions = function(type) {\r\n        this._type = type;\r\n\r\n        if (type === 'plan') {\r\n            // This is the page to view one plan.\r\n            this._region = '[data-region=\"plan-page\"]';\r\n            this._planNode = '[data-region=\"plan-page\"]';\r\n            this._template = 'tool_lp/plan_page';\r\n            this._contextMethod = 'tool_lp_data_for_plan_page';\r\n\r\n        } else if (type === 'plans') {\r\n            // This is the page to view a list of plans.\r\n            this._region = '[data-region=\"plans\"]';\r\n            this._planNode = '[data-region=\"plan-node\"]';\r\n            this._template = 'tool_lp/plans_page';\r\n            this._contextMethod = 'tool_lp_data_for_plans_page';\r\n\r\n        } else {\r\n            throw new TypeError('Unexpected type.');\r\n        }\r\n    };\r\n\r\n    /** @property {String} Ajax method to fetch the page data from. */\r\n    PlanActions.prototype._contextMethod = null;\r\n    /** @property {String} Selector to find the node describing the plan. */\r\n    PlanActions.prototype._planNode = null;\r\n    /** @property {String} Selector mapping to the region to update. Usually similar to wrapper. */\r\n    PlanActions.prototype._region = null;\r\n    /** @property {String} Name of the template used to render the region. */\r\n    PlanActions.prototype._template = null;\r\n    /** @property {String} Type of page/region we're in. */\r\n    PlanActions.prototype._type = null;\r\n\r\n    /**\r\n     * Resolve the arguments to refresh the region.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     * @return {Object} List of arguments.\r\n     */\r\n    PlanActions.prototype._getContextArgs = function(planData) {\r\n        var self = this,\r\n            args = {};\r\n\r\n        if (self._type === 'plan') {\r\n            args = {\r\n                planid: planData.id\r\n            };\r\n\r\n        } else if (self._type === 'plans') {\r\n            args = {\r\n                userid: planData.userid\r\n            };\r\n        }\r\n\r\n        return args;\r\n    };\r\n\r\n    /**\r\n     * Refresh the plan view.\r\n     *\r\n     * This is useful when you only want to refresh the view.\r\n     *\r\n     * @param  {String} selector The node to search the plan data from.\r\n     */\r\n    PlanActions.prototype.refresh = function(selector) {\r\n        var planData = this._findPlanData($(selector));\r\n        this._callAndRefresh([], planData);\r\n    };\r\n\r\n    /**\r\n     * Callback to render the region template.\r\n     *\r\n     * @param {Object} context The context for the template.\r\n     * @return {Promise}\r\n     */\r\n    PlanActions.prototype._renderView = function(context) {\r\n        var self = this;\r\n        return templates.render(self._template, context)\r\n            .then(function(newhtml, newjs) {\r\n                $(self._region).replaceWith(newhtml);\r\n                templates.runTemplateJS(newjs);\r\n                return;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Call multiple ajax methods, and refresh.\r\n     *\r\n     * @param  {Array}  calls    List of Ajax calls.\r\n     * @param  {Object} planData Plan data from plan node.\r\n     * @return {Promise}\r\n     */\r\n    PlanActions.prototype._callAndRefresh = function(calls, planData) {\r\n        // Because this function causes a refresh, we must track the JS completion from start to finish to prevent\r\n        // stale reference issues in Behat.\r\n        var callKey = 'tool_lp/planactions:_callAndRefresh-' + Math.floor(Math.random() * Math.floor(1000));\r\n        M.util.js_pending(callKey);\r\n\r\n        var self = this;\r\n        calls.push({\r\n            methodname: self._contextMethod,\r\n            args: self._getContextArgs(planData)\r\n        });\r\n\r\n        // Apply all the promises, and refresh when the last one is resolved.\r\n        return $.when.apply($, ajax.call(calls))\r\n            .then(function() {\r\n                return self._renderView(arguments[arguments.length - 1]);\r\n            })\r\n            .fail(notification.exception)\r\n            .always(function() {\r\n                return M.util.js_complete(callKey);\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Delete a plan and reload the region.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     */\r\n    PlanActions.prototype._doDelete = function(planData) {\r\n        var self = this,\r\n            calls = [{\r\n                methodname: 'core_competency_delete_plan',\r\n                args: {id: planData.id}\r\n            }];\r\n        self._callAndRefresh(calls, planData);\r\n    };\r\n\r\n    /**\r\n     * Delete a plan.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     */\r\n    PlanActions.prototype.deletePlan = function(planData) {\r\n        var self = this,\r\n            requests;\r\n\r\n        requests = ajax.call([{\r\n            methodname: 'core_competency_read_plan',\r\n            args: {id: planData.id}\r\n        }]);\r\n\r\n        requests[0].done(function(plan) {\r\n            str.get_strings([\r\n                {key: 'confirm', component: 'moodle'},\r\n                {key: 'deleteplan', component: 'tool_lp', param: plan.name},\r\n                {key: 'delete', component: 'moodle'},\r\n                {key: 'cancel', component: 'moodle'}\r\n            ]).done(function(strings) {\r\n                notification.confirm(\r\n                    strings[0], // Confirm.\r\n                    strings[1], // Delete plan X?\r\n                    strings[2], // Delete.\r\n                    strings[3], // Cancel.\r\n                    function() {\r\n                        self._doDelete(planData);\r\n                    }\r\n                );\r\n            }).fail(notification.exception);\r\n        }).fail(notification.exception);\r\n\r\n    };\r\n\r\n    /**\r\n     * Reopen plan and reload the region.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     */\r\n    PlanActions.prototype._doReopenPlan = function(planData) {\r\n        var self = this,\r\n            calls = [{\r\n                methodname: 'core_competency_reopen_plan',\r\n                args: {planid: planData.id}\r\n            }];\r\n        self._callAndRefresh(calls, planData);\r\n    };\r\n\r\n    /**\r\n     * Reopen a plan.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     */\r\n    PlanActions.prototype.reopenPlan = function(planData) {\r\n        var self = this,\r\n            requests = ajax.call([{\r\n                methodname: 'core_competency_read_plan',\r\n                args: {id: planData.id}\r\n            }]);\r\n\r\n        requests[0].done(function(plan) {\r\n            str.get_strings([\r\n                {key: 'confirm', component: 'moodle'},\r\n                {key: 'reopenplanconfirm', component: 'tool_lp', param: plan.name},\r\n                {key: 'reopenplan', component: 'tool_lp'},\r\n                {key: 'cancel', component: 'moodle'}\r\n            ]).done(function(strings) {\r\n                notification.confirm(\r\n                    strings[0], // Confirm.\r\n                    strings[1], // Reopen plan X?\r\n                    strings[2], // Reopen.\r\n                    strings[3], // Cancel.\r\n                    function() {\r\n                        self._doReopenPlan(planData);\r\n                    }\r\n                );\r\n            }).fail(notification.exception);\r\n        }).fail(notification.exception);\r\n\r\n    };\r\n\r\n    /**\r\n     * Complete plan and reload the region.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     */\r\n    PlanActions.prototype._doCompletePlan = function(planData) {\r\n        var self = this,\r\n            calls = [{\r\n                methodname: 'core_competency_complete_plan',\r\n                args: {planid: planData.id}\r\n            }];\r\n        self._callAndRefresh(calls, planData);\r\n    };\r\n\r\n    /**\r\n     * Complete a plan process.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     */\r\n    PlanActions.prototype.completePlan = function(planData) {\r\n        var self = this,\r\n            requests = ajax.call([{\r\n                methodname: 'core_competency_read_plan',\r\n                args: {id: planData.id}\r\n            }]);\r\n\r\n        requests[0].done(function(plan) {\r\n            str.get_strings([\r\n                {key: 'confirm', component: 'moodle'},\r\n                {key: 'completeplanconfirm', component: 'tool_lp', param: plan.name},\r\n                {key: 'completeplan', component: 'tool_lp'},\r\n                {key: 'cancel', component: 'moodle'}\r\n            ]).done(function(strings) {\r\n                notification.confirm(\r\n                    strings[0], // Confirm.\r\n                    strings[1], // Complete plan X?\r\n                    strings[2], // Complete.\r\n                    strings[3], // Cancel.\r\n                    function() {\r\n                        self._doCompletePlan(planData);\r\n                    }\r\n                );\r\n            }).fail(notification.exception);\r\n        }).fail(notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Unlink plan and reload the region.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     */\r\n    PlanActions.prototype._doUnlinkPlan = function(planData) {\r\n        var self = this,\r\n            calls = [{\r\n                methodname: 'core_competency_unlink_plan_from_template',\r\n                args: {planid: planData.id}\r\n            }];\r\n        self._callAndRefresh(calls, planData);\r\n    };\r\n\r\n    /**\r\n     * Unlink a plan process.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     */\r\n    PlanActions.prototype.unlinkPlan = function(planData) {\r\n        var self = this,\r\n            requests = ajax.call([{\r\n                methodname: 'core_competency_read_plan',\r\n                args: {id: planData.id}\r\n            }]);\r\n\r\n        requests[0].done(function(plan) {\r\n            str.get_strings([\r\n                {key: 'confirm', component: 'moodle'},\r\n                {key: 'unlinkplantemplateconfirm', component: 'tool_lp', param: plan.name},\r\n                {key: 'unlinkplantemplate', component: 'tool_lp'},\r\n                {key: 'cancel', component: 'moodle'}\r\n            ]).done(function(strings) {\r\n                notification.confirm(\r\n                    strings[0], // Confirm.\r\n                    strings[1], // Unlink plan X?\r\n                    strings[2], // Unlink.\r\n                    strings[3], // Cancel.\r\n                    function() {\r\n                        self._doUnlinkPlan(planData);\r\n                    }\r\n                );\r\n            }).fail(notification.exception);\r\n        }).fail(notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Request review of a plan.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     * @method _doRequestReview\r\n     */\r\n    PlanActions.prototype._doRequestReview = function(planData) {\r\n        var calls = [{\r\n            methodname: 'core_competency_plan_request_review',\r\n            args: {\r\n                id: planData.id\r\n            }\r\n        }];\r\n        this._callAndRefresh(calls, planData);\r\n    };\r\n\r\n    /**\r\n     * Request review of a plan.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     * @method requestReview\r\n     */\r\n    PlanActions.prototype.requestReview = function(planData) {\r\n        this._doRequestReview(planData);\r\n    };\r\n\r\n    /**\r\n     * Cancel review request of a plan.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     * @method _doCancelReviewRequest\r\n     */\r\n    PlanActions.prototype._doCancelReviewRequest = function(planData) {\r\n        var calls = [{\r\n            methodname: 'core_competency_plan_cancel_review_request',\r\n            args: {\r\n                id: planData.id\r\n            }\r\n        }];\r\n        this._callAndRefresh(calls, planData);\r\n    };\r\n\r\n    /**\r\n     * Cancel review request of a plan.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     * @method cancelReviewRequest\r\n     */\r\n    PlanActions.prototype.cancelReviewRequest = function(planData) {\r\n        this._doCancelReviewRequest(planData);\r\n    };\r\n\r\n    /**\r\n     * Start review of a plan.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     * @method _doStartReview\r\n     */\r\n    PlanActions.prototype._doStartReview = function(planData) {\r\n        var calls = [{\r\n            methodname: 'core_competency_plan_start_review',\r\n            args: {\r\n                id: planData.id\r\n            }\r\n        }];\r\n        this._callAndRefresh(calls, planData);\r\n    };\r\n\r\n    /**\r\n     * Start review of a plan.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     * @method startReview\r\n     */\r\n    PlanActions.prototype.startReview = function(planData) {\r\n        this._doStartReview(planData);\r\n    };\r\n\r\n    /**\r\n     * Stop review of a plan.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     * @method _doStopReview\r\n     */\r\n    PlanActions.prototype._doStopReview = function(planData) {\r\n        var calls = [{\r\n            methodname: 'core_competency_plan_stop_review',\r\n            args: {\r\n                id: planData.id\r\n            }\r\n        }];\r\n        this._callAndRefresh(calls, planData);\r\n    };\r\n\r\n    /**\r\n     * Stop review of a plan.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     * @method stopReview\r\n     */\r\n    PlanActions.prototype.stopReview = function(planData) {\r\n        this._doStopReview(planData);\r\n    };\r\n\r\n    /**\r\n     * Approve a plan.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     * @method _doApprove\r\n     */\r\n    PlanActions.prototype._doApprove = function(planData) {\r\n        var calls = [{\r\n            methodname: 'core_competency_approve_plan',\r\n            args: {\r\n                id: planData.id\r\n            }\r\n        }];\r\n        this._callAndRefresh(calls, planData);\r\n    };\r\n\r\n    /**\r\n     * Approve a plan.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     * @method approve\r\n     */\r\n    PlanActions.prototype.approve = function(planData) {\r\n        this._doApprove(planData);\r\n    };\r\n\r\n    /**\r\n     * Unapprove a plan.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     * @method _doUnapprove\r\n     */\r\n    PlanActions.prototype._doUnapprove = function(planData) {\r\n        var calls = [{\r\n            methodname: 'core_competency_unapprove_plan',\r\n            args: {\r\n                id: planData.id\r\n            }\r\n        }];\r\n        this._callAndRefresh(calls, planData);\r\n    };\r\n\r\n    /**\r\n     * Unapprove a plan.\r\n     *\r\n     * @param  {Object} planData Plan data from plan node.\r\n     * @method unapprove\r\n     */\r\n    PlanActions.prototype.unapprove = function(planData) {\r\n        this._doUnapprove(planData);\r\n    };\r\n\r\n    /**\r\n     * Display list of linked courses on a modal dialogue.\r\n     *\r\n     * @param  {Event} e The event.\r\n     */\r\n    PlanActions.prototype._showLinkedCoursesHandler = function(e) {\r\n        e.preventDefault();\r\n\r\n        var competencyid = $(e.target).data('id');\r\n        var requests = ajax.call([{\r\n            methodname: 'tool_lp_list_courses_using_competency',\r\n            args: {id: competencyid}\r\n        }]);\r\n\r\n        requests[0].done(function(courses) {\r\n            var context = {\r\n                courses: courses\r\n            };\r\n            templates.render('tool_lp/linked_courses_summary', context).done(function(html) {\r\n                str.get_string('linkedcourses', 'tool_lp').done(function(linkedcourses) {\r\n                    new Dialogue(\r\n                        linkedcourses, // Title.\r\n                        html // The linked courses.\r\n                    );\r\n                }).fail(notification.exception);\r\n            }).fail(notification.exception);\r\n        }).fail(notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Plan event handler.\r\n     *\r\n     * @param  {String} method The method to call.\r\n     * @param  {Event} e The event.\r\n     * @method _eventHandler\r\n     */\r\n    PlanActions.prototype._eventHandler = function(method, e) {\r\n        e.preventDefault();\r\n        var data = this._findPlanData($(e.target));\r\n        this[method](data);\r\n    };\r\n\r\n    /**\r\n     * Find the plan data from the plan node.\r\n     *\r\n     * @param  {Node} node The node to search from.\r\n     * @return {Object} Plan data.\r\n     */\r\n    PlanActions.prototype._findPlanData = function(node) {\r\n        var parent = node.parentsUntil($(this._region).parent(), this._planNode),\r\n            data;\r\n\r\n        if (parent.length != 1) {\r\n            throw new Error('The plan node was not located.');\r\n        }\r\n\r\n        data = parent.data();\r\n        if (typeof data === 'undefined' || typeof data.id === 'undefined') {\r\n            throw new Error('Plan data could not be found.');\r\n        }\r\n\r\n        return data;\r\n    };\r\n\r\n    /**\r\n     * Enhance a menu bar.\r\n     *\r\n     * @param  {String} selector Menubar selector.\r\n     */\r\n    PlanActions.prototype.enhanceMenubar = function(selector) {\r\n        Menubar.enhance(selector, {\r\n            '[data-action=\"plan-delete\"]': this._eventHandler.bind(this, 'deletePlan'),\r\n            '[data-action=\"plan-complete\"]': this._eventHandler.bind(this, 'completePlan'),\r\n            '[data-action=\"plan-reopen\"]': this._eventHandler.bind(this, 'reopenPlan'),\r\n            '[data-action=\"plan-unlink\"]': this._eventHandler.bind(this, 'unlinkPlan'),\r\n            '[data-action=\"plan-request-review\"]': this._eventHandler.bind(this, 'requestReview'),\r\n            '[data-action=\"plan-cancel-review-request\"]': this._eventHandler.bind(this, 'cancelReviewRequest'),\r\n            '[data-action=\"plan-start-review\"]': this._eventHandler.bind(this, 'startReview'),\r\n            '[data-action=\"plan-stop-review\"]': this._eventHandler.bind(this, 'stopReview'),\r\n            '[data-action=\"plan-approve\"]': this._eventHandler.bind(this, 'approve'),\r\n            '[data-action=\"plan-unapprove\"]': this._eventHandler.bind(this, 'unapprove'),\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Register the events in the region.\r\n     *\r\n     * At this stage this cannot be used with enhanceMenubar or multiple handlers\r\n     * will be added to the same node.\r\n     */\r\n    PlanActions.prototype.registerEvents = function() {\r\n        var wrapper = $(this._region);\r\n\r\n        wrapper.find('[data-action=\"plan-delete\"]').click(this._eventHandler.bind(this, 'deletePlan'));\r\n        wrapper.find('[data-action=\"plan-complete\"]').click(this._eventHandler.bind(this, 'completePlan'));\r\n        wrapper.find('[data-action=\"plan-reopen\"]').click(this._eventHandler.bind(this, 'reopenPlan'));\r\n        wrapper.find('[data-action=\"plan-unlink\"]').click(this._eventHandler.bind(this, 'unlinkPlan'));\r\n\r\n        wrapper.find('[data-action=\"plan-request-review\"]').click(this._eventHandler.bind(this, 'requestReview'));\r\n        wrapper.find('[data-action=\"plan-cancel-review-request\"]').click(this._eventHandler.bind(this, 'cancelReviewRequest'));\r\n        wrapper.find('[data-action=\"plan-start-review\"]').click(this._eventHandler.bind(this, 'startReview'));\r\n        wrapper.find('[data-action=\"plan-stop-review\"]').click(this._eventHandler.bind(this, 'stopReview'));\r\n        wrapper.find('[data-action=\"plan-approve\"]').click(this._eventHandler.bind(this, 'approve'));\r\n        wrapper.find('[data-action=\"plan-unapprove\"]').click(this._eventHandler.bind(this, 'unapprove'));\r\n\r\n        wrapper.find('[data-action=\"find-courses-link\"]').click(this._showLinkedCoursesHandler.bind(this));\r\n    };\r\n\r\n    return PlanActions;\r\n});\r\n"],"names":["define","$","templates","ajax","notification","str","Menubar","Dialogue","PlanActions","type","this","_type","_region","_planNode","_template","_contextMethod","TypeError","prototype","_getContextArgs","planData","args","planid","id","userid","refresh","selector","_findPlanData","_callAndRefresh","_renderView","context","self","render","then","newhtml","newjs","replaceWith","runTemplateJS","calls","callKey","Math","floor","random","M","util","js_pending","push","methodname","when","apply","call","arguments","length","fail","exception","always","js_complete","_doDelete","deletePlan","done","plan","get_strings","key","component","param","name","strings","confirm","_doReopenPlan","reopenPlan","_doCompletePlan","completePlan","_doUnlinkPlan","unlinkPlan","_doRequestReview","requestReview","_doCancelReviewRequest","cancelReviewRequest","_doStartReview","startReview","_doStopReview","stopReview","_doApprove","approve","_doUnapprove","unapprove","_showLinkedCoursesHandler","e","preventDefault","competencyid","target","data","courses","html","get_string","linkedcourses","_eventHandler","method","node","parent","parentsUntil","Error","enhanceMenubar","enhance","bind","registerEvents","wrapper","find","click"],"mappings":"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"}