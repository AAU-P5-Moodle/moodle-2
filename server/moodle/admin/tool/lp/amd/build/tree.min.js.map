{"version":3,"file":"tree.min.js","sources":["../src/tree.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Implement an accessible aria tree widget, from a nested unordered list.\r\n * Based on http://oaa-accessibility.org/example/41/\r\n *\r\n * To respond to selection changed events - use tree.on(\"selectionchanged\", handler).\r\n * The handler will receive an array of nodes, which are the list items that are currently\r\n * selected. (Or a single node if multiselect is disabled).\r\n *\r\n * @module     tool_lp/tree\r\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/url', 'core/log'], function($, url, log) {\r\n    // Private variables and functions.\r\n    /** @var {String} expandedImage The html for an expanded tree node twistie. */\r\n    var expandedImage = $('<img alt=\"\" src=\"' + url.imageUrl('t/expanded') + '\"/>');\r\n    /** @var {String} collapsedImage The html for a collapsed tree node twistie. */\r\n    var collapsedImage = $('<img alt=\"\" src=\"' + url.imageUrl('t/collapsed') + '\"/>');\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {String} selector\r\n     * @param {Boolean} multiSelect\r\n     */\r\n    var Tree = function(selector, multiSelect) {\r\n        this.treeRoot = $(selector);\r\n        this.multiSelect = (typeof multiSelect === 'undefined' || multiSelect === true);\r\n\r\n        this.items = this.treeRoot.find('li');\r\n        this.expandAll = this.items.length < 20;\r\n        this.parents = this.treeRoot.find('li:has(ul)');\r\n\r\n        if (multiSelect) {\r\n            this.treeRoot.attr('aria-multiselectable', 'true');\r\n        }\r\n\r\n        this.items.attr('aria-selected', 'false');\r\n\r\n        this.visibleItems = null;\r\n        this.activeItem = null;\r\n        this.lastActiveItem = null;\r\n\r\n        this.keys = {\r\n            tab:      9,\r\n            enter:    13,\r\n            space:    32,\r\n            pageup:   33,\r\n            pagedown: 34,\r\n            end:      35,\r\n            home:     36,\r\n            left:     37,\r\n            up:       38,\r\n            right:    39,\r\n            down:     40,\r\n            eight:    56,\r\n            asterisk: 106\r\n        };\r\n\r\n        this.init();\r\n\r\n        this.bindEventHandlers();\r\n    };\r\n    // Public variables and functions.\r\n\r\n    /**\r\n     * Init this tree\r\n     * @method init\r\n     */\r\n    Tree.prototype.init = function() {\r\n        this.parents.attr('aria-expanded', 'true');\r\n        this.parents.prepend(expandedImage.clone());\r\n\r\n        this.items.attr('role', 'tree-item');\r\n        this.items.attr('tabindex', '-1');\r\n        this.parents.attr('role', 'group');\r\n        this.treeRoot.attr('role', 'tree');\r\n\r\n        this.visibleItems = this.treeRoot.find('li');\r\n\r\n        var thisObj = this;\r\n        if (!this.expandAll) {\r\n            this.parents.each(function() {\r\n                thisObj.collapseGroup($(this));\r\n            });\r\n            this.expandGroup(this.parents.first());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Expand a collapsed group.\r\n     *\r\n     * @method expandGroup\r\n     * @param {Object} item is the jquery id of the parent item of the group\r\n     */\r\n    Tree.prototype.expandGroup = function(item) {\r\n        // Find the first child ul node.\r\n        var group = item.children('ul');\r\n\r\n        // Expand the group.\r\n        group.show().attr('aria-hidden', 'false');\r\n\r\n        item.attr('aria-expanded', 'true');\r\n\r\n        item.children('img').attr('src', expandedImage.attr('src'));\r\n\r\n        // Update the list of visible items.\r\n        this.visibleItems = this.treeRoot.find('li:visible');\r\n    };\r\n\r\n    /**\r\n     * Collapse an expanded group.\r\n     *\r\n     * @method collapseGroup\r\n     * @param {Object} item is the jquery id of the parent item of the group\r\n     */\r\n    Tree.prototype.collapseGroup = function(item) {\r\n        var group = item.children('ul');\r\n\r\n        // Collapse the group.\r\n        group.hide().attr('aria-hidden', 'true');\r\n\r\n        item.attr('aria-expanded', 'false');\r\n\r\n        item.children('img').attr('src', collapsedImage.attr('src'));\r\n\r\n        // Update the list of visible items.\r\n        this.visibleItems = this.treeRoot.find('li:visible');\r\n    };\r\n\r\n    /**\r\n     * Expand or collapse a group.\r\n     *\r\n     * @method toggleGroup\r\n     * @param {Object} item is the jquery id of the parent item of the group\r\n     */\r\n    Tree.prototype.toggleGroup = function(item) {\r\n        if (item.attr('aria-expanded') == 'true') {\r\n            this.collapseGroup(item);\r\n        } else {\r\n            this.expandGroup(item);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Whenever the currently selected node has changed, trigger an event using this function.\r\n     *\r\n     * @method triggerChange\r\n     */\r\n    Tree.prototype.triggerChange = function() {\r\n        var allSelected = this.items.filter('[aria-selected=true]');\r\n        if (!this.multiSelect) {\r\n            allSelected = allSelected.first();\r\n        }\r\n        this.treeRoot.trigger('selectionchanged', {selected: allSelected});\r\n    };\r\n\r\n    /**\r\n     * Select all the items between the last focused item and this currently focused item.\r\n     *\r\n     * @method multiSelectItem\r\n     * @param {Object} item is the jquery id of the newly selected item.\r\n     */\r\n    Tree.prototype.multiSelectItem = function(item) {\r\n        if (!this.multiSelect) {\r\n            this.items.attr('aria-selected', 'false');\r\n        } else if (this.lastActiveItem !== null) {\r\n            var lastIndex = this.visibleItems.index(this.lastActiveItem);\r\n            var currentIndex = this.visibleItems.index(this.activeItem);\r\n            var oneItem = null;\r\n\r\n            while (lastIndex < currentIndex) {\r\n                oneItem = $(this.visibleItems.get(lastIndex));\r\n                oneItem.attr('aria-selected', 'true');\r\n                lastIndex++;\r\n            }\r\n            while (lastIndex > currentIndex) {\r\n                oneItem = $(this.visibleItems.get(lastIndex));\r\n                oneItem.attr('aria-selected', 'true');\r\n                lastIndex--;\r\n            }\r\n        }\r\n\r\n        item.attr('aria-selected', 'true');\r\n        this.triggerChange();\r\n    };\r\n\r\n    /**\r\n     * Select a single item. Make sure all the parents are expanded. De-select all other items.\r\n     *\r\n     * @method selectItem\r\n     * @param {Object} item is the jquery id of the newly selected item.\r\n     */\r\n    Tree.prototype.selectItem = function(item) {\r\n        // Expand all nodes up the tree.\r\n        var walk = item.parent();\r\n        while (walk.attr('role') != 'tree') {\r\n            walk = walk.parent();\r\n            if (walk.attr('aria-expanded') == 'false') {\r\n                this.expandGroup(walk);\r\n            }\r\n            walk = walk.parent();\r\n        }\r\n        this.items.attr('aria-selected', 'false');\r\n        item.attr('aria-selected', 'true');\r\n        this.triggerChange();\r\n    };\r\n\r\n    /**\r\n     * Toggle the selected state for an item back and forth.\r\n     *\r\n     * @method toggleItem\r\n     * @param {Object} item is the jquery id of the item to toggle.\r\n     */\r\n    Tree.prototype.toggleItem = function(item) {\r\n        if (!this.multiSelect) {\r\n            this.selectItem(item);\r\n            return;\r\n        }\r\n\r\n        var current = item.attr('aria-selected');\r\n        if (current === 'true') {\r\n            current = 'false';\r\n        } else {\r\n            current = 'true';\r\n        }\r\n        item.attr('aria-selected', current);\r\n        this.triggerChange();\r\n    };\r\n\r\n    /**\r\n     * Set the focus to this item.\r\n     *\r\n     * @method updateFocus\r\n     * @param {Object} item is the jquery id of the parent item of the group\r\n     */\r\n    Tree.prototype.updateFocus = function(item) {\r\n        this.lastActiveItem = this.activeItem;\r\n        this.activeItem = item;\r\n        // Expand all nodes up the tree.\r\n        var walk = item.parent();\r\n        while (walk.attr('role') != 'tree') {\r\n            walk = walk.parent();\r\n            if (walk.attr('aria-expanded') == 'false') {\r\n                this.expandGroup(walk);\r\n            }\r\n            walk = walk.parent();\r\n        }\r\n        this.items.attr('tabindex', '-1');\r\n        item.attr('tabindex', 0);\r\n    };\r\n\r\n    /**\r\n     * Handle a key down event - ie navigate the tree.\r\n     *\r\n     * @method handleKeyDown\r\n     * @param {Object} item is the jquery id of the parent item of the group\r\n     * @param {Event} e The event.\r\n     * @return {Boolean}\r\n     */\r\n     // This function should be simplified. In the meantime..\r\n    // eslint-disable-next-line complexity\r\n    Tree.prototype.handleKeyDown = function(item, e) {\r\n        var currentIndex = this.visibleItems.index(item);\r\n        var newItem = null;\r\n        var hasKeyModifier = e.shiftKey || e.ctrlKey || e.metaKey || e.altKey;\r\n        var thisObj = this;\r\n\r\n        switch (e.keyCode) {\r\n            case this.keys.home: {\r\n                 // Jump to first item in tree.\r\n                newItem = this.parents.first();\r\n                newItem.focus();\r\n                if (e.shiftKey) {\r\n                    this.multiSelectItem(newItem);\r\n                } else if (!hasKeyModifier) {\r\n                    this.selectItem(newItem);\r\n                }\r\n\r\n                e.stopPropagation();\r\n                return false;\r\n            }\r\n            case this.keys.end: {\r\n                 // Jump to last visible item.\r\n                newItem = this.visibleItems.last();\r\n                newItem.focus();\r\n                if (e.shiftKey) {\r\n                    this.multiSelectItem(newItem);\r\n                } else if (!hasKeyModifier) {\r\n                    this.selectItem(newItem);\r\n                }\r\n\r\n                e.stopPropagation();\r\n                return false;\r\n            }\r\n            case this.keys.enter:\r\n            case this.keys.space: {\r\n\r\n                if (e.shiftKey) {\r\n                    this.multiSelectItem(item);\r\n                } else if (e.metaKey || e.ctrlKey) {\r\n                    this.toggleItem(item);\r\n                } else {\r\n                    this.selectItem(item);\r\n                }\r\n\r\n                e.stopPropagation();\r\n                return false;\r\n            }\r\n            case this.keys.left: {\r\n                if (item.has('ul') && item.attr('aria-expanded') == 'true') {\r\n                    this.collapseGroup(item);\r\n                } else {\r\n                    // Move up to the parent.\r\n                    var itemUL = item.parent();\r\n                    var itemParent = itemUL.parent();\r\n                    if (itemParent.is('li')) {\r\n                        itemParent.focus();\r\n                        if (e.shiftKey) {\r\n                            this.multiSelectItem(itemParent);\r\n                        } else if (!hasKeyModifier) {\r\n                            this.selectItem(itemParent);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                e.stopPropagation();\r\n                return false;\r\n            }\r\n            case this.keys.right: {\r\n                if (item.has('ul') && item.attr('aria-expanded') == 'false') {\r\n                    this.expandGroup(item);\r\n                } else {\r\n                    // Move to the first item in the child group.\r\n                    newItem = item.children('ul').children('li').first();\r\n                    if (newItem.length > 0) {\r\n                        newItem.focus();\r\n                        if (e.shiftKey) {\r\n                            this.multiSelectItem(newItem);\r\n                        } else if (!hasKeyModifier) {\r\n                            this.selectItem(newItem);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                e.stopPropagation();\r\n                return false;\r\n            }\r\n            case this.keys.up: {\r\n\r\n                if (currentIndex > 0) {\r\n                    var prev = this.visibleItems.eq(currentIndex - 1);\r\n                    prev.focus();\r\n                    if (e.shiftKey) {\r\n                        this.multiSelectItem(prev);\r\n                    } else if (!hasKeyModifier) {\r\n                        this.selectItem(prev);\r\n                    }\r\n                }\r\n\r\n                e.stopPropagation();\r\n                return false;\r\n            }\r\n            case this.keys.down: {\r\n\r\n                if (currentIndex < this.visibleItems.length - 1) {\r\n                    var next = this.visibleItems.eq(currentIndex + 1);\r\n                    next.focus();\r\n                    if (e.shiftKey) {\r\n                        this.multiSelectItem(next);\r\n                    } else if (!hasKeyModifier) {\r\n                        this.selectItem(next);\r\n                    }\r\n                }\r\n                e.stopPropagation();\r\n                return false;\r\n            }\r\n            case this.keys.asterisk: {\r\n                // Expand all groups.\r\n                this.parents.each(function() {\r\n                    thisObj.expandGroup($(this));\r\n                });\r\n\r\n                e.stopPropagation();\r\n                return false;\r\n            }\r\n            case this.keys.eight: {\r\n                if (e.shiftKey) {\r\n                    // Expand all groups.\r\n                    this.parents.each(function() {\r\n                        thisObj.expandGroup($(this));\r\n                    });\r\n\r\n                    e.stopPropagation();\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Handle a key press event - ie navigate the tree.\r\n     *\r\n     * @method handleKeyPress\r\n     * @param {Object} item is the jquery id of the parent item of the group\r\n     * @param {Event} e The event.\r\n     * @return {Boolean}\r\n     */\r\n    Tree.prototype.handleKeyPress = function(item, e) {\r\n        if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) {\r\n            // Do nothing.\r\n            return true;\r\n        }\r\n\r\n        switch (e.keyCode) {\r\n            case this.keys.tab: {\r\n                return true;\r\n            }\r\n            case this.keys.enter:\r\n            case this.keys.home:\r\n            case this.keys.end:\r\n            case this.keys.left:\r\n            case this.keys.right:\r\n            case this.keys.up:\r\n            case this.keys.down: {\r\n                e.stopPropagation();\r\n                return false;\r\n            }\r\n            default : {\r\n                var chr = String.fromCharCode(e.which);\r\n                var match = false;\r\n                var itemIndex = this.visibleItems.index(item);\r\n                var itemCount = this.visibleItems.length;\r\n                var currentIndex = itemIndex + 1;\r\n\r\n                // Check if the active item was the last one on the list.\r\n                if (currentIndex == itemCount) {\r\n                    currentIndex = 0;\r\n                }\r\n\r\n                // Iterate through the menu items (starting from the current item and wrapping) until a match is found\r\n                // or the loop returns to the current menu item.\r\n                while (currentIndex != itemIndex) {\r\n\r\n                    var currentItem = this.visibleItems.eq(currentIndex);\r\n                    var titleChr = currentItem.text().charAt(0);\r\n\r\n                    if (currentItem.has('ul')) {\r\n                        titleChr = currentItem.find('span').text().charAt(0);\r\n                    }\r\n\r\n                    if (titleChr.toLowerCase() == chr) {\r\n                        match = true;\r\n                        break;\r\n                    }\r\n\r\n                    currentIndex = currentIndex + 1;\r\n                    if (currentIndex == itemCount) {\r\n                        // Reached the end of the list, start again at the beginning.\r\n                        currentIndex = 0;\r\n                    }\r\n                }\r\n\r\n                if (match === true) {\r\n                    this.updateFocus(this.visibleItems.eq(currentIndex));\r\n                }\r\n                e.stopPropagation();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line no-unreachable\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Attach an event listener to the tree.\r\n     *\r\n     * @method on\r\n     * @param {String} eventname This is the name of the event to listen for. Only 'selectionchanged' is supported for now.\r\n     * @param {Function} handler The function to call when the event is triggered.\r\n     */\r\n    Tree.prototype.on = function(eventname, handler) {\r\n        if (eventname !== 'selectionchanged') {\r\n            log.warning('Invalid custom event name for tree. Only \"selectionchanged\" is supported.');\r\n        } else {\r\n            this.treeRoot.on(eventname, handler);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handle a double click (expand/collapse).\r\n     *\r\n     * @method handleDblClick\r\n     * @param {Object} item is the jquery id of the parent item of the group\r\n     * @param {Event} e The event.\r\n     * @return {Boolean}\r\n     */\r\n    Tree.prototype.handleDblClick = function(item, e) {\r\n\r\n        if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) {\r\n            // Do nothing.\r\n            return true;\r\n        }\r\n\r\n        // Apply the focus markup.\r\n        this.updateFocus(item);\r\n\r\n        // Expand or collapse the group.\r\n        this.toggleGroup(item);\r\n\r\n        e.stopPropagation();\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Handle a click (select).\r\n     *\r\n     * @method handleExpandCollapseClick\r\n     * @param {Object} item is the jquery id of the parent item of the group\r\n     * @param {Event} e The event.\r\n     * @return {Boolean}\r\n     */\r\n    Tree.prototype.handleExpandCollapseClick = function(item, e) {\r\n\r\n        // Do not shift the focus.\r\n        this.toggleGroup(item);\r\n        e.stopPropagation();\r\n        return false;\r\n    };\r\n\r\n\r\n    /**\r\n     * Handle a click (select).\r\n     *\r\n     * @method handleClick\r\n     * @param {Object} item is the jquery id of the parent item of the group\r\n     * @param {Event} e The event.\r\n     * @return {Boolean}\r\n     */\r\n    Tree.prototype.handleClick = function(item, e) {\r\n\r\n        if (e.shiftKey) {\r\n            this.multiSelectItem(item);\r\n        } else if (e.metaKey || e.ctrlKey) {\r\n            this.toggleItem(item);\r\n        } else {\r\n            this.selectItem(item);\r\n        }\r\n        this.updateFocus(item);\r\n        e.stopPropagation();\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Handle a blur event\r\n     *\r\n     * @method handleBlur\r\n     * @return {Boolean}\r\n     */\r\n    Tree.prototype.handleBlur = function() {\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Handle a focus event\r\n     *\r\n     * @method handleFocus\r\n     * @param {Object} item item is the jquery id of the parent item of the group\r\n     * @return {Boolean}\r\n     */\r\n    Tree.prototype.handleFocus = function(item) {\r\n\r\n        this.updateFocus(item);\r\n\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Bind the event listeners we require.\r\n     *\r\n     * @method bindEventHandlers\r\n     */\r\n    Tree.prototype.bindEventHandlers = function() {\r\n        var thisObj = this;\r\n\r\n        // Bind a dblclick handler to the parent items.\r\n        this.parents.dblclick(function(e) {\r\n            return thisObj.handleDblClick($(this), e);\r\n        });\r\n\r\n        // Bind a click handler.\r\n        this.items.click(function(e) {\r\n            return thisObj.handleClick($(this), e);\r\n        });\r\n\r\n        // Bind a toggle handler to the expand/collapse icons.\r\n        this.items.children('img').click(function(e) {\r\n            return thisObj.handleExpandCollapseClick($(this).parent(), e);\r\n        });\r\n\r\n        // Bind a keydown handler.\r\n        this.items.keydown(function(e) {\r\n            return thisObj.handleKeyDown($(this), e);\r\n        });\r\n\r\n        // Bind a keypress handler.\r\n        this.items.keypress(function(e) {\r\n            return thisObj.handleKeyPress($(this), e);\r\n        });\r\n\r\n        // Bind a focus handler.\r\n        this.items.focus(function(e) {\r\n            return thisObj.handleFocus($(this), e);\r\n        });\r\n\r\n        // Bind a blur handler.\r\n        this.items.blur(function(e) {\r\n            return thisObj.handleBlur($(this), e);\r\n        });\r\n\r\n    };\r\n\r\n    return /** @alias module:tool_lp/tree */ Tree;\r\n});\r\n"],"names":["define","$","url","log","expandedImage","imageUrl","collapsedImage","Tree","selector","multiSelect","this","treeRoot","items","find","expandAll","length","parents","attr","visibleItems","activeItem","lastActiveItem","keys","tab","enter","space","pageup","pagedown","end","home","left","up","right","down","eight","asterisk","init","bindEventHandlers","prototype","prepend","clone","thisObj","each","collapseGroup","expandGroup","first","item","children","show","hide","toggleGroup","triggerChange","allSelected","filter","trigger","selected","multiSelectItem","lastIndex","index","currentIndex","get","selectItem","walk","parent","toggleItem","current","updateFocus","handleKeyDown","e","newItem","hasKeyModifier","shiftKey","ctrlKey","metaKey","altKey","keyCode","focus","stopPropagation","last","has","itemParent","is","prev","eq","next","handleKeyPress","chr","String","fromCharCode","which","match","itemIndex","itemCount","currentItem","titleChr","text","charAt","toLowerCase","on","eventname","handler","warning","handleDblClick","handleExpandCollapseClick","handleClick","handleBlur","handleFocus","dblclick","click","keydown","keypress","blur"],"mappings":"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"}