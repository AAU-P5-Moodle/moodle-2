{"version":3,"file":"collapse.min.js","sources":["../src/collapse.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Allow the user to show and hide columns of the report at will.\r\n *\r\n * @module    gradereport_grader/collapse\r\n * @copyright 2023 Mathew May <mathew.solutions>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport * as Repository from 'gradereport_grader/collapse/repository';\r\nimport search_combobox from 'core/comboboxsearch/search_combobox';\r\nimport {renderForPromise, replaceNodeContents, replaceNode} from 'core/templates';\r\nimport {debounce} from 'core/utils';\r\nimport $ from 'jquery';\r\nimport {getStrings} from 'core/str';\r\nimport CustomEvents from \"core/custom_interaction_events\";\r\nimport storage from 'core/localstorage';\r\nimport {addIconToContainer} from 'core/loadingicon';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\n\r\n// Contain our selectors within this file until they could be of use elsewhere.\r\nconst selectors = {\r\n    component: '.collapse-columns',\r\n    formDropdown: '.columnsdropdownform',\r\n    formItems: {\r\n        cancel: 'cancel',\r\n        save: 'save',\r\n        checked: 'input[type=\"checkbox\"]:checked',\r\n        currentlyUnchecked: 'input[type=\"checkbox\"]:not([data-action=\"selectall\"])',\r\n    },\r\n    hider: 'hide',\r\n    expand: 'expand',\r\n    colVal: '[data-col]',\r\n    itemVal: '[data-itemid]',\r\n    content: '[data-collapse=\"content\"]',\r\n    sort: '[data-collapse=\"sort\"]',\r\n    expandbutton: '[data-collapse=\"expandbutton\"]',\r\n    rangerowcell: '[data-collapse=\"rangerowcell\"]',\r\n    avgrowcell: '[data-collapse=\"avgrowcell\"]',\r\n    menu: '[data-collapse=\"menu\"]',\r\n    icons: '.data-collapse_gradeicons',\r\n    count: '[data-collapse=\"count\"]',\r\n    placeholder: '.collapsecolumndropdown [data-region=\"placeholder\"]',\r\n    fullDropdown: '.collapsecolumndropdown',\r\n    searchResultContainer: '.searchresultitemscontainer',\r\n};\r\n\r\nconst countIndicator = document.querySelector(selectors.count);\r\n\r\nexport default class ColumnSearch extends search_combobox {\r\n\r\n    userID = -1;\r\n    courseID = null;\r\n    defaultSort = '';\r\n\r\n    nodes = [];\r\n\r\n    gradeStrings = null;\r\n    userStrings = null;\r\n    stringMap = [];\r\n\r\n    static init(userID, courseID, defaultSort) {\r\n        return new ColumnSearch(userID, courseID, defaultSort);\r\n    }\r\n\r\n    constructor(userID, courseID, defaultSort) {\r\n        super();\r\n        this.userID = userID;\r\n        this.courseID = courseID;\r\n        this.defaultSort = defaultSort;\r\n        this.component = document.querySelector(selectors.component);\r\n\r\n        const pendingPromise = new Pending();\r\n        // Display a loader whilst collapsing appropriate columns (based on the locally stored state for the current user).\r\n        addIconToContainer(document.querySelector('.gradeparent')).then((loader) => {\r\n            setTimeout(() => {\r\n                // Get the users' checked columns to change.\r\n                this.getDataset().forEach((item) => {\r\n                    this.nodesUpdate(item);\r\n                });\r\n                this.renderDefault();\r\n\r\n                // Once the grade categories have been re-collapsed, remove the loader and display the Gradebook setup content.\r\n                loader.remove();\r\n                document.querySelector('.gradereport-grader-table').classList.remove('d-none');\r\n            }, 10);\r\n        }).then(() => pendingPromise.resolve()).catch(Notification.exception);\r\n\r\n        this.$component.on('hide.bs.dropdown', () => {\r\n            const searchResultContainer = this.component.querySelector(selectors.searchResultContainer);\r\n            searchResultContainer.scrollTop = 0;\r\n\r\n            // Use setTimeout to make sure the following code is executed after the click event is handled.\r\n            setTimeout(() => {\r\n                if (this.searchInput.value !== '') {\r\n                    this.searchInput.value = '';\r\n                    this.searchInput.dispatchEvent(new Event('input', {bubbles: true}));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The overall div that contains the searching widget.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    componentSelector() {\r\n        return '.collapse-columns';\r\n    }\r\n\r\n    /**\r\n     * The dropdown div that contains the searching widget result space.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    dropdownSelector() {\r\n        return '.searchresultitemscontainer';\r\n    }\r\n\r\n    /**\r\n     * Return the dataset that we will be searching upon.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    getDataset() {\r\n        if (!this.dataset) {\r\n            const cols = this.fetchDataset();\r\n            this.dataset = JSON.parse(cols) ? JSON.parse(cols).split(',') : [];\r\n        }\r\n        this.datasetSize = this.dataset.length;\r\n        return this.dataset;\r\n    }\r\n\r\n    /**\r\n     * Get the data we will be searching against in this component.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    fetchDataset() {\r\n        return storage.get(`gradereport_grader_collapseditems_${this.courseID}_${this.userID}`);\r\n    }\r\n\r\n    /**\r\n     * Given a user performs an action, update the users' preferences.\r\n     */\r\n    setPreferences() {\r\n        storage.set(`gradereport_grader_collapseditems_${this.courseID}_${this.userID}`,\r\n            JSON.stringify(this.getDataset().join(','))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Register clickable event listeners.\r\n     */\r\n    registerClickHandlers() {\r\n        // Register click events within the component.\r\n        this.component.addEventListener('click', this.clickHandler.bind(this));\r\n\r\n        document.addEventListener('click', this.docClickHandler.bind(this));\r\n    }\r\n\r\n    /**\r\n     * The handler for when a user interacts with the component.\r\n     *\r\n     * @param {MouseEvent} e The triggering event that we are working with.\r\n     */\r\n    clickHandler(e) {\r\n        super.clickHandler(e);\r\n        // Prevent BS from closing the dropdown if they click elsewhere within the dropdown besides the form.\r\n        if (e.target.closest(selectors.fullDropdown)) {\r\n            e.stopPropagation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Externally defined click function to improve memory handling.\r\n     *\r\n     * @param {MouseEvent} e\r\n     * @returns {Promise<void>}\r\n     */\r\n    async docClickHandler(e) {\r\n        if (e.target.dataset.hider === selectors.hider) {\r\n            e.preventDefault();\r\n            const desiredToHide = e.target.closest(selectors.colVal) ?\r\n                e.target.closest(selectors.colVal)?.dataset.col :\r\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\r\n            const idx = this.getDataset().indexOf(desiredToHide);\r\n            if (idx === -1) {\r\n                this.getDataset().push(desiredToHide);\r\n            }\r\n            await this.prefcountpipe();\r\n\r\n            this.nodesUpdate(desiredToHide);\r\n        }\r\n\r\n        if (e.target.closest('button')?.dataset.hider === selectors.expand) {\r\n            e.preventDefault();\r\n            const desiredToHide = e.target.closest(selectors.colVal) ?\r\n                e.target.closest(selectors.colVal)?.dataset.col :\r\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\r\n            const idx = this.getDataset().indexOf(desiredToHide);\r\n            this.getDataset().splice(idx, 1);\r\n\r\n            await this.prefcountpipe();\r\n\r\n            this.nodesUpdate(e.target.closest(selectors.colVal)?.dataset.col);\r\n            this.nodesUpdate(e.target.closest(selectors.colVal)?.dataset.itemid);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle any keyboard inputs.\r\n     */\r\n    registerInputEvents() {\r\n        // Register & handle the text input.\r\n        this.searchInput.addEventListener('input', debounce(async() => {\r\n            if (this.getSearchTerm() === this.searchInput.value && this.searchResultsVisible()) {\r\n                window.console.warn(`Search term matches input value - skipping`);\r\n                // Debounce can happen multiple times quickly.\r\n                return;\r\n            }\r\n            this.setSearchTerms(this.searchInput.value);\r\n            // We can also require a set amount of input before search.\r\n            if (this.searchInput.value === '') {\r\n                // Hide the \"clear\" search button in the search bar.\r\n                this.clearSearchButton.classList.add('d-none');\r\n            } else {\r\n                // Display the \"clear\" search button in the search bar.\r\n                this.clearSearchButton.classList.remove('d-none');\r\n            }\r\n            const pendingPromise = new Pending();\r\n            // User has given something for us to filter against.\r\n            await this.filterrenderpipe().then(() => {\r\n                pendingPromise.resolve();\r\n                return true;\r\n            });\r\n        }, 300, {pending: true}));\r\n    }\r\n\r\n    /**\r\n     * Handle the form submission within the dropdown.\r\n     */\r\n    registerFormEvents() {\r\n        const form = this.component.querySelector(selectors.formDropdown);\r\n        const events = [\r\n            'click',\r\n            CustomEvents.events.activate,\r\n            CustomEvents.events.keyboardActivate\r\n        ];\r\n        CustomEvents.define(document, events);\r\n\r\n        const selectall = form.querySelector('[data-action=\"selectall\"]');\r\n\r\n        // Register clicks & keyboard form handling.\r\n        events.forEach((event) => {\r\n            const submitBtn = form.querySelector(`[data-action=\"${selectors.formItems.save}\"`);\r\n            form.addEventListener(event, (e) => {\r\n                // Stop Bootstrap from being clever.\r\n                e.stopPropagation();\r\n                const input = e.target.closest('input');\r\n                if (input) {\r\n                    // If the user is unchecking an item, we need to uncheck the select all if it's checked.\r\n                    if (selectall.checked && !input.checked) {\r\n                        selectall.checked = false;\r\n                    }\r\n                    const checkedCount = Array.from(form.querySelectorAll(selectors.formItems.checked)).length;\r\n                    // Check if any are clicked or not then change disabled.\r\n                    submitBtn.disabled = checkedCount <= 0;\r\n                }\r\n            }, false);\r\n\r\n            // Stop Bootstrap from being clever.\r\n            this.searchInput.addEventListener(event, e => e.stopPropagation());\r\n            this.clearSearchButton.addEventListener(event, async(e) => {\r\n                e.stopPropagation();\r\n                this.searchInput.value = '';\r\n                this.setSearchTerms(this.searchInput.value);\r\n                await this.filterrenderpipe();\r\n            });\r\n            selectall.addEventListener(event, (e) => {\r\n                // Stop Bootstrap from being clever.\r\n                e.stopPropagation();\r\n                if (!selectall.checked) {\r\n                    const touncheck = Array.from(form.querySelectorAll(selectors.formItems.checked));\r\n                    touncheck.forEach(item => {\r\n                        item.checked = false;\r\n                    });\r\n                    submitBtn.disabled = true;\r\n                } else {\r\n                    const currentUnchecked = Array.from(form.querySelectorAll(selectors.formItems.currentlyUnchecked));\r\n                    currentUnchecked.forEach(item => {\r\n                        item.checked = true;\r\n                    });\r\n                    submitBtn.disabled = false;\r\n                }\r\n            });\r\n        });\r\n\r\n        form.addEventListener('submit', async(e) => {\r\n            e.preventDefault();\r\n            if (e.submitter.dataset.action === selectors.formItems.cancel) {\r\n                $(this.component).dropdown('toggle');\r\n                return;\r\n            }\r\n            // Get the users' checked columns to change.\r\n            const checkedItems = [...form.elements].filter(item => item.checked);\r\n            checkedItems.forEach((item) => {\r\n                const idx = this.getDataset().indexOf(item.dataset.collapse);\r\n                this.getDataset().splice(idx, 1);\r\n                this.nodesUpdate(item.dataset.collapse);\r\n            });\r\n            // Reset the check all & submit to false just in case.\r\n            selectall.checked = false;\r\n            e.submitter.disabled = true;\r\n            await this.prefcountpipe();\r\n        });\r\n    }\r\n\r\n    nodesUpdate(item) {\r\n        const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${item}\"]`)];\r\n        const itemIDNodesToHide = [...document.querySelectorAll(`[data-itemid=\"${item}\"]`)];\r\n        this.nodes = [...colNodesToHide, ...itemIDNodesToHide];\r\n        this.updateDisplay();\r\n    }\r\n\r\n    /**\r\n     * Update the user preferences, count display then render the results.\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    async prefcountpipe() {\r\n        this.setPreferences();\r\n        this.countUpdate();\r\n        await this.filterrenderpipe();\r\n    }\r\n\r\n    /**\r\n     * Dictate to the search component how and what we want to match upon.\r\n     *\r\n     * @param {Array} filterableData\r\n     * @returns {Array} An array of objects containing the system reference and the user readable value.\r\n     */\r\n    async filterDataset(filterableData) {\r\n        const stringUserMap = await this.fetchRequiredUserStrings();\r\n        const stringGradeMap = await this.fetchRequiredGradeStrings();\r\n        // Custom user profile fields are not in our string map and need a bit of extra love.\r\n        const customFieldMap = this.fetchCustomFieldValues();\r\n        this.stringMap = new Map([...stringGradeMap, ...stringUserMap, ...customFieldMap]);\r\n\r\n        const searching = filterableData.map(s => {\r\n            const mapObj = this.stringMap.get(s);\r\n            if (mapObj === undefined) {\r\n                return {key: s, string: s};\r\n            }\r\n            return {\r\n                key: s,\r\n                string: mapObj.itemname ?? this.stringMap.get(s),\r\n                category: mapObj.category ?? '',\r\n            };\r\n        });\r\n        // Sometimes we just want to show everything.\r\n        if (this.getPreppedSearchTerm() === '') {\r\n            return searching;\r\n        }\r\n        // Other times we want to actually filter the content.\r\n        return searching.filter((col) => {\r\n            return col.string.toString().toLowerCase().includes(this.getPreppedSearchTerm());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\r\n     */\r\n    filterMatchDataset() {\r\n        this.setMatchedResults(\r\n            this.getMatchedResults().map((column) => {\r\n                return {\r\n                    name: column.key,\r\n                    displayName: column.string ?? column.key,\r\n                    category: column.category ?? '',\r\n                };\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * With an array of nodes, switch their classes and values.\r\n     */\r\n    updateDisplay() {\r\n        this.nodes.forEach((element) => {\r\n            const content = element.querySelector(selectors.content);\r\n            const sort = element.querySelector(selectors.sort);\r\n            const expandButton = element.querySelector(selectors.expandbutton);\r\n            const rangeRowCell = element.querySelector(selectors.rangerowcell);\r\n            const avgRowCell = element.querySelector(selectors.avgrowcell);\r\n            const nodeSet = [\r\n                element.querySelector(selectors.menu),\r\n                element.querySelector(selectors.icons),\r\n                content\r\n            ];\r\n\r\n            // This can be further improved to reduce redundant similar calls.\r\n            if (element.classList.contains('cell')) {\r\n                // The column is actively being sorted, lets reset that and reload the page.\r\n                if (sort !== null) {\r\n                    window.location = this.defaultSort;\r\n                }\r\n                if (content === null) {\r\n                    // If it's not a content cell, it must be an overall average or a range cell.\r\n                    const rowCell = avgRowCell ?? rangeRowCell;\r\n\r\n                    rowCell?.classList.toggle('d-none');\r\n                } else if (content.classList.contains('d-none')) {\r\n                    // We should always have content but some cells do not contain menus or other actions.\r\n                    element.classList.remove('collapsed');\r\n                    // If there are many nodes, apply the following.\r\n                    if (content.childNodes.length > 1) {\r\n                        content.classList.add('d-flex');\r\n                    }\r\n                    nodeSet.forEach(node => {\r\n                        node?.classList.remove('d-none');\r\n                    });\r\n                    expandButton?.classList.add('d-none');\r\n                } else {\r\n                    element.classList.add('collapsed');\r\n                    content.classList.remove('d-flex');\r\n                    nodeSet.forEach(node => {\r\n                        node?.classList.add('d-none');\r\n                    });\r\n                    expandButton?.classList.remove('d-none');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update the visual count of collapsed columns or hide the count all together.\r\n     */\r\n    countUpdate() {\r\n        countIndicator.textContent = this.getDatasetSize();\r\n        if (this.getDatasetSize() > 0) {\r\n            this.component.parentElement.classList.add('d-flex');\r\n            this.component.parentElement.classList.remove('d-none');\r\n        } else {\r\n            this.component.parentElement.classList.remove('d-flex');\r\n            this.component.parentElement.classList.add('d-none');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Build the content then replace the node by default we want our form to exist.\r\n     */\r\n    async renderDefault() {\r\n        this.setMatchedResults(await this.filterDataset(this.getDataset()));\r\n        this.filterMatchDataset();\r\n\r\n        // Update the collapsed button pill.\r\n        this.countUpdate();\r\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapsebody', {\r\n            'instance': this.instance,\r\n            'results': this.getMatchedResults(),\r\n            'userid': this.userID,\r\n        });\r\n        replaceNode(selectors.placeholder, html, js);\r\n        this.updateNodes();\r\n\r\n        // Given we now have the body, we can set up more triggers.\r\n        this.registerFormEvents();\r\n        this.registerInputEvents();\r\n\r\n        // Add a small BS listener so that we can set the focus correctly on open.\r\n        this.$component.on('shown.bs.dropdown', () => {\r\n            this.searchInput.focus({preventScroll: true});\r\n            this.selectallEnable();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Build the content then replace the node.\r\n     */\r\n    async renderDropdown() {\r\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapseresults', {\r\n            instance: this.instance,\r\n            'results': this.getMatchedResults(),\r\n            'searchTerm': this.getSearchTerm(),\r\n        });\r\n        replaceNodeContents(this.getHTMLElements().searchDropdown, html, js);\r\n        this.selectallEnable();\r\n        // Reset the expand button to be disabled as we have re-rendered the dropdown.\r\n        const form = this.component.querySelector(selectors.formDropdown);\r\n        const expandButton = form.querySelector(`[data-action=\"${selectors.formItems.save}\"`);\r\n        expandButton.disabled = true;\r\n    }\r\n\r\n    /**\r\n     * Given we render the dropdown, Determine if we want to enable the select all checkbox.\r\n     */\r\n    selectallEnable() {\r\n        const form = this.component.querySelector(selectors.formDropdown);\r\n        const selectall = form.querySelector('[data-action=\"selectall\"]');\r\n        selectall.disabled = this.getMatchedResults().length === 0;\r\n    }\r\n\r\n    /**\r\n     * If we have any custom user profile fields, grab their system & readable names to add to our string map.\r\n     *\r\n     * @returns {array<string,*>} An array of associated string arrays ready for our map.\r\n     */\r\n    fetchCustomFieldValues() {\r\n        const customFields = document.querySelectorAll('[data-collapse-name]');\r\n        // Cast from NodeList to array to grab all the values.\r\n        return [...customFields].map(field => [field.parentElement.dataset.col, field.dataset.collapseName]);\r\n    }\r\n\r\n    /**\r\n     * Given the set of profile fields we can possibly search, fetch their strings,\r\n     * so we can report to screen readers the field that matched.\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    fetchRequiredUserStrings() {\r\n        if (!this.userStrings) {\r\n            const requiredStrings = [\r\n                'username',\r\n                'firstname',\r\n                'lastname',\r\n                'email',\r\n                'city',\r\n                'country',\r\n                'department',\r\n                'institution',\r\n                'idnumber',\r\n                'phone1',\r\n                'phone2',\r\n            ];\r\n            this.userStrings = getStrings(requiredStrings.map((key) => ({key})))\r\n                .then((stringArray) => new Map(\r\n                    requiredStrings.map((key, index) => ([key, stringArray[index]]))\r\n                ));\r\n        }\r\n        return this.userStrings;\r\n    }\r\n\r\n    /**\r\n     * Given the set of gradable items we can possibly search, fetch their strings,\r\n     * so we can report to screen readers the field that matched.\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    fetchRequiredGradeStrings() {\r\n        if (!this.gradeStrings) {\r\n            this.gradeStrings = Repository.gradeItems(this.courseID)\r\n                .then((result) => new Map(\r\n                    result.gradeItems.map(key => ([key.id, key]))\r\n                ));\r\n        }\r\n        return this.gradeStrings;\r\n    }\r\n}\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","Repository","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","_search_combobox","_jquery","_custom_interaction_events","_localstorage","_notification","_pending","selectors","cancel","save","checked","currentlyUnchecked","countIndicator","document","querySelector","ColumnSearch","search_combobox","userID","courseID","defaultSort","nodes","gradeStrings","userStrings","stringMap","init","constructor","super","this","component","pendingPromise","Pending","addIconToContainer","then","loader","setTimeout","getDataset","forEach","item","nodesUpdate","renderDefault","remove","classList","resolve","catch","Notification","exception","$component","on","scrollTop","searchInput","value","dispatchEvent","Event","bubbles","componentSelector","dropdownSelector","dataset","cols","fetchDataset","JSON","parse","split","datasetSize","length","storage","setPreferences","stringify","join","registerClickHandlers","addEventListener","clickHandler","bind","docClickHandler","target","closest","stopPropagation","hider","preventDefault","desiredToHide","col","itemid","indexOf","push","prefcountpipe","idx","splice","registerInputEvents","debounce","async","getSearchTerm","searchResultsVisible","window","console","warn","setSearchTerms","clearSearchButton","add","filterrenderpipe","pending","registerFormEvents","form","events","CustomEvents","activate","keyboardActivate","define","selectall","event","submitBtn","input","checkedCount","Array","from","querySelectorAll","disabled","submitter","action","$","dropdown","elements","filter","collapse","colNodesToHide","itemIDNodesToHide","updateDisplay","countUpdate","filterDataset","filterableData","stringUserMap","fetchRequiredUserStrings","stringGradeMap","fetchRequiredGradeStrings","customFieldMap","fetchCustomFieldValues","Map","searching","map","s","mapObj","undefined","key","string","itemname","category","getPreppedSearchTerm","toString","toLowerCase","includes","filterMatchDataset","setMatchedResults","getMatchedResults","column","name","displayName","element","content","sort","expandButton","rangeRowCell","avgRowCell","nodeSet","contains","location","rowCell","toggle","childNodes","node","textContent","getDatasetSize","parentElement","html","js","renderForPromise","instance","results","userid","replaceNode","updateNodes","focus","preventScroll","selectallEnable","renderDropdown","searchTerm","replaceNodeContents","getHTMLElements","searchDropdown","field","collapseName","requiredStrings","getStrings","stringArray","index","gradeItems","result","id","_exports"],"mappings":"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"}