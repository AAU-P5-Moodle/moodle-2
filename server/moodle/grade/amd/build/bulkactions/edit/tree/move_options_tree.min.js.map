{"version":3,"file":"move_options_tree.min.js","sources":["../../../../src/bulkactions/edit/tree/move_options_tree.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Keyboard navigation and aria-tree compatibility for the grade move options.\r\n *\r\n * @module     core_grades/bulkactions/edit/tree/move_options_tree\r\n * @copyright  2023 Mihail Geshoski <mihail@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Tree from 'core/tree';\r\nimport {getList} from 'core/normalise';\r\n\r\n/** @constant {Object} The object containing the relevant selectors. */\r\nconst Selectors = {\r\n    moveOptionsTree: '#destination-selector [role=\"tree\"]',\r\n    moveOption: '#destination-selector [role=\"treeitem\"]',\r\n    toggleGroupLink: '#destination-selector .collapse-list-link',\r\n};\r\n\r\nexport default class MoveOptionsTree extends Tree {\r\n\r\n    /** @property {function|null} afterSelectMoveOptionCallback Callback function to run after selecting a move option. */\r\n    afterSelectMoveOptionCallback = null;\r\n\r\n    /** @property {HTMLElement|null} selectedMoveOption The selected move option. */\r\n    selectedMoveOption = null;\r\n\r\n    /**\r\n     * The class constructor.\r\n     *\r\n     * @param {function|null} afterSelectMoveOptionCallback Callback function used to define actions that should be run\r\n     *                                                      after selecting a move option.\r\n     * @returns {void}\r\n     */\r\n    constructor(afterSelectMoveOptionCallback) {\r\n        super(Selectors.moveOptionsTree);\r\n        this.afterSelectMoveOptionCallback = afterSelectMoveOptionCallback;\r\n    }\r\n\r\n    /**\r\n     * Handle a key down event.\r\n     *\r\n     * @method handleKeyDown\r\n     * @param {Event} e The event.\r\n     */\r\n    handleKeyDown(e) {\r\n        // If the user presses enter or space, select the item.\r\n        if (e.keyCode === this.keys.enter || e.keyCode === this.keys.space) {\r\n            this.selectMoveOption(e.target);\r\n        } else { // Otherwise, let the default behaviour happen.\r\n            super.handleKeyDown(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle an item click.\r\n     *\r\n     * @param {Event} event The click event.\r\n     * @param {jQuery} item The item clicked.\r\n     * @returns {void}\r\n     */\r\n    handleItemClick(event, item) {\r\n        const isToggleGroupLink = event.target.closest(Selectors.toggleGroupLink);\r\n        // If the click is on the toggle group (chevron) link, let the default behaviour happen.\r\n        if (isToggleGroupLink) {\r\n            super.handleItemClick(event, item);\r\n            return;\r\n        }\r\n        // If the click is on the item itself, select it.\r\n        this.selectMoveOption(getList(item)[0]);\r\n    }\r\n\r\n    /**\r\n     * Select a move option.\r\n     *\r\n     * @method selectMoveOption\r\n     * @param {HTMLElement} moveOption The move option to select.\r\n     */\r\n    selectMoveOption(moveOption) {\r\n        // Create the cache of the visible items.\r\n        this.refreshVisibleItemsCache();\r\n        // Deselect all the move options.\r\n        document.querySelectorAll(Selectors.moveOption).forEach(item => {\r\n            item.dataset.selected = \"false\";\r\n        });\r\n        // Select and set the focus on the specified move option.\r\n        moveOption.dataset.selected = \"true\";\r\n        this.selectedMoveOption = moveOption;\r\n        moveOption.focus();\r\n        // Call the callback function if it is defined.\r\n        if (typeof this.afterSelectMoveOptionCallback === 'function') {\r\n            this.afterSelectMoveOptionCallback();\r\n        }\r\n    }\r\n}\r\n"],"names":["e","_tree","__esModule","default","Selectors","MoveOptionsTree","Tree","afterSelectMoveOptionCallback","selectedMoveOption","constructor","super","this","handleKeyDown","keyCode","keys","enter","space","selectMoveOption","target","handleItemClick","event","item","closest","getList","moveOption","refreshVisibleItemsCache","document","querySelectorAll","forEach","dataset","selected","focus","_exports"],"mappings":"2IAuB6B,IAAAA;;;;;;;qFAA7BC,OAA6BD,EAA7BC,QAA6BD,EAAAE,WAAAF,EAAAG,CAAAA,QAAAH,GAI7B,MAAMI,0BACe,sCADfA,qBAEU,0CAFVA,0BAGe,4CAGN,MAAMC,wBAAwBC,MAAAA,QAGzCC,8BAAgC,KAGhCC,mBAAqB,KASrBC,WAAAA,CAAYF,+BACRG,MAAMN,2BACNO,KAAKJ,8BAAgCA,6BACzC,CAQAK,aAAAA,CAAcZ,GAENA,EAAEa,UAAYF,KAAKG,KAAKC,OAASf,EAAEa,UAAYF,KAAKG,KAAKE,MACzDL,KAAKM,iBAAiBjB,EAAEkB,QAExBR,MAAME,cAAcZ,EAE5B,CASAmB,eAAAA,CAAgBC,MAAOC,MACOD,MAAMF,OAAOI,QAAQlB,2BAG3CM,MAAMS,gBAAgBC,MAAOC,MAIjCV,KAAKM,kBAAiB,EAAAM,WAAAA,SAAQF,MAAM,GACxC,CAQAJ,gBAAAA,CAAiBO,YAEbb,KAAKc,2BAELC,SAASC,iBAAiBvB,sBAAsBwB,SAAQP,OACpDA,KAAKQ,QAAQC,SAAW,OAAO,IAGnCN,WAAWK,QAAQC,SAAW,OAC9BnB,KAAKH,mBAAqBgB,WAC1BA,WAAWO,QAEuC,mBAAvCpB,KAAKJ,+BACZI,KAAKJ,+BAEb,EACH,OAAAyB,SAAA7B,QAAAE,gBAAA2B,SAAA7B,OAAA"}