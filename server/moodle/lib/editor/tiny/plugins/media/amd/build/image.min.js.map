{"version":3,"file":"image.min.js","sources":["../src/image.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Tiny Media plugin Image class for Moodle.\r\n *\r\n * @module      tiny_media/image\r\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Selectors from './selectors';\r\nimport ImageModal from './imagemodal';\r\nimport {getImagePermissions} from './options';\r\nimport {getFilePicker} from 'editor_tiny/options';\r\nimport {ImageInsert} from 'tiny_media/imageinsert';\r\nimport {ImageDetails} from 'tiny_media/imagedetails';\r\nimport {prefetchStrings} from 'core/prefetch';\r\nimport {getString} from 'core/str';\r\nimport {\r\n    bodyImageInsert,\r\n    footerImageInsert,\r\n    bodyImageDetails,\r\n    footerImageDetails,\r\n    showElements,\r\n    hideElements,\r\n    isPercentageValue,\r\n} from 'tiny_media/imagehelpers';\r\n\r\nprefetchStrings('tiny_media', [\r\n    'imageurlrequired',\r\n    'sizecustom_help',\r\n]);\r\n\r\nexport default class MediaImage {\r\n    canShowFilePicker = false;\r\n    editor = null;\r\n    currentModal = null;\r\n    /**\r\n     * @type {HTMLElement|null} The root element.\r\n     */\r\n    root = null;\r\n\r\n    constructor(editor) {\r\n        const permissions = getImagePermissions(editor);\r\n        const options = getFilePicker(editor, 'image');\r\n        // Indicates whether the file picker can be shown.\r\n        this.canShowFilePicker = permissions.filepicker\r\n            && (typeof options !== 'undefined')\r\n            && Object.keys(options.repositories).length > 0;\r\n        // Indicates whether the drop zone area can be shown.\r\n        this.canShowDropZone = (typeof options !== 'undefined') &&\r\n            Object.values(options.repositories).some(repository => repository.type === 'upload');\r\n\r\n        this.editor = editor;\r\n    }\r\n\r\n    async displayDialogue() {\r\n        const currentImageData = await this.getCurrentImageData();\r\n        this.currentModal = await ImageModal.create();\r\n        this.root = this.currentModal.getRoot()[0];\r\n        if (currentImageData && currentImageData.src) {\r\n            this.loadPreviewImage(currentImageData.src);\r\n        } else {\r\n            this.loadInsertImage();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Displays an insert image view asynchronously.\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    loadInsertImage = async function() {\r\n        const templateContext = {\r\n            elementid: this.editor.id,\r\n            showfilepicker: this.canShowFilePicker,\r\n            showdropzone: this.canShowDropZone,\r\n        };\r\n\r\n        Promise.all([bodyImageInsert(templateContext, this.root), footerImageInsert(templateContext, this.root)])\r\n            .then(() => {\r\n                const imageinsert = new ImageInsert(\r\n                    this.root,\r\n                    this.editor,\r\n                    this.currentModal,\r\n                    this.canShowFilePicker,\r\n                    this.canShowDropZone,\r\n                );\r\n                imageinsert.init();\r\n                return;\r\n            })\r\n            .catch(error => {\r\n                window.console.log(error);\r\n            });\r\n    };\r\n\r\n    async getTemplateContext(data) {\r\n        return {\r\n            elementid: this.editor.id,\r\n            showfilepicker: this.canShowFilePicker,\r\n            ...data,\r\n        };\r\n    }\r\n\r\n    async getCurrentImageData() {\r\n        const selectedImageProperties = this.getSelectedImageProperties();\r\n        if (!selectedImageProperties) {\r\n            return {};\r\n        }\r\n\r\n        const properties = {...selectedImageProperties};\r\n\r\n        if (properties.src) {\r\n            properties.haspreview = true;\r\n        }\r\n\r\n        if (!properties.alt) {\r\n            properties.presentation = true;\r\n        }\r\n\r\n        return properties;\r\n    }\r\n\r\n    /**\r\n     * Asynchronously loads and previews an image from the provided URL.\r\n     *\r\n     * @param {string} url - The URL of the image to load and preview.\r\n     * @returns {Promise<void>}\r\n     */\r\n    loadPreviewImage = async function(url) {\r\n        this.startImageLoading();\r\n        const image = new Image();\r\n        image.src = url;\r\n        image.addEventListener('error', async() => {\r\n            const urlWarningLabelEle = this.root.querySelector(Selectors.IMAGE.elements.urlWarning);\r\n            urlWarningLabelEle.innerHTML = await getString('imageurlrequired', 'tiny_media');\r\n            showElements(Selectors.IMAGE.elements.urlWarning, this.root);\r\n            this.stopImageLoading();\r\n        });\r\n\r\n        image.addEventListener('load', async() => {\r\n            const currentImageData = await this.getCurrentImageData();\r\n            let templateContext = await this.getTemplateContext(currentImageData);\r\n            templateContext.sizecustomhelpicon = {text: await getString('sizecustom_help', 'tiny_media')};\r\n\r\n            Promise.all([bodyImageDetails(templateContext, this.root), footerImageDetails(templateContext, this.root)])\r\n                .then(() => {\r\n                    this.stopImageLoading();\r\n                    return;\r\n                })\r\n                .then(() => {\r\n                    const imagedetails = new ImageDetails(\r\n                        this.root,\r\n                        this.editor,\r\n                        this.currentModal,\r\n                        this.canShowFilePicker,\r\n                        this.canShowDropZone,\r\n                        url,\r\n                        image,\r\n                    );\r\n                    imagedetails.init();\r\n                    return;\r\n                })\r\n                .catch(error => {\r\n                    window.console.log(error);\r\n                });\r\n        });\r\n    };\r\n\r\n    getSelectedImageProperties() {\r\n        const image = this.getSelectedImage();\r\n        if (!image) {\r\n            this.selectedImage = null;\r\n            return null;\r\n        }\r\n\r\n        const properties = {\r\n            src: null,\r\n            alt: null,\r\n            width: null,\r\n            height: null,\r\n            presentation: false,\r\n            customStyle: '', // Custom CSS styles applied to the image.\r\n        };\r\n\r\n        const getImageHeight = (image) => {\r\n            if (!isPercentageValue(String(image.height))) {\r\n                return parseInt(image.height, 10);\r\n            }\r\n\r\n            return image.height;\r\n        };\r\n\r\n        const getImageWidth = (image) => {\r\n            if (!isPercentageValue(String(image.width))) {\r\n                return parseInt(image.width, 10);\r\n            }\r\n\r\n            return image.width;\r\n        };\r\n\r\n        // Get the current selection.\r\n        this.selectedImage = image;\r\n\r\n        properties.customStyle = image.style.cssText;\r\n\r\n        const width = getImageWidth(image);\r\n        if (width !== 0) {\r\n            properties.width = width;\r\n        }\r\n\r\n        const height = getImageHeight(image);\r\n        if (height !== 0) {\r\n            properties.height = height;\r\n        }\r\n\r\n        properties.src = image.getAttribute('src');\r\n        properties.alt = image.getAttribute('alt') || '';\r\n        properties.presentation = (image.getAttribute('role') === 'presentation');\r\n\r\n        return properties;\r\n    }\r\n\r\n    getSelectedImage() {\r\n        const imgElm = this.editor.selection.getNode();\r\n        const figureElm = this.editor.dom.getParent(imgElm, 'figure.image');\r\n        if (figureElm) {\r\n            return this.editor.dom.select('img', figureElm)[0];\r\n        }\r\n\r\n        if (imgElm && (imgElm.nodeName.toUpperCase() !== 'IMG' || this.isPlaceholderImage(imgElm))) {\r\n            return null;\r\n        }\r\n        return imgElm;\r\n    }\r\n\r\n    isPlaceholderImage(imgElm) {\r\n        if (imgElm.nodeName.toUpperCase() !== 'IMG') {\r\n            return false;\r\n        }\r\n\r\n        return (imgElm.hasAttribute('data-mce-object') || imgElm.hasAttribute('data-mce-placeholder'));\r\n    }\r\n\r\n    /**\r\n     * Displays the upload loader and disables UI elements while loading a file.\r\n     */\r\n    startImageLoading() {\r\n        showElements(Selectors.IMAGE.elements.loaderIcon, this.root);\r\n        hideElements(Selectors.IMAGE.elements.insertImage, this.root);\r\n    }\r\n\r\n    /**\r\n     * Displays the upload loader and disables UI elements while loading a file.\r\n     */\r\n    stopImageLoading() {\r\n        hideElements(Selectors.IMAGE.elements.loaderIcon, this.root);\r\n        showElements(Selectors.IMAGE.elements.insertImage, this.root);\r\n    }\r\n}\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_selectors","_imagemodal","prefetchStrings","_exports","canShowFilePicker","editor","currentModal","root","constructor","permissions","getImagePermissions","options","getFilePicker","this","filepicker","Object","keys","repositories","length","canShowDropZone","values","some","repository","type","displayDialogue","currentImageData","getCurrentImageData","ImageModal","create","getRoot","src","loadPreviewImage","loadInsertImage","async","templateContext","elementid","id","showfilepicker","showdropzone","Promise","all","bodyImageInsert","footerImageInsert","then","ImageInsert","init","catch","error","window","console","log","getTemplateContext","data","selectedImageProperties","getSelectedImageProperties","properties","haspreview","alt","presentation","url","startImageLoading","image","Image","addEventListener","querySelector","Selectors","IMAGE","elements","urlWarning","innerHTML","getString","showElements","stopImageLoading","sizecustomhelpicon","text","bodyImageDetails","footerImageDetails","ImageDetails","getSelectedImage","selectedImage","width","height","customStyle","style","cssText","isPercentageValue","String","parseInt","getImageWidth","getImageHeight","getAttribute","imgElm","selection","getNode","figureElm","dom","getParent","select","nodeName","toUpperCase","isPlaceholderImage","hasAttribute","loaderIcon","hideElements","insertImage"],"mappings":"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"}