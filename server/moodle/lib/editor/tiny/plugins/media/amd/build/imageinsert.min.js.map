{"version":3,"file":"imageinsert.min.js","sources":["../src/imageinsert.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Tiny media plugin image insertion class for Moodle.\r\n *\r\n * @module      tiny_media/imageinsert\r\n * @copyright   2024 Meirza <meirza.arson@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Selectors from './selectors';\r\nimport Dropzone from 'core/dropzone';\r\nimport uploadFile from 'editor_tiny/uploader';\r\nimport {prefetchStrings} from 'core/prefetch';\r\nimport {getStrings} from 'core/str';\r\nimport {component} from \"./common\";\r\nimport {displayFilepicker} from 'editor_tiny/utils';\r\nimport {ImageDetails} from 'tiny_media/imagedetails';\r\nimport {\r\n    showElements,\r\n    hideElements,\r\n    bodyImageDetails,\r\n    footerImageDetails,\r\n} from 'tiny_media/imagehelpers';\r\n\r\nprefetchStrings('tiny_media', [\r\n    'insertimage',\r\n    'enterurl',\r\n    'enterurlor',\r\n    'imageurlrequired',\r\n    'uploading',\r\n    'loading',\r\n    'addfilesdrop',\r\n    'sizecustom_help',\r\n]);\r\n\r\nexport class ImageInsert {\r\n\r\n    constructor(\r\n        root,\r\n        editor,\r\n        currentModal,\r\n        canShowFilePicker,\r\n        canShowDropZone,\r\n    ) {\r\n        this.root = root;\r\n        this.editor = editor;\r\n        this.currentModal = currentModal;\r\n        this.canShowFilePicker = canShowFilePicker;\r\n        this.canShowDropZone = canShowDropZone;\r\n    }\r\n\r\n    init = async function() {\r\n        // Get the localization lang strings and turn them into object.\r\n        const langStringKeys = [\r\n            'insertimage',\r\n            'enterurl',\r\n            'enterurlor',\r\n            'imageurlrequired',\r\n            'uploading',\r\n            'loading',\r\n            'addfilesdrop',\r\n            'sizecustom_help',\r\n        ];\r\n        const langStringvalues = await getStrings([...langStringKeys].map((key) => ({key, component})));\r\n\r\n        // Convert array to object.\r\n        this.langStrings = Object.fromEntries(langStringKeys.map((key, index) => [key, langStringvalues[index]]));\r\n        this.currentModal.setTitle(this.langStrings.insertimage);\r\n        if (this.canShowDropZone) {\r\n            const dropZoneEle = document.querySelector(Selectors.IMAGE.elements.dropzoneContainer);\r\n            const dropZone = new Dropzone(\r\n                dropZoneEle,\r\n                'image/*',\r\n                files => {\r\n                    this.handleUploadedFile(files);\r\n                }\r\n            );\r\n            dropZone.setLabel(this.langStrings.addfilesdrop);\r\n            dropZone.init();\r\n        }\r\n        await this.registerEventListeners();\r\n    };\r\n\r\n    /**\r\n     * Enables or disables the URL-related buttons in the footer based on the current URL and input value.\r\n     */\r\n    toggleUrlButton() {\r\n        const urlInput = this.root.querySelector(Selectors.IMAGE.elements.url);\r\n        const url = urlInput.value;\r\n        const addUrl = this.root.querySelector(Selectors.IMAGE.actions.addUrl);\r\n        addUrl.disabled = !(url !== \"\" && this.isValidUrl(url));\r\n    }\r\n\r\n    /**\r\n     * Check if given string is a valid URL.\r\n     *\r\n     * @param {String} urlString URL the link will point to.\r\n     * @returns {boolean} True is valid, otherwise false.\r\n     */\r\n    isValidUrl = urlString => {\r\n        const urlPattern = new RegExp('^(https?:\\\\/\\\\/)?' + // Protocol.\r\n                                    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // Domain name.\r\n                                    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3})|localhost)' + // OR ip (v4) address, localhost.\r\n                                    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'); // Port and path.\r\n        return !!urlPattern.test(urlString);\r\n    };\r\n\r\n    /**\r\n     * Handles changes in the image URL input field and loads a preview of the image if the URL has changed.\r\n     */\r\n    urlChanged() {\r\n        hideElements(Selectors.IMAGE.elements.urlWarning, this.root);\r\n        const input = this.root.querySelector(Selectors.IMAGE.elements.url);\r\n        if (input.value && input.value !== this.currentUrl) {\r\n            this.loadPreviewImage(input.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads and displays a preview image based on the provided URL, and handles image loading events.\r\n     *\r\n     * @param {string} url - The URL of the image to load and display.\r\n     */\r\n    loadPreviewImage = function(url) {\r\n        this.startImageLoading();\r\n        this.currentUrl = url;\r\n        const image = new Image();\r\n        image.src = url;\r\n        image.addEventListener('error', () => {\r\n            const urlWarningLabelEle = this.root.querySelector(Selectors.IMAGE.elements.urlWarning);\r\n            urlWarningLabelEle.innerHTML = this.langStrings.imageurlrequired;\r\n            showElements(Selectors.IMAGE.elements.urlWarning, this.root);\r\n            this.currentUrl = \"\";\r\n            this.stopImageLoading();\r\n        });\r\n\r\n        image.addEventListener('load', () => {\r\n            let templateContext = {};\r\n            templateContext.sizecustomhelpicon = {text: this.langStrings.sizecustom_help};\r\n            Promise.all([bodyImageDetails(templateContext, this.root), footerImageDetails(templateContext, this.root)])\r\n                .then(() => {\r\n                    const imagedetails = new ImageDetails(\r\n                        this.root,\r\n                        this.editor,\r\n                        this.currentModal,\r\n                        this.canShowFilePicker,\r\n                        this.canShowDropZone,\r\n                        this.currentUrl,\r\n                        image,\r\n                    );\r\n                    imagedetails.init();\r\n                    return;\r\n                }).then(() => {\r\n                    this.stopImageLoading();\r\n                    return;\r\n                })\r\n                .catch(error => {\r\n                    window.console.log(error);\r\n                });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Displays the upload loader and disables UI elements while loading a file.\r\n     */\r\n    startImageLoading() {\r\n        showElements(Selectors.IMAGE.elements.loaderIcon, this.root);\r\n        const elementsToHide = [\r\n            Selectors.IMAGE.elements.insertImage,\r\n            Selectors.IMAGE.elements.urlWarning,\r\n            Selectors.IMAGE.elements.modalFooter,\r\n        ];\r\n        hideElements(elementsToHide, this.root);\r\n    }\r\n\r\n    /**\r\n     * Displays the upload loader and disables UI elements while loading a file.\r\n     */\r\n    stopImageLoading() {\r\n        hideElements(Selectors.IMAGE.elements.loaderIcon, this.root);\r\n        const elementsToShow = [\r\n            Selectors.IMAGE.elements.insertImage,\r\n            Selectors.IMAGE.elements.modalFooter,\r\n        ];\r\n        showElements(elementsToShow, this.root);\r\n    }\r\n\r\n    filePickerCallback(params) {\r\n        if (params.url) {\r\n            this.loadPreviewImage(params.url);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the content of the loader icon.\r\n     *\r\n     * @param {HTMLElement} root - The root element containing the loader icon.\r\n     * @param {object} langStrings - An object containing language strings.\r\n     * @param {number|null} progress - The progress percentage (optional).\r\n     * @returns {void}\r\n     */\r\n    updateLoaderIcon = (root, langStrings, progress = null) => {\r\n        const loaderIcon = root.querySelector(Selectors.IMAGE.elements.loaderIconContainer + ' div');\r\n        loaderIcon.innerHTML = progress !== null ? `${langStrings.uploading} ${Math.round(progress)}%` : langStrings.loading;\r\n    };\r\n\r\n    /**\r\n     * Handles the uploaded file, initiates the upload process, and updates the UI during the upload.\r\n     *\r\n     * @param {FileList} files - The list of files to upload (usually from a file input field).\r\n     * @returns {Promise<void>} A promise that resolves when the file is uploaded and processed.\r\n     */\r\n    handleUploadedFile = async(files) => {\r\n        try {\r\n            this.startImageLoading();\r\n            const fileURL = await uploadFile(this.editor, 'image', files[0], files[0].name, (progress) => {\r\n                this.updateLoaderIcon(this.root, this.langStrings, progress);\r\n            });\r\n            // Set the loader icon content to \"loading\" after the file upload completes.\r\n            this.updateLoaderIcon(this.root, this.langStrings);\r\n            this.filePickerCallback({url: fileURL});\r\n        } catch (error) {\r\n            // Handle the error.\r\n            const urlWarningLabelEle = this.root.querySelector(Selectors.IMAGE.elements.urlWarning);\r\n            urlWarningLabelEle.innerHTML = error.error !== undefined ? error.error : error;\r\n            showElements(Selectors.IMAGE.elements.urlWarning, this.root);\r\n            this.stopImageLoading();\r\n        }\r\n    };\r\n\r\n    registerEventListeners() {\r\n        this.root.addEventListener('click', async(e) => {\r\n            const addUrlEle = e.target.closest(Selectors.IMAGE.actions.addUrl);\r\n            if (addUrlEle) {\r\n                this.urlChanged();\r\n            }\r\n\r\n            const imageBrowserAction = e.target.closest(Selectors.IMAGE.actions.imageBrowser);\r\n            if (imageBrowserAction && this.canShowFilePicker) {\r\n                e.preventDefault();\r\n                const params = await displayFilepicker(this.editor, 'image');\r\n                this.filePickerCallback(params);\r\n            }\r\n        });\r\n\r\n        this.root.addEventListener('input', (e) => {\r\n            const urlEle = e.target.closest(Selectors.IMAGE.elements.url);\r\n            if (urlEle) {\r\n                this.toggleUrlButton();\r\n            }\r\n        });\r\n\r\n        const fileInput = this.root.querySelector(Selectors.IMAGE.elements.fileInput);\r\n        if (fileInput) {\r\n            fileInput.addEventListener('change', () => {\r\n                this.handleUploadedFile(fileInput.files);\r\n            });\r\n        }\r\n    }\r\n}"],"names":["_interopRequireDefault","e","__esModule","default","_selectors","_dropzone","_uploader","prefetchStrings","_exports","ImageInsert","constructor","root","editor","currentModal","canShowFilePicker","canShowDropZone","this","init","async","langStringKeys","langStringvalues","getStrings","map","key","component","langStrings","Object","fromEntries","index","setTitle","insertimage","dropZoneEle","document","querySelector","Selectors","IMAGE","elements","dropzoneContainer","dropZone","Dropzone","files","handleUploadedFile","setLabel","addfilesdrop","registerEventListeners","toggleUrlButton","url","value","actions","addUrl","disabled","isValidUrl","urlString","RegExp","test","urlChanged","hideElements","urlWarning","input","currentUrl","loadPreviewImage","startImageLoading","image","Image","src","addEventListener","innerHTML","imageurlrequired","showElements","stopImageLoading","templateContext","sizecustomhelpicon","text","sizecustom_help","Promise","all","bodyImageDetails","footerImageDetails","then","ImageDetails","catch","error","window","console","log","loaderIcon","elementsToHide","insertImage","modalFooter","elementsToShow","filePickerCallback","params","updateLoaderIcon","progress","arguments","length","undefined","loaderIconContainer","uploading","Math","round","loading","fileURL","uploadFile","name","target","closest","imageBrowser","preventDefault","displayFilepicker","fileInput"],"mappings":"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"}