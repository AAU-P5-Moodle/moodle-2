{"version":3,"file":"noautolink.min.js","sources":["../src/noautolink.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Helper for Tiny noautolink plugin.\r\n *\r\n * @module      tiny_noautolink/noautolink\r\n * @copyright   2023 Meirza <meirza.arson@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Pending from 'core/pending';\r\n\r\nconst noautolinkClassName = 'nolink';\r\nconst noautolinkTagHTML = 'span';\r\nconst notificationTimeout = 2000;\r\n\r\n/**\r\n * Handle action.\r\n *\r\n * @param {TinyMCE} editor\r\n * @param {object} messages\r\n */\r\nexport const handleAction = (editor, messages) => {\r\n    const toggleState = isInAnchor(editor, editor.selection.getNode());\r\n    const urlString = getSelectedContent(editor);\r\n    if (!toggleState && urlString !== '') {\r\n        setNoAutoLink(editor, messages, urlString);\r\n    } else if (toggleState) {\r\n        unsetNoAutoLink(editor, messages, urlString);\r\n    } else {\r\n        editor.notificationManager.open({text: messages.infoEmptySelection, type: 'info', timeout: notificationTimeout});\r\n    }\r\n};\r\n\r\n/**\r\n * Display notification feedback when applying the noautolink to the selected text.\r\n *\r\n * @param {TinyMCE} editor\r\n * @param {object} messages\r\n * @param {String} urlString\r\n */\r\nconst setNoAutoLink = (editor, messages, urlString) => {\r\n    const pendingPromise = new Pending('tiny_noautolink/setNoautolink');\r\n    // Applying the auto-link prevention.\r\n    setNoautolinkOnSelection(editor, urlString)\r\n    .catch(error => {\r\n        editor.notificationManager.open({text: error, type: 'error', timeout: notificationTimeout});\r\n    })\r\n    .finally(() => {\r\n        editor.notificationManager.open({text: messages.infoAddSuccess, type: 'success', timeout: notificationTimeout});\r\n        pendingPromise.resolve();\r\n    });\r\n};\r\n\r\n/**\r\n * Display notification feedback when removing the noautolink to the selected text.\r\n *\r\n * @param {TinyMCE} editor\r\n * @param {object} messages\r\n */\r\nconst unsetNoAutoLink = (editor, messages) => {\r\n    const nodeString = editor.selection.getNode().outerHTML.trim();\r\n    // Convert HTML string to DOM element to get nolink class.\r\n    const wrapper = document.createElement('div');\r\n    wrapper.innerHTML = nodeString;\r\n    const tempElement = wrapper.firstChild;\r\n    if (tempElement.classList.contains('nolink')) {\r\n        const pendingPromise = new Pending('tiny_noautolink/setNoautolink');\r\n        // Removing the auto-link prevention.\r\n        unsetNoautolinkOnSelection(editor, nodeString)\r\n        .catch(error => {\r\n            editor.notificationManager.open({text: error, type: 'error', timeout: notificationTimeout});\r\n            pendingPromise.reject(error); // Handle the error as needed.\r\n        })\r\n        .finally(() => {\r\n            editor.notificationManager.open({text: messages.infoRemoveSuccess, type: 'success', timeout: notificationTimeout});\r\n            pendingPromise.resolve();\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * Return the full string based on the position of the cursor within the string.\r\n *\r\n * @param {TinyMCE} editor\r\n * @returns {String}\r\n */\r\nconst getSelectedContent = (editor) => {\r\n    const selection = editor.selection; // Get the selection object.\r\n    let content = selection.getContent({format: 'text'}).trim();\r\n    if (content == '') {\r\n        const range = selection.getRng(); // Get the range object.\r\n\r\n        // Check if the cursor is within a text node.\r\n        if (range.startContainer.nodeType === Node.TEXT_NODE) {\r\n            const textContent = range.startContainer.textContent;\r\n            const cursorOffset = range.startOffset;\r\n\r\n            // Find the word boundaries around the cursor.\r\n            let wordStart = cursorOffset;\r\n            while (wordStart > 0 && /\\S/.test(textContent[wordStart - 1])) {\r\n                wordStart--;\r\n            }\r\n\r\n            let wordEnd = cursorOffset;\r\n            while (wordEnd < textContent.length && /\\S/.test(textContent[wordEnd])) {\r\n                wordEnd++;\r\n            }\r\n\r\n            // Set the selection range to the word.\r\n            selection.setRng({\r\n                startContainer: range.startContainer,\r\n                startOffset: wordStart,\r\n                endContainer: range.startContainer,\r\n                endOffset: wordEnd,\r\n            });\r\n            content = selection.getContent({format: 'text'}).trim();\r\n        }\r\n    }\r\n    return content;\r\n};\r\n\r\n/**\r\n * Wrap the selection with the nolink class.\r\n *\r\n * @param {TinyMCE} editor\r\n * @param {String} url URL the link will point to.\r\n */\r\nconst setNoautolinkOnSelection = async(editor, url) => {\r\n    const newContent = `<${noautolinkTagHTML} class=\"${noautolinkClassName}\">${url}</${noautolinkTagHTML}>`;\r\n    editor.selection.setContent(newContent);\r\n\r\n    // Select the new content.\r\n    const currentNode = editor.selection.getNode();\r\n    const currentDOM = editor.dom.select(`${noautolinkTagHTML}.${noautolinkClassName}`, currentNode);\r\n    currentDOM.forEach(function(value, index) {\r\n        if (value.outerHTML == newContent) {\r\n            editor.selection.select(currentDOM[index]);\r\n            return;\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Remove the nolink on the selection.\r\n *\r\n * @param {TinyMCE} editor\r\n * @param {String} url URL the link will point to.\r\n */\r\nconst unsetNoautolinkOnSelection = async(editor, url) => {\r\n    const regex = new RegExp(`</?${noautolinkTagHTML}[^>]*>`, \"g\");\r\n    url = url.replace(regex, \"\");\r\n    const currentSpan = editor.dom.getParent(editor.selection.getNode(), noautolinkTagHTML);\r\n    currentSpan.outerHTML = url;\r\n};\r\n\r\n/**\r\n * Get anchor element.\r\n *\r\n * @param {TinyMCE} editor\r\n * @param {Element} selectedElm\r\n * @returns {Element}\r\n */\r\nconst getAnchorElement = (editor, selectedElm) => {\r\n    selectedElm = selectedElm || editor.selection.getNode();\r\n    return editor.dom.getParent(selectedElm, `${noautolinkTagHTML}.${noautolinkClassName}`);\r\n};\r\n\r\n\r\n/**\r\n * Check the current selected element is an anchor or not.\r\n *\r\n * @param {TinyMCE} editor\r\n * @param {Element} selectedElm\r\n * @returns {boolean}\r\n */\r\nconst isInAnchor = (editor, selectedElm) => getAnchorElement(editor, selectedElm) !== null;\r\n\r\n/**\r\n * Change state of button.\r\n *\r\n * @param {TinyMCE} editor\r\n * @param {function()} toggler\r\n * @returns {function()}\r\n */\r\nconst toggleState = (editor, toggler) => {\r\n    editor.on('NodeChange', toggler);\r\n    return () => editor.off('NodeChange', toggler);\r\n};\r\n\r\n/**\r\n * Change the active state of button.\r\n *\r\n * @param {TinyMCE} editor\r\n * @returns {function(*): function(): *}\r\n */\r\nexport const toggleActiveState = (editor) => (api) => {\r\n    const updateState = () => api.setActive(!editor.mode.isReadOnly() && isInAnchor(editor, editor.selection.getNode()));\r\n    updateState();\r\n    return toggleState(editor, updateState);\r\n};\r\n"],"names":["e","_pending","__esModule","default","_exports","handleAction","editor","messages","toggleState","isInAnchor","selection","getNode","urlString","getSelectedContent","unsetNoAutoLink","notificationManager","open","text","infoEmptySelection","type","timeout","setNoAutoLink","pendingPromise","Pending","setNoautolinkOnSelection","catch","error","finally","infoAddSuccess","resolve","nodeString","outerHTML","trim","wrapper","document","createElement","innerHTML","firstChild","classList","contains","unsetNoautolinkOnSelection","reject","infoRemoveSuccess","content","getContent","format","range","getRng","startContainer","nodeType","Node","TEXT_NODE","textContent","cursorOffset","startOffset","wordStart","test","wordEnd","length","setRng","endContainer","endOffset","async","url","newContent","setContent","currentNode","currentDOM","dom","select","forEach","value","index","regex","RegExp","replace","getParent","selectedElm","getAnchorElement","toggleActiveState","api","updateState","setActive","mode","isReadOnly","toggler","on","off"],"mappings":"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"}