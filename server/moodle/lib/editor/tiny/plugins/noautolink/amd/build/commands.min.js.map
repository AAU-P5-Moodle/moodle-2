{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport {getButtonImage} from 'editor_tiny/utils';\r\nimport {get_string as getString} from 'core/str';\r\nimport {component, buttonName, buttonIcon} from 'tiny_noautolink/common';\r\nimport {handleAction, toggleActiveState} from 'tiny_noautolink/noautolink';\r\n\r\n/**\r\n * Tiny noautolink commands.\r\n *\r\n * @module      tiny_noautolink/commands\r\n * @copyright   2023 Meirza <meirza.arson@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nexport const getSetup = async() => {\r\n    const [\r\n        buttonText,\r\n        infoEmptySelection,\r\n        infoAddSuccess,\r\n        infoRemoveSuccess,\r\n        buttonImage,\r\n    ] = await Promise.all([\r\n        getString('buttontitle', component),\r\n        getString('infoemptyselection', component),\r\n        getString('infoaddsuccess', component),\r\n        getString('inforemovesuccess', component),\r\n        getButtonImage('icon', component),\r\n    ]);\r\n\r\n    return (editor) => {\r\n\r\n        const messages = {\r\n            infoEmptySelection: infoEmptySelection,\r\n            infoAddSuccess: infoAddSuccess,\r\n            infoRemoveSuccess: infoRemoveSuccess\r\n        };\r\n\r\n        // Register the noautolink Icon.\r\n        editor.ui.registry.addIcon(buttonIcon, buttonImage.html);\r\n\r\n        // Register the noautolink button.\r\n        editor.ui.registry.addToggleButton(buttonName, {\r\n            icon: buttonIcon,\r\n            tooltip: buttonText,\r\n            onAction: () => {\r\n                handleAction(editor, messages);\r\n            },\r\n            onSetup: toggleActiveState(editor),\r\n        });\r\n\r\n        // Register the noautolink item.\r\n        editor.ui.registry.addMenuItem(buttonName, {\r\n            icon: buttonIcon,\r\n            text: buttonText,\r\n            onAction: () => {\r\n                handleAction(editor, messages);\r\n            },\r\n        });\r\n    };\r\n};\r\n"],"names":["_exports","getSetup","async","buttonText","infoEmptySelection","infoAddSuccess","infoRemoveSuccess","buttonImage","Promise","all","getString","get_string","component","getButtonImage","editor","messages","ui","registry","addIcon","buttonIcon","html","addToggleButton","buttonName","icon","tooltip","onAction","handleAction","onSetup","toggleActiveState","addMenuItem","text"],"mappings":"wQAyEEA,SAAAC,SA7CsBC,UACpB,MACIC,WACAC,mBACAC,eACAC,kBACAC,mBACMC,QAAQC,IAAI,EAClB,EAAAC,KAASC,YAAC,cAAeC,QAASA,YAClC,EAAAF,KAASC,YAAC,qBAAsBC,QAAAA,YAChC,EAAAF,KAAAA,YAAU,iBAAkBE,QAAAA,YAC5B,EAAAF,KAAAA,YAAU,oBAAqBE,QAAAA,YAC/B,EAAAC,OAAAA,gBAAe,OAAQD,QAAAA,aAG3B,OAAQE,SAEJ,MAAMC,SAAW,CACbX,mBAAoBA,mBACpBC,eAAgBA,eAChBC,kBAAmBA,mBAIvBQ,OAAOE,GAAGC,SAASC,QAAQC,QAAAA,WAAYZ,YAAYa,MAGnDN,OAAOE,GAAGC,SAASI,gBAAgBC,mBAAY,CAC3CC,KAAMJ,QAAUA,WAChBK,QAASrB,WACTsB,SAAUA,MACN,EAAAC,YAAYA,cAACZ,OAAQC,SAAS,EAElCY,SAAS,EAAAC,YAAiBA,mBAACd,UAI/BA,OAAOE,GAAGC,SAASY,YAAYP,mBAAY,CACvCC,KAAMJ,QAAUA,WAChBW,KAAM3B,WACNsB,SAAUA,MACN,EAAAC,YAAYA,cAACZ,OAAQC,SAAS,GAEpC,CACL,CACH"}