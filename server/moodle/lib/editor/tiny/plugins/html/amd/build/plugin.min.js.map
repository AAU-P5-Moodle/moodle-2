{"version":3,"file":"plugin.min.js","sources":["../src/plugin.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Tiny tiny_html for Moodle.\r\n *\r\n * @module      tiny_html/plugin\r\n * @copyright   2023 Matt Porritt <matt.porritt@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {getTinyMCE} from 'editor_tiny/loader';\r\nimport {getPluginMetadata} from 'editor_tiny/utils';\r\n\r\nimport {component, pluginName, codeMirrorStyle} from './common';\r\n\r\n/* eslint-disable camelcase */\r\nimport {html_beautify} from './beautify/beautify-html';\r\nimport {get_strings} from 'core/str';\r\n/* eslint-enable camelcase */\r\nimport {\r\n    EditorState,\r\n    EditorView,\r\n    basicSetup,\r\n    lang,\r\n} from './codemirror-lazy';\r\n\r\n/**\r\n * Options for the html_beautify function.\r\n * We disable the camelCase check here as these are\r\n * variables that we are passing to the js-beautify library.\r\n */\r\n/* eslint-disable camelcase */\r\nconst beautifyOptions = {\r\n    indent_size: 2,\r\n    wrap_line_length: 80,\r\n    unformatted: [],\r\n};\r\n/* eslint-enable camelcase */\r\n\r\n// Set up the tiny_html Plugin.\r\n// eslint-disable-next-line no-async-promise-executor\r\nexport default new Promise(async(resolve) => {\r\n    // Note: The PluginManager.add function does not support asynchronous configuration.\r\n    // Perform any asynchronous configuration here, and then call the PluginManager.add function.\r\n    const [\r\n        tinyMCE,\r\n        pluginMetadata,\r\n        buttonStrings,\r\n    ] = await Promise.all([\r\n        getTinyMCE(),\r\n        getPluginMetadata(component, pluginName),\r\n        get_strings([\r\n            {key: 'cancel', component: 'moodle'},\r\n            {key: 'save', component: 'moodle'},\r\n        ])\r\n    ]);\r\n\r\n    // Reminder: Any asynchronous code must be run before this point.\r\n    tinyMCE.PluginManager.add(pluginName, (editor) => {\r\n        // Initial configuration for TinyMCE editor the windowManager.\r\n        const windowManagerConfig = {\r\n            title: 'Source code',\r\n            size: 'large',\r\n            body: {\r\n                type: 'panel',\r\n                items: [\r\n                    {\r\n                        type: 'htmlpanel',\r\n                        html: '<div id=\"' + editor.id + '_codeMirrorContainer\" style=\"height: 100%;\"></div>',\r\n                    },\r\n                ],\r\n            },\r\n            buttons: null,\r\n            initialData: null,\r\n            onSubmit: null,\r\n        };\r\n\r\n        // Overriding the default 'mceCodeEditor' command\r\n        editor.addCommand('mceCodeEditor', () => {\r\n            // Get the current content of the editor\r\n            // eslint-disable-next-line camelcase\r\n            const content = editor.getContent({source_view: true});\r\n\r\n            // Beautify the content using html_beautify\r\n            const beautifiedContent = html_beautify(content, beautifyOptions);\r\n\r\n            // Create the CodeMirror instance\r\n            let cmInstance;\r\n\r\n            let state = EditorState.create({\r\n                doc: beautifiedContent,\r\n                // This is where basicSetup should go as [basicSetup, ...].\r\n                extensions: [\r\n                    basicSetup,\r\n                    EditorState.tabSize.of(2),\r\n                    // Bring in all language extensions.\r\n                    ...Object.entries(lang).map(([, languagePlugin]) => languagePlugin()),\r\n                ],\r\n            });\r\n\r\n            // Create a new window to display the beautified code\r\n            editor.windowManager.open({\r\n                ...windowManagerConfig,\r\n                onSubmit: (api) => {\r\n                    const cmContent = cmInstance.state.doc.toString();\r\n                    // eslint-disable-next-line camelcase\r\n                    editor.setContent(cmContent, {source_view: true});\r\n                    api.close();\r\n                },\r\n                buttons: [\r\n                    {\r\n                        type: 'cancel',\r\n                        text: buttonStrings[0],\r\n                    },\r\n                    {\r\n                        type: 'submit',\r\n                        text: buttonStrings[1],\r\n                        primary: true,\r\n                    },\r\n                ]\r\n            });\r\n\r\n            const container = document.getElementById(editor.id + '_codeMirrorContainer');\r\n            // Create a shadow root for the CodeMirror instance.\r\n            // This is required to prevent the TinyMCE editor styles from overriding the CodeMirror ones.\r\n            const shadowRoot = container.attachShadow({mode: \"open\"});\r\n\r\n            // Add the styles to the shadow root\r\n            const style = document.createElement('style');\r\n            style.textContent = codeMirrorStyle;\r\n            shadowRoot.appendChild(style);\r\n\r\n            // Create a new div and add the class 'my-codemirror-container'\r\n            const div = document.createElement('div');\r\n            div.classList.add('modal-codemirror-container');\r\n            shadowRoot.appendChild(div);\r\n\r\n            // Create the CodeMirror instance\r\n            cmInstance = new EditorView({\r\n                state,\r\n                parent: div,\r\n            });\r\n\r\n            // Add an event listener to the shadow root to listen for the tab key press.\r\n            shadowRoot.addEventListener('keydown', (event) => {\r\n                // If the tab key is pressed, prevent the default action and select the save button.\r\n                // We need to do this as the shadow root is not part of the DOM, so the tab key will not\r\n                // be caught by the TinyMCE dialog.\r\n                if (event.key === 'Tab') {\r\n                    event.preventDefault();\r\n                    const codeMirrorContainer = document.getElementById(editor.id + '_codeMirrorContainer');\r\n                    const dialogElement = codeMirrorContainer.closest('.tox-dialog');\r\n                    const cancelButton = dialogElement.querySelector('button[title=\"' + buttonStrings[1] + '\"]');\r\n                    cancelButton.focus();\r\n                }\r\n            });\r\n\r\n        });\r\n        // Return the pluginMetadata object. This is used by TinyMCE to display a help link for your plugin.\r\n        return pluginMetadata;\r\n    });\r\n\r\n    resolve(pluginName);\r\n});\r\n"],"names":["beautifyOptions","indent_size","wrap_line_length","unformatted","_exports","default","Promise","async","tinyMCE","pluginMetadata","buttonStrings","all","getTinyMCE","getPluginMetadata","component","pluginName","get_strings","key","PluginManager","add","editor","windowManagerConfig","title","size","body","type","items","html","id","buttons","initialData","onSubmit","addCommand","content","getContent","source_view","beautifiedContent","html_beautify","cmInstance","state","EditorState","create","doc","extensions","basicSetup","tabSize","of","Object","entries","lang","map","_ref","languagePlugin","windowManager","open","api","cmContent","toString","setContent","close","text","primary","shadowRoot","document","getElementById","attachShadow","mode","style","createElement","textContent","codeMirrorStyle","appendChild","div","classList","EditorView","parent","addEventListener","event","preventDefault","closest","querySelector","focus","resolve"],"mappings":";;;;;;;;AA6CA,MAAMA,gBAAkB,CACpBC,YAAa,EACbC,iBAAkB,GAClBC,YAAa,IACfC,SAAAC,QAKa,IAAIC,SAAQC,gBAGvB,MACIC,QACAC,eACAC,qBACMJ,QAAQK,IAAI,EAClB,EAAAC,QAAUA,eACV,EAAAC,OAAAA,mBAAkBC,QAAAA,UAAWC,QAAAA,aAC7B,EAAAC,KAAAA,aAAY,CACR,CAACC,IAAK,SAAUH,UAAW,UAC3B,CAACG,IAAK,OAAQH,UAAW,cAKjCN,QAAQU,cAAcC,IAAIJ,QAAUA,YAAGK,SAEnC,MAAMC,oBAAsB,CACxBC,MAAO,cACPC,KAAM,QACNC,KAAM,CACFC,KAAM,QACNC,MAAO,CACH,CACID,KAAM,YACNE,KAAM,YAAcP,OAAOQ,GAAK,wDAI5CC,QAAS,KACTC,YAAa,KACbC,SAAU,MAqFd,OAjFAX,OAAOY,WAAW,iBAAiB,KAG/B,MAAMC,QAAUb,OAAOc,WAAW,CAACC,aAAa,IAG1CC,mBAAoB,EAAAC,cAAAA,eAAcJ,QAASjC,iBAGjD,IAAIsC,WAEAC,MAAQC,gBAAWA,YAACC,OAAO,CAC3BC,IAAKN,kBAELO,WAAY,CACRC,gBAAUA,WACVJ,4BAAYK,QAAQC,GAAG,MAEpBC,OAAOC,QAAQC,sBAAMC,KAAIC,OAAA,IAAIC,CAAAA,gBAAeD,KAAA,OAAKC,gBAAgB,OAK5EhC,OAAOiC,cAAcC,KAAK,IACnBjC,oBACHU,SAAWwB,MACP,MAAMC,UAAYlB,WAAWC,MAAMG,IAAIe,WAEvCrC,OAAOsC,WAAWF,UAAW,CAACrB,aAAa,IAC3CoB,IAAII,OAAO,EAEf9B,QAAS,CACL,CACIJ,KAAM,SACNmC,KAAMlD,cAAc,IAExB,CACIe,KAAM,SACNmC,KAAMlD,cAAc,GACpBmD,SAAS,MAKrB,MAGMC,WAHYC,SAASC,eAAe5C,OAAOQ,GAAK,wBAGzBqC,aAAa,CAACC,KAAM,SAG3CC,MAAQJ,SAASK,cAAc,SACrCD,MAAME,YAAcC,QAAeA,gBACnCR,WAAWS,YAAYJ,OAGvB,MAAMK,IAAMT,SAASK,cAAc,OACnCI,IAAIC,UAAUtD,IAAI,8BAClB2C,WAAWS,YAAYC,KAGvBlC,WAAa,IAAIoC,gBAAAA,WAAW,CACxBnC,YACAoC,OAAQH,MAIZV,WAAWc,iBAAiB,WAAYC,QAIpC,GAAkB,QAAdA,MAAM5D,IAAe,CACrB4D,MAAMC,iBACsBf,SAASC,eAAe5C,OAAOQ,GAAK,wBACtBmD,QAAQ,eACfC,cAAc,iBAAmBtE,cAAc,GAAK,MAC1EuE,OACjB,IACF,IAICxE,cAAc,IAGzByE,QAAQnE,mBAAW,IACrB,OAAAX,SAAAC,OAAA"}