{"version":3,"file":"checker.min.js","sources":["../src/checker.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/*\r\n * @package    tiny_accessibilitychecker\r\n * @copyright  2022, Stevani Andolo  <stevani@hotmail.com.au>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Templates from 'core/templates';\r\nimport {getString, getStrings} from 'core/str';\r\nimport {component} from './common';\r\nimport Modal from 'core/modal';\r\nimport * as ModalEvents from 'core/modal_events';\r\nimport ColorBase from './colorbase';\r\nimport {getPlaceholderSelectors} from 'editor_tiny/options';\r\n\r\n/**\r\n * @typedef ProblemDetail\r\n * @type {object}\r\n * @param {string} description The description of the problem\r\n * @param {ProblemNode[]} problemNodes The list of affected nodes\r\n */\r\n\r\n/**\r\n * @typedef ProblemNode\r\n * @type {object}\r\n * @param {string} nodeName The node name for the affected node\r\n * @param {string} nodeIndex The indexd of the node\r\n * @param {string} text A description of the issue\r\n * @param {string} src The source of the image\r\n */\r\n\r\nexport default class {\r\n\r\n    constructor(editor) {\r\n        this.editor = editor;\r\n        this.colorBase = new ColorBase();\r\n        this.modal = null;\r\n        this.placeholderSelectors = null;\r\n        const placeholders = getPlaceholderSelectors(this.editor);\r\n        if (placeholders.length) {\r\n            this.placeholderSelectors = placeholders.join(', ');\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        delete this.editor;\r\n        delete this.colorBase;\r\n\r\n        this.modal.destroy();\r\n        delete this.modal;\r\n    }\r\n\r\n    async displayDialogue() {\r\n        this.modal = await Modal.create({\r\n            large: true,\r\n            title: getString('pluginname', component),\r\n            body: this.getDialogueContent(),\r\n            show: true,\r\n        });\r\n\r\n        // Destroy the class when hiding the modal.\r\n        this.modal.getRoot().on(ModalEvents.hidden, () => this.destroy());\r\n\r\n        this.modal.getRoot()[0].addEventListener('click', (event) => {\r\n            const faultLink = event.target.closest('[data-action=\"highlightfault\"]');\r\n            if (!faultLink) {\r\n                return;\r\n            }\r\n\r\n            event.preventDefault();\r\n\r\n            const nodeName = faultLink.dataset.nodeName;\r\n            let selectedNode = null;\r\n            if (nodeName) {\r\n                if (nodeName.includes(',') || nodeName === 'body') {\r\n                    selectedNode = this.editor.dom.select('body')[0];\r\n                } else {\r\n                    const nodeIndex = faultLink.dataset.nodeIndex ?? 0;\r\n                    selectedNode = this.editor.dom.select(nodeName)[nodeIndex];\r\n                }\r\n            }\r\n\r\n            if (selectedNode && selectedNode.nodeName.toUpperCase() !== 'BODY') {\r\n                this.selectAndScroll(selectedNode);\r\n            }\r\n\r\n            this.modal.hide();\r\n        });\r\n    }\r\n\r\n    async getAllWarningStrings() {\r\n        const keys = [\r\n            'emptytext',\r\n            'entiredocument',\r\n            'imagesmissingalt',\r\n            'needsmorecontrast',\r\n            'needsmoreheadings',\r\n            'tablesmissingcaption',\r\n            'tablesmissingheaders',\r\n            'tableswithmergedcells',\r\n        ];\r\n\r\n        const stringValues = await getStrings(keys.map((key) => ({key, component})));\r\n        return new Map(keys.map((key, index) => ([key, stringValues[index]])));\r\n    }\r\n\r\n    /**\r\n     * Return the dialogue content.\r\n     *\r\n     * @return {Promise<Array>} A template promise containing the rendered dialogue content.\r\n     */\r\n     async getDialogueContent() {\r\n        const langStrings = await this.getAllWarningStrings();\r\n\r\n        // Translate langstrings into real strings.\r\n        const warnings = this.getWarnings().map((warning) => {\r\n            if (warning.description) {\r\n                if (warning.description.type === 'langstring') {\r\n                    warning.description = langStrings.get(warning.description.value);\r\n                } else {\r\n                    warning.description = warning.description.value;\r\n                }\r\n            }\r\n\r\n            warning.nodeData = warning.nodeData.map((problemNode) => {\r\n                if (problemNode.text) {\r\n                    if (problemNode.text.type === 'langstring') {\r\n                        problemNode.text = langStrings.get(problemNode.text.value);\r\n                    } else {\r\n                        problemNode.text = problemNode.text.value;\r\n                    }\r\n                }\r\n\r\n                return problemNode;\r\n            });\r\n\r\n            return warning;\r\n        });\r\n\r\n        return Templates.render('tiny_accessibilitychecker/warning_content', {\r\n            warnings\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set the selection and scroll to the selected element.\r\n     *\r\n     * @param {node} node\r\n     */\r\n    selectAndScroll(node) {\r\n        this.editor.selection.select(node).scrollIntoView({\r\n            behavior: 'smooth',\r\n            block: 'nearest'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Find all problems with the content editable region.\r\n     *\r\n     * @return {ProblemDetail[]} A complete list of all warnings and problems.\r\n     */\r\n    getWarnings() {\r\n        const warnings = [];\r\n\r\n        // Check Images with no alt text or dodgy alt text.\r\n        warnings.push(this.createWarnings('imagesmissingalt', this.checkImage(), true));\r\n        warnings.push(this.createWarnings('needsmorecontrast', this.checkOtherElements(), false));\r\n\r\n        // Check for no headings.\r\n        if (this.editor.getContent({format: 'text'}).length > 1000 && this.editor.dom.select('h3,h4,h5').length < 1) {\r\n            warnings.push(this.createWarnings('needsmoreheadings', [this.editor], false));\r\n        }\r\n\r\n        // Check for tables with no captions.\r\n        warnings.push(this.createWarnings('tablesmissingcaption', this.checkTableCaption(), false));\r\n\r\n        // Check for tables with merged cells.\r\n        warnings.push(this.createWarnings('tableswithmergedcells', this.checkTableMergedCells(), false));\r\n\r\n        // Check for tables with no row/col headers.\r\n        warnings.push(this.createWarnings('tablesmissingheaders', this.checkTableHeaders(), false));\r\n\r\n        return warnings.filter((warning) => warning.nodeData.length > 0);\r\n    }\r\n\r\n    /**\r\n     * Generate the data that describes the issues found.\r\n     *\r\n     * @param {String} description Description of this failure.\r\n     * @param {HTMLElement[]} nodes An array of failing nodes.\r\n     * @param {boolean} isImageType Whether the warnings are related to image type checks\r\n     * @return {ProblemDetail[]} A set of problem details\r\n     */\r\n    createWarnings(description, nodes, isImageType) {\r\n        const getTextValue = (node) => {\r\n            if (node === this.editor) {\r\n                return {\r\n                    type: 'langstring',\r\n                    value: 'entiredocument',\r\n                };\r\n            }\r\n\r\n            const emptyStringValue = {\r\n                type: 'langstring',\r\n                value: 'emptytext',\r\n            };\r\n            if ('innerText' in node) {\r\n                const value = node.innerText.trim();\r\n                return value.length ? {type: 'raw', value} : emptyStringValue;\r\n            } else if ('textContent' in node) {\r\n                const value = node.textContent.trim();\r\n                return value.length ? {type: 'raw', value} : emptyStringValue;\r\n            }\r\n\r\n            return {type: 'raw', value: node.nodeName};\r\n        };\r\n\r\n        const getEventualNode = (node) => {\r\n            if (node !== this.editor) {\r\n                return node;\r\n            }\r\n            const childNodes = node.dom.select('body')[0].childNodes;\r\n            if (childNodes.length) {\r\n                return document.body;\r\n            } else {\r\n                return childNodes;\r\n            }\r\n        };\r\n\r\n        const warning = {\r\n            description: {\r\n                type: 'langstring',\r\n                value: description,\r\n            },\r\n            nodeData: [],\r\n        };\r\n\r\n        warning.nodeData = [...nodes].filter((node) => {\r\n            // If the failed node is a placeholder element. We should remove it from the list.\r\n            if (node !== this.editor && this.placeholderSelectors) {\r\n                return node.matches(this.placeholderSelectors) === false;\r\n            }\r\n\r\n            return node;\r\n        }).map((node) => {\r\n            const describedNode = getEventualNode(node);\r\n\r\n            // Find the index of the node within the type of node.\r\n            // This is used to select the correct node when the user selects it.\r\n            const nodeIndex = this.editor.dom.select(describedNode.nodeName).indexOf(describedNode);\r\n            const warning = {\r\n                src: null,\r\n                text: null,\r\n                nodeName: describedNode.nodeName,\r\n                nodeIndex,\r\n            };\r\n\r\n            if (isImageType) {\r\n                warning.src = node.getAttribute('src');\r\n            } else {\r\n                warning.text = getTextValue(node);\r\n            }\r\n\r\n            return warning;\r\n        });\r\n\r\n        return warning;\r\n    }\r\n\r\n    /**\r\n     * Check accessiblity issue only for img type.\r\n     *\r\n     * @return {Node} A complete list of all warnings and problems.\r\n     */\r\n    checkImage() {\r\n        const problemNodes = [];\r\n        this.editor.dom.select('img').forEach((img) => {\r\n            const alt = img.getAttribute('alt');\r\n            if (!alt && img.getAttribute('role') !== 'presentation') {\r\n                problemNodes.push(img);\r\n            }\r\n        });\r\n        return problemNodes;\r\n    }\r\n\r\n    /**\r\n     * Look for any table without a caption.\r\n     *\r\n     * @return {Node} A complete list of all warnings and problems.\r\n     */\r\n    checkTableCaption() {\r\n        const problemNodes = [];\r\n        this.editor.dom.select('table').forEach((table) => {\r\n            const caption = table.querySelector('caption');\r\n            if (!caption?.textContent.trim()) {\r\n                problemNodes.push(table);\r\n            }\r\n        });\r\n\r\n        return problemNodes;\r\n    }\r\n\r\n    /**\r\n     * Check accessiblity issue for not img and table only.\r\n     *\r\n     * @return {Node} A complete list of all warnings and problems.\r\n     * @private\r\n     */\r\n    checkOtherElements() {\r\n        const problemNodes = [];\r\n\r\n        const getRatio = (lum1, lum2) => {\r\n            // Algorithm from \"http://www.w3.org/TR/WCAG20-GENERAL/G18.html\".\r\n            if (lum1 > lum2) {\r\n                return (lum1 + 0.05) / (lum2 + 0.05);\r\n            } else {\r\n                return (lum2 + 0.05) / (lum1 + 0.05);\r\n            }\r\n        };\r\n\r\n        this.editor.dom.select('body *')\r\n            .filter((node) => node.hasChildNodes() && node.childNodes[0].nodeValue !== null)\r\n            .forEach((node) => {\r\n                const foreground = this.colorBase.fromArray(\r\n                    this.getComputedBackgroundColor(\r\n                        node,\r\n                        window.getComputedStyle(node, null).getPropertyValue('color')\r\n                    ),\r\n                    this.colorBase.TYPES.RGBA\r\n                );\r\n                const background = this.colorBase.fromArray(\r\n                    this.getComputedBackgroundColor(\r\n                        node\r\n                    ),\r\n                    this.colorBase.TYPES.RGBA\r\n                );\r\n\r\n                const lum1 = this.getLuminanceFromCssColor(foreground);\r\n                const lum2 = this.getLuminanceFromCssColor(background);\r\n                const ratio = getRatio(lum1, lum2);\r\n\r\n                if (ratio <= 4.5) {\r\n                    window.console.log(`\r\n                        Contrast ratio is too low: ${ratio}\r\n                        Colour 1: ${foreground}\r\n                        Colour 2: ${background}\r\n                        Luminance 1: ${lum1}\r\n                        Luminance 2: ${lum2}\r\n                    `);\r\n\r\n                    // We only want the highest node with dodgy contrast reported.\r\n                    if (!problemNodes.find((existingProblemNode) => existingProblemNode.contains(node))) {\r\n                        problemNodes.push(node);\r\n                    }\r\n                }\r\n            });\r\n        return problemNodes;\r\n    }\r\n\r\n    /**\r\n     * Check accessiblity issue only for table with merged cells.\r\n     *\r\n     * @return {Node} A complete list of all warnings and problems.\r\n     * @private\r\n     */\r\n    checkTableMergedCells() {\r\n        const problemNodes = [];\r\n        this.editor.dom.select('table').forEach((table) => {\r\n            const rowcolspan = table.querySelectorAll('[colspan], [rowspan]');\r\n            if (rowcolspan.length) {\r\n                problemNodes.push(table);\r\n            }\r\n        });\r\n        return problemNodes;\r\n    }\r\n\r\n    /**\r\n     * Check accessiblity issue only for table with no headers.\r\n     *\r\n     * @return {Node} A complete list of all warnings and problems.\r\n     * @private\r\n     */\r\n    checkTableHeaders() {\r\n        const problemNodes = [];\r\n\r\n        this.editor.dom.select('table').forEach((table) => {\r\n            if (table.querySelector('tr').querySelector('td')) {\r\n                // The first row has a non-header cell, so all rows must have at least one header.\r\n                const missingHeader = [...table.querySelectorAll('tr')].some((row) => {\r\n                    const header = row.querySelector('th');\r\n                    if (!header) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (!header.textContent.trim()) {\r\n                        return true;\r\n                    }\r\n\r\n                    return false;\r\n                });\r\n                if (missingHeader) {\r\n                    // At least one row is missing the header, or it is empty.\r\n                    problemNodes.push(table);\r\n                }\r\n            } else {\r\n                // Every header must have some content.\r\n                if ([...table.querySelectorAll('tr th')].some((header) => !header.textContent.trim())) {\r\n                    problemNodes.push(table);\r\n                }\r\n            }\r\n        });\r\n        return problemNodes;\r\n    }\r\n\r\n    /**\r\n     * Convert a CSS color to a luminance value.\r\n     *\r\n     * @param {String} colortext The Hex value for the colour\r\n     * @return {Number} The luminance value.\r\n     * @private\r\n     */\r\n    getLuminanceFromCssColor(colortext) {\r\n        if (colortext === 'transparent') {\r\n            colortext = '#ffffff';\r\n        }\r\n        const color = this.colorBase.toArray(this.colorBase.toRGB(colortext));\r\n\r\n        // Algorithm from \"http://www.w3.org/TR/WCAG20-GENERAL/G18.html\".\r\n        const part1 = (a) => {\r\n            a = parseInt(a, 10) / 255.0;\r\n            if (a <= 0.03928) {\r\n                a = a / 12.92;\r\n            } else {\r\n                a = Math.pow(((a + 0.055) / 1.055), 2.4);\r\n            }\r\n            return a;\r\n        };\r\n\r\n        const r1 = part1(color[0]);\r\n        const g1 = part1(color[1]);\r\n        const b1 = part1(color[2]);\r\n\r\n        return 0.2126 * r1 + 0.7152 * g1 + 0.0722 * b1;\r\n    }\r\n\r\n    /**\r\n     * Get the computed RGB converted to full alpha value, considering the node hierarchy.\r\n     *\r\n     * @param {Node} node\r\n     * @param {String} color The initial colour. If not specified, fetches the backgroundColor from the node.\r\n     * @return {Array} Colour in Array form (RGBA)\r\n     * @private\r\n     */\r\n    getComputedBackgroundColor(node, color) {\r\n        if (!node.parentNode) {\r\n            // This is the document node and has no colour.\r\n            // We cannot use window.getComputedStyle on the document.\r\n            // If we got here, then the document has no background colour. Fall back to white.\r\n            return this.colorBase.toArray('rgba(255, 255, 255, 1)');\r\n        }\r\n        color = color ? color : window.getComputedStyle(node, null).getPropertyValue('background-color');\r\n\r\n        if (color.toLowerCase() === 'rgba(0, 0, 0, 0)' || color.toLowerCase() === 'transparent') {\r\n            color = 'rgba(1, 1, 1, 0)';\r\n        }\r\n\r\n        // Convert the colour to its constituent parts in RGBA format, then fetch the alpha.\r\n        const colorParts = this.colorBase.toArray(color);\r\n        const alpha = colorParts[3];\r\n\r\n        if (alpha === 1) {\r\n            // If the alpha of the background is already 1, then the parent background colour does not change anything.\r\n            return colorParts;\r\n        }\r\n\r\n        // Fetch the computed background colour of the parent and use it to calculate the RGB of this item.\r\n        const parentColor = this.getComputedBackgroundColor(node.parentNode);\r\n        return [\r\n            // RGB = (alpha * R|G|B) + (1 - alpha * solid parent colour).\r\n            (1 - alpha) * parentColor[0] + alpha * colorParts[0],\r\n            (1 - alpha) * parentColor[1] + alpha * colorParts[1],\r\n            (1 - alpha) * parentColor[2] + alpha * colorParts[2],\r\n            // We always return a colour with full alpha.\r\n            1\r\n        ];\r\n    }\r\n}\r\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireDefault","__esModule","default","_templates","_modal","ModalEvents","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","_colorbase","_exports","constructor","editor","this","colorBase","ColorBase","modal","placeholderSelectors","placeholders","getPlaceholderSelectors","length","join","destroy","displayDialogue","Modal","create","large","title","getString","component","body","getDialogueContent","show","getRoot","on","hidden","addEventListener","event","faultLink","target","closest","preventDefault","nodeName","dataset","selectedNode","includes","dom","select","nodeIndex","toUpperCase","selectAndScroll","hide","getAllWarningStrings","keys","stringValues","getStrings","map","key","Map","index","langStrings","warnings","getWarnings","warning","description","type","value","nodeData","problemNode","text","Templates","render","node","selection","scrollIntoView","behavior","block","push","createWarnings","checkImage","checkOtherElements","getContent","format","checkTableCaption","checkTableMergedCells","checkTableHeaders","filter","nodes","isImageType","getTextValue","emptyStringValue","innerText","trim","textContent","getEventualNode","childNodes","document","matches","describedNode","indexOf","src","getAttribute","problemNodes","forEach","img","table","caption","querySelector","hasChildNodes","nodeValue","foreground","fromArray","getComputedBackgroundColor","window","getComputedStyle","getPropertyValue","TYPES","RGBA","background","lum1","getLuminanceFromCssColor","lum2","ratio","getRatio","console","log","find","existingProblemNode","contains","querySelectorAll","some","row","header","colortext","color","toArray","toRGB","part1","parseInt","Math","pow","parentNode","toLowerCase","colorParts","alpha","parentColor"],"mappings":"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"}