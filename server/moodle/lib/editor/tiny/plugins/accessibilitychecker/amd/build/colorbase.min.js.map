{"version":3,"file":"colorbase.min.js","sources":["../src/colorbase.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/*\r\n * @package    tiny_accessibilitychecker\r\n * @copyright  2022, Stevani Andolo  <stevani@hotmail.com.au>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nexport default class {\r\n\r\n    REGEX_HEX = /^#?([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})(\\ufffe)?/;\r\n    REGEX_HEX3 = /^#?([\\da-fA-F]{1})([\\da-fA-F]{1})([\\da-fA-F]{1})(\\ufffe)?/;\r\n    REGEX_RGB = /rgba?\\(([\\d]{1,3}), ?([\\d]{1,3}), ?([\\d]{1,3}),? ?([.\\d]*)?\\)/;\r\n\r\n    TYPES = {\r\n        HEX: 'hex',\r\n        RGB: 'rgb',\r\n        RGBA: 'rgba'\r\n    };\r\n\r\n    KEYWORDS = {\r\n        black: '000',\r\n        silver: 'c0c0c0',\r\n        gray: '808080',\r\n        white: 'fff',\r\n        maroon: '800000',\r\n        red: 'f00',\r\n        purple: '800080',\r\n        fuchsia: 'f0f',\r\n        green: '008000',\r\n        lime: '0f0',\r\n        olive: '808000',\r\n        yellow: 'ff0',\r\n        navy: '000080',\r\n        blue: '00f',\r\n        teal: '008080',\r\n        aqua: '0ff'\r\n    };\r\n\r\n    STR_HEX = '#{*}{*}{*}';\r\n    STR_RGB = 'rgb({*}, {*}, {*})';\r\n    STR_RGBA = 'rgba({*}, {*}, {*}, {*})';\r\n\r\n    toHex = (str) => {\r\n        var clr = this._convertTo(str, 'hex'),\r\n            isTransparent = clr.toLowerCase() === 'transparent';\r\n\r\n        if (clr.charAt(0) !== '#' && !isTransparent) {\r\n            clr = '#' + clr;\r\n        }\r\n\r\n        return isTransparent ? clr.toLowerCase() : clr.toUpperCase();\r\n    };\r\n\r\n    toRGB = (str) => {\r\n        var clr = this._convertTo(str, 'rgb');\r\n        return clr.toLowerCase();\r\n    };\r\n\r\n    toRGBA = (str) => {\r\n        var clr = this._convertTo(str, 'rgba');\r\n        return clr.toLowerCase();\r\n    };\r\n\r\n    toArray = (str) => {\r\n        // Parse with regex and return \"matches\" array.\r\n        var type = this.findType(str).toUpperCase(),\r\n            regex,\r\n            arr,\r\n            length,\r\n            lastItem;\r\n\r\n        if (type === 'HEX' && str.length < 5) {\r\n            type = 'HEX3';\r\n        }\r\n\r\n        if (type.charAt(type.length - 1) === 'A') {\r\n            type = type.slice(0, -1);\r\n        }\r\n\r\n        regex = this._getRightValue('REGEX_' + type);\r\n\r\n        if (regex) {\r\n            arr = regex.exec(str) || [];\r\n            length = arr.length;\r\n\r\n            if (length) {\r\n                arr.shift();\r\n                length--;\r\n\r\n                if (type === 'HEX3') {\r\n                    arr[0] += arr[0];\r\n                    arr[1] += arr[1];\r\n                    arr[2] += arr[2];\r\n                }\r\n                lastItem = arr[length - 1];\r\n\r\n                if (!lastItem) {\r\n                    arr[length - 1] = 1;\r\n                }\r\n            }\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    fromArray = (arr, template) => {\r\n        arr = arr.concat();\r\n\r\n        if (typeof template === 'undefined') {\r\n            return arr.join(', ');\r\n        }\r\n\r\n        var replace = '{*}';\r\n        template = this._getRightValue('STR_' + template.toUpperCase());\r\n\r\n        if (arr.length === 3 && template.match(/\\{\\*\\}/g).length === 4) {\r\n            arr.push(1);\r\n        }\r\n\r\n        while (template.indexOf(replace) >= 0 && arr.length > 0) {\r\n            template = template.replace(replace, arr.shift());\r\n        }\r\n        return template;\r\n    };\r\n\r\n    findType = (str) => {\r\n        if (this.KEYWORDS[str]) {\r\n            return 'keyword';\r\n        }\r\n\r\n        var index = str.indexOf('('),\r\n            key;\r\n\r\n        if (index > 0) {\r\n            key = str.substr(0, index);\r\n        }\r\n\r\n        if (key && this.TYPES[key.toUpperCase()]) {\r\n            return this.TYPES[key.toUpperCase()];\r\n        }\r\n        return 'hex';\r\n    };\r\n\r\n    _getAlpha = (clr) => {\r\n        var alpha,\r\n            arr = this.toArray(clr);\r\n\r\n        if (arr.length > 3) {\r\n            alpha = arr.pop();\r\n        }\r\n        return +alpha || 1;\r\n    };\r\n\r\n    _keywordToHex = (clr) => {\r\n        var keyword = this.KEYWORDS[clr];\r\n\r\n        if (keyword) {\r\n            return keyword;\r\n        }\r\n        return keyword;\r\n    };\r\n\r\n    _convertTo = (clr, to) => {\r\n        if (clr === 'transparent') {\r\n            return clr;\r\n        }\r\n\r\n        var from = this.findType(clr),\r\n            originalTo = to,\r\n            needsAlpha,\r\n            alpha,\r\n            method,\r\n            ucTo;\r\n\r\n        if (from === 'keyword') {\r\n            clr = this._keywordToHex(clr);\r\n            from = 'hex';\r\n        }\r\n\r\n        if (from === 'hex' && clr.length < 5) {\r\n            if (clr.charAt(0) === '#') {\r\n                clr = clr.substr(1);\r\n            }\r\n\r\n            clr = '#' + clr.charAt(0) + clr.charAt(0) +\r\n                        clr.charAt(1) + clr.charAt(1) +\r\n                        clr.charAt(2) + clr.charAt(2);\r\n        }\r\n\r\n        if (from === to) {\r\n            return clr;\r\n        }\r\n\r\n        if (from.charAt(from.length - 1) === 'a') {\r\n            from = from.slice(0, -1);\r\n        }\r\n\r\n        needsAlpha = (to.charAt(to.length - 1) === 'a');\r\n        if (needsAlpha) {\r\n            to = to.slice(0, -1);\r\n            alpha = this._getAlpha(clr);\r\n        }\r\n\r\n        ucTo = to.charAt(0).toUpperCase() + to.substr(1).toLowerCase();\r\n        method = window['_' + from + 'To' + ucTo];\r\n\r\n        // Check to see if need conversion to rgb first.\r\n        // Check to see if there is a direct conversion method.\r\n        // Convertions are: hex <-> rgb <-> hsl.\r\n        if (!method) {\r\n            if (from !== 'rgb' && to !== 'rgb') {\r\n                clr = window['_' + from + 'ToRgb'](clr);\r\n                from = 'rgb';\r\n                method = window['_' + from + 'To' + ucTo];\r\n            }\r\n        }\r\n\r\n        if (method) {\r\n            clr = ((method)(clr, needsAlpha));\r\n        }\r\n\r\n        // Process clr from arrays to strings after conversions if alpha is needed.\r\n        if (needsAlpha) {\r\n            if (!Array.isArray(clr)) {\r\n                clr = this.toArray(clr);\r\n            }\r\n            clr.push(alpha);\r\n            clr = this.fromArray(clr, originalTo.toUpperCase());\r\n        }\r\n        return clr;\r\n    };\r\n\r\n    _hexToRgb = (str, array) => {\r\n        var r, g, b;\r\n\r\n        /* jshint bitwise:false */\r\n        if (str.charAt(0) === '#') {\r\n            str = str.substr(1);\r\n        }\r\n\r\n        /* eslint no-bitwise: */\r\n        str = parseInt(str, 16);\r\n        r = str >> 16;\r\n        g = str >> 8 & 0xFF;\r\n        b = str & 0xFF;\r\n\r\n        if (array) {\r\n            return [r, g, b];\r\n        }\r\n        return 'rgb(' + r + ', ' + g + ', ' + b + ')';\r\n    };\r\n\r\n    _rgbToHex = (str) => {\r\n        /* jshint bitwise:false */\r\n        var rgb = this.toArray(str),\r\n            hex = rgb[2] | (rgb[1] << 8) | (rgb[0] << 16);\r\n\r\n        hex = (+hex).toString(16);\r\n\r\n        while (hex.length < 6) {\r\n            hex = '0' + hex;\r\n        }\r\n        return '#' + hex;\r\n    };\r\n\r\n    _getRightValue = (string) => {\r\n        let regex = null;\r\n        if (string === 'REGEX_RGB') {\r\n            regex = this.REGEX_RGB;\r\n        } else if (string === 'REGEX_HEX') {\r\n            regex = this.REGEX_HEX;\r\n        } else if (string === 'REGEX_HEX3') {\r\n            regex = this.REGEX_HEX3;\r\n        } else if (string === 'STR_HEX') {\r\n            regex = this.STR_HEX;\r\n        } else if (string === 'STR_RGB') {\r\n            regex = this.STR_RGB;\r\n        } else if (string === 'STR_RGBA') {\r\n            regex = this.STR_RGBA;\r\n        }\r\n        return regex;\r\n    };\r\n}\r\n"],"names":["_exports","default","REGEX_HEX","REGEX_HEX3","REGEX_RGB","TYPES","HEX","RGB","RGBA","KEYWORDS","black","silver","gray","white","maroon","red","purple","fuchsia","green","lime","olive","yellow","navy","blue","teal","aqua","STR_HEX","STR_RGB","STR_RGBA","toHex","str","clr","this","_convertTo","isTransparent","toLowerCase","charAt","toUpperCase","toRGB","toRGBA","toArray","regex","arr","length","type","findType","slice","_getRightValue","exec","shift","fromArray","template","concat","join","match","push","indexOf","replace","key","index","substr","_getAlpha","alpha","pop","_keywordToHex","keyword","to","needsAlpha","method","ucTo","from","originalTo","window","Array","isArray","_hexToRgb","array","r","g","b","parseInt","_rgbToHex","rgb","hex","toString","string"],"mappings":"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"}