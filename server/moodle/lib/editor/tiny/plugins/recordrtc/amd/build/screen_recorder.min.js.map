{"version":3,"file":"screen_recorder.min.js","sources":["../src/screen_recorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Tiny Record RTC - Screen recorder configuration.\r\n *\r\n * @module      tiny_recordrtc/screen_recorder\r\n * @copyright   2024 The Open University\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport BaseClass from './base_recorder';\r\nimport Modal from 'tiny_recordrtc/modal';\r\nimport {component} from 'tiny_recordrtc/common';\r\nimport {getString} from 'core/str';\r\n\r\nexport default class Screen extends BaseClass {\r\n    configurePlayer() {\r\n        return this.modalRoot.querySelector('video');\r\n    }\r\n\r\n    getSupportedTypes() {\r\n        return [\r\n            // Support webm as a preference.\r\n            // This container supports both vp9, and vp8.\r\n            // It does not support AVC1/h264 at all.\r\n            // It is supported by Chromium, and Firefox browsers, but not Safari.\r\n            'video/webm;codecs=vp9,opus',\r\n            'video/webm;codecs=vp8,opus',\r\n\r\n            // Fall back to mp4 if webm is not available.\r\n            // The mp4 container supports v9, and h264 but neither of these are supported for recording on other\r\n            // browsers.\r\n            // In addition to this, we can record in v9, but VideoJS does not support a mp4 container with v9 codec\r\n            // for playback. We leave it as a final option as a just-in-case.\r\n            'video/mp4;codecs=h264,opus',\r\n            'video/mp4;codecs=h264,wav',\r\n            'video/mp4;codecs=v9,opus',\r\n        ];\r\n\r\n    }\r\n\r\n    getRecordingOptions() {\r\n        return {\r\n            videoBitsPerSecond: parseInt(this.config.screenbitrate),\r\n            videoWidth: parseInt(this.config.videoscreenwidth),\r\n            videoHeight: parseInt(this.config.videoscreenheight),\r\n        };\r\n    }\r\n\r\n    getMediaConstraints() {\r\n        return {\r\n            audio: true,\r\n            systemAudio: 'exclude',\r\n            video: {\r\n                displaySurface: 'monitor',\r\n                frameRate: {ideal: 24},\r\n                width: {\r\n                    max: parseInt(this.config.videoscreenwidth),\r\n                },\r\n                height: {\r\n                    max: parseInt(this.config.videoscreenheight),\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    playOnCapture() {\r\n        // Play the recording back on capture.\r\n        return true;\r\n    }\r\n\r\n    getRecordingType() {\r\n        return 'screen';\r\n    }\r\n\r\n    getTimeLimit() {\r\n        return this.config.screentimelimit;\r\n    }\r\n\r\n    getEmbedTemplateName() {\r\n        return 'tiny_recordrtc/embed_screen';\r\n    }\r\n\r\n    getFileName(prefix) {\r\n        return `${prefix}-video.${this.getFileExtension()}`;\r\n    }\r\n\r\n    getFileExtension() {\r\n        if (window.MediaRecorder.isTypeSupported('audio/webm')) {\r\n            return 'webm';\r\n        } else if (window.MediaRecorder.isTypeSupported('audio/mp4')) {\r\n            return 'mp4';\r\n        }\r\n\r\n        window.console.warn(`Unknown file type for MediaRecorder API`);\r\n        return '';\r\n    }\r\n\r\n    async captureUserMedia() {\r\n        // Screen recording requires both audio and the screen, and we need to get them both together.\r\n        const audioPromise = navigator.mediaDevices.getUserMedia({audio: true});\r\n        const screenPromise = navigator.mediaDevices.getDisplayMedia(this.getMediaConstraints());\r\n        // If the audioPromise is \"rejected\" (indicating that the user does not want to share their voice),\r\n        // we will proceed to record their screen without audio.\r\n        // Therefore, we will use Promise.allSettled instead of Promise.all.\r\n        await Promise.allSettled([audioPromise, screenPromise]).then(this.combineAudioAndScreenRecording.bind(this));\r\n    }\r\n\r\n    /**\r\n     * For starting screen recording, once we have both audio and video, combine them.\r\n     *\r\n     * @param {Object[]} results from the above Promise.allSettled call.\r\n     */\r\n    combineAudioAndScreenRecording(results) {\r\n        const [audioData, screenData] = results;\r\n        if (screenData.status !== 'fulfilled') {\r\n            // If the user does not grant screen permission show warning popup.\r\n            this.handleCaptureFailure(screenData.reason);\r\n            return;\r\n        }\r\n\r\n        const screenStream = screenData.value;\r\n        // Prepare to handle if the user clicks the browser's \"Stop Sharing Screen\" button.\r\n        screenStream.getVideoTracks()[0].addEventListener('ended', this.handleStopScreenSharing.bind(this));\r\n\r\n        // Handle microphone.\r\n        if (audioData.status !== 'fulfilled') {\r\n            // We could not get audio. In this case, we just continue without audio.\r\n            this.handleCaptureSuccess(screenStream);\r\n            return;\r\n        }\r\n        const audioStream = audioData.value;\r\n        // Merge the video track from the media stream with the audio track from the microphone stream\r\n        // and stop any unnecessary tracks to ensure that the recorded video has microphone sound.\r\n        const composedStream = new MediaStream();\r\n        screenStream.getTracks().forEach(function(track) {\r\n            if (track.kind === 'video') {\r\n                composedStream.addTrack(track);\r\n            } else {\r\n                track.stop();\r\n            }\r\n        });\r\n        audioStream.getAudioTracks().forEach(function(micTrack) {\r\n            composedStream.addTrack(micTrack);\r\n        });\r\n\r\n        this.handleCaptureSuccess(composedStream);\r\n    }\r\n\r\n    /**\r\n     * Callback that is called by the user clicking Stop screen sharing on the browser.\r\n     */\r\n    handleStopScreenSharing() {\r\n        if (this.isRecording() || this.isPaused()) {\r\n            this.requestRecordingStop();\r\n            this.cleanupStream();\r\n        } else {\r\n            this.setRecordButtonState(false);\r\n            this.displayAlert(\r\n                getString('screensharingstopped_title', component),\r\n                getString('screensharingstopped', component)\r\n            );\r\n        }\r\n    }\r\n\r\n    handleRecordingStartStopRequested() {\r\n        if (this.isRecording() || this.isPaused()) {\r\n            this.requestRecordingStop();\r\n            this.cleanupStream();\r\n        } else {\r\n            this.startRecording();\r\n        }\r\n    }\r\n\r\n    static getModalClass() {\r\n        return class extends Modal {\r\n            static TYPE = `${component}/screen_recorder`;\r\n            static TEMPLATE = `${component}/screen_recorder`;\r\n        };\r\n    }\r\n}\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_base_recorder","_modal","Screen","BaseClass","configurePlayer","this","modalRoot","querySelector","getSupportedTypes","getRecordingOptions","videoBitsPerSecond","parseInt","config","screenbitrate","videoWidth","videoscreenwidth","videoHeight","videoscreenheight","getMediaConstraints","audio","systemAudio","video","displaySurface","frameRate","ideal","width","max","height","playOnCapture","getRecordingType","getTimeLimit","screentimelimit","getEmbedTemplateName","getFileName","prefix","getFileExtension","window","MediaRecorder","isTypeSupported","console","warn","captureUserMedia","audioPromise","navigator","mediaDevices","getUserMedia","screenPromise","getDisplayMedia","Promise","allSettled","then","combineAudioAndScreenRecording","bind","results","audioData","screenData","status","handleCaptureFailure","reason","screenStream","value","getVideoTracks","addEventListener","handleStopScreenSharing","handleCaptureSuccess","audioStream","composedStream","MediaStream","getTracks","forEach","track","kind","addTrack","stop","getAudioTracks","micTrack","isRecording","isPaused","requestRecordingStop","cleanupStream","setRecordButtonState","displayAlert","getString","component","handleRecordingStartStopRequested","startRecording","getModalClass","Modal","static","_exports"],"mappings":"uLAwByC,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;qFADzCG,eAAAJ,uBAAAI,gBACAC,OAAAL,uBAAAK,QAIe,MAAMC,eAAeC,eAAAA,QAChCC,eAAAA,GACI,OAAOC,KAAKC,UAAUC,cAAc,QACxC,CAEAC,iBAAAA,GACI,MAAO,CAKH,6BACA,6BAOA,6BACA,4BACA,2BAGR,CAEAC,mBAAAA,GACI,MAAO,CACHC,mBAAoBC,SAASN,KAAKO,OAAOC,eACzCC,WAAYH,SAASN,KAAKO,OAAOG,kBACjCC,YAAaL,SAASN,KAAKO,OAAOK,mBAE1C,CAEAC,mBAAAA,GACI,MAAO,CACHC,OAAO,EACPC,YAAa,UACbC,MAAO,CACHC,eAAgB,UAChBC,UAAW,CAACC,MAAO,IACnBC,MAAO,CACHC,IAAKf,SAASN,KAAKO,OAAOG,mBAE9BY,OAAQ,CACJD,IAAKf,SAASN,KAAKO,OAAOK,qBAI1C,CAEAW,aAAAA,GAEI,OAAO,CACX,CAEAC,gBAAAA,GACI,MAAO,QACX,CAEAC,YAAAA,GACI,OAAOzB,KAAKO,OAAOmB,eACvB,CAEAC,oBAAAA,GACI,MAAO,6BACX,CAEAC,WAAAA,CAAYC,QACR,MAAO,GAAGA,gBAAgB7B,KAAK8B,oBACnC,CAEAA,gBAAAA,GACI,OAAIC,OAAOC,cAAcC,gBAAgB,cAC9B,OACAF,OAAOC,cAAcC,gBAAgB,aACrC,OAGXF,OAAOG,QAAQC,KAAK,2CACb,GACX,CAEA,sBAAMC,GAEF,MAAMC,aAAeC,UAAUC,aAAaC,aAAa,CAAC1B,OAAO,IAC3D2B,cAAgBH,UAAUC,aAAaG,gBAAgB1C,KAAKa,6BAI5D8B,QAAQC,WAAW,CAACP,aAAcI,gBAAgBI,KAAK7C,KAAK8C,+BAA+BC,KAAK/C,MAC1G,CAOA8C,8BAAAA,CAA+BE,SAC3B,MAAOC,UAAWC,YAAcF,QAChC,GAA0B,cAAtBE,WAAWC,OAGX,YADAnD,KAAKoD,qBAAqBF,WAAWG,QAIzC,MAAMC,aAAeJ,WAAWK,MAKhC,GAHAD,aAAaE,iBAAiB,GAAGC,iBAAiB,QAASzD,KAAK0D,wBAAwBX,KAAK/C,OAGpE,cAArBiD,UAAUE,OAGV,YADAnD,KAAK2D,qBAAqBL,cAG9B,MAAMM,YAAcX,UAAUM,MAGxBM,eAAiB,IAAIC,YAC3BR,aAAaS,YAAYC,SAAQ,SAASC,OACnB,UAAfA,MAAMC,KACNL,eAAeM,SAASF,OAExBA,MAAMG,MAEd,IACAR,YAAYS,iBAAiBL,SAAQ,SAASM,UAC1CT,eAAeM,SAASG,SAC5B,IAEAtE,KAAK2D,qBAAqBE,eAC9B,CAKAH,uBAAAA,GACQ1D,KAAKuE,eAAiBvE,KAAKwE,YAC3BxE,KAAKyE,uBACLzE,KAAK0E,kBAEL1E,KAAK2E,sBAAqB,GAC1B3E,KAAK4E,cACD,EAAAC,KAASA,WAAC,6BAA8BC,QAAAA,YACxC,EAAAD,KAASA,WAAC,uBAAwBC,QAAAA,YAG9C,CAEAC,iCAAAA,GACQ/E,KAAKuE,eAAiBvE,KAAKwE,YAC3BxE,KAAKyE,uBACLzE,KAAK0E,iBAEL1E,KAAKgF,gBAEb,CAEA,oBAAOC,GACH,OAAO,cAAcC,eACjBC,YAAc,GAAGL,QAAAA,4BACjBK,gBAAkB,GAAGL,QAAAA,4BAE7B,EACH,OAAAM,SAAA1F,QAAAG,OAAAuF,SAAA1F,OAAA"}