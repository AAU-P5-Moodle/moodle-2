{"version":3,"file":"commands_screen.min.js","sources":["../src/commands_screen.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Tiny Record RTC - record screen command.\r\n *\r\n * @module      tiny_recordrtc/commands_screen\r\n * @copyright   2024 The Open University\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {getString} from 'core/str';\r\nimport {getButtonImage as getScreenIcon} from 'editor_tiny/utils';\r\nimport {\r\n    screenButtonName,\r\n    component,\r\n} from './common';\r\nimport {isScreenAllowed} from './options';\r\nimport Recorder from './screen_recorder';\r\n\r\nexport default async() => {\r\n    if (!Recorder.isBrowserCompatible()) {\r\n        // The browser doesn't support the plugin, so just don't show it.\r\n        return () => false;\r\n    }\r\n\r\n    const [\r\n        screenButtonTitle,\r\n        buttonImage,\r\n    ] = await Promise.all([\r\n        getString('screenbuttontitle', component),\r\n        getScreenIcon('screen', component),\r\n    ]);\r\n\r\n    return (editor) => {\r\n        // Screen recording is not currently supported on mobile devices.\r\n        // Therefore, it will be disabled and should be considered for future implementation.\r\n        if (!isScreenAllowed(editor) || !editor.editorManager.Env.deviceType.isDesktop()) {\r\n            return;\r\n        }\r\n\r\n        const icon = 'screen';\r\n        editor.ui.registry.addIcon(icon, buttonImage.html);\r\n        editor.ui.registry.addButton(screenButtonName, {\r\n            icon,\r\n            tooltip: screenButtonTitle,\r\n            onAction: () => Recorder.display(editor),\r\n        });\r\n\r\n        editor.ui.registry.addMenuItem(screenButtonName, {\r\n            icon,\r\n            text: screenButtonTitle,\r\n            onAction: () => Recorder.display(editor),\r\n        });\r\n    };\r\n};\r\n"],"names":["e","_screen_recorder","__esModule","default","_exports","async","Recorder","isBrowserCompatible","screenButtonTitle","buttonImage","Promise","all","getString","component","getScreenIcon","editor","isScreenAllowed","editorManager","Env","deviceType","isDesktop","ui","registry","addIcon","html","addButton","screenButtonName","icon","tooltip","onAction","display","addMenuItem","text"],"mappings":"gMA8ByC,IAAAA;;;;;;;qFAAzCC,kBAAyCD,EAAzCC,mBAAyCD,EAAAE,WAAAF,EAAAG,CAAAA,QAAAH,GAqCxC,OAAAI,SAAAD,QAnCcE,UACX,IAAKC,iBAAQH,QAACI,sBAEV,MAAO,KAAM,EAGjB,MACIC,kBACAC,mBACMC,QAAQC,IAAI,EAClB,EAAAC,KAAAA,WAAU,oBAAqBC,QAAAA,YAC/B,EAAAC,OAAAA,gBAAc,SAAUD,QAAAA,aAG5B,OAAQE,SAGJ,KAAK,EAAAC,SAAAA,iBAAgBD,UAAYA,OAAOE,cAAcC,IAAIC,WAAWC,YACjE,OAIJL,OAAOM,GAAGC,SAASC,QADN,SACoBd,YAAYe,MAC7CT,OAAOM,GAAGC,SAASG,UAAUC,yBAAkB,CAC3CC,KAHS,SAITC,QAASpB,kBACTqB,SAAUA,IAAMvB,yBAASwB,QAAQf,UAGrCA,OAAOM,GAAGC,SAASS,YAAYL,yBAAkB,CAC7CC,KATS,SAUTK,KAAMxB,kBACNqB,SAAUA,IAAMvB,yBAASwB,QAAQf,SACnC,CACL,EACJX,SAAAD,OAAA"}