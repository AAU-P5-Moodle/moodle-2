{"version":3,"file":"editor.min.js","sources":["../src/editor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * TinyMCE Editor Manager.\r\n *\r\n * @module editor_tiny/editor\r\n * @copyright  2022 Andrew Lyons <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport jQuery from 'jquery';\r\nimport Pending from 'core/pending';\r\nimport {getDefaultConfiguration, getDefaultQuickbarsSelectionToolbar} from './defaults';\r\nimport {getTinyMCE, baseUrl} from './loader';\r\nimport * as Options from './options';\r\nimport {addToolbarButton, addToolbarButtons, addToolbarSection,\r\n    removeToolbarButton, removeSubmenuItem, updateEditorState} from './utils';\r\n\r\n/**\r\n * Storage for the TinyMCE instances on the page.\r\n * @type {Map}\r\n */\r\nconst instanceMap = new Map();\r\n\r\n/**\r\n * The default editor configuration.\r\n * @type {Object}\r\n */\r\nlet defaultOptions = {};\r\n\r\n/**\r\n * Require the modules for the named set of TinyMCE plugins.\r\n *\r\n * @param {string[]} pluginList The list of plugins\r\n * @return {Promise[]} A matching set of Promises relating to the requested plugins\r\n */\r\nconst importPluginList = async(pluginList) => {\r\n    // Fetch all of the plugins from the list of plugins.\r\n    // If a plugin contains a '/' then it is assumed to be a Moodle AMD module to import.\r\n    const pluginHandlers = await Promise.all(pluginList.map(pluginPath => {\r\n        if (pluginPath.indexOf('/') === -1) {\r\n            // A standard TinyMCE Plugin.\r\n            return Promise.resolve(pluginPath);\r\n        }\r\n\r\n        return import(pluginPath);\r\n    }));\r\n\r\n    // Normalise the plugin data to a list of plugin names.\r\n    // Two formats are supported:\r\n    // - a string; and\r\n    // - an array whose first element is the plugin name, and the second element is the plugin configuration.\r\n    const pluginNames = pluginHandlers.map((pluginConfig) => {\r\n        if (typeof pluginConfig === 'string') {\r\n            return pluginConfig;\r\n        }\r\n        if (Array.isArray(pluginConfig)) {\r\n            return pluginConfig[0];\r\n        }\r\n        return null;\r\n    }).filter((value) => value);\r\n\r\n    // Fetch the list of pluginConfig handlers.\r\n    const pluginConfig = pluginHandlers.map((pluginConfig) => {\r\n        if (Array.isArray(pluginConfig)) {\r\n            return pluginConfig[1];\r\n        }\r\n        return null;\r\n    }).filter((value) => value);\r\n\r\n    return {\r\n        pluginNames,\r\n        pluginConfig,\r\n    };\r\n};\r\n\r\n/**\r\n * Fetch the language data for the specified language.\r\n *\r\n * @param {string} language The language identifier\r\n * @returns {object}\r\n */\r\nconst fetchLanguage = (language) => fetch(\r\n    `${M.cfg.wwwroot}/lib/editor/tiny/lang.php/${M.cfg.langrev}/${language}`\r\n).then(response => response.json());\r\n\r\n/**\r\n * Get a list of all Editors in a Map, keyed by the DOM Node that the Editor is associated with.\r\n *\r\n * @returns {Map<Node, Editor>}\r\n */\r\nexport const getAllInstances = () => new Map(instanceMap.entries());\r\n\r\n/**\r\n * Get the TinyMCE instance for the specified Node ID.\r\n *\r\n * @param {string} elementId\r\n * @returns {TinyMCE|undefined}\r\n */\r\nexport const getInstanceForElementId = elementId => getInstanceForElement(document.getElementById(elementId));\r\n\r\n/*\r\n * Get the TinyMCE instance for the specified HTMLElement.\r\n *\r\n * @param {HTMLElement} element\r\n * @returns {TinyMCE|undefined}\r\n */\r\nexport const getInstanceForElement = element => {\r\n    const instance = instanceMap.get(element);\r\n    if (instance && instance.removed) {\r\n        instanceMap.delete(element);\r\n        return undefined;\r\n    }\r\n    return instance;\r\n};\r\n\r\n/**\r\n * Set up TinyMCE for the selector at the specified HTML Node id.\r\n *\r\n * @param {object} config The configuration required to setup the editor\r\n * @param {string} config.elementId The HTML Node ID\r\n * @param {Object} config.options The editor plugin configuration\r\n */\r\nexport const setupForElementId = ({elementId, options}) => {\r\n    const target = document.getElementById(elementId);\r\n    // We will need to wrap the setupForTarget and editor.remove() calls in a setTimeout.\r\n    // Because other events callbacks will still try to run on the removed instance.\r\n    // This will cause an error on Firefox.\r\n    // We need to make TinyMCE to remove itself outside the event loop.\r\n    // @see https://github.com/tinymce/tinymce/issues/3129 for more details.\r\n    setTimeout(() => {\r\n        return setupForTarget(target, options);\r\n    }, 1);\r\n};\r\n\r\n/**\r\n * Initialise the page with standard TinyMCE requirements.\r\n *\r\n * Currently this includes the language taken from the HTML lang property.\r\n */\r\nconst initialisePage = async() => {\r\n    const lang = document.querySelector('html').lang;\r\n\r\n    const [tinyMCE, langData] = await Promise.all([getTinyMCE(), fetchLanguage(lang)]);\r\n    tinyMCE.addI18n(lang, langData);\r\n};\r\ninitialisePage();\r\n\r\n/**\r\n * Get the list of plugins to load for the specified configuration.\r\n *\r\n * If the specified configuration does not include a plugin configuration, then return the default configuration.\r\n *\r\n * @param {object} options\r\n * @param {array} [options.plugins=null] The plugin list\r\n * @returns {object}\r\n */\r\nconst getPlugins = ({plugins = null} = {}) => {\r\n    if (plugins) {\r\n        return plugins;\r\n    }\r\n\r\n    if (defaultOptions.plugins) {\r\n        return defaultOptions.plugins;\r\n    }\r\n\r\n    return {};\r\n};\r\n\r\n/**\r\n * Adjust the editor size base on the target element.\r\n *\r\n * @param {TinyMCE} editor TinyMCE editor\r\n * @param {Node} target Target element\r\n */\r\nconst adjustEditorSize = (editor, target) => {\r\n    let expectedEditingAreaHeight = 0;\r\n    if (target.clientHeight) {\r\n        expectedEditingAreaHeight = target.clientHeight;\r\n    } else {\r\n        // If the target element is hidden, we cannot get the lineHeight of the target element.\r\n        // We don't have a proper way to retrieve the general lineHeight of the theme, so we use 22 here, it's equivalent to 1.5em.\r\n        expectedEditingAreaHeight = target.rows * (parseFloat(window.getComputedStyle(target).lineHeight) || 22);\r\n    }\r\n    const currentEditingAreaHeight = editor.getContainer().querySelector('.tox-sidebar-wrap').clientHeight;\r\n    if (currentEditingAreaHeight < expectedEditingAreaHeight) {\r\n        // Change the height based on the target element's height.\r\n        editor.getContainer().querySelector('.tox-sidebar-wrap').style.height = `${expectedEditingAreaHeight}px`;\r\n    }\r\n};\r\n\r\n/**\r\n * Get the standard configuration for the specified options.\r\n *\r\n * @param {Node} target\r\n * @param {tinyMCE} tinyMCE\r\n * @param {object} options\r\n * @param {Array} plugins\r\n * @returns {object}\r\n */\r\nconst getStandardConfig = (target, tinyMCE, options, plugins) => {\r\n    const lang = document.querySelector('html').lang;\r\n\r\n    const config = Object.assign({}, getDefaultConfiguration(), {\r\n        // eslint-disable-next-line camelcase\r\n        base_url: baseUrl,\r\n\r\n        // Set the editor target.\r\n        // https://www.tiny.cloud/docs/tinymce/6/editor-important-options/#target\r\n        target,\r\n\r\n        // https://www.tiny.cloud/docs/tinymce/6/customize-ui/#set-maximum-and-minimum-heights-and-widths\r\n        // Set the minimum height to the smallest height that we can fit the Menu bar, Tool bar, Status bar and the text area.\r\n        // eslint-disable-next-line camelcase\r\n        min_height: 175,\r\n\r\n        // Base the height on the size of the text area.\r\n        // In some cases, E.g.: The target is an advanced element, it will be hidden. We cannot get the height at this time.\r\n        // So set the height to auto, and adjust it later by adjustEditorSize().\r\n        height: target.clientHeight || 'auto',\r\n\r\n        // Set the language.\r\n        // https://www.tiny.cloud/docs/tinymce/6/ui-localization/#language\r\n        // eslint-disable-next-line camelcase\r\n        language: lang,\r\n\r\n        // Load the editor stylesheet into the editor iframe.\r\n        // https://www.tiny.cloud/docs/tinymce/6/add-css-options/\r\n        // eslint-disable-next-line camelcase\r\n        content_css: [\r\n            options.css,\r\n        ],\r\n\r\n        // Do not convert URLs to relative URLs.\r\n        // https://www.tiny.cloud/docs/tinymce/6/url-handling/#convert_urls\r\n        // eslint-disable-next-line camelcase\r\n        convert_urls: false,\r\n\r\n        // Enabled 'advanced' a11y options.\r\n        // This includes allowing role=\"presentation\" from the image uploader.\r\n        // https://www.tiny.cloud/docs/tinymce/6/accessibility/\r\n        // eslint-disable-next-line camelcase\r\n        a11y_advanced_options: true,\r\n\r\n        // Add specific rules to the valid elements.\r\n        // eslint-disable-next-line camelcase\r\n        extended_valid_elements: 'script[*],p[*],i[*]',\r\n\r\n        // Disable XSS Sanitisation.\r\n        // We do this in PHP.\r\n        // https://www.tiny.cloud/docs/tinymce/6/security/#turning-dompurify-off\r\n        // Note: This feature has been backported from TinyMCE 6.4.0.\r\n        // eslint-disable-next-line camelcase\r\n        xss_sanitization: false,\r\n\r\n        // Disable quickbars entirely.\r\n        // The UI is not ideal and we'll wait for it to improve in future before we enable it in Moodle.\r\n        // eslint-disable-next-line camelcase\r\n        quickbars_insert_toolbar: '',\r\n\r\n        // If the target element is too small, disable the quickbars selection toolbar.\r\n        // The quickbars selection toolbar is not displayed correctly if the target element is too small.\r\n        // See: https://github.com/tinymce/tinymce/issues/9693.\r\n        quickbars_selection_toolbar: target.rows > 5 ? getDefaultQuickbarsSelectionToolbar() : false,\r\n\r\n        // Override the standard block formats property (removing h1 & h2).\r\n        // https://www.tiny.cloud/docs/tinymce/6/user-formatting-options/#block_formats\r\n        // eslint-disable-next-line camelcase\r\n        block_formats: 'Paragraph=p;Heading 3=h3;Heading 4=h4;Heading 5=h5;Heading 6=h6;Preformatted=pre;Blockquote=blockquote',\r\n\r\n        // The list of plugins to include in the instance.\r\n        // https://www.tiny.cloud/docs/tinymce/6/editor-important-options/#plugins\r\n        plugins: [\r\n            ...plugins,\r\n        ],\r\n\r\n        // Skins\r\n        skin: 'oxide',\r\n\r\n        // Do not show the help link in the status bar.\r\n        // https://www.tiny.cloud/docs/tinymce/latest/accessibility/#help_accessibility\r\n        // eslint-disable-next-line camelcase\r\n        help_accessibility: false,\r\n\r\n        // Remove the \"Upgrade\" link for Tiny.\r\n        // https://www.tiny.cloud/docs/tinymce/6/editor-premium-upgrade-promotion/\r\n        promotion: false,\r\n\r\n        // Allow the administrator to disable branding.\r\n        // https://www.tiny.cloud/docs/tinymce/6/statusbar-configuration-options/#branding\r\n        branding: options.branding,\r\n\r\n        // Put th cells in a thead element.\r\n        // https://www.tiny.cloud/docs/tinymce/6/table-options/#table_header_type\r\n        // eslint-disable-next-line camelcase\r\n        table_header_type: 'sectionCells',\r\n\r\n        // Stored text in non-entity form.\r\n        // https://www.tiny.cloud/docs/tinymce/6/content-filtering/#entity_encoding\r\n        // eslint-disable-next-line camelcase\r\n        entity_encoding: \"raw\",\r\n\r\n        // Enable support for editors in scrollable containers.\r\n        // https://www.tiny.cloud/docs/tinymce/6/ui-mode-configuration-options/#ui_mode\r\n        // eslint-disable-next-line camelcase\r\n        ui_mode: 'split',\r\n\r\n        // Enable browser-supported spell checking.\r\n        // https://www.tiny.cloud/docs/tinymce/latest/spelling/\r\n        // eslint-disable-next-line camelcase\r\n        browser_spellcheck: true,\r\n\r\n        setup: (editor) => {\r\n            Options.register(editor, options);\r\n\r\n            editor.on('PreInit', function() {\r\n                // Work around a bug in TinyMCE with Firefox.\r\n                // When an editor is removed, and replaced with an identically attributed editor (same ID),\r\n                // and the Firefox window is freshly opened (e.g. Behat, Private browsing), the wrong contentWindow\r\n                // is assigned to the editor instance leading to an NS_ERROR_UNEXPECTED error in Firefox.\r\n                // This is a workaround for that issue.\r\n                this.contentWindow = this.iframeElement.contentWindow;\r\n            });\r\n            editor.on('init', function() {\r\n                // Hide justify alignment sub-menu.\r\n                removeSubmenuItem(editor, 'align', 'tiny:justify');\r\n                // Adjust the editor size.\r\n                adjustEditorSize(editor, target);\r\n            });\r\n\r\n            target.addEventListener('form:editorUpdated', function() {\r\n                updateEditorState(editor, target);\r\n            });\r\n\r\n            target.dispatchEvent(new Event('form:editorUpdated'));\r\n        },\r\n    });\r\n\r\n    config.toolbar = addToolbarSection(config.toolbar, 'content', 'formatting', true);\r\n    config.toolbar = addToolbarButton(config.toolbar, 'content', 'link');\r\n\r\n    // Add directionality plugins, always.\r\n    config.toolbar = addToolbarSection(config.toolbar, 'directionality', 'alignment', true);\r\n    config.toolbar = addToolbarButtons(config.toolbar, 'directionality', ['ltr', 'rtl']);\r\n\r\n    // Remove the align justify button from the toolbar.\r\n    config.toolbar = removeToolbarButton(config.toolbar, 'alignment', 'alignjustify');\r\n\r\n    return config;\r\n};\r\n\r\n/**\r\n * Fetch the TinyMCE configuration for this editor instance.\r\n *\r\n * @param {HTMLElement} target\r\n * @param {TinyMCE} tinyMCE The TinyMCE API\r\n * @param {Object} options The editor plugin configuration\r\n * @param {object} pluginValues\r\n * @param {object} pluginValues.pluginConfig The list of plugin configuration\r\n * @param {object} pluginValues.pluginNames The list of plugins to load\r\n * @returns {object} The TinyMCE Configuration\r\n */\r\nconst getEditorConfiguration = (target, tinyMCE, options, pluginValues) => {\r\n    const {\r\n        pluginNames,\r\n        pluginConfig,\r\n    } = pluginValues;\r\n\r\n    // Allow plugins to modify the configuration.\r\n    // This seems a little strange, but we must double-process the config slightly.\r\n\r\n    // First we fetch the standard configuration.\r\n    const instanceConfig = getStandardConfig(target, tinyMCE, options, pluginNames);\r\n\r\n    // Next we make any standard changes.\r\n    // Here we remove the file menu, as it doesn't offer any useful functionality.\r\n    // We only empty the items list so that a plugin may choose to add to it themselves later if they wish.\r\n    if (instanceConfig.menu.file) {\r\n        instanceConfig.menu.file.items = '';\r\n    }\r\n\r\n    // We disable the styles, backcolor, and forecolor plugins from the format menu.\r\n    // These are not useful for Moodle and we don't want to encourage their use.\r\n    if (instanceConfig.menu.format) {\r\n        instanceConfig.menu.format.items = instanceConfig.menu.format.items\r\n            // Remove forecolor and backcolor.\r\n            .replace(/forecolor ?/, '')\r\n            .replace(/backcolor ?/, '')\r\n\r\n            // Remove fontfamily for now.\r\n            .replace(/fontfamily ?/, '')\r\n\r\n            // Remove fontsize for now.\r\n            .replace(/fontsize ?/, '')\r\n\r\n            // Remove styles - it just duplicates the format menu in a way which does not respect configuration\r\n            .replace(/styles ?/, '')\r\n\r\n            // Remove any duplicate separators.\r\n            .replaceAll(/\\| *\\|/g, '|');\r\n    }\r\n\r\n    if (instanceConfig.quickbars_selection_toolbar !== false) {\r\n        // eslint-disable-next-line camelcase\r\n        instanceConfig.quickbars_selection_toolbar = instanceConfig.quickbars_selection_toolbar.replace('h2 h3', 'h3 h4 h5 h6');\r\n    }\r\n\r\n    // Next we call the `configure` function for any plugin which defines it.\r\n    // We pass the current instanceConfig in here, to allow them to make certain changes to the global configuration.\r\n    // For example, to add themselves to any menu, toolbar, and so on.\r\n    // Any plugin which wishes to have configuration options must register those options here.\r\n    pluginConfig.filter((pluginConfig) => typeof pluginConfig.configure === 'function').forEach((pluginConfig) => {\r\n        const pluginInstanceOverride = pluginConfig.configure(instanceConfig, options);\r\n        Object.assign(instanceConfig, pluginInstanceOverride);\r\n    });\r\n\r\n    // Next we convert the plugin configuration into a format that TinyMCE understands.\r\n    Object.assign(instanceConfig, Options.getInitialPluginConfiguration(options));\r\n\r\n    return instanceConfig;\r\n};\r\n\r\n/**\r\n * Check if the target for TinyMCE is in a modal or not.\r\n *\r\n * @param {HTMLElement} target Target to check\r\n * @returns {boolean} True if the target is in a modal form.\r\n */\r\nconst isModalMode = (target) => {\r\n    return !!target.closest('[data-region=\"modal\"]');\r\n};\r\n\r\n/**\r\n * Set up TinyMCE for the HTML Element.\r\n *\r\n * @param {HTMLElement} target\r\n * @param {Object} [options={}] The editor plugin configuration\r\n * @return {Promise<TinyMCE>} The TinyMCE instance\r\n */\r\nexport const setupForTarget = async(target, options = {}) => {\r\n    const instance = getInstanceForElement(target);\r\n    if (instance) {\r\n        return Promise.resolve(instance);\r\n    }\r\n\r\n    // Register a new pending promise to ensure that Behat waits for the editor setup to complete before continuing.\r\n    const pendingPromise = new Pending('editor_tiny/editor:setupForTarget');\r\n\r\n    // Get the list of plugins.\r\n    const plugins = getPlugins(options);\r\n\r\n    // Fetch the tinyMCE API, and instantiate the plugins.\r\n    const [tinyMCE, pluginValues] = await Promise.all([\r\n        getTinyMCE(),\r\n        importPluginList(Object.keys(plugins)),\r\n    ]);\r\n\r\n    // TinyMCE uses the element ID as a map key internally, even if the target has changed.\r\n    // In the case where we have an editor in a modal form which has been detached from the DOM, but the editor not removed,\r\n    // we need to manually destroy the editor.\r\n    // We could theoretically do this with a Mutation Observer, but in some cases the Node may be moved,\r\n    // or added back elsewhere in the DOM.\r\n\r\n    // First remove any detached editors.\r\n    tinyMCE.get().filter((editor) => !editor.getElement().isConnected).forEach((editor) => {\r\n        editor.remove();\r\n    });\r\n\r\n    // Now check for any existing editor which shares the same ID.\r\n    const existingEditor = tinyMCE.EditorManager.get(target.id);\r\n    if (existingEditor) {\r\n        if (existingEditor.getElement() === target) {\r\n            pendingPromise.resolve();\r\n            return Promise.resolve(existingEditor);\r\n        } else {\r\n            pendingPromise.resolve();\r\n            throw new Error('TinyMCE instance already exists for different target with same ID');\r\n        }\r\n    }\r\n\r\n    // Get the editor configuration for this editor.\r\n    const instanceConfig = getEditorConfiguration(target, tinyMCE, options, pluginValues);\r\n\r\n    // Initialise the editor instance for the given configuration.\r\n    // At this point any plugin which has configuration options registered will have them applied for this instance.\r\n    const [editor] = await tinyMCE.init(instanceConfig);\r\n\r\n    // Update the textarea when the editor to set the field type for Behat.\r\n    target.dataset.fieldtype = 'editor';\r\n\r\n    // Store the editor instance in the instanceMap and register a listener on removal to remove it from the map.\r\n    instanceMap.set(target, editor);\r\n    editor.on('remove', ({target}) => {\r\n        // Handle removal of the editor from the map on destruction.\r\n        instanceMap.delete(target.targetElm);\r\n        target.targetElm.dataset.fieldtype = null;\r\n    });\r\n\r\n    // If the editor is part of a form, also listen to the jQuery submit event.\r\n    // The jQuery submit event will not trigger the native submit event, and therefore the content will not be saved.\r\n    // We cannot rely on listening to the bubbled submit event on the document because other events on child nodes may\r\n    // consume the data before it is saved.\r\n    if (target.form) {\r\n        jQuery(target.form).on('submit', () => {\r\n            editor.save();\r\n        });\r\n    }\r\n\r\n    // Save the editor content to the textarea when the editor is blurred.\r\n    editor.on('blur', () => {\r\n        editor.save();\r\n    });\r\n\r\n    // If the editor is in a modal, we need to hide the modal when window editor's window is opened.\r\n    editor.on('OpenWindow', () => {\r\n        const modals = document.querySelectorAll('[data-region=\"modal\"]');\r\n        if (modals) {\r\n            modals.forEach((modal) => {\r\n                if (!modal.classList.contains('hide')) {\r\n                    modal.classList.add('hide');\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    // If the editor's window is closed, we need to show the hidden modal back.\r\n    editor.on('CloseWindow', () => {\r\n        if (isModalMode(target)) {\r\n            const modals = document.querySelectorAll('[data-region=\"modal\"]');\r\n            if (modals) {\r\n                modals.forEach((modal) => {\r\n                    if (modal.classList.contains('hide')) {\r\n                        modal.classList.remove('hide');\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    pendingPromise.resolve();\r\n    return editor;\r\n};\r\n\r\n/**\r\n * Set the default editor configuration.\r\n *\r\n * This configuration is used when an editor is initialised without any configuration.\r\n *\r\n * @param {object} [options={}]\r\n */\r\nexport const configureDefaultEditor = (options = {}) => {\r\n    defaultOptions = options;\r\n};\r\n"],"names":["_jquery","_interopRequireDefault","_pending","Options","e","r","__esModule","default","t","_getRequireWildcardCache","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","_systemImportTransformerGlobalIdentifier","window","self","global","WeakMap","instanceMap","Map","defaultOptions","importPluginList","async","pluginHandlers","Promise","all","pluginList","map","pluginPath","indexOf","resolve","define","amd","reject","require","module","exports","component","loader","pluginNames","pluginConfig","Array","isArray","filter","value","_exports","getAllInstances","entries","getInstanceForElementId","elementId","getInstanceForElement","document","getElementById","element","instance","removed","delete","setupForElementId","_ref","options","target","setTimeout","setupForTarget","lang","querySelector","tinyMCE","langData","getTinyMCE","language","fetch","M","cfg","wwwroot","langrev","then","response","json","addI18n","initialisePage","getStandardConfig","plugins","config","assign","getDefaultConfiguration","base_url","baseUrl","min_height","height","clientHeight","content_css","css","convert_urls","a11y_advanced_options","extended_valid_elements","xss_sanitization","quickbars_insert_toolbar","quickbars_selection_toolbar","rows","getDefaultQuickbarsSelectionToolbar","block_formats","skin","help_accessibility","promotion","branding","table_header_type","entity_encoding","ui_mode","browser_spellcheck","setup","editor","register","on","this","contentWindow","iframeElement","removeSubmenuItem","adjustEditorSize","expectedEditingAreaHeight","parseFloat","getComputedStyle","lineHeight","getContainer","style","addEventListener","updateEditorState","dispatchEvent","Event","toolbar","addToolbarSection","addToolbarButton","addToolbarButtons","removeToolbarButton","arguments","length","undefined","pendingPromise","Pending","getPlugins","pluginValues","keys","getElement","isConnected","forEach","remove","existingEditor","EditorManager","id","Error","instanceConfig","getEditorConfiguration","menu","file","items","format","replace","replaceAll","configure","pluginInstanceOverride","getInitialPluginConfiguration","init","dataset","fieldtype","_ref2","targetElm","form","jQuery","save","modals","querySelectorAll","modal","classList","contains","add","closest","isModalMode","configureDefaultEditor"],"mappings":"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"}