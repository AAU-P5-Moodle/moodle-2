{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport {renderForPromise} from 'core/templates';\r\nimport {getFilePicker} from './options';\r\nimport {getString} from 'core/str';\r\n\r\n/**\r\n * Get the image path for the specified image.\r\n *\r\n * @param {string} identifier The name of the image\r\n * @param {string} component The component name\r\n * @return {string} The image URL path\r\n */\r\nexport const getImagePath = (identifier, component = 'editor_tiny') => Promise.resolve(M.util.image_url(identifier, component));\r\n\r\nexport const getButtonImage = async(identifier, component = 'editor_tiny') => renderForPromise('editor_tiny/toolbar_button', {\r\n    image: await getImagePath(identifier, component),\r\n});\r\n\r\n/**\r\n * Helper to display a filepicker and return a Promise.\r\n *\r\n * The Promise will resolve when a file is selected, or reject if the file type is not found.\r\n *\r\n * @param {TinyMCE} editor\r\n * @param {string} filetype\r\n * @returns {Promise<object>} The file object returned by the filepicker\r\n */\r\nexport const displayFilepicker = (editor, filetype) => new Promise((resolve, reject) => {\r\n    const configuration = getFilePicker(editor, filetype);\r\n    if (configuration) {\r\n        const options = {\r\n            ...configuration,\r\n            formcallback: resolve,\r\n        };\r\n        M.core_filepicker.show(Y, options);\r\n        return;\r\n    }\r\n    reject(`Unknown filetype ${filetype}`);\r\n});\r\n\r\n/**\r\n * Given a TinyMCE Toolbar configuration, add the specified button to the named section.\r\n *\r\n * @param {object} toolbar\r\n * @param {string} section\r\n * @param {string} button\r\n * @param {string|null} [after=null]\r\n * @returns {object} The toolbar configuration\r\n */\r\nexport const addToolbarButton = (toolbar, section, button, after = null) => {\r\n    if (!toolbar) {\r\n        return [{\r\n            name: section,\r\n            items: [button],\r\n        }];\r\n    }\r\n\r\n    const mutatedToolbar = JSON.parse(JSON.stringify(toolbar));\r\n    return mutatedToolbar.map((item) => {\r\n        if (item.name === section) {\r\n            if (after) {\r\n                // Insert new button after the specified button.\r\n                let index = item.items.findIndex(value => value == after);\r\n                if (index !== -1) {\r\n                    item.items.splice(index + 1, 0, button);\r\n                }\r\n            } else {\r\n                // Append button to end of button section.\r\n                item.items.push(button);\r\n            }\r\n        }\r\n\r\n        return item;\r\n    });\r\n};\r\n\r\n/**\r\n * Given a TinyMCE Toolbar configuration, add the specified buttons to the named section.\r\n *\r\n * @param {object} toolbar\r\n * @param {string} section\r\n * @param {Array} buttons\r\n * @returns {object} The toolbar configuration\r\n */\r\nexport const addToolbarButtons = (toolbar, section, buttons) => {\r\n    if (!toolbar) {\r\n        return [{\r\n            name: section,\r\n            items: buttons,\r\n        }];\r\n    }\r\n\r\n    const mutatedToolbar = JSON.parse(JSON.stringify(toolbar));\r\n    return mutatedToolbar.map((item) => {\r\n        if (item.name === section) {\r\n            buttons.forEach(button => item.items.push(button));\r\n        }\r\n\r\n        return item;\r\n    });\r\n};\r\n\r\n/**\r\n * Insert a new section into the toolbar.\r\n *\r\n * @param {array} toolbar The TinyMCE.editor.settings.toolbar configuration\r\n * @param {string} name The new section name to add\r\n * @param {string} relativeTo Insert relative to this section name\r\n * @param {boolean} append Append or Prepend\r\n * @returns {array}\r\n */\r\nexport const addToolbarSection = (toolbar, name, relativeTo, append = true) => {\r\n    const newSection = {\r\n        name,\r\n        items: [],\r\n    };\r\n    const sectionInserted = toolbar.some((section, index) => {\r\n        if (section.name === relativeTo) {\r\n            if (append) {\r\n                toolbar.splice(index + 1, 0, newSection);\r\n            } else {\r\n                toolbar.splice(index, 0, newSection);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    if (!sectionInserted) {\r\n        // Relative section not found.\r\n        if (append) {\r\n            toolbar.push(newSection);\r\n        } else {\r\n            toolbar.unshift(newSection);\r\n        }\r\n    }\r\n\r\n    return toolbar;\r\n};\r\n\r\n/**\r\n * Given a TinyMCE Menubar configuration, add the specified button to the named section.\r\n *\r\n * @param {object} menubar\r\n * @param {string} section\r\n * @param {string} menuitem\r\n * @param {string|null} [after=null]\r\n * @returns {object}\r\n */\r\nexport const addMenubarItem = (menubar, section, menuitem, after = null) => {\r\n    if (!menubar) {\r\n        const emptyMenubar = {};\r\n        emptyMenubar[section] = {\r\n            title: section,\r\n            items: menuitem,\r\n        };\r\n    }\r\n\r\n    const mutatedMenubar = JSON.parse(JSON.stringify(menubar));\r\n    Array.from(Object.entries(mutatedMenubar)).forEach(([name, menu]) => {\r\n        if (name === section) {\r\n            if (after) {\r\n                // Insert new item after the specified menu item.\r\n                let index = menu.items.indexOf(after);\r\n                if (index !== -1) {\r\n                    index += after.length;\r\n                    menu.items = menu.items.slice(0, index) + ` ${menuitem}` + menu.items.slice(index);\r\n                }\r\n            } else {\r\n                // Append item to end of the menu section.\r\n                menu.items = `${menu.items} ${menuitem}`;\r\n            }\r\n        }\r\n    });\r\n\r\n    return mutatedMenubar;\r\n};\r\n\r\n/**\r\n * Given a TinyMCE contextmenu configuration, add the specified button to the end.\r\n *\r\n * @param {string} contextmenu\r\n * @param {string[]} menuitems\r\n * @returns {string}\r\n */\r\nexport const addContextmenuItem = (contextmenu, ...menuitems) => {\r\n    const contextmenuItems = (contextmenu || '').split(' ');\r\n\r\n    return contextmenuItems\r\n        .concat(menuitems)\r\n        .filter((item) => item !== '')\r\n        .join(' ');\r\n};\r\n\r\n/**\r\n * Given a TinyMCE quickbars configuration, add items to the menu.\r\n *\r\n * @param {string} quicktoolbar\r\n * @param {string[]} toolbaritems\r\n * @returns {string}\r\n */\r\nexport const addQuickbarsToolbarItem = (quicktoolbar, ...toolbaritems) => {\r\n    const quicktoolbarItems = (quicktoolbar || '').split(' ');\r\n\r\n    return quicktoolbarItems\r\n        .concat(toolbaritems)\r\n        .filter((item) => item !== '')\r\n        .join(' ');\r\n};\r\n\r\n/**\r\n * Get the link to the user documentation for the named plugin.\r\n *\r\n * @param {string} pluginName\r\n * @returns {string}\r\n */\r\nexport const getDocumentationLink = (pluginName) => `https://docs.moodle.org/en/editor_tiny/${pluginName}`;\r\n\r\n/**\r\n * Get the default plugin metadata for the named plugin.\r\n * If no URL is provided, then a URL is generated pointing to the standard Moodle Documentation.\r\n *\r\n * @param {string} component The component name\r\n * @param {string} pluginName The plugin name\r\n * @param {string|null} [url=null] An optional URL to the plugin documentation\r\n * @returns {object}\r\n */\r\nexport const getPluginMetadata = async(component, pluginName, url = null) => {\r\n    const name = await getString('pluginname', component);\r\n    return {\r\n        getMetadata: () => ({\r\n            name,\r\n            url: url ?? getDocumentationLink(pluginName),\r\n        }),\r\n    };\r\n};\r\n\r\n/**\r\n * Ensure that the editor is still in the DOM, removing it if it is not.\r\n *\r\n * @param {TinyMCE} editor\r\n * @returns {TinyMCE|null}\r\n */\r\nexport const ensureEditorIsValid = (editor) => {\r\n    // TinyMCE uses the element ID as a map key internally, even if the target has changed.\r\n    // In cases such as where an editor is in a modal form which has been detached from the DOM, but the editor not removed,\r\n    // we need to manually destroy the editor.\r\n    // We could theoretically do this with a Mutation Observer, but in some cases the Node may be moved,\r\n    // or added back elsewhere in the DOM.\r\n    if (!editor.getElement().isConnected) {\r\n        return null;\r\n    }\r\n\r\n    return editor;\r\n};\r\n\r\n/**\r\n * Given a TinyMCE Toolbar configuration, remove the specified button from the named section.\r\n *\r\n * @param {object} toolbar\r\n * @param {string} section\r\n * @param {string} button\r\n * @returns {object} The toolbar configuration\r\n */\r\n export const removeToolbarButton = (toolbar, section, button) => {\r\n    if (!toolbar) {\r\n        return [{\r\n            name: section,\r\n            items: [button],\r\n        }];\r\n    }\r\n\r\n    const mutatedToolbar = JSON.parse(JSON.stringify(toolbar));\r\n    return mutatedToolbar.map((item) => {\r\n        if (item.name === section) {\r\n            item.items.splice(item.items.indexOf(button), 1);\r\n        }\r\n\r\n        return item;\r\n    });\r\n};\r\n\r\n/**\r\n * Given a TinyMCE Toolbar configuration, remove the specified buttons from the named section.\r\n *\r\n * @param {object} toolbar\r\n * @param {string} section\r\n * @param {Array} buttons\r\n * @returns {object} The toolbar configuration\r\n */\r\n export const removeToolbarButtons = (toolbar, section, buttons) => {\r\n    if (!toolbar) {\r\n        return [{\r\n            name: section,\r\n            items: buttons,\r\n        }];\r\n    }\r\n\r\n    const mutatedToolbar = JSON.parse(JSON.stringify(toolbar));\r\n    return mutatedToolbar.map((item) => {\r\n        if (item.name === section) {\r\n            buttons.forEach(button => item.items.splice(item.items.indexOf(button), 1));\r\n        }\r\n\r\n        return item;\r\n    });\r\n};\r\n\r\n/**\r\n * Remove the specified sub-menu item from the named section.\r\n * Recreate a menu with the same sub-menu items but remove the specified item.\r\n *\r\n * @param {TinyMCE} editor\r\n * @param {string} section\r\n * @param {string} submenuitem The text of sub-menu that we want to removed\r\n */\r\nexport const removeSubmenuItem = async(editor, section, submenuitem) => {\r\n    // Get menu items.\r\n    const menuItems = editor.ui.registry.getAll().menuItems[section];\r\n\r\n    // Because we will match between title strings,\r\n    // we make sure no problems arise while applying multi-language.\r\n    const submenuitemtitle = await getString(submenuitem, 'editor_tiny');\r\n\r\n    // Overriding the menu items,\r\n    // by recreating them but excluding the specified sub-menu.\r\n    if (menuItems) {\r\n        editor.ui.registry.addNestedMenuItem(\r\n            section,\r\n            {\r\n                text: menuItems.text,\r\n                getSubmenuItems: () => {\r\n                    let newSubmenu = [];\r\n                    menuItems.getSubmenuItems().forEach((item) => {\r\n                        // Need to trim the text because some of the sub-menus use space to replace an icon.\r\n                        if (item.text.trim() != submenuitemtitle) {\r\n                            newSubmenu.push(item);\r\n                        }\r\n                    });\r\n                    return newSubmenu;\r\n                }\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * Given a TinyMCE Menubar configuration, remove the specified menu from the named section.\r\n *\r\n * @param {string} menubar\r\n * @param {string} section\r\n * @param {string} menuitem\r\n * @returns {object}\r\n */\r\nexport const removeMenubarItem = (menubar, section, menuitem) => {\r\n    menubar[section].items = menubar[section].items\r\n        .replace(menuitem, '');\r\n\r\n    return menubar;\r\n};\r\n\r\n/**\r\n * Given a TinyMCE Menubar configuration, remove the specified menu from the named section.\r\n *\r\n * @param {string} menubar\r\n * @param {string} section\r\n * @param {Array} menuitems\r\n * @returns {object}\r\n */\r\nexport const removeMenubarItems = (menubar, section, menuitems) => {\r\n    // Create RegExp pattern.\r\n    const regexPattern = new RegExp(menuitems.join('|'), \"ig\");\r\n\r\n    // Remove menuitems.\r\n    menubar[section].items = menubar[section].items.replace(regexPattern, '');\r\n\r\n    return menubar;\r\n};\r\n\r\n/**\r\n * Updates the state of the editor.\r\n *\r\n * @param {TinyMCE} editor\r\n * @param {HTMLElement} target\r\n */\r\nexport const updateEditorState = (editor, target) => {\r\n    if (target.hasAttribute('readonly')) {\r\n        editor.mode.set(\"readonly\");\r\n    } else {\r\n        editor.mode.set(\"design\");\r\n    }\r\n};\r\n"],"names":["getImagePath","identifier","component","arguments","length","undefined","Promise","resolve","M","util","image_url","_exports","getButtonImage","async","renderForPromise","image","displayFilepicker","editor","filetype","reject","configuration","getFilePicker","options","formcallback","core_filepicker","show","Y","addToolbarButton","toolbar","section","button","after","name","items","JSON","parse","stringify","map","item","index","findIndex","value","splice","push","addToolbarButtons","buttons","forEach","addToolbarSection","relativeTo","append","newSection","some","unshift","addMenubarItem","menubar","menuitem","title","mutatedMenubar","Array","from","Object","entries","_ref","menu","indexOf","slice","addContextmenuItem","contextmenu","contextmenuItems","split","_len","menuitems","_key","concat","filter","join","addQuickbarsToolbarItem","quicktoolbar","quicktoolbarItems","_len2","toolbaritems","_key2","getDocumentationLink","pluginName","getPluginMetadata","url","getString","getMetadata","ensureEditorIsValid","getElement","isConnected","removeToolbarButton","removeToolbarButtons","removeSubmenuItem","submenuitem","menuItems","ui","registry","getAll","submenuitemtitle","addNestedMenuItem","text","getSubmenuItems","newSubmenu","trim","removeMenubarItem","replace","removeMenubarItems","regexPattern","RegExp","updateEditorState","target","hasAttribute","mode","set"],"mappings":"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"}