{"version":3,"file":"dynamic.min.js","sources":["../src/dynamic.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Module to handle dynamic table features.\r\n *\r\n * @module     core_table/dynamic\r\n * @copyright  2020 Simey Lameze <simey@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport * as Selectors from 'core_table/local/dynamic/selectors';\r\nimport Events from './local/dynamic/events';\r\nimport Pending from 'core/pending';\r\nimport {addIconToContainer} from 'core/loadingicon';\r\nimport {fetch as fetchTableData} from 'core_table/local/dynamic/repository';\r\nimport Notification from 'core/notification';\r\n\r\nlet watching = false;\r\n\r\n/**\r\n * Ensure that a table is a dynamic table.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @returns {Bool}\r\n */\r\nconst checkTableIsDynamic = tableRoot => {\r\n    if (!tableRoot) {\r\n        // The table is not a dynamic table.\r\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\r\n    }\r\n\r\n    if (!tableRoot.matches(Selectors.main.region)) {\r\n        // The table is not a dynamic table.\r\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n/**\r\n * Get the filterset data from a known dynamic table.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @returns {Object}\r\n */\r\nconst getFiltersetFromTable = tableRoot => {\r\n    return JSON.parse(tableRoot.dataset.tableFilters);\r\n};\r\n\r\n/**\r\n * Update the specified table based on its current values.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @param {Bool} resetContent\r\n * @returns {Promise}\r\n */\r\nexport const refreshTableContent = (tableRoot, resetContent = false) => {\r\n    const filterset = getFiltersetFromTable(tableRoot);\r\n    addIconToContainer(tableRoot);\r\n\r\n    const pendingPromise = new Pending('core_table/dynamic:refreshTableContent');\r\n\r\n    return fetchTableData(\r\n        tableRoot.dataset.tableComponent,\r\n        tableRoot.dataset.tableHandler,\r\n        tableRoot.dataset.tableUniqueid,\r\n        {\r\n            sortData: JSON.parse(tableRoot.dataset.tableSortData),\r\n            joinType: filterset.jointype,\r\n            filters: filterset.filters,\r\n            firstinitial: tableRoot.dataset.tableFirstInitial,\r\n            lastinitial: tableRoot.dataset.tableLastInitial,\r\n            pageNumber: tableRoot.dataset.tablePageNumber,\r\n            pageSize: tableRoot.dataset.tablePageSize,\r\n            hiddenColumns: JSON.parse(tableRoot.dataset.tableHiddenColumns),\r\n        },\r\n        resetContent,\r\n    )\r\n    .then(data => {\r\n        const placeholder = document.createElement('div');\r\n        placeholder.innerHTML = data.html;\r\n        tableRoot.replaceWith(...placeholder.childNodes);\r\n\r\n        // Update the tableRoot.\r\n        return getTableFromId(tableRoot.dataset.tableUniqueid);\r\n    }).then(tableRoot => {\r\n        tableRoot.dispatchEvent(new CustomEvent(Events.tableContentRefreshed, {\r\n            bubbles: true,\r\n        }));\r\n\r\n        return tableRoot;\r\n    })\r\n    .then(tableRoot => {\r\n        pendingPromise.resolve();\r\n\r\n        return tableRoot;\r\n    });\r\n};\r\n\r\nexport const updateTable = (tableRoot, {\r\n    sortBy = null,\r\n    sortOrder = null,\r\n    filters = null,\r\n    firstInitial = null,\r\n    lastInitial = null,\r\n    pageNumber = null,\r\n    pageSize = null,\r\n    hiddenColumns = null,\r\n} = {}, refreshContent = true) => {\r\n    checkTableIsDynamic(tableRoot);\r\n\r\n    const pendingPromise = new Pending('core_table/dynamic:updateTable');\r\n    let tableConfigChanged = false;\r\n\r\n    // Update sort fields.\r\n    if (sortBy && sortOrder) {\r\n        // Always update the table if requested and there were sort fields.\r\n        // These fields are only ever normalised in the backend.\r\n        tableConfigChanged = true;\r\n\r\n        const sortData = JSON.parse(tableRoot.dataset.tableSortData);\r\n        sortData.unshift({\r\n            sortby: sortBy,\r\n            sortorder: parseInt(sortOrder, 10),\r\n        });\r\n        tableRoot.dataset.tableSortData = JSON.stringify(sortData);\r\n    }\r\n\r\n    // Update initials.\r\n    if (firstInitial !== null) {\r\n        if (tableRoot.dataset.tableFirstInitial !== firstInitial) {\r\n            tableConfigChanged = true;\r\n        }\r\n\r\n        tableRoot.dataset.tableFirstInitial = firstInitial;\r\n    }\r\n\r\n    if (lastInitial !== null) {\r\n        if (tableRoot.dataset.tableLastInitial !== lastInitial) {\r\n            tableConfigChanged = true;\r\n        }\r\n\r\n        tableRoot.dataset.tableLastInitial = lastInitial;\r\n    }\r\n\r\n    if (pageSize !== null) {\r\n        if (tableRoot.dataset.tablePageSize != pageSize) {\r\n            tableConfigChanged = true;\r\n        }\r\n\r\n        tableRoot.dataset.tablePageSize = pageSize;\r\n    }\r\n\r\n    // Update filters.\r\n    if (filters) {\r\n        const filterJson = JSON.stringify(filters);\r\n\r\n        if (tableRoot.dataset.tableFilters !== filterJson) {\r\n            tableConfigChanged = true;\r\n        }\r\n\r\n        tableRoot.dataset.tableFilters = filterJson;\r\n    }\r\n\r\n    // Reset to page 1 when table content is being altered by filtering or sorting.\r\n    // This ensures the table page being loaded always exists, and gives a consistent experience.\r\n    if (tableConfigChanged) {\r\n        pageNumber = 1;\r\n    }\r\n\r\n    // Update hidden columns.\r\n    if (hiddenColumns) {\r\n        const columnJson = JSON.stringify(hiddenColumns);\r\n\r\n        if (tableRoot.dataset.tableHiddenColumns !== columnJson) {\r\n            tableConfigChanged = true;\r\n        }\r\n\r\n        tableRoot.dataset.tableHiddenColumns = columnJson;\r\n    }\r\n\r\n    if (pageNumber !== null) {\r\n        if (tableRoot.dataset.tablePageNumber != pageNumber) {\r\n            tableConfigChanged = true;\r\n        }\r\n\r\n        tableRoot.dataset.tablePageNumber = pageNumber;\r\n    }\r\n\r\n    // Refresh.\r\n    if (refreshContent && tableConfigChanged) {\r\n        return refreshTableContent(tableRoot)\r\n        .then(tableRoot => {\r\n            pendingPromise.resolve();\r\n            return tableRoot;\r\n        });\r\n    } else {\r\n        pendingPromise.resolve();\r\n        return Promise.resolve(tableRoot);\r\n    }\r\n};\r\n\r\n/**\r\n * Get the table dataset for the specified tableRoot, ensuring that the provided table is a dynamic table.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @returns {DOMStringMap}\r\n */\r\nconst getTableData = tableRoot => {\r\n    checkTableIsDynamic(tableRoot);\r\n\r\n    return tableRoot.dataset;\r\n};\r\n\r\n/**\r\n * Update the specified table using the new filters.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @param {Object} filters\r\n * @param {Bool} refreshContent\r\n * @returns {Promise}\r\n */\r\nexport const setFilters = (tableRoot, filters, refreshContent = true) =>\r\n    updateTable(tableRoot, {filters}, refreshContent);\r\n\r\n/**\r\n * Get the filter data for the specified table.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @returns {Object}\r\n */\r\nexport const getFilters = tableRoot => {\r\n    checkTableIsDynamic(tableRoot);\r\n\r\n    return getFiltersetFromTable(tableRoot);\r\n};\r\n\r\n/**\r\n * Update the sort order.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @param {String} sortBy\r\n * @param {Number} sortOrder\r\n * @param {Bool} refreshContent\r\n * @returns {Promise}\r\n */\r\nexport const setSortOrder = (tableRoot, sortBy, sortOrder, refreshContent = true) =>\r\n    updateTable(tableRoot, {sortBy, sortOrder}, refreshContent);\r\n\r\n/**\r\n * Set the page number.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @param {String} pageNumber\r\n * @param {Bool} refreshContent\r\n * @returns {Promise}\r\n */\r\nexport const setPageNumber = (tableRoot, pageNumber, refreshContent = true) =>\r\n    updateTable(tableRoot, {pageNumber}, refreshContent);\r\n\r\n/**\r\n * Get the current page number.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @returns {Number}\r\n */\r\nexport const getPageNumber = tableRoot => getTableData(tableRoot).tablePageNumber;\r\n\r\n/**\r\n * Set the page size.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @param {Number} pageSize\r\n * @param {Bool} refreshContent\r\n * @returns {Promise}\r\n */\r\nexport const setPageSize = (tableRoot, pageSize, refreshContent = true) =>\r\n    updateTable(tableRoot, {pageSize, pageNumber: 1}, refreshContent);\r\n\r\n/**\r\n * Get the current page size.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @returns {Number}\r\n */\r\nexport const getPageSize = tableRoot => getTableData(tableRoot).tablePageSize;\r\n\r\n/**\r\n * Update the first initial to show.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @param {String} firstInitial\r\n * @param {Bool} refreshContent\r\n * @returns {Promise}\r\n */\r\nexport const setFirstInitial = (tableRoot, firstInitial, refreshContent = true) =>\r\n    updateTable(tableRoot, {firstInitial}, refreshContent);\r\n\r\n/**\r\n * Get the current first initial filter.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @returns {String}\r\n */\r\nexport const getFirstInitial = tableRoot => getTableData(tableRoot).tableFirstInitial;\r\n\r\n/**\r\n * Update the last initial to show.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @param {String} lastInitial\r\n * @param {Bool} refreshContent\r\n * @returns {Promise}\r\n */\r\nexport const setLastInitial = (tableRoot, lastInitial, refreshContent = true) =>\r\n    updateTable(tableRoot, {lastInitial}, refreshContent);\r\n\r\n/**\r\n * Get the current last initial filter.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @returns {String}\r\n */\r\nexport const getLastInitial = tableRoot => getTableData(tableRoot).tableLastInitial;\r\n\r\n/**\r\n * Hide a column in the participants table.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @param {String} columnToHide\r\n * @param {Bool} refreshContent\r\n * @returns {Promise}\r\n */\r\nexport const hideColumn = (tableRoot, columnToHide, refreshContent = true) => {\r\n    const hiddenColumns = JSON.parse(tableRoot.dataset.tableHiddenColumns);\r\n    hiddenColumns.push(columnToHide);\r\n\r\n    return updateTable(tableRoot, {hiddenColumns}, refreshContent);\r\n};\r\n\r\n/**\r\n * Make a hidden column visible in the participants table.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @param {String} columnToShow\r\n * @param {Bool} refreshContent\r\n * @returns {Promise}\r\n */\r\nexport const showColumn = (tableRoot, columnToShow, refreshContent = true) => {\r\n    let hiddenColumns = JSON.parse(tableRoot.dataset.tableHiddenColumns);\r\n    hiddenColumns = hiddenColumns.filter(columnName => columnName !== columnToShow);\r\n\r\n    return updateTable(tableRoot, {hiddenColumns}, refreshContent);\r\n};\r\n\r\n/**\r\n * Reset table preferences.\r\n *\r\n * @param {HTMLElement} tableRoot\r\n * @returns {Promise}\r\n */\r\nconst resetTablePreferences = tableRoot => refreshTableContent(tableRoot, true);\r\n\r\n/**\r\n * Set up listeners to handle table updates.\r\n */\r\nexport const init = () => {\r\n    if (watching) {\r\n        // Already watching.\r\n        return;\r\n    }\r\n    watching = true;\r\n\r\n    document.addEventListener('click', e => {\r\n        const tableRoot = e.target.closest(Selectors.main.region);\r\n\r\n        if (!tableRoot) {\r\n            return;\r\n        }\r\n\r\n        const sortableLink = e.target.closest(Selectors.table.links.sortableColumn);\r\n        if (sortableLink) {\r\n            e.preventDefault();\r\n\r\n            setSortOrder(tableRoot, sortableLink.dataset.sortby, sortableLink.dataset.sortorder)\r\n            .catch(Notification.exception);\r\n        }\r\n\r\n        const firstInitialLink = e.target.closest(Selectors.initialsBar.links.firstInitial);\r\n        if (firstInitialLink !== null) {\r\n            e.preventDefault();\r\n\r\n            setFirstInitial(tableRoot, firstInitialLink.dataset.initial).catch(Notification.exception);\r\n        }\r\n\r\n        const lastInitialLink = e.target.closest(Selectors.initialsBar.links.lastInitial);\r\n        if (lastInitialLink !== null) {\r\n            e.preventDefault();\r\n\r\n            setLastInitial(tableRoot, lastInitialLink.dataset.initial).catch(Notification.exception);\r\n        }\r\n\r\n        const pageItem = e.target.closest(Selectors.paginationBar.links.pageItem);\r\n        if (pageItem) {\r\n            e.preventDefault();\r\n\r\n            setPageNumber(tableRoot, pageItem.dataset.pageNumber).catch(Notification.exception);\r\n        }\r\n\r\n        const hide = e.target.closest(Selectors.table.links.hide);\r\n        if (hide) {\r\n            e.preventDefault();\r\n\r\n            hideColumn(tableRoot, hide.dataset.column).catch(Notification.exception);\r\n        }\r\n\r\n        const show = e.target.closest(Selectors.table.links.show);\r\n        if (show) {\r\n            e.preventDefault();\r\n\r\n            showColumn(tableRoot, show.dataset.column).catch(Notification.exception);\r\n        }\r\n\r\n        const resetTablePreferencesLink = e.target.closest('.resettable a');\r\n        if (resetTablePreferencesLink) {\r\n            e.preventDefault();\r\n\r\n            resetTablePreferences(tableRoot).catch(Notification.exception);\r\n        }\r\n\r\n        const showCountLink = e.target.closest(Selectors.showCount.links.toggle);\r\n        if (showCountLink) {\r\n            e.preventDefault();\r\n\r\n            setPageSize(tableRoot, showCountLink.dataset.targetPageSize).catch(Notification.exception);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Fetch the table via its table region id.\r\n *\r\n * @param {String} tableRegionId\r\n * @returns {HTMLElement}\r\n */\r\nexport const getTableFromId = tableRegionId => {\r\n    const tableRoot = document.querySelector(Selectors.main.fromRegionId(tableRegionId));\r\n\r\n\r\n    if (!tableRoot) {\r\n        // The table is not a dynamic table.\r\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\r\n    }\r\n\r\n    return tableRoot;\r\n};\r\n\r\nexport {\r\n    Events\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","Selectors","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","_events","_pending","_notification","watching","checkTableIsDynamic","tableRoot","Error","matches","main","region","getFiltersetFromTable","JSON","parse","dataset","tableFilters","refreshTableContent","resetContent","arguments","length","undefined","filterset","addIconToContainer","pendingPromise","Pending","fetchTableData","tableComponent","tableHandler","tableUniqueid","sortData","tableSortData","joinType","jointype","filters","firstinitial","tableFirstInitial","lastinitial","tableLastInitial","pageNumber","tablePageNumber","pageSize","tablePageSize","hiddenColumns","tableHiddenColumns","then","data","placeholder","document","createElement","innerHTML","html","replaceWith","childNodes","getTableFromId","dispatchEvent","CustomEvent","Events","tableContentRefreshed","bubbles","resolve","_exports","updateTable","sortBy","sortOrder","firstInitial","lastInitial","refreshContent","tableConfigChanged","unshift","sortby","sortorder","parseInt","stringify","filterJson","columnJson","Promise","getTableData","setFilters","getFilters","setSortOrder","setPageNumber","getPageNumber","setPageSize","getPageSize","setFirstInitial","getFirstInitial","setLastInitial","getLastInitial","hideColumn","columnToHide","push","showColumn","columnToShow","filter","columnName","init","addEventListener","target","closest","sortableLink","table","links","sortableColumn","preventDefault","catch","Notification","exception","firstInitialLink","initialsBar","initial","lastInitialLink","pageItem","paginationBar","hide","column","show","resetTablePreferences","showCountLink","showCount","toggle","targetPageSize","tableRegionId","querySelector","fromRegionId"],"mappings":"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"}