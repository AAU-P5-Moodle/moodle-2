{"version":3,"file":"filetypes.min.js","sources":["../src/filetypes.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * This module allows to enhance the form elements MoodleQuickForm_filetypes\r\n *\r\n * @module     core_form/filetypes\r\n * @copyright  2017 David Mudrak <david@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.3\r\n */\r\ndefine(['jquery', 'core/log', 'core/modal_events', 'core/modal_save_cancel', 'core/ajax',\r\n        'core/templates', 'core/tree'],\r\n    function($, Log, ModalEvents, ModalSaveCancel, Ajax, Templates, Tree) {\r\n\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Constructor of the FileTypes instances.\r\n     *\r\n     * @constructor\r\n     * @param {String} elementId The id of the form element to enhance\r\n     * @param {String} elementLabel The label of the form element used as the modal selector title\r\n     * @param {String} onlyTypes Limit the list of offered types to this\r\n     * @param {Bool} allowAll Allow presence of the \"All file types\" item\r\n     */\r\n    var FileTypes = function(elementId, elementLabel, onlyTypes, allowAll) {\r\n\r\n        this.elementId = elementId;\r\n        this.elementLabel = elementLabel;\r\n        this.onlyTypes = onlyTypes;\r\n        this.allowAll = allowAll;\r\n\r\n        this.inputField = $('#' + elementId);\r\n        this.wrapperBrowserTrigger = $('[data-filetypesbrowser=\"' + elementId + '\"]');\r\n        this.wrapperDescriptions = $('[data-filetypesdescriptions=\"' + elementId + '\"]');\r\n\r\n        if (!this.wrapperBrowserTrigger.length) {\r\n            // This is a valid case. Most probably the element is frozen and\r\n            // the filetypes browser should not be available.\r\n            return;\r\n        }\r\n\r\n        if (!this.inputField.length || !this.wrapperDescriptions.length) {\r\n            Log.error('core_form/filetypes: Unexpected DOM structure, unable to enhance filetypes field ' + elementId);\r\n            return;\r\n        }\r\n\r\n        this.prepareBrowserTrigger()\r\n            .then(function() {\r\n                return this.prepareBrowserModal();\r\n            }.bind(this))\r\n\r\n            .then(function() {\r\n                return this.prepareBrowserTree();\r\n            }.bind(this));\r\n    };\r\n\r\n    /**\r\n     * Create and set the browser trigger widget (this.browserTrigger).\r\n     *\r\n     * @method prepareBrowserTrigger\r\n     * @returns {Promise}\r\n     */\r\n    FileTypes.prototype.prepareBrowserTrigger = function() {\r\n        return Templates.render('core_form/filetypes-trigger', {})\r\n            .then(function(html) {\r\n                this.wrapperBrowserTrigger.html(html);\r\n                this.browserTrigger = this.wrapperBrowserTrigger.find('[data-filetypeswidget=\"browsertrigger\"]');\r\n            }.bind(this));\r\n    };\r\n\r\n    /**\r\n     * Create and set the modal for displaying the browser (this.browserModal).\r\n     *\r\n     * @method prepareBrowserModal\r\n     * @returns {Promise}\r\n     */\r\n    FileTypes.prototype.prepareBrowserModal = function() {\r\n        return ModalSaveCancel.create({\r\n            title: this.elementLabel,\r\n        })\r\n        .then(function(modal) {\r\n            this.browserModal = modal;\r\n            return modal;\r\n        }.bind(this))\r\n        .then(function() {\r\n            // Because we have custom conditional modal trigger, we need to\r\n            // handle the focus after closing ourselves, too.\r\n            this.browserModal.getRoot().on(ModalEvents.hidden, function() {\r\n                this.browserTrigger.focus();\r\n            }.bind(this));\r\n\r\n            this.browserModal.getRoot().on(ModalEvents.save, function() {\r\n                this.saveBrowserModal();\r\n            }.bind(this));\r\n        }.bind(this));\r\n\r\n    };\r\n\r\n    /**\r\n     * Create and set the tree in the browser modal's body.\r\n     *\r\n     * @method prepareBrowserTree\r\n     * @returns {Promise}\r\n     */\r\n    FileTypes.prototype.prepareBrowserTree = function() {\r\n\r\n        this.browserTrigger.on('click', function(e) {\r\n            e.preventDefault();\r\n\r\n            // We want to display the browser modal only when the associated input\r\n            // field is not frozen (disabled).\r\n            if (this.inputField.is('[disabled]')) {\r\n                return;\r\n            }\r\n\r\n            var bodyContent = this.loadBrowserModalBody();\r\n\r\n            bodyContent.then(function() {\r\n\r\n                // Turn the list of groups and extensions into the tree.\r\n                this.browserTree = new Tree(this.browserModal.getBody());\r\n\r\n                // Override the behaviour of the Enter and Space keys to toggle our checkbox,\r\n                // rather than toggle the tree node expansion status.\r\n                this.browserTree.handleKeyDown = function(item, e) {\r\n                    if (e.keyCode == this.browserTree.keys.enter || e.keyCode == this.browserTree.keys.space) {\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                        this.toggleCheckbox(item.attr('data-filetypesbrowserkey'));\r\n                    } else {\r\n                        Tree.prototype.handleKeyDown.call(this.browserTree, item, e);\r\n                    }\r\n                }.bind(this);\r\n\r\n                if (this.allowAll) {\r\n                    // Hide all other items if \"All file types\" is enabled.\r\n                    this.hideOrShowItemsDependingOnAllowAll(this.browserModal.getRoot()\r\n                        .find('input[type=\"checkbox\"][data-filetypesbrowserkey=\"*\"]').first());\r\n                    // And do the same whenever we click that checkbox.\r\n                    this.browserModal.getRoot().on('change', 'input[type=\"checkbox\"][data-filetypesbrowserkey=\"*\"]', function(e) {\r\n                        this.hideOrShowItemsDependingOnAllowAll($(e.currentTarget));\r\n                    }.bind(this));\r\n                }\r\n\r\n                // Synchronize checked status if the file extension is present in multiple groups.\r\n                this.browserModal.getRoot().on('change', 'input[type=\"checkbox\"][data-filetypesbrowserkey]', function(e) {\r\n                    var checkbox = $(e.currentTarget);\r\n                    var key = checkbox.attr('data-filetypesbrowserkey');\r\n                    this.browserModal.getRoot().find('input[type=\"checkbox\"][data-filetypesbrowserkey=\"' + key + '\"]')\r\n                        .prop('checked', checkbox.prop('checked'));\r\n                }.bind(this));\r\n\r\n            }.bind(this))\r\n\r\n            .then(function() {\r\n                this.browserModal.show();\r\n            }.bind(this));\r\n\r\n            this.browserModal.setBody(bodyContent);\r\n\r\n        }.bind(this));\r\n\r\n        // Return a resolved promise.\r\n        return $.when();\r\n    };\r\n\r\n    /**\r\n     * Load the browser modal body contents.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    FileTypes.prototype.loadBrowserModalBody = function() {\r\n\r\n        var args = {\r\n            onlytypes: this.onlyTypes.join(),\r\n            allowall: this.allowAll,\r\n            current: this.inputField.val()\r\n        };\r\n\r\n        return Ajax.call([{\r\n            methodname: 'core_form_get_filetypes_browser_data',\r\n            args: args\r\n\r\n        }])[0].then(function(browserData) {\r\n            return Templates.render('core_form/filetypes-browser', {\r\n                elementid: this.elementId,\r\n                groups: browserData.groups\r\n            });\r\n        }.bind(this));\r\n    };\r\n\r\n    /**\r\n     * Change the checked status of the given file type (group or extension).\r\n     *\r\n     * @method toggleCheckbox\r\n     * @param {String} key\r\n     */\r\n    FileTypes.prototype.toggleCheckbox = function(key) {\r\n\r\n        var checkbox = this.browserModal.getRoot().find('input[type=\"checkbox\"][data-filetypesbrowserkey=\"' + key + '\"]').first();\r\n\r\n        checkbox.prop('checked', !checkbox.prop('checked'));\r\n    };\r\n\r\n    /**\r\n     * Update the associated input field with selected file types.\r\n     *\r\n     * @method saveBrowserModal\r\n     */\r\n    FileTypes.prototype.saveBrowserModal = function() {\r\n\r\n        // Check the \"All file types\" first.\r\n        if (this.allowAll) {\r\n            var allcheckbox = this.browserModal.getRoot().find('input[type=\"checkbox\"][data-filetypesbrowserkey=\"*\"]');\r\n            if (allcheckbox.length && allcheckbox.prop('checked')) {\r\n                this.inputField.val('*');\r\n                this.updateDescriptions(['*']);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Iterate over all checked boxes and populate the list.\r\n        var newvalue = [];\r\n\r\n        this.browserModal.getRoot().find('input[type=\"checkbox\"]').each(/** @this represents the checkbox */ function() {\r\n            var checkbox = $(this);\r\n            var key = checkbox.attr('data-filetypesbrowserkey');\r\n\r\n            if (checkbox.prop('checked')) {\r\n                newvalue.push(key);\r\n            }\r\n        });\r\n\r\n        // Remove duplicates (e.g. file types present in multiple groups).\r\n        newvalue = newvalue.filter(function(x, i, a) {\r\n            return a.indexOf(x) == i;\r\n        });\r\n\r\n        this.inputField.val(newvalue.join(' '));\r\n        this.updateDescriptions(newvalue);\r\n    };\r\n\r\n    /**\r\n     * Describe the selected filetypes in the form when saving the browser.\r\n     *\r\n     * @param {Array} keys List of keys to describe\r\n     * @returns {Promise}\r\n     */\r\n    FileTypes.prototype.updateDescriptions = function(keys) {\r\n\r\n        var descriptions = [];\r\n\r\n        keys.forEach(function(key) {\r\n            descriptions.push({\r\n                description: this.browserModal.getRoot().find('[data-filetypesname=\"' + key + '\"]').first().text().trim(),\r\n                extensions: this.browserModal.getRoot().find('[data-filetypesextensions=\"' + key + '\"]').first().text().trim()\r\n            });\r\n        }.bind(this));\r\n\r\n        var templatedata = {\r\n            hasdescriptions: (descriptions.length > 0),\r\n            descriptions: descriptions\r\n        };\r\n\r\n        return Templates.render('core_form/filetypes-descriptions', templatedata)\r\n            .then(function(html) {\r\n                this.wrapperDescriptions.html(html);\r\n            }.bind(this));\r\n    };\r\n\r\n    /**\r\n     * If \"All file types\" is checked, all other browser items are made hidden, and vice versa.\r\n     *\r\n     * @param {jQuery} allcheckbox The \"All file types\" checkbox.\r\n     */\r\n    FileTypes.prototype.hideOrShowItemsDependingOnAllowAll = function(allcheckbox) {\r\n        var others = this.browserModal.getRoot().find('[role=\"treeitem\"][data-filetypesbrowserkey!=\"*\"]');\r\n        if (allcheckbox.prop('checked')) {\r\n            others.hide();\r\n        } else {\r\n            others.show();\r\n        }\r\n    };\r\n\r\n    return {\r\n        init: function(elementId, elementLabel, onlyTypes, allowAll) {\r\n            new FileTypes(elementId, elementLabel, onlyTypes, allowAll);\r\n        }\r\n    };\r\n});\r\n"],"names":["define","$","Log","ModalEvents","ModalSaveCancel","Ajax","Templates","Tree","FileTypes","elementId","elementLabel","onlyTypes","allowAll","this","inputField","wrapperBrowserTrigger","wrapperDescriptions","length","prepareBrowserTrigger","then","prepareBrowserModal","bind","prepareBrowserTree","error","prototype","render","html","browserTrigger","find","create","title","modal","browserModal","getRoot","on","hidden","focus","save","saveBrowserModal","e","preventDefault","is","bodyContent","loadBrowserModalBody","browserTree","getBody","handleKeyDown","item","keyCode","keys","enter","space","stopPropagation","toggleCheckbox","attr","call","hideOrShowItemsDependingOnAllowAll","first","currentTarget","checkbox","key","prop","show","setBody","when","args","onlytypes","join","allowall","current","val","methodname","browserData","elementid","groups","allcheckbox","updateDescriptions","newvalue","each","push","filter","x","i","a","indexOf","descriptions","forEach","description","text","trim","extensions","templatedata","hasdescriptions","others","hide","init"],"mappings":"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"}