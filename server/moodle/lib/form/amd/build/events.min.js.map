{"version":3,"file":"events.min.js","sources":["../src/events.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript events for the `core_form` subsystem.\r\n *\r\n * @module core_form/events\r\n * @copyright 2021 Huong Nguyen <huongnv13@gmail.com>\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since 3.10\r\n *\r\n * @example <caption>Example of listening to a form event.</caption>\r\n * import {eventTypes as formEventTypes} from 'core_form/events';\r\n *\r\n * document.addEventListener(formEventTypes.formSubmittedByJavascript, e => {\r\n *     window.console.log(e.target); // The form that was submitted.\r\n *     window.console.log(e.detail.skipValidation); // Whether form validation was skipped.\r\n * });\r\n */\r\n\r\nimport {getString} from 'core/str';\r\nimport {dispatchEvent} from 'core/event_dispatcher';\r\n\r\nlet changesMadeString;\r\n\r\n/**\r\n * Prevent user navigate away when upload progress still running.\r\n * @param {Event} e The event\r\n */\r\nconst changesMadeCheck = e => {\r\n    if (e) {\r\n        e.returnValue = changesMadeString;\r\n    }\r\n};\r\n\r\n/**\r\n * Events for `core_form`.\r\n *\r\n * @constant\r\n * @property {String} formError See {@link event:core_form/error}\r\n * @property {String} formFieldValidationFailed See {@link event:core_form/fieldValidationFailed}\r\n * @property {String} formSubmittedByJavascript See {@link event:core_form/submittedByJavascript}\r\n * @property {String} uploadChanged See {@link event:core_form/uploadChanged}\r\n * @property {String} fieldStructureChanged See {@link event:core_form/fieldStructureChanged}\r\n */\r\nexport const eventTypes = {\r\n    /**\r\n     * An event triggered when a form contains an error\r\n     *\r\n     * @event formError\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The form field which errored\r\n     */\r\n    formError: 'core_form/error',\r\n\r\n    /**\r\n     * An event triggered when an mform is about to be submitted via javascript.\r\n     *\r\n     * @event core_form/submittedByJavascript\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The form that was submitted\r\n     * @property {object} detail\r\n     * @property {boolean} detail.skipValidation Whether the form was submitted without validation (i.e. via a Cancel button)\r\n     * @property {boolean} detail.fallbackHandled Whether the legacy YUI event has been handled\r\n     */\r\n    formSubmittedByJavascript: 'core_form/submittedByJavascript',\r\n\r\n    /**\r\n     * An event triggered upon form field validation failure.\r\n     *\r\n     * @event core_form/fieldValidationFailed\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The field that failed validation\r\n     * @property {object} detail\r\n     * @property {String} detail.message The message displayed upon failure\r\n     */\r\n    formFieldValidationFailed: 'core_form/fieldValidationFailed',\r\n\r\n    /**\r\n     * An event triggered when an upload is started\r\n     *\r\n     * @event core_form/uploadStarted\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The location where the upload began\r\n     */\r\n    uploadStarted: 'core_form/uploadStarted',\r\n\r\n    /**\r\n     * An event triggered when an upload completes\r\n     *\r\n     * @event core_form/uploadCompleted\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The location where the upload completed\r\n     */\r\n    uploadCompleted: 'core_form/uploadCompleted',\r\n\r\n    /**\r\n     * An event triggered when a file upload field has been changed.\r\n     *\r\n     * @event core_form/uploadChanged\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The form field which was changed\r\n     */\r\n    uploadChanged: 'core_form/uploadChanged',\r\n\r\n    /**\r\n     * An event triggered when a form field structure has changed.\r\n     *\r\n     * @event core_form/fieldStructureChanged\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The form field that has changed\r\n     */\r\n    fieldStructureChanged: 'core_form/fieldStructureChanged',\r\n};\r\n\r\n/**\r\n * Trigger an event to indicate that a form field contained an error.\r\n *\r\n * @method notifyFormError\r\n * @param {HTMLElement} field The form field causing the error\r\n * @returns {CustomEvent}\r\n * @fires formError\r\n */\r\nexport const notifyFormError = field => dispatchEvent(eventTypes.formError, {}, field);\r\n\r\n/**\r\n * Trigger an event to indiciate that a form was submitted by Javascript.\r\n *\r\n * @method\r\n * @param {HTMLElement} form The form that was submitted\r\n * @param {Boolean} skipValidation Submit the form without validation. E.g. \"Cancel\".\r\n * @param {Boolean} fallbackHandled The legacy YUI event has been handled\r\n * @returns {CustomEvent}\r\n * @fires formSubmittedByJavascript\r\n */\r\nexport const notifyFormSubmittedByJavascript = (form, skipValidation = false, fallbackHandled = false) => {\r\n    if (skipValidation) {\r\n        window.skipClientValidation = true;\r\n    }\r\n\r\n    const customEvent = dispatchEvent(\r\n        eventTypes.formSubmittedByJavascript,\r\n        {\r\n            skipValidation,\r\n            fallbackHandled,\r\n        },\r\n        form\r\n    );\r\n\r\n    if (skipValidation) {\r\n        window.skipClientValidation = false;\r\n    }\r\n\r\n    return customEvent;\r\n};\r\n\r\n/**\r\n * Trigger an event to indicate that a form field contained an error.\r\n *\r\n * @method notifyFieldValidationFailure\r\n * @param {HTMLElement} field The field which failed validation\r\n * @param {String} message The message displayed\r\n * @returns {CustomEvent}\r\n * @fires formFieldValidationFailed\r\n */\r\nexport const notifyFieldValidationFailure = (field, message) => dispatchEvent(\r\n    eventTypes.formFieldValidationFailed,\r\n    {\r\n        message,\r\n    },\r\n    field,\r\n    {\r\n        cancelable: true\r\n    }\r\n);\r\n\r\n/**\r\n * Trigger an event to indicate that an upload was started.\r\n *\r\n * @method\r\n * @param {String} elementId The element which was uploaded to\r\n * @returns {CustomEvent}\r\n * @fires uploadStarted\r\n */\r\nexport const notifyUploadStarted = async elementId => {\r\n    // Add an additional check for changes made.\r\n    changesMadeString = await getString('changesmadereallygoaway', 'moodle');\r\n    window.addEventListener('beforeunload', changesMadeCheck);\r\n\r\n    return dispatchEvent(\r\n        eventTypes.uploadStarted,\r\n        {},\r\n        document.getElementById(elementId),\r\n        {\r\n            bubbles: true,\r\n            cancellable: false,\r\n        }\r\n    );\r\n};\r\n\r\n/**\r\n * Trigger an event to indicate that an upload was completed.\r\n *\r\n * @method\r\n * @param {String} elementId The element which was uploaded to\r\n * @returns {CustomEvent}\r\n * @fires uploadCompleted\r\n */\r\nexport const notifyUploadCompleted = elementId => {\r\n    // Remove the additional check for changes made.\r\n    window.removeEventListener('beforeunload', changesMadeCheck);\r\n\r\n    return dispatchEvent(\r\n        eventTypes.uploadCompleted,\r\n        {},\r\n        document.getElementById(elementId),\r\n        {\r\n            bubbles: true,\r\n            cancellable: false,\r\n        }\r\n    );\r\n};\r\n\r\n/**\r\n * Trigger upload start event.\r\n *\r\n * @method\r\n * @param {String} elementId\r\n * @returns {CustomEvent}\r\n * @fires uploadStarted\r\n * @deprecated Since Moodle 4.0 See {@link module:core_form/events.notifyUploadStarted notifyUploadStarted}\r\n */\r\nexport const triggerUploadStarted = notifyUploadStarted;\r\n\r\n/**\r\n * Trigger upload complete event.\r\n *\r\n * @method\r\n * @param {String} elementId\r\n * @returns {CustomEvent}\r\n * @fires uploadCompleted\r\n * @deprecated Since Moodle 4.0 See {@link module:core_form/events.notifyUploadCompleted notifyUploadCompleted}\r\n */\r\nexport const triggerUploadCompleted = notifyUploadCompleted;\r\n\r\n/**\r\n * List of the events.\r\n *\r\n * @deprecated since Moodle 4.0. See {@link module:core_form/events.eventTypes eventTypes} instead.\r\n **/\r\nexport const types = {\r\n    uploadStarted: 'core_form/uploadStarted',\r\n    uploadCompleted: 'core_form/uploadCompleted',\r\n};\r\n\r\n/**\r\n * Trigger an event to notify the file upload field has been changed.\r\n *\r\n * @method\r\n * @param {string} elementId The element which was changed\r\n * @returns {CustomEvent}\r\n * @fires uploadChanged\r\n */\r\nexport const notifyUploadChanged = elementId => dispatchEvent(\r\n    eventTypes.uploadChanged,\r\n    {},\r\n    document.getElementById(elementId),\r\n    {\r\n        bubbles: true,\r\n        cancellable: false,\r\n    }\r\n);\r\n\r\n/**\r\n * Trigger an event to notify the field structure has changed.\r\n *\r\n * @method\r\n * @param {string} elementId The element which was changed\r\n * @returns {CustomEvent}\r\n * @fires fieldStructureChanged\r\n */\r\nexport const notifyFieldStructureChanged = elementId => dispatchEvent(\r\n    eventTypes.fieldStructureChanged,\r\n    {},\r\n    document.getElementById(elementId),\r\n    {\r\n        bubbles: true,\r\n        cancellable: false,\r\n    }\r\n);\r\n"],"names":["changesMadeString","changesMadeCheck","e","returnValue","eventTypes","_exports","formError","formSubmittedByJavascript","formFieldValidationFailed","uploadStarted","uploadCompleted","uploadChanged","fieldStructureChanged","notifyFormError","field","dispatchEvent","notifyFormSubmittedByJavascript","form","skipValidation","arguments","length","undefined","fallbackHandled","window","skipClientValidation","customEvent","notifyFieldValidationFailure","message","cancelable","notifyUploadStarted","async","getString","addEventListener","document","getElementById","elementId","bubbles","cancellable","notifyUploadCompleted","removeEventListener","triggerUploadStarted","triggerUploadCompleted","types","notifyUploadChanged","notifyFieldStructureChanged"],"mappings":";;;;;;;;;;;;;;;;;AAmCA,IAAIA,wZAMJ,MAAMC,iBAAmBC,IACjBA,IACAA,EAAEC,YAAcH,kBACpB,EAaSI,WAAUC,SAAAD,WAAG,CAQtBE,UAAW,kBAYXC,0BAA2B,kCAW3BC,0BAA2B,kCAS3BC,cAAe,0BASfC,gBAAiB,4BASjBC,cAAe,0BASfC,sBAAuB,mCAW4DP,SAAAQ,gBAAxDC,QAAS,EAAAC,kBAAaA,eAACX,WAAWE,UAAW,GAAIQ,OA+B9ET,SAAAW,gCAnB6C,SAACC,MAA0D,IAApDC,eAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAUG,gBAAeH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACrFD,iBACAK,OAAOC,sBAAuB,GAGlC,MAAMC,aAAc,EAAAV,kBAAAA,eAChBX,WAAWG,0BACX,CACIW,8BACAI,iCAEJL,MAOJ,OAJIC,iBACAK,OAAOC,sBAAuB,GAG3BC,aAqBTpB,SAAAqB,6BAT0CA,CAACZ,MAAOa,WAAY,EAAAZ,kBAAaA,eACzEX,WAAWI,0BACX,CACImB,iBAEJb,MACA,CACIc,YAAY,IAYb,MAAMC,oBAAsBC,kBAE/B9B,wBAA0B,EAAA+B,KAAAA,WAAU,0BAA2B,UAC/DR,OAAOS,iBAAiB,eAAgB/B,mBAEjC,EAAAc,kBAAaA,eAChBX,WAAWK,cACX,CAAA,EACAwB,SAASC,eAAeC,WACxB,CACIC,SAAS,EACTC,aAAa,KAGvBhC,SAAAwB,oBAAAA,oBAUK,MAAMS,sBAAwBH,YAEjCZ,OAAOgB,oBAAoB,eAAgBtC,mBAEpC,EAAAc,kBAAaA,eAChBX,WAAWM,gBACX,CAAA,EACAuB,SAASC,eAAeC,WACxB,CACIC,SAAS,EACTC,aAAa,KAGvBhC,SAAAiC,sBAAAA,sBAW+BjC,SAAAmC,qBAAGX,oBAWDxB,SAAAoC,uBAAGH,sBAOpBjC,SAAAqC,MAAG,CACjBjC,cAAe,0BACfC,gBAAiB,6BAmBnBL,SAAAsC,oBARiCR,YAAa,EAAApB,kBAAaA,eACzDX,WAAWO,cACX,CAAA,EACAsB,SAASC,eAAeC,WACxB,CACIC,SAAS,EACTC,aAAa,IAoBnBhC,SAAAuC,4BARyCT,YAAa,EAAApB,kBAAaA,eACjEX,WAAWQ,sBACX,CAAA,EACAqB,SAASC,eAAeC,WACxB,CACIC,SAAS,EACTC,aAAa,GAEnB"}