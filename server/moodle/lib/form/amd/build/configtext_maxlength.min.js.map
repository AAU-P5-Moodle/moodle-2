{"version":3,"file":"configtext_maxlength.min.js","sources":["../src/configtext_maxlength.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Validation for configtext_maxlength.\r\n *\r\n * @module     core_form/configtext-maxlength\r\n * @copyright  2021 The Open University\r\n */\r\nimport {get_string as getString} from 'core/str';\r\nimport Templates from 'core/templates';\r\nimport Notification from 'core/notification';\r\nimport {prefetchStrings, prefetchTemplates} from 'core/prefetch';\r\n\r\nlet registered = false;\r\n\r\n/**\r\n * Initialisation function.\r\n */\r\nexport const init = () => {\r\n    if (registered) {\r\n        return;\r\n    }\r\n    prefetchStrings('core', [\r\n        'maximumchars',\r\n    ]);\r\n\r\n    prefetchTemplates([\r\n        'core_form/setting_validation_failure',\r\n    ]);\r\n\r\n    registered = true;\r\n\r\n    document.addEventListener('input', e => {\r\n        const maxLengthField = e.target.closest('[data-validation-max-length]');\r\n        if (!maxLengthField) {\r\n            return;\r\n        }\r\n\r\n        if (maxLengthField.value.length > maxLengthField.dataset.validationMaxLength) {\r\n            // Disable the form for this field.\r\n            maxLengthField.form.addEventListener('submit', submissionCheck);\r\n            // Display an error.\r\n            getString('maximumchars', 'core', maxLengthField.dataset.validationMaxLength)\r\n                .then(errorMessage => {\r\n                    return Templates.renderForPromise('core_form/setting_validation_failure', {\r\n                        fieldid: maxLengthField.id,\r\n                        message: errorMessage,\r\n                    });\r\n                })\r\n                .then(errorTemplate => {\r\n                    if (!maxLengthField.dataset.validationFailureId) {\r\n                        const formWrapper = maxLengthField.closest('.form-text');\r\n                        Templates.prependNodeContents(formWrapper, errorTemplate.html, errorTemplate.js);\r\n                        maxLengthField.dataset.validationFailureId = `maxlength_error_${maxLengthField.id}`;\r\n                        // Disable submit button when the message is displayed.\r\n                        updateSubmitButton();\r\n                    }\r\n                    return;\r\n                })\r\n                .then(() => {\r\n                    maxLengthField.setAttribute('aria-invalid', true);\r\n                    const errorField = document.getElementById(maxLengthField.dataset.validationFailureId);\r\n                    if (errorField) {\r\n                        errorField.setAttribute('aria-describedby', maxLengthField.id);\r\n                    }\r\n                    return;\r\n                })\r\n                .catch(Notification.exception);\r\n        } else {\r\n            // Remove the old message.\r\n            const validationMessage = document.getElementById(maxLengthField.dataset.validationFailureId);\r\n            if (validationMessage) {\r\n                validationMessage.parentElement.remove();\r\n                delete maxLengthField.dataset.validationFailureId;\r\n                maxLengthField.removeAttribute('aria-invalid');\r\n                // Enable submit button when the message was removed.\r\n                updateSubmitButton();\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Handle form submission.\r\n *\r\n * @param {Event} e The event.\r\n */\r\nconst submissionCheck = e => {\r\n    const maxLengthFields = e.target.querySelectorAll('[data-validation-max-length]');\r\n    const maxLengthFieldsArray = Array.from(maxLengthFields);\r\n    maxLengthFieldsArray.some(maxLengthField => {\r\n        // Focus on the first validation failure.\r\n        if (maxLengthField.value.length > maxLengthField.dataset.validationMaxLength) {\r\n            e.preventDefault();\r\n            maxLengthField.focus();\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n};\r\n\r\n/**\r\n * Update submit button.\r\n */\r\nconst updateSubmitButton = () => {\r\n    const shouldDisable = document.querySelector('form#adminsettings .error');\r\n    document.querySelector('form#adminsettings button[type=\"submit\"]').disabled = !!shouldDisable;\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_templates","_notification","registered","_exports","init","prefetchStrings","prefetchTemplates","document","addEventListener","maxLengthField","target","closest","value","length","dataset","validationMaxLength","form","submissionCheck","getString","then","errorMessage","Templates","renderForPromise","fieldid","id","message","errorTemplate","validationFailureId","formWrapper","prependNodeContents","html","js","updateSubmitButton","setAttribute","errorField","getElementById","catch","Notification","exception","validationMessage","parentElement","remove","removeAttribute","maxLengthFields","querySelectorAll","Array","from","some","preventDefault","focus","shouldDisable","querySelector","disabled"],"mappings":"gLAuB6C,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA,8EAD7CG,WAAAJ,uBAAAI,YACAC,cAAAL,uBAAAK,eAGA,IAAIC,YAAa,EAmEfC,SAAAC,KA9DkBA,KACZF,cAGJ,EAAAG,2BAAgB,OAAQ,CACpB,kBAGJ,EAAAC,UAAiBA,mBAAC,CACd,yCAGJJ,YAAa,EAEbK,SAASC,iBAAiB,SAASX,IAC/B,MAAMY,eAAiBZ,EAAEa,OAAOC,QAAQ,gCACxC,GAAKF,eAIL,GAAIA,eAAeG,MAAMC,OAASJ,eAAeK,QAAQC,oBAErDN,eAAeO,KAAKR,iBAAiB,SAAUS,kBAE/C,EAAAC,iBAAU,eAAgB,OAAQT,eAAeK,QAAQC,qBACpDI,MAAKC,cACKC,WAAStB,QAACuB,iBAAiB,uCAAwC,CACtEC,QAASd,eAAee,GACxBC,QAASL,iBAGhBD,MAAKO,gBACF,IAAKjB,eAAeK,QAAQa,oBAAqB,CAC7C,MAAMC,YAAcnB,eAAeE,QAAQ,cAC3CU,WAAAA,QAAUQ,oBAAoBD,YAAaF,cAAcI,KAAMJ,cAAcK,IAC7EtB,eAAeK,QAAQa,oBAAsB,mBAAmBlB,eAAee,KAE/EQ,oBACJ,CACA,IAEHb,MAAK,KACFV,eAAewB,aAAa,gBAAgB,GAC5C,MAAMC,WAAa3B,SAAS4B,eAAe1B,eAAeK,QAAQa,qBAC9DO,YACAA,WAAWD,aAAa,mBAAoBxB,eAAee,GAE/D,IAEHY,MAAMC,cAAYtC,QAACuC,eACrB,CAEH,MAAMC,kBAAoBhC,SAAS4B,eAAe1B,eAAeK,QAAQa,qBACrEY,oBACAA,kBAAkBC,cAAcC,gBACzBhC,eAAeK,QAAQa,oBAC9BlB,eAAeiC,gBAAgB,gBAE/BV,qBAER,KACF,EAQN,MAAMf,gBAAkBpB,IACpB,MAAM8C,gBAAkB9C,EAAEa,OAAOkC,iBAAiB,gCACrBC,MAAMC,KAAKH,iBACnBI,MAAKtC,gBAElBA,eAAeG,MAAMC,OAASJ,eAAeK,QAAQC,sBACrDlB,EAAEmD,iBACFvC,eAAewC,SACR,IAGb,EAMAjB,mBAAqBA,KACvB,MAAMkB,cAAgB3C,SAAS4C,cAAc,6BAC7C5C,SAAS4C,cAAc,4CAA4CC,WAAaF,aAAa,CAC/F"}