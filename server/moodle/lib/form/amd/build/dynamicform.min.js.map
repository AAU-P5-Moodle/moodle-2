{"version":3,"file":"dynamicform.min.js","sources":["../src/dynamicform.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Display an embedded form, it is only loaded and reloaded inside its container\r\n *\r\n *\r\n * @module     core_form/dynamicform\r\n * @copyright  2019 Marina Glancy\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * See also https://docs.moodle.org/dev/Modal_and_AJAX_forms\r\n *\r\n * @example\r\n *    import DynamicForm from 'core_form/dynamicform';\r\n *\r\n *    const dynamicForm = new DynamicForm(document.querySelector('#mycontainer', 'pluginname\\\\form\\\\formname');\r\n *    dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, e => {\r\n *        e.preventDefault();\r\n *        window.console.log(e.detail);\r\n *        dynamicForm.container.innerHTML = 'Thank you, your form is submitted!';\r\n *    });\r\n *    dynamicForm.load();\r\n *\r\n */\r\n\r\nimport * as FormChangeChecker from 'core_form/changechecker';\r\nimport * as FormEvents from 'core_form/events';\r\nimport Ajax from 'core/ajax';\r\nimport Fragment from 'core/fragment';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\nimport Templates from 'core/templates';\r\nimport {getStrings} from 'core/str';\r\nimport {serialize} from './util';\r\n\r\n/**\r\n * @class core_form/dynamicform\r\n */\r\nexport default class DynamicForm {\r\n\r\n    /**\r\n     * Various events that can be observed.\r\n     *\r\n     * @type {Object}\r\n     */\r\n    events = {\r\n        // Form was successfully submitted - the response is passed to the event listener.\r\n        // Cancellable (in order to prevent default behavior to clear the container).\r\n        FORM_SUBMITTED: 'core_form_dynamicform_formsubmitted',\r\n        // Cancel button was pressed.\r\n        // Cancellable (in order to prevent default behavior to clear the container).\r\n        FORM_CANCELLED: 'core_form_dynamicform_formcancelled',\r\n        // User attempted to submit the form but there was client-side validation error.\r\n        CLIENT_VALIDATION_ERROR: 'core_form_dynamicform_clientvalidationerror',\r\n        // User attempted to submit the form but server returned validation error.\r\n        SERVER_VALIDATION_ERROR: 'core_form_dynamicform_validationerror',\r\n        // Error occurred while performing request to the server.\r\n        // Cancellable (by default calls Notification.exception).\r\n        ERROR: 'core_form_dynamicform_error',\r\n        // Right after user pressed no-submit button,\r\n        // listen to this event if you want to add JS validation or processing for no-submit button.\r\n        // Cancellable.\r\n        NOSUBMIT_BUTTON_PRESSED: 'core_form_dynamicform_nosubmitbutton',\r\n        // Right after user pressed submit button,\r\n        // listen to this event if you want to add additional JS validation or confirmation dialog.\r\n        // Cancellable.\r\n        SUBMIT_BUTTON_PRESSED: 'core_form_dynamicform_submitbutton',\r\n        // Right after user pressed cancel button,\r\n        // listen to this event if you want to add confirmation dialog.\r\n        // Cancellable.\r\n        CANCEL_BUTTON_PRESSED: 'core_form_dynamicform_cancelbutton',\r\n    };\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * Creates an instance\r\n     *\r\n     * @param {Element} container - the parent element for the form\r\n     * @param {string} formClass full name of the php class that extends \\core_form\\modal , must be in autoloaded location\r\n     */\r\n    constructor(container, formClass) {\r\n        this.formClass = formClass;\r\n        this.container = container;\r\n\r\n        // Ensure strings required for shortforms are always available.\r\n        getStrings([\r\n            {key: 'collapseall', component: 'moodle'},\r\n            {key: 'expandall', component: 'moodle'}\r\n        ]).catch(Notification.exception);\r\n\r\n        // Register delegated events handlers in vanilla JS.\r\n        this.container.addEventListener('click', e => {\r\n            if (e.target.matches('form input[type=submit][data-cancel]')) {\r\n                e.preventDefault();\r\n                const event = this.trigger(this.events.CANCEL_BUTTON_PRESSED, e.target);\r\n                if (!event.defaultPrevented) {\r\n                    this.processCancelButton();\r\n                }\r\n            } else if (e.target.matches('form input[type=submit][data-no-submit=\"1\"]')) {\r\n                e.preventDefault();\r\n                const event = this.trigger(this.events.NOSUBMIT_BUTTON_PRESSED, e.target);\r\n                if (!event.defaultPrevented) {\r\n                    this.processNoSubmitButton(e.target);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.container.addEventListener('submit', e => {\r\n            if (e.target.matches('form')) {\r\n                e.preventDefault();\r\n                const event = this.trigger(this.events.SUBMIT_BUTTON_PRESSED);\r\n                if (!event.defaultPrevented) {\r\n                    this.submitFormAjax();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads the form via AJAX and shows it inside a given container\r\n     *\r\n     * @param {Object} args\r\n     * @return {Promise}\r\n     * @public\r\n     */\r\n    load(args = null) {\r\n        const formData = serialize(args || {});\r\n        const pendingPromise = new Pending('core_form/dynamicform:load');\r\n        return this.getBody(formData)\r\n        .then((resp) => this.updateForm(resp))\r\n        .then(pendingPromise.resolve);\r\n    }\r\n\r\n    /**\r\n     * Triggers a custom event\r\n     *\r\n     * @private\r\n     * @param {String} eventName\r\n     * @param {*} detail\r\n     * @param {Boolean} cancelable\r\n     * @return {CustomEvent<unknown>}\r\n     */\r\n    trigger(eventName, detail = null, cancelable = true) {\r\n        const e = new CustomEvent(eventName, {detail, cancelable});\r\n        this.container.dispatchEvent(e);\r\n        return e;\r\n    }\r\n\r\n    /**\r\n     * Add listener for an event\r\n     *\r\n     * @param {array} args\r\n     * @example:\r\n     *    const dynamicForm = new DynamicForm(...);\r\n     *    dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, e => {\r\n     *        e.preventDefault();\r\n     *        window.console.log(e.detail);\r\n     *        dynamicForm.container.innerHTML = 'Thank you, your form is submitted!';\r\n     *    });\r\n     */\r\n    addEventListener(...args) {\r\n        this.container.addEventListener(...args);\r\n    }\r\n\r\n    /**\r\n     * Get form body\r\n     *\r\n     * @param {String} formDataString form data in format of a query string\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    getBody(formDataString) {\r\n        return Ajax.call([{\r\n            methodname: 'core_form_dynamic_form',\r\n            args: {\r\n                formdata: formDataString,\r\n                form: this.formClass,\r\n            }\r\n        }])[0]\r\n        .then(response => {\r\n            return {html: response.html, js: Fragment.processCollectedJavascript(response.javascript)};\r\n        });\r\n    }\r\n\r\n    /**\r\n     * On form submit\r\n     *\r\n     * @param {*} response Response received from the form's \"process\" method\r\n     */\r\n    onSubmitSuccess(response) {\r\n        const event = this.trigger(this.events.FORM_SUBMITTED, response);\r\n        if (event.defaultPrevented) {\r\n            return;\r\n        }\r\n\r\n        // Default implementation is to remove the form. Event listener should either remove or reload the form\r\n        // since its contents is no longer correct. For example, if an element was created as a result of\r\n        // form submission, the \"id\" in the form would be still zero. Also the server-side validation\r\n        // errors from the previous submission may still be present.\r\n        this.container.innerHTML = '';\r\n    }\r\n\r\n    /**\r\n     * On exception during form processing\r\n     *\r\n     * @private\r\n     * @param {Object} exception\r\n     */\r\n    onSubmitError(exception) {\r\n        const event = this.trigger(this.events.ERROR, exception);\r\n        if (event.defaultPrevented) {\r\n            return;\r\n        }\r\n\r\n        Notification.exception(exception);\r\n    }\r\n\r\n    /**\r\n     * Click on a \"submit\" button that is marked in the form as registerNoSubmitButton()\r\n     *\r\n     * @method submitButtonPressed\r\n     * @param {Element} button that was pressed\r\n     * @fires event:formSubmittedByJavascript\r\n     */\r\n    processNoSubmitButton(button) {\r\n        const pendingPromise = new Pending('core_form/dynamicform:nosubmit');\r\n        const form = this.getFormNode();\r\n        const formData = new URLSearchParams([...(new FormData(form)).entries()]);\r\n        formData.append(button.getAttribute('name'), button.getAttribute('value'));\r\n\r\n        FormEvents.notifyFormSubmittedByJavascript(form, true);\r\n\r\n        // Add the button name to the form data and submit it.\r\n        this.disableButtons();\r\n\r\n        this.getBody(formData.toString())\r\n        .then(resp => this.updateForm(resp))\r\n        .then(pendingPromise.resolve)\r\n        .catch(exception => this.onSubmitError(exception));\r\n    }\r\n\r\n    /**\r\n     * Get the form node from the Dialogue.\r\n     *\r\n     * @returns {HTMLFormElement}\r\n     */\r\n    getFormNode() {\r\n        return this.container.querySelector('form');\r\n    }\r\n\r\n    /**\r\n     * Notifies listeners that form dirty state should be reset.\r\n     *\r\n     * @fires event:formSubmittedByJavascript\r\n     */\r\n    notifyResetFormChanges() {\r\n        FormEvents.notifyFormSubmittedByJavascript(this.getFormNode(), true);\r\n        FormChangeChecker.resetFormDirtyState(this.getFormNode());\r\n    }\r\n\r\n    /**\r\n     * Click on a \"cancel\" button\r\n     */\r\n    processCancelButton() {\r\n        // Notify listeners that the form is about to be submitted (this will reset atto autosave).\r\n        this.notifyResetFormChanges();\r\n\r\n        const event = this.trigger(this.events.FORM_CANCELLED);\r\n        if (!event.defaultPrevented) {\r\n            // By default removes the form from the DOM.\r\n            this.container.innerHTML = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update form contents\r\n     *\r\n     * @param {object} param\r\n     * @param {string} param.html\r\n     * @param {string} param.js\r\n     * @returns {Promise}\r\n     */\r\n    updateForm({html, js}) {\r\n        return Templates.replaceNodeContents(this.container, html, js);\r\n    }\r\n\r\n    /**\r\n     * Validate form elements\r\n     * @return {Boolean} Whether client-side validation has passed, false if there are errors\r\n     * @fires event:formSubmittedByJavascript\r\n     */\r\n    validateElements() {\r\n        // Notify listeners that the form is about to be submitted (this will reset atto autosave).\r\n        FormEvents.notifyFormSubmittedByJavascript(this.getFormNode());\r\n\r\n        // Now the change events have run, see if there are any \"invalid\" form fields.\r\n        const invalid = [...this.container.querySelectorAll('[aria-invalid=\"true\"], .error')];\r\n\r\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\r\n        if (invalid.length) {\r\n            invalid[0].focus();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Disable buttons during form submission\r\n     */\r\n    disableButtons() {\r\n        this.container.querySelectorAll('form input[type=\"submit\"]')\r\n            .forEach(el => el.setAttribute('disabled', true));\r\n    }\r\n\r\n    /**\r\n     * Enable buttons after form submission (on validation error)\r\n     */\r\n    enableButtons() {\r\n        this.container.querySelectorAll('form input[type=\"submit\"]')\r\n            .forEach(el => el.removeAttribute('disabled'));\r\n    }\r\n\r\n    /**\r\n     * Submit the form via AJAX call to the core_form_dynamic_form WS\r\n     */\r\n    async submitFormAjax() {\r\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\r\n        if (!(await this.validateElements())) {\r\n            this.trigger(this.events.CLIENT_VALIDATION_ERROR, null, false);\r\n            return;\r\n        }\r\n        this.disableButtons();\r\n\r\n        // Convert all the form elements values to a serialised string.\r\n        const form = this.container.querySelector('form');\r\n        const formData = new URLSearchParams([...(new FormData(form)).entries()]);\r\n\r\n        // Now we can continue...\r\n        Ajax.call([{\r\n            methodname: 'core_form_dynamic_form',\r\n            args: {\r\n                formdata: formData.toString(),\r\n                form: this.formClass\r\n            }\r\n        }])[0]\r\n        .then((response) => {\r\n            if (!response.submitted) {\r\n                // Form was not submitted, it could be either because validation failed or because no-submit button was pressed.\r\n                this.updateForm({html: response.html, js: Fragment.processCollectedJavascript(response.javascript)});\r\n                this.enableButtons();\r\n                this.trigger(this.events.SERVER_VALIDATION_ERROR, null, false);\r\n            } else {\r\n                // Form was submitted properly.\r\n                const data = JSON.parse(response.data);\r\n                this.enableButtons();\r\n                this.notifyResetFormChanges();\r\n                this.onSubmitSuccess(data);\r\n            }\r\n            return null;\r\n        })\r\n        .catch(exception => this.onSubmitError(exception));\r\n    }\r\n}\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","_interopRequireWildcard","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","FormChangeChecker","FormEvents","_ajax","_fragment","_notification","_pending","_templates","_exports","events","FORM_SUBMITTED","FORM_CANCELLED","CLIENT_VALIDATION_ERROR","SERVER_VALIDATION_ERROR","ERROR","NOSUBMIT_BUTTON_PRESSED","SUBMIT_BUTTON_PRESSED","CANCEL_BUTTON_PRESSED","constructor","container","formClass","this","getStrings","key","component","catch","Notification","exception","addEventListener","target","matches","preventDefault","trigger","defaultPrevented","processCancelButton","processNoSubmitButton","submitFormAjax","load","args","arguments","length","undefined","formData","serialize","pendingPromise","Pending","getBody","then","resp","updateForm","resolve","eventName","CustomEvent","detail","cancelable","dispatchEvent","formDataString","Ajax","methodname","formdata","form","response","html","js","Fragment","processCollectedJavascript","javascript","onSubmitSuccess","innerHTML","onSubmitError","button","getFormNode","URLSearchParams","FormData","entries","append","getAttribute","notifyFormSubmittedByJavascript","disableButtons","toString","querySelector","notifyResetFormChanges","resetFormDirtyState","_ref","Templates","replaceNodeContents","validateElements","invalid","querySelectorAll","focus","forEach","el","setAttribute","enableButtons","removeAttribute","submitted","data","JSON","parse"],"mappings":"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"}