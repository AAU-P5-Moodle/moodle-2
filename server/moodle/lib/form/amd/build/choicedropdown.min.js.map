{"version":3,"file":"choicedropdown.min.js","sources":["../src/choicedropdown.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Field controller for choicedropdown field.\r\n *\r\n * @module core_form/choicedropdown\r\n * @copyright 2023 Ferran Recio <ferran@moodle.com>\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {getDropdownStatus} from 'core/local/dropdown/status';\r\nimport {markFormAsDirty} from 'core_form/changechecker';\r\n\r\nconst Classes = {\r\n    notClickable: 'not-clickable',\r\n    hidden: 'd-none',\r\n};\r\n\r\n/**\r\n * Internal form element class.\r\n *\r\n * @private\r\n * @class     FieldController\r\n * @copyright  2023 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nclass FieldController {\r\n    /**\r\n     * Class constructor.\r\n     *\r\n     * @param {String} elementId Form element id\r\n     */\r\n    constructor(elementId) {\r\n        this.elementId = elementId;\r\n        this.mainSelect = document.getElementById(this.elementId);\r\n        this.dropdown = getDropdownStatus(`[data-form-controls=\"${this.elementId}\"]`);\r\n        this.dropdown.getElement().classList.remove(Classes.hidden);\r\n    }\r\n\r\n    /**\r\n     * Add form element event listener.\r\n     */\r\n    addEventListeners() {\r\n        this.dropdown.getElement().addEventListener(\r\n            'change',\r\n            this.updateSelect.bind(this)\r\n        );\r\n        // Click on a dropdown link can trigger a wrong dirty form reload warning.\r\n        this.dropdown.getElement().addEventListener(\r\n            'click',\r\n            (event) => event.preventDefault()\r\n        );\r\n        this.mainSelect.addEventListener(\r\n            'change',\r\n            this.updateDropdown.bind(this)\r\n        );\r\n        // Enabling or disabling the select does not trigger any JS event.\r\n        const observerCallback = (mutations) => {\r\n            mutations.forEach((mutation) => {\r\n                if (mutation.type !== 'attributes' || mutation.attributeName !== 'disabled') {\r\n                    return;\r\n                }\r\n                this.updateDropdown();\r\n            });\r\n        };\r\n        new MutationObserver(observerCallback).observe(\r\n            this.mainSelect,\r\n            {attributeFilter: ['disabled']}\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Check if the field is disabled.\r\n     * @returns {Boolean}\r\n     */\r\n    isDisabled() {\r\n        return this.mainSelect?.hasAttribute('disabled');\r\n    }\r\n\r\n    /**\r\n     * Update selected option preview in form.\r\n     */\r\n    async updateDropdown() {\r\n        this.dropdown.setButtonDisabled(this.isDisabled());\r\n        if (this.dropdown.getSelectedValue() == this.mainSelect.value) {\r\n            return;\r\n        }\r\n        this.dropdown.setSelectedValue(this.mainSelect.value);\r\n    }\r\n\r\n    /**\r\n     * Update selected option preview in form.\r\n     */\r\n    async updateSelect() {\r\n        if (this.dropdown.getSelectedValue() == this.mainSelect.value) {\r\n            return;\r\n        }\r\n        this.mainSelect.value = this.dropdown.getSelectedValue();\r\n        markFormAsDirty(this.mainSelect.closest('form'));\r\n        // Change the select element via JS does not trigger the standard change event.\r\n        this.mainSelect.dispatchEvent(new Event('change'));\r\n    }\r\n\r\n    /**\r\n     * Disable the choice dialog and convert it into a regular select field.\r\n     */\r\n    disableInteractiveDialog() {\r\n        this.mainSelect?.classList.remove(Classes.hidden);\r\n        const dropdownElement = this.dropdown.getElement();\r\n        dropdownElement.classList.add(Classes.hidden);\r\n    }\r\n\r\n    /**\r\n     * Check if the field has a force dialog attribute.\r\n    //  *\r\n     * The force dialog is a setting to force the javascript control even in\r\n     * behat test.\r\n     *\r\n     * @returns {Boolean} if the dialog modal should be forced or not\r\n     */\r\n    hasForceDialog() {\r\n        return !!this.mainSelect?.dataset.forceDialog;\r\n    }\r\n}\r\n\r\n/**\r\n * Initialises a choice dialog field.\r\n *\r\n * @method init\r\n * @param {String} elementId Form element id\r\n * @listens event:uploadStarted\r\n * @listens event:uploadCompleted\r\n */\r\nexport const init = (elementId) => {\r\n    const field = new FieldController(elementId);\r\n    // This field is just a select wrapper. To optimize tests, we don't want to keep behat\r\n    // waiting for extra loadings in this case. The set field steps are about testing other\r\n    // stuff, not to test fancy javascript form fields. However, we keep the possibility of\r\n    // testing the javascript part using behat when necessary.\r\n    if (document.body.classList.contains('behat-site') && !field.hasForceDialog()) {\r\n        field.disableInteractiveDialog();\r\n        return;\r\n    }\r\n    field.addEventListeners();\r\n};\r\n"],"names":["Classes","FieldController","constructor","elementId","this","mainSelect","document","getElementById","dropdown","getDropdownStatus","getElement","classList","remove","addEventListeners","addEventListener","updateSelect","bind","event","preventDefault","updateDropdown","MutationObserver","mutations","forEach","mutation","type","attributeName","observe","attributeFilter","isDisabled","hasAttribute","setButtonDisabled","getSelectedValue","value","setSelectedValue","markFormAsDirty","closest","dispatchEvent","Event","disableInteractiveDialog","add","hasForceDialog","dataset","forceDialog","_exports","init","field","body","contains"],"mappings":";;;;;;;;AA0BA,MAAMA,eAEM;;;;;;;;KAWZ,MAAMC,gBAMFC,WAAAA,CAAYC,WACRC,KAAKD,UAAYA,UACjBC,KAAKC,WAAaC,SAASC,eAAeH,KAAKD,WAC/CC,KAAKI,UAAW,EAAAC,QAAAA,mBAAkB,wBAAwBL,KAAKD,eAC/DC,KAAKI,SAASE,aAAaC,UAAUC,OAAOZ,eAChD,CAKAa,iBAAAA,GACIT,KAAKI,SAASE,aAAaI,iBACvB,SACAV,KAAKW,aAAaC,KAAKZ,OAG3BA,KAAKI,SAASE,aAAaI,iBACvB,SACCG,OAAUA,MAAMC,mBAErBd,KAAKC,WAAWS,iBACZ,SACAV,KAAKe,eAAeH,KAAKZ,OAW7B,IAAIgB,kBARsBC,YACtBA,UAAUC,SAASC,WACO,eAAlBA,SAASC,MAAoD,aAA3BD,SAASE,eAG/CrB,KAAKe,gBAAgB,GACvB,IAEiCO,QACnCtB,KAAKC,WACL,CAACsB,gBAAiB,CAAC,aAE3B,CAMAC,UAAAA,GACI,OAAOxB,KAAKC,YAAYwB,aAAa,WACzC,CAKA,oBAAMV,GACFf,KAAKI,SAASsB,kBAAkB1B,KAAKwB,cACjCxB,KAAKI,SAASuB,oBAAsB3B,KAAKC,WAAW2B,OAGxD5B,KAAKI,SAASyB,iBAAiB7B,KAAKC,WAAW2B,MACnD,CAKA,kBAAMjB,GACEX,KAAKI,SAASuB,oBAAsB3B,KAAKC,WAAW2B,QAGxD5B,KAAKC,WAAW2B,MAAQ5B,KAAKI,SAASuB,oBACtC,EAAAG,eAAAA,iBAAgB9B,KAAKC,WAAW8B,QAAQ,SAExC/B,KAAKC,WAAW+B,cAAc,IAAIC,MAAM,WAC5C,CAKAC,wBAAAA,GACIlC,KAAKC,YAAYM,UAAUC,OAAOZ,gBACVI,KAAKI,SAASE,aACtBC,UAAU4B,IAAIvC,eAClC,CAUAwC,cAAAA,GACI,QAASpC,KAAKC,YAAYoC,QAAQC,WACtC,EAsBFC,SAAAC,KAXmBzC,YACjB,MAAM0C,MAAQ,IAAI5C,gBAAgBE,YAK9BG,SAASwC,KAAKnC,UAAUoC,SAAS,eAAkBF,MAAML,iBAI7DK,MAAMhC,oBAHFgC,MAAMP,0BAGe,CAC3B"}