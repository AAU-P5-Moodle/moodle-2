{"version":3,"file":"binary.min.js","sources":["../../../src/datafilter/filtertypes/binary.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Base filter for binary selector ie: (Yes / No).\r\n *\r\n * @module     core/datafilter/filtertypes/binary\r\n * @author     2022 Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\r\n * @copyright  2022 Catalyst IT Australia Pty Ltd\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Filter from 'core/datafilter/filtertype';\r\nimport Selectors from 'core/datafilter/selectors';\r\nimport Templates from 'core/templates';\r\nimport {get_strings as getStrings} from 'core/str';\r\n\r\nexport default class extends Filter {\r\n\r\n    /**\r\n     * Text string for the first binary option.\r\n     *\r\n     * This option (and {@see optionTwo}) are set by {@see getTextValues()}. The base class will set default values,\r\n     * a subclass can override the method to define its own option.\r\n     *\r\n     * @type {String}\r\n     */\r\n    optionOne;\r\n\r\n    /**\r\n     * Text string for the second binary option.\r\n     *\r\n     * @type {String}\r\n     */\r\n    optionTwo;\r\n\r\n    /**\r\n     * Add the value selector to the filter row.\r\n     *\r\n     * @param {Array} initialValues The default value for the filter.\r\n     */\r\n    async addValueSelector(initialValues) {\r\n        [this.optionOne, this.optionTwo] = await this.getTextValues();\r\n        return this.displayBinarySelection(initialValues[0]);\r\n    }\r\n\r\n    /**\r\n     * Fetch text values for select options.\r\n     *\r\n     * Subclasses should override this method to set their own options.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    getTextValues() {\r\n        return getStrings([{key: 'no'}, {key: 'yes'}]);\r\n    }\r\n\r\n    /**\r\n     * Renders yes/no select input with proper selection.\r\n     *\r\n     * @param {Number} initialValue The default value for the filter.\r\n     */\r\n    async displayBinarySelection(initialValue = 0) {\r\n        // We specify a specific filterset in case there are multiple filtering condition - avoiding glitches.\r\n        const specificFilterSet = this.rootNode.querySelector(Selectors.filter.byName(this.filterType));\r\n        const sourceDataNode = this.getSourceDataForFilter();\r\n        const context = {\r\n            filtertype: this.filterType,\r\n            title: sourceDataNode.getAttribute('data-field-title'),\r\n            required: sourceDataNode.dataset.required,\r\n            options: [\r\n                {\r\n                    text: this.optionOne,\r\n                    value: 0,\r\n                    selected: initialValue === 0,\r\n                },\r\n                {\r\n                    text: this.optionTwo,\r\n                    value: 1,\r\n                    selected: initialValue === 1,\r\n                },\r\n            ]\r\n        };\r\n        return Templates.render('core/datafilter/filtertypes/binary_selector', context)\r\n        .then((binaryUi, js) => {\r\n            return Templates.replaceNodeContents(specificFilterSet.querySelector(Selectors.filter.regions.values), binaryUi, js);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the list of raw values for this filter type.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    get values() {\r\n        return [parseInt(this.filterRoot.querySelector(`[data-filterfield=\"${this.name}\"]`).value)];\r\n    }\r\n\r\n}\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_filtertype","_selectors","_templates","_default","Filter","optionOne","optionTwo","addValueSelector","initialValues","this","getTextValues","displayBinarySelection","getStrings","get_strings","key","initialValue","arguments","length","undefined","specificFilterSet","rootNode","querySelector","Selectors","filter","byName","filterType","sourceDataNode","getSourceDataForFilter","context","filtertype","title","getAttribute","required","dataset","options","text","value","selected","Templates","render","then","binaryUi","js","replaceNodeContents","regions","values","parseInt","filterRoot","name","_exports"],"mappings":"wMA0BuC,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;;qFAFvCG,YAAAJ,uBAAAI,aACAC,WAAAL,uBAAAK,YACAC,WAAAN,uBAAAM,YAGe,MAAAC,iBAAcC,YAAAA,QAUzBC,UAOAC,UAOA,sBAAMC,CAAiBC,eAEnB,OADCC,KAAKJ,UAAWI,KAAKH,iBAAmBG,KAAKC,gBACvCD,KAAKE,uBAAuBH,cAAc,GACrD,CASAE,aAAAA,GACI,OAAO,EAAAE,KAAUC,aAAC,CAAC,CAACC,IAAK,MAAO,CAACA,IAAK,QAC1C,CAOA,4BAAMH,GAAyC,IAAlBI,aAAYC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAExC,MAAMG,kBAAoBV,KAAKW,SAASC,cAAcC,WAAAA,QAAUC,OAAOC,OAAOf,KAAKgB,aAC7EC,eAAiBjB,KAAKkB,yBACtBC,QAAU,CACZC,WAAYpB,KAAKgB,WACjBK,MAAOJ,eAAeK,aAAa,oBACnCC,SAAUN,eAAeO,QAAQD,SACjCE,QAAS,CACL,CACIC,KAAM1B,KAAKJ,UACX+B,MAAO,EACPC,SAA2B,IAAjBtB,cAEd,CACIoB,KAAM1B,KAAKH,UACX8B,MAAO,EACPC,SAA2B,IAAjBtB,gBAItB,OAAOuB,WAASvC,QAACwC,OAAO,8CAA+CX,SACtEY,MAAK,CAACC,SAAUC,KACNJ,WAAAA,QAAUK,oBAAoBxB,kBAAkBE,cAAcC,WAASvB,QAACwB,OAAOqB,QAAQC,QAASJ,SAAUC,KAEzH,CAOA,UAAIG,GACA,MAAO,CAACC,SAASrC,KAAKsC,WAAW1B,cAAc,sBAAsBZ,KAAKuC,UAAUZ,OACxF,EAEH,OAAAa,SAAAlD,QAAAI,SAAA8C,SAAAlD,OAAA"}