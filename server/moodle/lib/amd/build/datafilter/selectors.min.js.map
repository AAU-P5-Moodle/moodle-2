{"version":3,"file":"selectors.min.js","sources":["../../src/datafilter/selectors.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Module containing the selectors for user filters.\r\n *\r\n * @module     core/datafilter/selectors\r\n * @copyright  2020 Michael Hawkins <michaelh@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nconst getFilterRegion = region => `[data-filterregion=\"${region}\"]`;\r\nconst getFilterAction = action => `[data-filteraction=\"${action}\"]`;\r\nconst getFilterField = field => `[data-filterfield=\"${field}\"]`;\r\n\r\nexport default {\r\n    filter: {\r\n        region: getFilterRegion('filter'),\r\n        actions: {\r\n            remove: getFilterAction('remove'),\r\n        },\r\n        fields: {\r\n            join: getFilterField('join'),\r\n            type: getFilterField('type'),\r\n        },\r\n        regions: {\r\n            values: getFilterRegion('value'),\r\n        },\r\n        byName: name => `${getFilterRegion('filter')}[data-filter-type=\"${name}\"]`,\r\n    },\r\n    filterset: {\r\n        region: getFilterRegion('actions'),\r\n        actions: {\r\n            addRow: getFilterAction('add'),\r\n            applyFilters: getFilterAction('apply'),\r\n            resetFilters: getFilterAction('reset'),\r\n        },\r\n        regions: {\r\n            filtermatch: getFilterRegion('filtermatch'),\r\n            filterlist: getFilterRegion('filters'),\r\n            datasource: getFilterRegion('filtertypedata'),\r\n            emptyFilterRow: `${getFilterRegion('filter')}[data-filter-type=\"\"]`,\r\n        },\r\n        fields: {\r\n            join: `${getFilterRegion('filtermatch')} ${getFilterField('join')}`,\r\n        },\r\n    },\r\n    data: {\r\n        fields: {\r\n            byName: name => `[data-field-name=\"${name}\"]`,\r\n            all: `${getFilterRegion('filtertypedata')} [data-field-name]`,\r\n        },\r\n        typeList: getFilterRegion('filtertypelist'),\r\n        typeListSelect: `select${getFilterRegion('filtertypelist')}`,\r\n        required: `${getFilterRegion('value')} > [data-required=\"1\"]`,\r\n    },\r\n};\r\n"],"names":["getFilterRegion","region","getFilterAction","action","getFilterField","field","_exports","default","filter","actions","remove","fields","join","type","regions","values","byName","name","filterset","addRow","applyFilters","resetFilters","filtermatch","filterlist","datasource","emptyFilterRow","data","all","typeList","typeListSelect","required"],"mappings":";;;;;;;;AAuBA,MAAMA,gBAAkBC,QAAU,uBAAuBA,WACnDC,gBAAkBC,QAAU,uBAAuBA,WACnDC,eAAiBC,OAAS,sBAAsBA,UAAUC,SAAAC,QAEjD,CACXC,OAAQ,CACJP,OAAQD,gBAAgB,UACxBS,QAAS,CACLC,OAAQR,gBAAgB,WAE5BS,OAAQ,CACJC,KAAMR,eAAe,QACrBS,KAAMT,eAAe,SAEzBU,QAAS,CACLC,OAAQf,gBAAgB,UAE5BgB,OAAQC,MAAQ,GAAGjB,gBAAgB,+BAA+BiB,UAEtEC,UAAW,CACPjB,OAAQD,gBAAgB,WACxBS,QAAS,CACLU,OAAQjB,gBAAgB,OACxBkB,aAAclB,gBAAgB,SAC9BmB,aAAcnB,gBAAgB,UAElCY,QAAS,CACLQ,YAAatB,gBAAgB,eAC7BuB,WAAYvB,gBAAgB,WAC5BwB,WAAYxB,gBAAgB,kBAC5ByB,eAAgB,GAAGzB,gBAAgB,kCAEvCW,OAAQ,CACJC,KAAM,GAAGZ,gBAAgB,kBAAkBI,eAAe,YAGlEsB,KAAM,CACFf,OAAQ,CACJK,OAAQC,MAAQ,qBAAqBA,SACrCU,IAAK,GAAG3B,gBAAgB,uCAE5B4B,SAAU5B,gBAAgB,kBAC1B6B,eAAgB,SAAS7B,gBAAgB,oBACzC8B,SAAU,GAAG9B,gBAAgB,mCAEpC,OAAAM,SAAAC,OAAA"}