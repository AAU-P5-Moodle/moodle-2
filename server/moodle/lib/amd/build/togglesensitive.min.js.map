{"version":3,"file":"togglesensitive.min.js","sources":["../src/togglesensitive.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * JS module for toggling the sensitive input visibility (e.g. passwords, keys).\r\n *\r\n * @module     core/togglesensitive\r\n * @copyright  2023 David Woloszyn <david.woloszyn@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {isExtraSmall} from 'core/pagehelpers';\r\nimport Templates from 'core/templates';\r\nimport Pending from 'core/pending';\r\nimport Prefetch from 'core/prefetch';\r\nimport Notification from 'core/notification';\r\nimport {notifyFieldStructureChanged} from 'core_form/events';\r\n\r\nconst SELECTORS = {\r\n    BUTTON: '.toggle-sensitive-btn',\r\n    ICON: '.toggle-sensitive-btn .icon',\r\n};\r\n\r\nconst PIX = {\r\n    EYE: 't/hide',\r\n    EYE_SLASH: 't/show',\r\n};\r\n\r\nlet sensitiveElementId;\r\nlet smallScreensOnly;\r\n\r\n/**\r\n * Entrypoint of the js.\r\n *\r\n * @method init\r\n * @param {String} elementId Form button element.\r\n * @param {boolean} isSmallScreensOnly Is this for small screens only?\r\n */\r\nexport const init = (elementId, isSmallScreensOnly = false) => {\r\n    const sensitiveInput = document.getElementById(elementId);\r\n    if (sensitiveInput === null) {\r\n        // Exit early if invalid element id passed.\r\n        return;\r\n    }\r\n    sensitiveElementId = elementId;\r\n    smallScreensOnly = isSmallScreensOnly;\r\n    Prefetch.prefetchTemplate('core/form_input_toggle_sensitive');\r\n    // Render the sensitive input with a toggle button.\r\n    renderSensitiveToggle(sensitiveInput);\r\n    // Register event listeners.\r\n    registerListenerEvents();\r\n};\r\n\r\n/**\r\n * Render the new input html with toggle button and update the incoming html.\r\n *\r\n * @method renderSensitiveToggle\r\n * @param {HTMLElement} sensitiveInput HTML element for the sensitive input.\r\n */\r\nconst renderSensitiveToggle = (sensitiveInput) => {\r\n    Templates.render(\r\n        'core/form_input_toggle_sensitive',\r\n        {\r\n            smallscreensonly: smallScreensOnly,\r\n            sensitiveinput: sensitiveInput.outerHTML,\r\n        }\r\n    ).then((html) => {\r\n        sensitiveInput.outerHTML = html;\r\n        // Dispatch the event indicating the sensitive input has changed.\r\n        notifyFieldStructureChanged(sensitiveInput.id);\r\n        return;\r\n    }).catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Register event listeners.\r\n *\r\n * @method registerListenerEvents\r\n */\r\nconst registerListenerEvents = () => {\r\n    // Toggle the sensitive input visibility when interacting with the toggle button.\r\n    document.addEventListener('click', handleButtonInteraction);\r\n    // For small screens only, hide all sensitive inputs when the screen is enlarged.\r\n    if (smallScreensOnly) {\r\n        window.addEventListener('resize', handleScreenResizing);\r\n    }\r\n};\r\n\r\n/**\r\n * Handle events trigger by interacting with the toggle button.\r\n *\r\n * @method handleButtonInteraction\r\n * @param {Event} event The button event.\r\n */\r\nconst handleButtonInteraction = (event) => {\r\n    const toggleButton = event.target.closest(SELECTORS.BUTTON);\r\n    if (toggleButton) {\r\n        const sensitiveInput = document.getElementById(sensitiveElementId);\r\n        if (sensitiveInput) {\r\n            toggleSensitiveVisibility(sensitiveInput, toggleButton);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Handle events trigger by resizing the screen.\r\n *\r\n * @method handleScreenResizing\r\n */\r\nconst handleScreenResizing = () => {\r\n    if (!isExtraSmall()) {\r\n        const sensitiveInput = document.getElementById(sensitiveElementId);\r\n        if (sensitiveInput) {\r\n            const toggleButton = sensitiveInput.parentNode.querySelector(SELECTORS.BUTTON);\r\n            if (toggleButton) {\r\n                toggleSensitiveVisibility(sensitiveInput, toggleButton, true);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Toggle the sensitive input visibility and its associated icon.\r\n *\r\n * @method toggleSensitiveVisibility\r\n * @param {HTMLInputElement} sensitiveInput The sensitive input element.\r\n * @param {HTMLElement} toggleButton The toggle button.\r\n * @param {boolean} force Force the input back to password type.\r\n */\r\nconst toggleSensitiveVisibility = (sensitiveInput, toggleButton, force = false) => {\r\n    const pendingPromise = new Pending('core/togglesensitive:toggle');\r\n    let type;\r\n    let icon;\r\n    if (force === true) {\r\n        type = 'password';\r\n        icon = PIX.EYE;\r\n    } else {\r\n        type = sensitiveInput.getAttribute('type') === 'password' ? 'text' : 'password';\r\n        icon = sensitiveInput.getAttribute('type') === 'password' ? PIX.EYE_SLASH : PIX.EYE;\r\n    }\r\n    sensitiveInput.setAttribute('type', type);\r\n    Templates.renderPix(icon, 'core').then((icon) => {\r\n        toggleButton.innerHTML = icon;\r\n        pendingPromise.resolve();\r\n        return;\r\n    }).catch(Notification.exception);\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_templates","_pending","_prefetch","_notification","SELECTORS","PIX","sensitiveElementId","smallScreensOnly","_exports","init","elementId","isSmallScreensOnly","arguments","length","undefined","sensitiveInput","document","getElementById","Prefetch","prefetchTemplate","renderSensitiveToggle","registerListenerEvents","Templates","render","smallscreensonly","sensitiveinput","outerHTML","then","html","notifyFieldStructureChanged","id","catch","Notification","exception","addEventListener","handleButtonInteraction","window","handleScreenResizing","event","toggleButton","target","closest","toggleSensitiveVisibility","isExtraSmall","parentNode","querySelector","force","pendingPromise","Pending","type","icon","getAttribute","setAttribute","renderPix","innerHTML","resolve"],"mappings":"yOA2B6C,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;kFAH7CG,WAAAJ,uBAAAI,YACAC,SAAAL,uBAAAK,UACAC,UAAAN,uBAAAM,WACAC,cAAAP,uBAAAO,eAGA,MAAMC,iBACM,wBAINC,QACG,SADHA,cAES,SAGf,IAAIC,mBACAC,iBAsBFC,SAAAC,KAbkB,SAACC,WAA0C,IAA/BC,mBAAkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAC9C,MAAMG,eAAiBC,SAASC,eAAeP,WACxB,OAAnBK,iBAIJT,mBAAqBI,UACrBH,iBAAmBI,mBACnBO,UAAAA,QAASC,iBAAiB,oCAE1BC,sBAAsBL,gBAEtBM,2BASJ,MAAMD,sBAAyBL,iBAC3BO,WAAAA,QAAUC,OACN,mCACA,CACIC,iBAAkBjB,iBAClBkB,eAAgBV,eAAeW,YAErCC,MAAMC,OACJb,eAAeW,UAAYE,MAE3B,EAAAC,QAA2BA,6BAACd,eAAee,GAC3C,IACDC,MAAMC,cAAYjC,QAACkC,UAAU,EAQ9BZ,uBAAyBA,KAE3BL,SAASkB,iBAAiB,QAASC,yBAE/B5B,kBACA6B,OAAOF,iBAAiB,SAAUG,qBACtC,EASEF,wBAA2BG,QAC7B,MAAMC,aAAeD,MAAME,OAAOC,QAAQrC,kBAC1C,GAAImC,aAAc,CACd,MAAMxB,eAAiBC,SAASC,eAAeX,oBAC3CS,gBACA2B,0BAA0B3B,eAAgBwB,aAElD,GAQEF,qBAAuBA,KACzB,KAAK,EAAAM,aAAYA,gBAAI,CACjB,MAAM5B,eAAiBC,SAASC,eAAeX,oBAC/C,GAAIS,eAAgB,CAChB,MAAMwB,aAAexB,eAAe6B,WAAWC,cAAczC,kBACzDmC,cACAG,0BAA0B3B,eAAgBwB,cAAc,EAEhE,CACJ,GAWEG,0BAA4B,SAAC3B,eAAgBwB,cAAgC,IAAlBO,MAAKlC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAClE,MAAMmC,eAAiB,IAAIC,SAAOjD,QAAC,+BACnC,IAAIkD,KACAC,MACU,IAAVJ,OACAG,KAAO,WACPC,KAAO7C,UAEP4C,KAA+C,aAAxClC,eAAeoC,aAAa,QAAyB,OAAS,WACrED,KAA+C,aAAxCnC,eAAeoC,aAAa,QAAyB9C,cAAgBA,SAEhFU,eAAeqC,aAAa,OAAQH,MACpC3B,WAASvB,QAACsD,UAAUH,KAAM,QAAQvB,MAAMuB,OACpCX,aAAae,UAAYJ,KACzBH,eAAeQ,SACf,IACDxB,MAAMC,cAAYjC,QAACkC,WACxB"}