{"version":3,"file":"tree.min.js","sources":["../src/tree.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Implement an accessible aria tree widget, from a nested unordered list.\r\n * Based on http://oaa-accessibility.org/example/41/.\r\n *\r\n * @module     core/tree\r\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery'], function($) {\r\n    // Private variables and functions.\r\n    var SELECTORS = {\r\n        ITEM: '[role=treeitem]',\r\n        GROUP: '[role=treeitem]:has([role=group]), [role=treeitem][aria-owns], [role=treeitem][data-requires-ajax=true]',\r\n        CLOSED_GROUP: '[role=treeitem]:has([role=group])[aria-expanded=false], [role=treeitem][aria-owns][aria-expanded=false], ' +\r\n                 '[role=treeitem][data-requires-ajax=true][aria-expanded=false]',\r\n        FIRST_ITEM: '[role=treeitem]:first',\r\n        VISIBLE_ITEM: '[role=treeitem]:visible',\r\n        UNLOADED_AJAX_ITEM: '[role=treeitem][data-requires-ajax=true][data-loaded=false][aria-expanded=true]'\r\n    };\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {String} selector\r\n     * @param {function} selectCallback Called when the active node is changed.\r\n     */\r\n    var Tree = function(selector, selectCallback) {\r\n        this.treeRoot = $(selector);\r\n\r\n        this.treeRoot.data('activeItem', null);\r\n        this.selectCallback = selectCallback;\r\n        this.keys = {\r\n            tab:      9,\r\n            enter:    13,\r\n            space:    32,\r\n            pageup:   33,\r\n            pagedown: 34,\r\n            end:      35,\r\n            home:     36,\r\n            left:     37,\r\n            up:       38,\r\n            right:    39,\r\n            down:     40,\r\n            asterisk: 106\r\n        };\r\n\r\n        // Apply the standard default initialisation for all nodes, starting with the tree root.\r\n        this.initialiseNodes(this.treeRoot);\r\n        // Make the first item the active item for the tree so that it is added to the tab order.\r\n        this.setActiveItem(this.treeRoot.find(SELECTORS.FIRST_ITEM));\r\n        // Create the cache of the visible items.\r\n        this.refreshVisibleItemsCache();\r\n        // Create the event handlers for the tree.\r\n        this.bindEventHandlers();\r\n    };\r\n\r\n    Tree.prototype.registerEnterCallback = function(callback) {\r\n        this.enterCallback = callback;\r\n    };\r\n\r\n    /**\r\n     * Find all visible tree items and save a cache of them on the tree object.\r\n     *\r\n     * @method refreshVisibleItemsCache\r\n     */\r\n    Tree.prototype.refreshVisibleItemsCache = function() {\r\n        this.treeRoot.data('visibleItems', this.treeRoot.find(SELECTORS.VISIBLE_ITEM));\r\n    };\r\n\r\n    /**\r\n     * Get all visible tree items.\r\n     *\r\n     * @method getVisibleItems\r\n     * @return {Object} visible items\r\n     */\r\n    Tree.prototype.getVisibleItems = function() {\r\n        return this.treeRoot.data('visibleItems');\r\n    };\r\n\r\n    /**\r\n     * Mark the given item as active within the tree and fire the callback for when the active item is set.\r\n     *\r\n     * @method setActiveItem\r\n     * @param {object} item jquery object representing an item on the tree.\r\n     */\r\n    Tree.prototype.setActiveItem = function(item) {\r\n        var currentActive = this.treeRoot.data('activeItem');\r\n        if (item === currentActive) {\r\n            return;\r\n        }\r\n\r\n        // Remove previous active from tab order.\r\n        if (currentActive) {\r\n            currentActive.attr('tabindex', '-1');\r\n            currentActive.attr('aria-selected', 'false');\r\n        }\r\n        item.attr('tabindex', '0');\r\n        item.attr('aria-selected', 'true');\r\n\r\n        // Set the new active item.\r\n        this.treeRoot.data('activeItem', item);\r\n\r\n        if (typeof this.selectCallback === 'function') {\r\n            this.selectCallback(item);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Determines if the given item is a group item (contains child tree items) in the tree.\r\n     *\r\n     * @method isGroupItem\r\n     * @param {object} item jquery object representing an item on the tree.\r\n     * @returns {bool}\r\n     */\r\n    Tree.prototype.isGroupItem = function(item) {\r\n        return item.is(SELECTORS.GROUP);\r\n    };\r\n\r\n    /**\r\n     * Determines if the given item is a group item (contains child tree items) in the tree.\r\n     *\r\n     * @method isGroupItem\r\n     * @param {object} item jquery object representing an item on the tree.\r\n     * @returns {bool}\r\n     */\r\n    Tree.prototype.getGroupFromItem = function(item) {\r\n        var ariaowns = this.treeRoot.find('#' + item.attr('aria-owns'));\r\n        var plain = item.children('[role=group]');\r\n        if (ariaowns.length > plain.length) {\r\n            return ariaowns;\r\n        } else {\r\n            return plain;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Determines if the given group item (contains child tree items) is collapsed.\r\n     *\r\n     * @method isGroupCollapsed\r\n     * @param {object} item jquery object representing a group item on the tree.\r\n     * @returns {bool}\r\n     */\r\n    Tree.prototype.isGroupCollapsed = function(item) {\r\n        return item.attr('aria-expanded') === 'false';\r\n    };\r\n\r\n    /**\r\n     * Determines if the given group item (contains child tree items) can be collapsed.\r\n     *\r\n     * @method isGroupCollapsible\r\n     * @param {object} item jquery object representing a group item on the tree.\r\n     * @returns {bool}\r\n     */\r\n    Tree.prototype.isGroupCollapsible = function(item) {\r\n        return item.attr('data-collapsible') !== 'false';\r\n    };\r\n\r\n    /**\r\n     * Performs the tree initialisation for all child items from the given node,\r\n     * such as removing everything from the tab order and setting aria selected\r\n     * on items.\r\n     *\r\n     * @method initialiseNodes\r\n     * @param {object} node jquery object representing a node.\r\n     */\r\n    Tree.prototype.initialiseNodes = function(node) {\r\n        this.removeAllFromTabOrder(node);\r\n        this.setAriaSelectedFalseOnItems(node);\r\n\r\n        // Get all ajax nodes that have been rendered as expanded but haven't loaded the child items yet.\r\n        var thisTree = this;\r\n        node.find(SELECTORS.UNLOADED_AJAX_ITEM).each(function() {\r\n            var unloadedNode = $(this);\r\n            // Collapse and then expand to trigger the ajax loading.\r\n            thisTree.collapseGroup(unloadedNode);\r\n            thisTree.expandGroup(unloadedNode);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Removes all child DOM elements of the given node from the tab order.\r\n     *\r\n     * @method removeAllFromTabOrder\r\n     * @param {object} node jquery object representing a node.\r\n     */\r\n    Tree.prototype.removeAllFromTabOrder = function(node) {\r\n        node.find('*').attr('tabindex', '-1');\r\n        this.getGroupFromItem($(node)).find('*').attr('tabindex', '-1');\r\n    };\r\n\r\n    /**\r\n     * Find all child tree items from the given node and set the aria selected attribute to false.\r\n     *\r\n     * @method setAriaSelectedFalseOnItems\r\n     * @param {object} node jquery object representing a node.\r\n     */\r\n    Tree.prototype.setAriaSelectedFalseOnItems = function(node) {\r\n        node.find(SELECTORS.ITEM).attr('aria-selected', 'false');\r\n    };\r\n\r\n    /**\r\n     * Expand all group nodes within the tree.\r\n     *\r\n     * @method expandAllGroups\r\n     */\r\n    Tree.prototype.expandAllGroups = function() {\r\n        var thisTree = this;\r\n\r\n        this.treeRoot.find(SELECTORS.CLOSED_GROUP).each(function() {\r\n            var groupNode = $(this);\r\n\r\n            thisTree.expandGroup($(this)).done(function() {\r\n                thisTree.expandAllChildGroups(groupNode);\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Find all child group nodes from the given node and expand them.\r\n     *\r\n     * @method expandAllChildGroups\r\n     * @param {Object} item is the jquery id of the group.\r\n     */\r\n    Tree.prototype.expandAllChildGroups = function(item) {\r\n        var thisTree = this;\r\n\r\n        this.getGroupFromItem(item).find(SELECTORS.CLOSED_GROUP).each(function() {\r\n            var groupNode = $(this);\r\n\r\n            thisTree.expandGroup($(this)).done(function() {\r\n                thisTree.expandAllChildGroups(groupNode);\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Expand a collapsed group.\r\n     *\r\n     * Handles expanding nodes that are ajax loaded (marked with a data-requires-ajax attribute).\r\n     *\r\n     * @method expandGroup\r\n     * @param {Object} item is the jquery id of the parent item of the group.\r\n     * @return {Object} a promise that is resolved when the group has been expanded.\r\n     */\r\n    Tree.prototype.expandGroup = function(item) {\r\n        var promise = $.Deferred();\r\n        // Ignore nodes that are explicitly maked as not expandable or are already expanded.\r\n        if (item.attr('data-expandable') !== 'false' && this.isGroupCollapsed(item)) {\r\n            // If this node requires ajax load and we haven't already loaded it.\r\n            if (item.attr('data-requires-ajax') === 'true' && item.attr('data-loaded') !== 'true') {\r\n                item.attr('data-loaded', false);\r\n                // Get the closes ajax loading module specificed in the tree.\r\n                var moduleName = item.closest('[data-ajax-loader]').attr('data-ajax-loader');\r\n                var thisTree = this;\r\n                // Flag this node as loading.\r\n                const p = item.find('p');\r\n                p.addClass('loading');\r\n                // Require the ajax module (must be AMD) and try to load the items.\r\n                require([moduleName], function(loader) {\r\n                    // All ajax module must implement a \"load\" method.\r\n                    loader.load(item).done(function() {\r\n                        item.attr('data-loaded', true);\r\n\r\n                        // Set defaults on the newly constructed part of the tree.\r\n                        thisTree.initialiseNodes(item);\r\n                        thisTree.finishExpandingGroup(item);\r\n                        // Make sure no child elements of the item we just loaded are tabbable.\r\n                        p.removeClass('loading');\r\n                        promise.resolve();\r\n                    });\r\n                });\r\n            } else {\r\n                this.finishExpandingGroup(item);\r\n                promise.resolve();\r\n            }\r\n        } else {\r\n            promise.resolve();\r\n        }\r\n        return promise;\r\n    };\r\n\r\n    /**\r\n     * Perform the necessary DOM changes to display a group item.\r\n     *\r\n     * @method finishExpandingGroup\r\n     * @param {Object} item is the jquery id of the parent item of the group.\r\n     */\r\n    Tree.prototype.finishExpandingGroup = function(item) {\r\n        // Expand the group.\r\n        var group = this.getGroupFromItem(item);\r\n        group.removeAttr('aria-hidden');\r\n        item.attr('aria-expanded', 'true');\r\n\r\n        // Update the list of visible items.\r\n        this.refreshVisibleItemsCache();\r\n    };\r\n\r\n    /**\r\n     * Collapse an expanded group.\r\n     *\r\n     * @method collapseGroup\r\n     * @param {Object} item is the jquery id of the parent item of the group.\r\n     */\r\n    Tree.prototype.collapseGroup = function(item) {\r\n        // If the item is not collapsible or already collapsed then do nothing.\r\n        if (!this.isGroupCollapsible(item) || this.isGroupCollapsed(item)) {\r\n            return;\r\n        }\r\n\r\n        // Collapse the group.\r\n        var group = this.getGroupFromItem(item);\r\n        group.attr('aria-hidden', 'true');\r\n        item.attr('aria-expanded', 'false');\r\n\r\n        // Update the list of visible items.\r\n        this.refreshVisibleItemsCache();\r\n    };\r\n\r\n    /**\r\n     * Expand or collapse a group.\r\n     *\r\n     * @method toggleGroup\r\n     * @param {Object} item is the jquery id of the parent item of the group.\r\n     */\r\n    Tree.prototype.toggleGroup = function(item) {\r\n        if (item.attr('aria-expanded') === 'true') {\r\n            this.collapseGroup(item);\r\n        } else {\r\n            this.expandGroup(item);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handle a key down event - ie navigate the tree.\r\n     *\r\n     * @method handleKeyDown\r\n     * @param {Event} e The event.\r\n     */\r\n     // This function should be simplified. In the meantime..\r\n     // eslint-disable-next-line complexity\r\n    Tree.prototype.handleKeyDown = function(e) {\r\n        var item = $(e.target);\r\n        var currentIndex = this.getVisibleItems()?.index(item);\r\n\r\n        if ((e.altKey || e.ctrlKey || e.metaKey) || (e.shiftKey && e.keyCode != this.keys.tab)) {\r\n            // Do nothing.\r\n            return;\r\n        }\r\n\r\n        switch (e.keyCode) {\r\n            case this.keys.home: {\r\n                // Jump to first item in tree.\r\n                this.getVisibleItems().first().focus();\r\n\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n            case this.keys.end: {\r\n                // Jump to last visible item.\r\n                this.getVisibleItems().last().focus();\r\n\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n            case this.keys.enter: {\r\n                var links = item.children('a').length ? item.children('a') : item.children().not(SELECTORS.GROUP).find('a');\r\n                if (links.length) {\r\n                    if (links.first().data('overrides-tree-activation-key-handler')) {\r\n                        // If the link overrides handling of activation keys, let it do so.\r\n                        links.first().triggerHandler(e);\r\n                    } else if (typeof this.enterCallback === 'function') {\r\n                        // Use callback if there is one.\r\n                        this.enterCallback(item);\r\n                    } else {\r\n                        window.location.href = links.first().attr('href');\r\n                    }\r\n                } else if (this.isGroupItem(item)) {\r\n                    this.toggleGroup(item, true);\r\n                }\r\n\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n            case this.keys.space: {\r\n                if (this.isGroupItem(item)) {\r\n                    this.toggleGroup(item, true);\r\n                } else if (item.children('a').length) {\r\n                    var firstLink = item.children('a').first();\r\n\r\n                    if (firstLink.data('overrides-tree-activation-key-handler')) {\r\n                        firstLink.triggerHandler(e);\r\n                    }\r\n                }\r\n\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n            case this.keys.left: {\r\n                var focusParent = function(tree) {\r\n                    // Get the immediate visible parent group item that contains this element.\r\n                    tree.getVisibleItems().filter(function() {\r\n                        return tree.getGroupFromItem($(this)).has(item).length;\r\n                    }).focus();\r\n                };\r\n\r\n                // If this is a group item then collapse it and focus the parent group\r\n                // in accordance with the aria spec.\r\n                if (this.isGroupItem(item)) {\r\n                    if (this.isGroupCollapsed(item)) {\r\n                        focusParent(this);\r\n                    } else {\r\n                        this.collapseGroup(item);\r\n                    }\r\n                } else {\r\n                    focusParent(this);\r\n                }\r\n\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n            case this.keys.right: {\r\n                // If this is a group item then expand it and focus the first child item\r\n                // in accordance with the aria spec.\r\n                if (this.isGroupItem(item)) {\r\n                    if (this.isGroupCollapsed(item)) {\r\n                        this.expandGroup(item);\r\n                    } else {\r\n                        // Move to the first item in the child group.\r\n                        this.getGroupFromItem(item).find(SELECTORS.ITEM).first().focus();\r\n                    }\r\n                }\r\n\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n            case this.keys.up: {\r\n\r\n                if (currentIndex > 0) {\r\n                    var prev = this.getVisibleItems().eq(currentIndex - 1);\r\n\r\n                    prev.focus();\r\n                }\r\n\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n            case this.keys.down: {\r\n\r\n                if (currentIndex < this.getVisibleItems().length - 1) {\r\n                    var next = this.getVisibleItems().eq(currentIndex + 1);\r\n\r\n                    next.focus();\r\n                }\r\n\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n            case this.keys.asterisk: {\r\n                // Expand all groups.\r\n                this.expandAllGroups();\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handle an item click.\r\n     *\r\n     * @param {Event} event the click event\r\n     * @param {jQuery} item the item clicked\r\n     */\r\n    Tree.prototype.handleItemClick = function(event, item) {\r\n        // Update the active item.\r\n        item.focus();\r\n\r\n        // If the item is a group node.\r\n        if (this.isGroupItem(item)) {\r\n            this.toggleGroup(item);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handle a click (select).\r\n     *\r\n     * @method handleClick\r\n     * @param {Event} event The event.\r\n     */\r\n    Tree.prototype.handleClick = function(event) {\r\n        if (event.altKey || event.ctrlKey || event.shiftKey || event.metaKey) {\r\n            // Do nothing.\r\n            return;\r\n        }\r\n\r\n        // Get the closest tree item from the event target.\r\n        var item = $(event.target).closest('[role=\"treeitem\"]');\r\n        if (!item.is(event.currentTarget)) {\r\n            return;\r\n        }\r\n\r\n        this.handleItemClick(event, item);\r\n    };\r\n\r\n    /**\r\n     * Handle a focus event.\r\n     *\r\n     * @method handleFocus\r\n     * @param {Event} e The event.\r\n     */\r\n    Tree.prototype.handleFocus = function(e) {\r\n        this.setActiveItem($(e.target));\r\n    };\r\n\r\n    /**\r\n     * Bind the event listeners we require.\r\n     *\r\n     * @method bindEventHandlers\r\n     */\r\n    Tree.prototype.bindEventHandlers = function() {\r\n        // Bind event handlers to the tree items. Use event delegates to allow\r\n        // for dynamically loaded parts of the tree.\r\n        this.treeRoot.on({\r\n            click: this.handleClick.bind(this),\r\n            keydown: this.handleKeyDown.bind(this),\r\n            focus: this.handleFocus.bind(this),\r\n        }, SELECTORS.ITEM);\r\n    };\r\n\r\n    return /** @alias module:core/tree */ Tree;\r\n});\r\n"],"names":["define","$","SELECTORS","Tree","selector","selectCallback","this","treeRoot","data","keys","tab","enter","space","pageup","pagedown","end","home","left","up","right","down","asterisk","initialiseNodes","setActiveItem","find","refreshVisibleItemsCache","bindEventHandlers","prototype","registerEnterCallback","callback","enterCallback","getVisibleItems","item","currentActive","attr","isGroupItem","is","getGroupFromItem","ariaowns","plain","children","length","isGroupCollapsed","isGroupCollapsible","node","removeAllFromTabOrder","setAriaSelectedFalseOnItems","thisTree","each","unloadedNode","collapseGroup","expandGroup","expandAllGroups","groupNode","done","expandAllChildGroups","promise","Deferred","moduleName","closest","p","addClass","require","loader","load","finishExpandingGroup","removeClass","resolve","removeAttr","toggleGroup","handleKeyDown","e","target","currentIndex","index","altKey","ctrlKey","metaKey","shiftKey","keyCode","first","focus","preventDefault","last","links","not","triggerHandler","window","location","href","firstLink","focusParent","tree","filter","has","eq","handleItemClick","event","handleClick","currentTarget","handleFocus","on","click","bind","keydown"],"mappings":"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"}