{"version":3,"file":"datafilter.min.js","sources":["../src/datafilter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Data filter management.\r\n *\r\n * @module     core/datafilter\r\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport CourseFilter from 'core/datafilter/filtertypes/courseid';\r\nimport GenericFilter from 'core/datafilter/filtertype';\r\nimport {getStrings} from 'core/str';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\nimport Selectors from 'core/datafilter/selectors';\r\nimport Templates from 'core/templates';\r\nimport CustomEvents from 'core/custom_interaction_events';\r\nimport jQuery from 'jquery';\r\n\r\nexport default class {\r\n\r\n    /**\r\n     * Initialise the filter on the element with the given filterSet and callback.\r\n     *\r\n     * @param {HTMLElement} filterSet The filter element.\r\n     * @param {Function} applyCallback Callback function when updateTableFromFilter\r\n     */\r\n    constructor(filterSet, applyCallback) {\r\n\r\n        this.filterSet = filterSet;\r\n        this.applyCallback = applyCallback;\r\n        // Keep a reference to all of the active filters.\r\n        this.activeFilters = {\r\n            courseid: new CourseFilter('courseid', filterSet),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initialise event listeners to the filter.\r\n     */\r\n    init() {\r\n        // Add listeners for the main actions.\r\n        this.filterSet.querySelector(Selectors.filterset.region).addEventListener('click', e => {\r\n            if (e.target.closest(Selectors.filterset.actions.addRow)) {\r\n                e.preventDefault();\r\n\r\n                this.addFilterRow();\r\n            }\r\n\r\n            if (e.target.closest(Selectors.filterset.actions.applyFilters)) {\r\n                e.preventDefault();\r\n\r\n                this.updateTableFromFilter();\r\n            }\r\n\r\n            if (e.target.closest(Selectors.filterset.actions.resetFilters)) {\r\n                e.preventDefault();\r\n\r\n                this.removeAllFilters();\r\n            }\r\n        });\r\n\r\n        // Add the listener to remove a single filter.\r\n        this.filterSet.querySelector(Selectors.filterset.regions.filterlist).addEventListener('click', e => {\r\n            if (e.target.closest(Selectors.filter.actions.remove)) {\r\n                e.preventDefault();\r\n\r\n                this.removeOrReplaceFilterRow(e.target.closest(Selectors.filter.region), true);\r\n            }\r\n        });\r\n\r\n        // Add listeners for the filter type selection.\r\n        let filterRegion = jQuery(this.getFilterRegion());\r\n        CustomEvents.define(filterRegion, [CustomEvents.events.accessibleChange]);\r\n        filterRegion.on(CustomEvents.events.accessibleChange, e => {\r\n            const typeField = e.target.closest(Selectors.filter.fields.type);\r\n            if (typeField && typeField.value) {\r\n                const filter = e.target.closest(Selectors.filter.region);\r\n\r\n                this.addFilter(filter, typeField.value);\r\n            }\r\n        });\r\n\r\n        this.filterSet.querySelector(Selectors.filterset.fields.join).addEventListener('change', e => {\r\n            this.filterSet.dataset.filterverb = e.target.value;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the filter list region.\r\n     *\r\n     * @return {HTMLElement}\r\n     */\r\n    getFilterRegion() {\r\n        return this.filterSet.querySelector(Selectors.filterset.regions.filterlist);\r\n    }\r\n\r\n    /**\r\n     * Add a filter row.\r\n     *\r\n     * @param {Object} filterdata Optional, data for adding for row with an existing filter.\r\n     * @return {Promise}\r\n     */\r\n    addFilterRow(filterdata = {}) {\r\n        const pendingPromise = new Pending('core/datafilter:addFilterRow');\r\n        const rownum = filterdata.rownum ?? 1 + this.getFilterRegion().querySelectorAll(Selectors.filter.region).length;\r\n        return Templates.renderForPromise('core/datafilter/filter_row', {\"rownumber\": rownum})\r\n            .then(({html, js}) => {\r\n                const newContentNodes = Templates.appendNodeContents(this.getFilterRegion(), html, js);\r\n\r\n                return newContentNodes;\r\n            })\r\n            .then(filterRow => {\r\n                // Note: This is a nasty hack.\r\n                // We should try to find a better way of doing this.\r\n                // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\r\n                // it in place.\r\n                const typeList = this.filterSet.querySelector(Selectors.data.typeList);\r\n\r\n                filterRow.forEach(contentNode => {\r\n                    const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\r\n\r\n                    if (contentTypeList) {\r\n                        contentTypeList.innerHTML = typeList.innerHTML;\r\n                    }\r\n                });\r\n\r\n                return filterRow;\r\n            })\r\n            .then(filterRow => {\r\n                this.updateFiltersOptions();\r\n\r\n                return filterRow;\r\n            })\r\n            .then(result => {\r\n                pendingPromise.resolve();\r\n\r\n                // If an existing filter is passed in, add it. Otherwise, leave the row empty.\r\n                if (filterdata.filtertype) {\r\n                    result.forEach(filter => {\r\n                        this.addFilter(filter, filterdata.filtertype, filterdata.values,\r\n                            filterdata.jointype, filterdata.filteroptions);\r\n                    });\r\n                }\r\n                return result;\r\n            })\r\n            .catch(Notification.exception);\r\n    }\r\n\r\n    /**\r\n     * Get the filter data source node fro the specified filter type.\r\n     *\r\n     * @param {String} filterType\r\n     * @return {HTMLElement}\r\n     */\r\n    getFilterDataSource(filterType) {\r\n        const filterDataNode = this.filterSet.querySelector(Selectors.filterset.regions.datasource);\r\n\r\n        return filterDataNode.querySelector(Selectors.data.fields.byName(filterType));\r\n    }\r\n\r\n    /**\r\n     * Add a filter to the list of active filters, performing any necessary setup.\r\n     *\r\n     * @param {HTMLElement} filterRow\r\n     * @param {String} filterType\r\n     * @param {Array} initialFilterValues The initially selected values for the filter\r\n     * @param {String} filterJoin\r\n     * @param {Object} filterOptions\r\n     * @returns {Filter}\r\n     */\r\n    async addFilter(filterRow, filterType, initialFilterValues, filterJoin, filterOptions) {\r\n        // Name the filter on the filter row.\r\n        filterRow.dataset.filterType = filterType;\r\n\r\n        const filterDataNode = this.getFilterDataSource(filterType);\r\n\r\n        // Instantiate the Filter class.\r\n        let Filter = GenericFilter;\r\n        if (filterDataNode.dataset.filterTypeClass) {\r\n            Filter = await import(filterDataNode.dataset.filterTypeClass);\r\n        }\r\n        this.activeFilters[filterType] = new Filter(filterType, this.filterSet, initialFilterValues, filterOptions);\r\n\r\n        // Disable the select.\r\n        const typeField = filterRow.querySelector(Selectors.filter.fields.type);\r\n        typeField.value = filterType;\r\n        typeField.disabled = 'disabled';\r\n        // Update the join list.\r\n        this.updateJoinList(JSON.parse(filterDataNode.dataset.joinList), filterRow);\r\n        const joinField = filterRow.querySelector(Selectors.filter.fields.join);\r\n        if (!isNaN(filterJoin)) {\r\n            joinField.value = filterJoin;\r\n        }\r\n        // Update the list of available filter types.\r\n        this.updateFiltersOptions();\r\n\r\n        return this.activeFilters[filterType];\r\n    }\r\n\r\n    /**\r\n     * Get the registered filter class for the named filter.\r\n     *\r\n     * @param {String} name\r\n     * @return {Object} See the Filter class.\r\n     */\r\n    getFilterObject(name) {\r\n        return this.activeFilters[name];\r\n    }\r\n\r\n    /**\r\n     * Remove or replace the specified filter row and associated class, ensuring that if there is only one filter row,\r\n     * that it is replaced instead of being removed.\r\n     *\r\n     * @param {HTMLElement} filterRow\r\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\r\n     */\r\n    removeOrReplaceFilterRow(filterRow, refreshContent) {\r\n        const filterCount = this.getFilterRegion().querySelectorAll(Selectors.filter.region).length;\r\n        if (filterCount === 1) {\r\n            this.replaceFilterRow(filterRow, refreshContent);\r\n        } else {\r\n            this.removeFilterRow(filterRow, refreshContent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove the specified filter row and associated class.\r\n     *\r\n     * @param {HTMLElement} filterRow\r\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\r\n     */\r\n    async removeFilterRow(filterRow, refreshContent = true) {\r\n        if (filterRow.querySelector(Selectors.data.required)) {\r\n            return;\r\n        }\r\n        const filterType = filterRow.querySelector(Selectors.filter.fields.type);\r\n        const hasFilterValue = !!filterType.value;\r\n\r\n        // Remove the filter object.\r\n        this.removeFilterObject(filterRow.dataset.filterType);\r\n\r\n        // Remove the actual filter HTML.\r\n        filterRow.remove();\r\n\r\n        // Update the list of available filter types.\r\n        this.updateFiltersOptions();\r\n\r\n        if (hasFilterValue && refreshContent) {\r\n            // Refresh the table if there was any content in this row.\r\n            this.updateTableFromFilter();\r\n        }\r\n\r\n        // Update filter fieldset legends.\r\n        const filterLegends = await this.getAvailableFilterLegends();\r\n\r\n        this.getFilterRegion().querySelectorAll(Selectors.filter.region).forEach((filterRow, index) => {\r\n            filterRow.querySelector('legend').innerText = filterLegends[index];\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Replace the specified filter row with a new one.\r\n     *\r\n     * @param {HTMLElement} filterRow\r\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\r\n     * @param {Number} rowNum The number used to label the filter fieldset legend (eg Row 1). Defaults to 1 (the first filter).\r\n     * @return {Promise}\r\n     */\r\n    replaceFilterRow(filterRow, refreshContent = true, rowNum = 1) {\r\n        if (filterRow.querySelector(Selectors.data.required)) {\r\n            return;\r\n        }\r\n        // Remove the filter object.\r\n        this.removeFilterObject(filterRow.dataset.filterType);\r\n\r\n        return Templates.renderForPromise('core/datafilter/filter_row', {\"rownumber\": rowNum})\r\n            .then(({html, js}) => {\r\n                const newContentNodes = Templates.replaceNode(filterRow, html, js);\r\n\r\n                return newContentNodes;\r\n            })\r\n            .then(filterRow => {\r\n                // Note: This is a nasty hack.\r\n                // We should try to find a better way of doing this.\r\n                // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\r\n                // it in place.\r\n                const typeList = this.filterSet.querySelector(Selectors.data.typeList);\r\n\r\n                filterRow.forEach(contentNode => {\r\n                    const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\r\n\r\n                    if (contentTypeList) {\r\n                        contentTypeList.innerHTML = typeList.innerHTML;\r\n                    }\r\n                });\r\n\r\n                return filterRow;\r\n            })\r\n            .then(filterRow => {\r\n                this.updateFiltersOptions();\r\n\r\n                return filterRow;\r\n            })\r\n            .then(filterRow => {\r\n                // Refresh the table.\r\n                if (refreshContent) {\r\n                    return this.updateTableFromFilter();\r\n                } else {\r\n                    return filterRow;\r\n                }\r\n            })\r\n            .catch(Notification.exception);\r\n    }\r\n\r\n    /**\r\n     * Remove the Filter Object from the register.\r\n     *\r\n     * @param {string} filterName The name of the filter to be removed\r\n     */\r\n    removeFilterObject(filterName) {\r\n        if (filterName) {\r\n            const filter = this.getFilterObject(filterName);\r\n            if (filter) {\r\n                filter.tearDown();\r\n\r\n                // Remove from the list of active filters.\r\n                delete this.activeFilters[filterName];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove all filters.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    removeAllFilters() {\r\n        const filters = this.getFilterRegion().querySelectorAll(Selectors.filter.region);\r\n        filters.forEach(filterRow => this.removeOrReplaceFilterRow(filterRow, false));\r\n\r\n        // Refresh the table.\r\n        return this.updateTableFromFilter();\r\n    }\r\n\r\n    /**\r\n     * Remove any empty filters.\r\n     */\r\n    removeEmptyFilters() {\r\n        const filters = this.getFilterRegion().querySelectorAll(Selectors.filter.region);\r\n        filters.forEach(filterRow => {\r\n            const filterType = filterRow.querySelector(Selectors.filter.fields.type);\r\n            if (!filterType.value) {\r\n                this.removeOrReplaceFilterRow(filterRow, false);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update the list of filter types to filter out those already selected.\r\n     */\r\n    updateFiltersOptions() {\r\n        const filters = this.getFilterRegion().querySelectorAll(Selectors.filter.region);\r\n        filters.forEach(filterRow => {\r\n            const options = filterRow.querySelectorAll(Selectors.filter.fields.type + ' option');\r\n            options.forEach(option => {\r\n                if (option.value === filterRow.dataset.filterType) {\r\n                    option.classList.remove('hidden');\r\n                    option.disabled = false;\r\n                } else if (this.activeFilters[option.value]) {\r\n                    option.classList.add('hidden');\r\n                    option.disabled = true;\r\n                } else {\r\n                    option.classList.remove('hidden');\r\n                    option.disabled = false;\r\n                }\r\n            });\r\n        });\r\n\r\n        // Configure the state of the \"Add row\" button.\r\n        // This button is disabled when there is a filter row available for each condition.\r\n        const addRowButton = this.filterSet.querySelector(Selectors.filterset.actions.addRow);\r\n        const filterDataNode = this.filterSet.querySelectorAll(Selectors.data.fields.all);\r\n        if (filterDataNode.length <= filters.length) {\r\n            addRowButton.setAttribute('disabled', 'disabled');\r\n        } else {\r\n            addRowButton.removeAttribute('disabled');\r\n        }\r\n\r\n        if (filters.length === 1) {\r\n            this.filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.add('hidden');\r\n            this.filterSet.querySelector(Selectors.filterset.fields.join).value = 2;\r\n            this.filterSet.dataset.filterverb = 2;\r\n        } else {\r\n            this.filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.remove('hidden');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the Dynamic table based upon the current filter.\r\n     */\r\n    updateTableFromFilter() {\r\n        const pendingPromise = new Pending('core/datafilter:updateTableFromFilter');\r\n\r\n        const filters = {};\r\n        Object.values(this.activeFilters).forEach(filter => {\r\n            filters[filter.filterValue.name] = filter.filterValue;\r\n        });\r\n\r\n        if (this.applyCallback) {\r\n            this.applyCallback(filters, pendingPromise);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch the strings used to populate the fieldset legends for the maximum number of filters possible.\r\n     *\r\n     * @return {array}\r\n     */\r\n    async getAvailableFilterLegends() {\r\n        const maxFilters = document.querySelector(Selectors.data.typeListSelect).length - 1;\r\n        let requests = [];\r\n\r\n        [...Array(maxFilters)].forEach((_, rowIndex) => {\r\n            requests.push({\r\n                \"key\": \"filterrowlegend\",\r\n                \"component\": \"core\",\r\n                // Add 1 since rows begin at 1 (index begins at zero).\r\n                \"param\": rowIndex + 1\r\n            });\r\n        });\r\n\r\n        const legendStrings = await getStrings(requests)\r\n            .then(fetchedStrings => {\r\n                return fetchedStrings;\r\n            })\r\n            .catch(Notification.exception);\r\n\r\n        return legendStrings;\r\n    }\r\n\r\n    /**\r\n     * Update the list of join types for a filter.\r\n     *\r\n     * This will update the list of join types based on the allowed types defined for a filter.\r\n     * If only one type is allowed, the list will be hidden.\r\n     *\r\n     * @param {Array} filterJoinList Array of join types, a subset of the regularJoinList array in this function.\r\n     * @param {Element} filterRow The row being updated.\r\n     */\r\n    updateJoinList(filterJoinList, filterRow) {\r\n        const regularJoinList = [0, 1, 2];\r\n        // If a join list was specified for this filter, find the default join list and disable the options that are not allowed\r\n        // for this filter.\r\n        if (filterJoinList.length !== 0) {\r\n            const joinField = filterRow.querySelector(Selectors.filter.fields.join);\r\n            // Check each option from the default list, and disable the option in this filter row if it is not allowed\r\n            // for this filter.\r\n            regularJoinList.forEach((join) => {\r\n                if (!filterJoinList.includes(join)) {\r\n                    joinField.options[join].classList.add('hidden');\r\n                    joinField.options[join].disabled = true;\r\n                }\r\n            });\r\n            // Now remove the disabled options, and hide the select list of there is only one option left.\r\n            joinField.options.forEach((element, index) => {\r\n                if (element.disabled) {\r\n                    joinField.options[index] = null;\r\n                }\r\n            });\r\n            if (joinField.options.length === 1) {\r\n                joinField.hidden = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"names":["_courseid","_interopRequireDefault","_filtertype","_notification","_pending","_selectors","_templates","_custom_interaction_events","_jquery","_systemImportTransformerGlobalIdentifier","window","self","global","e","__esModule","default","_exports","constructor","filterSet","applyCallback","this","activeFilters","courseid","CourseFilter","init","querySelector","Selectors","filterset","region","addEventListener","target","closest","actions","addRow","preventDefault","addFilterRow","applyFilters","updateTableFromFilter","resetFilters","removeAllFilters","regions","filterlist","filter","remove","removeOrReplaceFilterRow","filterRegion","jQuery","getFilterRegion","CustomEvents","define","events","accessibleChange","on","typeField","fields","type","value","addFilter","join","dataset","filterverb","filterdata","arguments","length","undefined","pendingPromise","Pending","rownum","querySelectorAll","Templates","renderForPromise","rownumber","then","_ref","html","js","appendNodeContents","filterRow","typeList","data","forEach","contentNode","contentTypeList","innerHTML","updateFiltersOptions","result","resolve","filtertype","values","jointype","filteroptions","catch","Notification","exception","getFilterDataSource","filterType","datasource","byName","initialFilterValues","filterJoin","filterOptions","filterDataNode","Filter","GenericFilter","filterTypeClass","amd","Promise","reject","require","module","exports","component","loader","disabled","updateJoinList","JSON","parse","joinList","joinField","isNaN","getFilterObject","name","refreshContent","replaceFilterRow","removeFilterRow","required","hasFilterValue","removeFilterObject","filterLegends","getAvailableFilterLegends","index","innerText","rowNum","_ref2","replaceNode","filterName","tearDown","removeEmptyFilters","filters","option","classList","add","addRowButton","all","setAttribute","removeAttribute","filtermatch","Object","filterValue","maxFilters","document","typeListSelect","requests","Array","_","rowIndex","push","key","param","getStrings","fetchedStrings","filterJoinList","regularJoinList","includes","options","element","hidden"],"mappings":"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"}