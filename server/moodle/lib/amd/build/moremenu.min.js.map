{"version":3,"file":"moremenu.min.js","sources":["../src/moremenu.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Moves wrapping navigation items into a more menu.\r\n *\r\n * @module     core/moremenu\r\n * @copyright  2021 Moodle\r\n * @author     Bas Brands <bas@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport $ from 'jquery';\r\nimport menu_navigation from \"core/menu_navigation\";\r\n/**\r\n * Moremenu selectors.\r\n */\r\nconst Selectors = {\r\n    regions: {\r\n        moredropdown: '[data-region=\"moredropdown\"]',\r\n        morebutton: '[data-region=\"morebutton\"]'\r\n    },\r\n    classes: {\r\n        dropdownitem: 'dropdown-item',\r\n        dropdownmoremenu: 'dropdownmoremenu',\r\n        hidden: 'd-none',\r\n        active: 'active',\r\n        nav: 'nav',\r\n        navlink: 'nav-link',\r\n        observed: 'observed',\r\n    },\r\n    attributes: {\r\n        menu: '[role=\"menu\"]',\r\n        dropdowntoggle: '[data-toggle=\"dropdown\"]'\r\n    }\r\n};\r\n\r\nlet isTabListMenu = false;\r\n\r\n/**\r\n * Auto Collapse navigation items that wrap into a dropdown menu.\r\n *\r\n * @param {HTMLElement} menu The navbar container.\r\n */\r\nconst autoCollapse = menu => {\r\n\r\n    const maxHeight = menu.parentNode.offsetHeight + 1;\r\n\r\n    const moreDropdown = menu.querySelector(Selectors.regions.moredropdown);\r\n    const moreButton = menu.querySelector(Selectors.regions.morebutton);\r\n\r\n    // If the menu items wrap and the menu height is larger than the height of the\r\n    // parent then start pushing navlinks into the moreDropdown.\r\n    if (menu.offsetHeight > maxHeight) {\r\n        moreButton.classList.remove(Selectors.classes.hidden);\r\n\r\n        let menuHeight = 0;\r\n        const menuNodes = Array.from(menu.children).reverse();\r\n        menuNodes.forEach(item => {\r\n            if (!item.classList.contains(Selectors.classes.dropdownmoremenu)) {\r\n                // After moving the menu items into the moreDropdown check again\r\n                // if the menu height is still larger then the height of the parent.\r\n                if (menu.offsetHeight > maxHeight) {\r\n                    // Move this node into the more dropdown menu.\r\n                    moveIntoMoreDropdown(menu, item, true);\r\n                } else if (menuHeight > maxHeight) {\r\n                    moveIntoMoreDropdown(menu, item, true);\r\n                    menuHeight = 0;\r\n                }\r\n            } else if (menu.offsetHeight > maxHeight) {\r\n                // Assign menu height to be used to check with menu parent.\r\n                menuHeight = menu.offsetHeight;\r\n            }\r\n        });\r\n    } else {\r\n        // If the menu height is smaller than the height of the parent, then try returning navlinks to the menu.\r\n        if ('children' in moreDropdown) {\r\n            // Iterate through the nodes within the more dropdown menu.\r\n            Array.from(moreDropdown.children).forEach(item => {\r\n                // Don't move the node to the more menu if it is explicitly defined that\r\n                // this node should be displayed in the more dropdown menu at all times.\r\n                if (menu.offsetHeight < maxHeight && item.dataset.forceintomoremenu !== 'true') {\r\n                    const lastNode = moreDropdown.removeChild(item);\r\n                    // Move this node from the more dropdown menu into the main section of the menu.\r\n                    moveOutOfMoreDropdown(menu, lastNode);\r\n                }\r\n            });\r\n            // If there are no more nodes in the more dropdown menu we can hide the moreButton.\r\n            if (Array.from(moreDropdown.children).length === 0) {\r\n                moreButton.classList.add(Selectors.classes.hidden);\r\n            }\r\n        }\r\n\r\n        if (menu.offsetHeight > maxHeight) {\r\n            autoCollapse(menu);\r\n        }\r\n    }\r\n    menu.parentNode.classList.add(Selectors.classes.observed);\r\n};\r\n\r\n/**\r\n * Move a node into the \"more\" dropdown menu.\r\n *\r\n * This method forces a given navigation node to be added and displayed within the \"more\" dropdown menu.\r\n *\r\n * @param {HTMLElement} menu The navbar moremenu.\r\n * @param {HTMLElement} navNode The navigation node.\r\n * @param {boolean} prepend Whether to prepend or append the node to the content in the more dropdown menu.\r\n */\r\nconst moveIntoMoreDropdown = (menu, navNode, prepend = false) => {\r\n    const moreDropdown = menu.querySelector(Selectors.regions.moredropdown);\r\n    const dropdownToggle = menu.querySelector(Selectors.attributes.dropdowntoggle);\r\n\r\n    const navLink = navNode.querySelector('.' + Selectors.classes.navlink);\r\n    // If there are navLinks that contain an active link in the moreDropdown\r\n    // make the dropdownToggle in the moreButton active.\r\n    if (navLink.classList.contains(Selectors.classes.active)) {\r\n        dropdownToggle.classList.add(Selectors.classes.active);\r\n        dropdownToggle.setAttribute('tabindex', '0');\r\n        navLink.setAttribute('tabindex', '-1'); // So that we don't have a single tabbable menu item.\r\n        // Remove aria-selected if the more menu is rendered as a tab list.\r\n        if (isTabListMenu) {\r\n            navLink.removeAttribute('aria-selected');\r\n        }\r\n        navLink.setAttribute('aria-current', 'true');\r\n    }\r\n\r\n    // This will become a menu item instead of a tab.\r\n    navLink.setAttribute('role', 'menuitem');\r\n\r\n    // Change the styling of the navLink to a dropdownitem and push it into\r\n    // the moreDropdown.\r\n    navLink.classList.remove(Selectors.classes.navlink);\r\n    navLink.classList.add(Selectors.classes.dropdownitem);\r\n    if (prepend) {\r\n        moreDropdown.prepend(navNode);\r\n    } else {\r\n        moreDropdown.append(navNode);\r\n    }\r\n};\r\n\r\n/**\r\n * Move a node out of the \"more\" dropdown menu.\r\n *\r\n * This method forces a given node from the \"more\" dropdown menu to be displayed in the main section of the menu.\r\n *\r\n * @param {HTMLElement} menu The navbar moremenu.\r\n * @param {HTMLElement} navNode The navigation node.\r\n */\r\nconst moveOutOfMoreDropdown = (menu, navNode) => {\r\n    const moreButton = menu.querySelector(Selectors.regions.morebutton);\r\n    const dropdownToggle = menu.querySelector(Selectors.attributes.dropdowntoggle);\r\n    const navLink = navNode.querySelector('.' + Selectors.classes.dropdownitem);\r\n\r\n    // If the more menu is rendered as a tab list,\r\n    // this will become a tab instead of a menuitem when moved out of the more menu dropdown.\r\n    if (isTabListMenu) {\r\n        navLink.setAttribute('role', 'tab');\r\n    }\r\n\r\n    // Stop displaying the active state on the dropdownToggle if\r\n    // the active navlink is removed.\r\n    if (navLink.classList.contains(Selectors.classes.active)) {\r\n        dropdownToggle.classList.remove(Selectors.classes.active);\r\n        dropdownToggle.setAttribute('tabindex', '-1');\r\n        navLink.setAttribute('tabindex', '0');\r\n        if (isTabListMenu) {\r\n            // Replace aria selection state when necessary.\r\n            navLink.removeAttribute('aria-current');\r\n            navLink.setAttribute('aria-selected', 'true');\r\n        }\r\n    }\r\n    navLink.classList.remove(Selectors.classes.dropdownitem);\r\n    navLink.classList.add(Selectors.classes.navlink);\r\n    menu.insertBefore(navNode, moreButton);\r\n};\r\n\r\n/**\r\n * Initialise the more menus.\r\n *\r\n * @param {HTMLElement} menu The navbar moremenu.\r\n */\r\nexport default menu => {\r\n    isTabListMenu = menu.getAttribute('role') === 'tablist';\r\n\r\n    // Select the first menu item if there's nothing initially selected.\r\n    const hash = window.location.hash;\r\n    if (!hash) {\r\n        const itemRole = isTabListMenu ? 'tab' : 'menuitem';\r\n        const menuListItem = menu.firstElementChild;\r\n        const roleSelector = `[role=${itemRole}]`;\r\n        const menuItem = menuListItem.querySelector(roleSelector);\r\n        const ariaAttribute = isTabListMenu ? 'aria-selected' : 'aria-current';\r\n        if (!menu.querySelector(`[${ariaAttribute}='true']`)) {\r\n            menuItem.setAttribute(ariaAttribute, 'true');\r\n            menuItem.setAttribute('tabindex', '0');\r\n        }\r\n    }\r\n\r\n    // Pre-populate the \"more\" dropdown menu with navigation nodes which are set to be displayed in this menu\r\n    // by default at all times.\r\n    if ('children' in menu) {\r\n        const moreButton = menu.querySelector(Selectors.regions.morebutton);\r\n        const menuNodes = Array.from(menu.children);\r\n        menuNodes.forEach((item) => {\r\n            if (!item.classList.contains(Selectors.classes.dropdownmoremenu) &&\r\n                    item.dataset.forceintomoremenu === 'true') {\r\n                // Append this node into the more dropdown menu.\r\n                moveIntoMoreDropdown(menu, item, false);\r\n                // After adding the node into the more dropdown menu, make sure that the more dropdown menu button\r\n                // is displayed.\r\n                if (moreButton.classList.contains(Selectors.classes.hidden)) {\r\n                    moreButton.classList.remove(Selectors.classes.hidden);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    // Populate the more dropdown menu with additional nodes if necessary, depending on the current screen size.\r\n    autoCollapse(menu);\r\n    menu_navigation(menu);\r\n\r\n    // When the screen size changes make sure the menu still fits.\r\n    window.addEventListener('resize', () => {\r\n        autoCollapse(menu);\r\n        menu_navigation(menu);\r\n    });\r\n\r\n    const toggledropdown = e => {\r\n        const innerMenu = e.target.parentNode.querySelector(Selectors.attributes.menu);\r\n        if (innerMenu) {\r\n            innerMenu.classList.toggle('show');\r\n        }\r\n        e.stopPropagation();\r\n    };\r\n\r\n    // If there are dropdowns in the MoreMenu, add a new\r\n    // event listener to show the contents on click and prevent the\r\n    // moreMenu from closing.\r\n    $('.' + Selectors.classes.dropdownmoremenu).on('show.bs.dropdown', function() {\r\n        const moreDropdown = menu.querySelector(Selectors.regions.moredropdown);\r\n        moreDropdown.querySelectorAll('.dropdown').forEach((dropdown) => {\r\n            dropdown.removeEventListener('click', toggledropdown, true);\r\n            dropdown.addEventListener('click', toggledropdown, true);\r\n        });\r\n    });\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_jquery","_menu_navigation","Selectors","moredropdown","morebutton","dropdownitem","dropdownmoremenu","hidden","active","nav","navlink","observed","menu","dropdowntoggle","isTabListMenu","autoCollapse","maxHeight","parentNode","offsetHeight","moreDropdown","querySelector","moreButton","classList","remove","menuHeight","Array","from","children","reverse","forEach","item","contains","moveIntoMoreDropdown","dataset","forceintomoremenu","lastNode","removeChild","moveOutOfMoreDropdown","length","add","navNode","prepend","arguments","undefined","dropdownToggle","navLink","setAttribute","removeAttribute","append","insertBefore","_exports","getAttribute","window","location","hash","roleSelector","menuItem","firstElementChild","ariaAttribute","menu_navigation","addEventListener","toggledropdown","innerMenu","target","toggle","stopPropagation","$","on","querySelectorAll","dropdown","removeEventListener"],"mappings":"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"}