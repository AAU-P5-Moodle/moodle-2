{"version":3,"file":"send_resource.min.js","sources":["../../src/moodlenet/send_resource.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A module to handle Share operations of the MoodleNet.\r\n *\r\n * @module     core/moodlenet/send_resource\r\n * @copyright  2023 Huong Nguyen <huongnv13@gmail.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      4.2\r\n */\r\n\r\nimport Config from 'core/config';\r\nimport {addNotification, exception as displayException} from 'core/notification';\r\nimport {getString} from 'core/str';\r\nimport Prefetch from \"core/prefetch\";\r\nimport * as Templates from 'core/templates';\r\nimport {publish} from 'core/pubsub';\r\nimport * as MoodleNetService from 'core/moodlenet/service';\r\nimport SendActivityModal from 'core/moodlenet/send_activity_modal';\r\nimport * as MoodleNetAuthorize from 'core/moodlenet/authorize';\r\nimport MoodleNetEvents from 'core/moodlenet/events';\r\n\r\nconst TYPE_ACTIVITY = \"activity\";\r\nconst TYPE_COURSE = \"course\";\r\nconst TYPE_PARTIAL_COURSE = \"partial\";\r\n\r\nlet listenersRegistered = false;\r\nlet currentModal;\r\nlet siteSupportUrl;\r\nlet issuerId;\r\nlet courseId;\r\nlet resourceId;\r\nlet shareFormat;\r\nlet type;\r\nlet selectedCmIds;\r\n\r\n/**\r\n * Handle send to MoodleNet.\r\n *\r\n * @param {int} issuerId The OAuth 2 issuer ID.\r\n * @param {int} resourceId The resource ID, it can be a course or an activity.\r\n * @param {int} shareFormat The share format.\r\n */\r\nexport const sendToMoodleNet = (issuerId, resourceId, shareFormat) => {\r\n    const $modal = currentModal.getModal();\r\n    const modal = $modal[0];\r\n    modal.querySelector('.modal-header').classList.remove('no-border');\r\n    modal.querySelector('.modal-header').classList.add('no-header-text');\r\n\r\n    currentModal.setBody(Templates.render('core/moodlenet/send_activity_modal_packaging', {}));\r\n    currentModal.hideFooter();\r\n\r\n    let infoPromise;\r\n    if (type === TYPE_ACTIVITY) {\r\n        infoPromise = MoodleNetService.sendActivity(issuerId, resourceId, shareFormat);\r\n    } else if (type === TYPE_COURSE) {\r\n        infoPromise = MoodleNetService.sendCourse(issuerId, resourceId, shareFormat);\r\n    } else if (type === TYPE_PARTIAL_COURSE) {\r\n        if (selectedCmIds.length > 1) {\r\n            infoPromise = MoodleNetService.sendPartialCourse(issuerId, resourceId, selectedCmIds, shareFormat);\r\n        } else {\r\n            infoPromise = MoodleNetService.sendActivity(issuerId, selectedCmIds[0], shareFormat);\r\n        }\r\n    }\r\n    infoPromise.then(async(data) => {\r\n        const status = data.status;\r\n        const resourceUrl = data.resourceurl;\r\n        return responseFromMoodleNet(status, resourceUrl);\r\n    }).catch(displayException);\r\n};\r\n\r\n/**\r\n * Handle response from MoodleNet.\r\n *\r\n * @param {boolean} status Response status. True if successful.\r\n * @param {String} resourceUrl Resource URL.\r\n */\r\nconst responseFromMoodleNet = (status, resourceUrl = '') => {\r\n    const $modal = currentModal.getModal();\r\n    const modal = $modal[0];\r\n    modal.querySelector('.modal-header').classList.add('no-border');\r\n    currentModal.setBody(Templates.render('core/moodlenet/send_activity_modal_done', {\r\n        success: status,\r\n        sitesupporturl: siteSupportUrl,\r\n    }));\r\n\r\n    if (status) {\r\n        currentModal.setFooter(Templates.render('core/moodlenet/send_activity_modal_footer_view', {\r\n            resourceurl: resourceUrl,\r\n        }));\r\n        currentModal.showFooter();\r\n    }\r\n};\r\n\r\n/**\r\n * Render the modal to send resource to MoodleNet.\r\n *\r\n * @param {object} data The data of the resource to be shared.\r\n * @param {array} selectedActivities Selected activities.\r\n */\r\nconst renderModal = async(data, selectedActivities) => {\r\n    if (data.status) {\r\n        siteSupportUrl = data.supportpageurl;\r\n        issuerId = data.issuerid;\r\n        let modalConfig = {\r\n            templateContext: {\r\n                'activitytype': data.type,\r\n                'activityname': data.name,\r\n                'server': data.server,\r\n            }\r\n        };\r\n        if (selectedActivities.length > 0) {\r\n            selectedCmIds = selectedActivities;\r\n        }\r\n        if (selectedActivities.length > 1) {\r\n            modalConfig.templateContext.fullsharing = false;\r\n            modalConfig.templateContext.selectedactivitiesnotice = await getString('moodlenet:sharenoticepartialactivitynumber',\r\n                'moodle', selectedActivities.length);\r\n            modalConfig.templateContext.sharenotice = await getString('moodlenet:sharenoticepartial', 'moodle');\r\n        } else {\r\n            modalConfig.templateContext.fullsharing = true;\r\n            if (type === TYPE_ACTIVITY || (type === TYPE_PARTIAL_COURSE && selectedActivities.length == 1)) {\r\n                modalConfig.templateContext.sharenotice = await getString('moodlenet:sharenoticeactivity', 'moodle');\r\n            } else {\r\n                modalConfig.templateContext.sharenotice = await getString('moodlenet:sharenoticecourse', 'moodle');\r\n            }\r\n        }\r\n\r\n        return SendActivityModal.create(modalConfig);\r\n    } else {\r\n        return addNotification({\r\n            message: data.warnings[0].message,\r\n            type: 'error'\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * Handle modal.\r\n * @param {string} shareActionType Share action type.\r\n * @param {array} selectedActivities Selected activities.\r\n */\r\nexport const handleModal = (shareActionType, selectedActivities = []) => {\r\n    const resourceId = Config.contextInstanceId;\r\n    type = shareActionType;\r\n\r\n    Promise.resolve(type)\r\n        .then((type) => {\r\n            if (type === TYPE_ACTIVITY) {\r\n                return MoodleNetService.getActivityInformation(resourceId);\r\n            } else if (type === TYPE_COURSE) {\r\n                return MoodleNetService.getCourseInformation(resourceId);\r\n            } else if (type === TYPE_PARTIAL_COURSE) {\r\n                if (selectedActivities.length > 1) {\r\n                    // Selected more than one activity.\r\n                    return MoodleNetService.getCourseInformation(resourceId);\r\n                } else {\r\n                    // Select only one activity. Switch to activity mode.\r\n                    return MoodleNetService.getActivityInformation(selectedActivities[0]);\r\n                }\r\n            }\r\n            throw new Error(`Unknown type ${type}`);\r\n        })\r\n        .then((data) => {\r\n            return renderModal(data, selectedActivities);\r\n        })\r\n        .then((modal) => {\r\n            currentModal = modal;\r\n            return currentModal;\r\n        })\r\n        .catch(displayException);\r\n};\r\n\r\n/**\r\n * Register events.\r\n */\r\nconst registerEventListeners = () => {\r\n    document.addEventListener('click', (e) => {\r\n        const shareAction = e.target.closest('[data-action=\"sendtomoodlenet\"]');\r\n        const sendAction = e.target.closest('.moodlenet-action-buttons [data-action=\"share\"]');\r\n        if (shareAction) {\r\n            e.preventDefault();\r\n            type = shareAction.getAttribute('data-type');\r\n            handleModal(shareAction.getAttribute('data-type'));\r\n        }\r\n\r\n        if (sendAction) {\r\n            e.preventDefault();\r\n            publish(MoodleNetEvents.MOODLENET_SHARE_STARTED, {});\r\n            courseId = Config.courseId;\r\n            resourceId = Config.contextInstanceId;\r\n            shareFormat = 0;\r\n            MoodleNetAuthorize.handleAuthorization(issuerId, courseId, resourceId, shareFormat);\r\n        }\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Initialize.\r\n */\r\nexport const init = () => {\r\n    if (!listenersRegistered) {\r\n        Prefetch.prefetchTemplates([\r\n            'core/moodlenet/send_activity_modal_base',\r\n            'core/moodlenet/send_activity_modal_packaging',\r\n            'core/moodlenet/send_activity_modal_done',\r\n            'core/moodlenet/send_activity_modal_footer_view',\r\n            'core/moodlenet/send_activity_modal_footer_share',\r\n        ]);\r\n        registerEventListeners();\r\n        listenersRegistered = true;\r\n    }\r\n};\r\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireDefault","_config","_prefetch","Templates","MoodleNetService","_send_activity_modal","MoodleNetAuthorize","_events","currentModal","siteSupportUrl","issuerId","courseId","resourceId","shareFormat","type","selectedCmIds","listenersRegistered","_exports","sendToMoodleNet","modal","getModal","infoPromise","querySelector","classList","remove","add","setBody","render","hideFooter","sendActivity","sendCourse","length","sendPartialCourse","then","async","status","data","resourceUrl","resourceurl","responseFromMoodleNet","catch","displayException","arguments","undefined","success","sitesupporturl","setFooter","showFooter","handleModal","shareActionType","selectedActivities","Config","contextInstanceId","Promise","resolve","getActivityInformation","getCourseInformation","Error","supportpageurl","issuerid","modalConfig","templateContext","activitytype","activityname","name","server","fullsharing","selectedactivitiesnotice","getString","sharenotice","SendActivityModal","create","addNotification","message","warnings","renderModal","init","Prefetch","prefetchTemplates","document","addEventListener","shareAction","target","closest","sendAction","preventDefault","getAttribute","publish","MoodleNetEvents","MOODLENET_SHARE_STARTED","handleAuthorization"],"mappings":"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"}