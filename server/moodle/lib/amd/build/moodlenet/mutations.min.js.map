{"version":3,"file":"mutations.min.js","sources":["../../src/moodlenet/mutations.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * MoodleNet mutations.\r\n * An instance of this class will be used to add custom mutations to the course editor.\r\n *\r\n * @module     core/moodlenet/mutations\r\n * @copyright  2023 Huong Nguyen <huongnv13@gmail.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      4.3\r\n */\r\n\r\nimport DefaultMutations from 'core_courseformat/local/courseeditor/mutations';\r\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\r\nimport CourseActions from 'core_courseformat/local/content/actions';\r\nimport {subscribe} from 'core/pubsub';\r\nimport {handleModal} from 'core/moodlenet/send_resource';\r\nimport MoodleNetEvents from 'core/moodlenet/events';\r\n\r\nclass MoodleNetMutations extends DefaultMutations {\r\n\r\n    /**\r\n     * Share to MoodleNet.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} cmIds Course module ids.\r\n     */\r\n    shareToMoodleNet = async function(stateManager, cmIds) {\r\n        if (cmIds.length == 0) {\r\n            return;\r\n        }\r\n        this.cmLock(stateManager, cmIds, true);\r\n        handleModal('partial', cmIds);\r\n        this.cmLock(stateManager, cmIds, false);\r\n        subscribe(MoodleNetEvents.MOODLENET_SHARE_STARTED, () => {\r\n            // Only clear the selection if the user starts the sharing.\r\n            this.bulkReset(stateManager);\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * Initialize.\r\n */\r\nexport const init = () => {\r\n    const courseEditor = getCurrentCourseEditor();\r\n    courseEditor.addMutations(new MoodleNetMutations());\r\n    // Add direct mutation content actions.\r\n    CourseActions.addActions({\r\n        cmShareToMoodleNet: 'shareToMoodleNet'\r\n    });\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_mutations","_actions","_events","MoodleNetMutations","DefaultMutations","shareToMoodleNet","async","stateManager","cmIds","length","this","cmLock","handleModal","subscribe","MoodleNetEvents","MOODLENET_SHARE_STARTED","bulkReset","_exports","init","getCurrentCourseEditor","addMutations","CourseActions","addActions","cmShareToMoodleNet"],"mappings":"oUA8BoD,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;;;kFALpDG,WAAAJ,uBAAAI,YAEAC,SAAAL,uBAAAK,UAGAC,QAAAN,uBAAAM,SAEA,MAAMC,2BAA2BC,WAAAA,QAQ7BC,iBAAmBC,eAAeC,aAAcC,OACxB,GAAhBA,MAAMC,SAGVC,KAAKC,OAAOJ,aAAcC,OAAO,IACjC,EAAAI,eAAWA,aAAC,UAAWJ,OACvBE,KAAKC,OAAOJ,aAAcC,OAAO,IACjC,EAAAK,mBAAUC,QAAAA,QAAgBC,yBAAyB,KAE/CL,KAAKM,UAAUT,aAAa,MAetCU,SAAAC,KAPkBA,MACK,EAAAC,cAAAA,0BACRC,aAAa,IAAIjB,oBAE9BkB,SAAatB,QAACuB,WAAW,CACrBC,mBAAoB,oBACtB,CACJ"}