{"version":3,"file":"service.min.js","sources":["../../src/moodlenet/service.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A javascript module to handle MoodleNet ajax actions.\r\n *\r\n * @module     core/moodlenet/service\r\n * @copyright  2023 Huong Nguyen <huongnv13@gmail.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      4.2\r\n */\r\n\r\nimport Ajax from 'core/ajax';\r\n\r\n/**\r\n * Get the activity information by course module id.\r\n *\r\n * @param {Integer} cmId The course module id.\r\n * @return {promise}\r\n */\r\nexport const getActivityInformation = (cmId) => {\r\n    const request = {\r\n        methodname: 'core_moodlenet_get_share_info_activity',\r\n        args: {\r\n            cmid: cmId\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n\r\n/**\r\n * Get the course information by course module id.\r\n *\r\n * @param {Integer} courseID The course id.\r\n * @return {promise}\r\n */\r\nexport const getCourseInformation = (courseID) => {\r\n    const request = {\r\n        methodname: 'core_moodlenet_get_shared_course_info',\r\n        args: {\r\n            courseid: courseID\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Send the course to MoodleNet.\r\n *\r\n * @param {Integer} issuerId The OAuth 2 issuer ID.\r\n * @param {Integer} courseId The course ID.\r\n * @param {Integer} shareFormat The share format.\r\n * @return {promise}\r\n */\r\nexport const sendCourse = (issuerId, courseId, shareFormat) => {\r\n    const request = {\r\n        methodname: 'core_moodlenet_send_course',\r\n        args: {\r\n            issuerid: issuerId,\r\n            courseid: courseId,\r\n            shareformat: shareFormat,\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Send the activity to Moodlenet.\r\n *\r\n * @param {Integer} issuerId The OAuth 2 issuer ID.\r\n * @param {Integer} cmId The course module ID.\r\n * @param {Integer} shareFormat The share format.\r\n * @return {promise}\r\n */\r\nexport const sendActivity = (issuerId, cmId, shareFormat) => {\r\n    const request = {\r\n        methodname: 'core_moodlenet_send_activity',\r\n        args: {\r\n            issuerid: issuerId,\r\n            cmid: cmId,\r\n            shareformat: shareFormat,\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Send the selected activities in a course to MoodleNet.\r\n *\r\n * @param {Integer} issuerId The OAuth 2 issuer ID.\r\n * @param {Integer} courseId The course ID.\r\n * @param {array} selectedCmIds Course module IDs in the course.\r\n * @param {Integer} shareFormat The share format.\r\n * @return {promise}\r\n */\r\nexport const sendPartialCourse = (issuerId, courseId, selectedCmIds, shareFormat) => {\r\n    const request = {\r\n        methodname: 'core_moodlenet_send_course',\r\n        args: {\r\n            issuerid: issuerId,\r\n            courseid: courseId,\r\n            shareformat: shareFormat,\r\n            cmids: selectedCmIds,\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Check if the user is already authorized with MoodleNet.\r\n *\r\n * @param {Integer} issuerId The OAuth 2 issuer ID.\r\n * @param {Integer} courseId The course ID.\r\n * @return {promise}\r\n */\r\nexport const authorizationCheck = (issuerId, courseId) => {\r\n    const request = {\r\n        methodname: 'core_moodlenet_auth_check',\r\n        args: {\r\n            issuerid: issuerId,\r\n            courseid: courseId,\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n"],"names":["e","_ajax","__esModule","default","_exports","getActivityInformation","cmId","request","methodname","args","cmid","Ajax","call","getCourseInformation","courseID","courseid","sendCourse","issuerId","courseId","shareFormat","issuerid","shareformat","sendActivity","sendPartialCourse","selectedCmIds","cmids","authorizationCheck"],"mappings":"kFAwB6B,IAAAA;;;;;;;;mOAA7BC,OAA6BD,EAA7BC,QAA6BD,EAAAE,WAAAF,EAAAG,CAAAA,QAAAH,GAiB3BI,SAAAC,uBATqCC,OACnC,MAAMC,QAAU,CACZC,WAAY,yCACZC,KAAM,CACFC,KAAMJ,OAId,OAAOK,MAAAA,QAAKC,KAAK,CAACL,UAAU,EAAE,EAmBhCH,SAAAS,qBATmCC,WACjC,MAAMP,QAAU,CACZC,WAAY,wCACZC,KAAM,CACFM,SAAUD,WAIlB,OAAOH,MAAAA,QAAKC,KAAK,CAACL,UAAU,EAAE,EAsBhCH,SAAAY,WAXwBA,CAACC,SAAUC,SAAUC,eAC3C,MAAMZ,QAAU,CACZC,WAAY,6BACZC,KAAM,CACFW,SAAUH,SACVF,SAAUG,SACVG,YAAaF,cAIrB,OAAOR,MAAAA,QAAKC,KAAK,CAACL,UAAU,EAAE,EAsBhCH,SAAAkB,aAX0BA,CAACL,SAAUX,KAAMa,eACzC,MAAMZ,QAAU,CACZC,WAAY,+BACZC,KAAM,CACFW,SAAUH,SACVP,KAAMJ,KACNe,YAAaF,cAIrB,OAAOR,MAAAA,QAAKC,KAAK,CAACL,UAAU,EAAE,EAwBhCH,SAAAmB,kBAZ+BA,CAACN,SAAUC,SAAUM,cAAeL,eACjE,MAAMZ,QAAU,CACZC,WAAY,6BACZC,KAAM,CACFW,SAAUH,SACVF,SAAUG,SACVG,YAAaF,YACbM,MAAOD,gBAIf,OAAOb,MAAAA,QAAKC,KAAK,CAACL,UAAU,EAAE,EAoBhCH,SAAAsB,mBAVgCA,CAACT,SAAUC,YACzC,MAAMX,QAAU,CACZC,WAAY,4BACZC,KAAM,CACFW,SAAUH,SACVF,SAAUG,WAIlB,OAAOP,MAAAA,QAAKC,KAAK,CAACL,UAAU,EAAE,CAChC"}