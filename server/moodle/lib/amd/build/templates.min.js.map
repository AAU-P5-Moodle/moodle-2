{"version":3,"file":"templates.min.js","sources":["../src/templates.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Template renderer for Moodle. Load and render Moodle templates with Mustache.\r\n *\r\n * @module     core/templates\r\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      2.9\r\n */\r\n\r\nimport $ from 'jquery';\r\nimport * as config from 'core/config';\r\nimport * as filterEvents from 'core_filters/events';\r\nimport * as Y from 'core/yui';\r\nimport Renderer from './local/templates/renderer';\r\nimport {getNormalisedComponent} from 'core/utils';\r\n\r\n/**\r\n * Execute a block of JS returned from a template.\r\n * Call this AFTER adding the template HTML into the DOM so the nodes can be found.\r\n *\r\n * @method runTemplateJS\r\n * @param {string} source - A block of javascript.\r\n */\r\nconst runTemplateJS = (source) => {\r\n    if (source.trim() !== '') {\r\n        // Note. We continue to use jQuery here because people are doing some dumb things\r\n        // and we need to find, seek, and destroy first.\r\n        // In particular, people are providing a mixture of JS, and HTML content here.\r\n        // jQuery is someohow, magically, detecting this and putting tags into tags.\r\n        const newScript = $('<script>').attr('type', 'text/javascript').html(source);\r\n        $('head').append(newScript);\r\n        if (newScript.find('script').length) {\r\n            window.console.error(\r\n                'Template JS contains a script tag. This is not allowed. Only raw JS should be present here.',\r\n                source,\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Do some DOM replacement and trigger correct events and fire javascript.\r\n *\r\n * @method domReplace\r\n * @param {JQuery} element - Element or selector to replace.\r\n * @param {String} newHTML - HTML to insert / replace.\r\n * @param {String} newJS - Javascript to run after the insertion.\r\n * @param {Boolean} replaceChildNodes - Replace only the childnodes, alternative is to replace the entire node.\r\n * @return {Array} The list of new DOM Nodes\r\n * @fires event:filterContentUpdated\r\n */\r\nconst domReplace = (element, newHTML, newJS, replaceChildNodes) => {\r\n    const replaceNode = $(element);\r\n    if (!replaceNode.length) {\r\n        return [];\r\n    }\r\n    // First create the dom nodes so we have a reference to them.\r\n    const newNodes = $(newHTML);\r\n    // Do the replacement in the page.\r\n    if (replaceChildNodes) {\r\n        // Cleanup any YUI event listeners attached to any of these nodes.\r\n        const yuiNodes = new Y.NodeList(replaceNode.children().get());\r\n        yuiNodes.destroy(true);\r\n\r\n        // JQuery will cleanup after itself.\r\n        replaceNode.empty();\r\n        replaceNode.append(newNodes);\r\n    } else {\r\n        // Cleanup any YUI event listeners attached to any of these nodes.\r\n        const yuiNodes = new Y.NodeList(replaceNode.get());\r\n        yuiNodes.destroy(true);\r\n\r\n        // JQuery will cleanup after itself.\r\n        replaceNode.replaceWith(newNodes);\r\n    }\r\n    // Run any javascript associated with the new HTML.\r\n    runTemplateJS(newJS);\r\n    // Notify all filters about the new content.\r\n    filterEvents.notifyFilterContentUpdated(newNodes);\r\n\r\n    return newNodes.get();\r\n};\r\n\r\n/**\r\n * Prepend some HTML to a node and trigger events and fire javascript.\r\n *\r\n * @method domPrepend\r\n * @param {jQuery|String} element - Element or selector to prepend HTML to\r\n * @param {String} html - HTML to prepend\r\n * @param {String} js - Javascript to run after we prepend the html\r\n * @return {Array} The list of new DOM Nodes\r\n * @fires event:filterContentUpdated\r\n */\r\nconst domPrepend = (element, html, js) => {\r\n    const node = $(element);\r\n    if (!node.length) {\r\n        return [];\r\n    }\r\n\r\n    // Prepend the html.\r\n    const newContent = $(html);\r\n    node.prepend(newContent);\r\n    // Run any javascript associated with the new HTML.\r\n    runTemplateJS(js);\r\n    // Notify all filters about the new content.\r\n    filterEvents.notifyFilterContentUpdated(node);\r\n\r\n    return newContent.get();\r\n};\r\n\r\n/**\r\n * Append some HTML to a node and trigger events and fire javascript.\r\n *\r\n * @method domAppend\r\n * @param {jQuery|String} element - Element or selector to append HTML to\r\n * @param {String} html - HTML to append\r\n * @param {String} js - Javascript to run after we append the html\r\n * @return {Array} The list of new DOM Nodes\r\n * @fires event:filterContentUpdated\r\n */\r\nconst domAppend = (element, html, js) => {\r\n    const node = $(element);\r\n    if (!node.length) {\r\n        return [];\r\n    }\r\n    // Append the html.\r\n    const newContent = $(html);\r\n    node.append(newContent);\r\n    // Run any javascript associated with the new HTML.\r\n    runTemplateJS(js);\r\n    // Notify all filters about the new content.\r\n    filterEvents.notifyFilterContentUpdated(node);\r\n\r\n    return newContent.get();\r\n};\r\n\r\nconst wrapPromiseInWhenable = (promise) => $.when(new Promise((resolve, reject) => {\r\n    promise.then(resolve).catch(reject);\r\n}));\r\n\r\nexport default {\r\n    // Public variables and functions.\r\n    /**\r\n     * Every call to render creates a new instance of the class and calls render on it. This\r\n     * means each render call has it's own class variables.\r\n     *\r\n     * @method render\r\n     * @param {string} templateName - should consist of the component and the name of the template like this:\r\n     *                              core/menu (lib/templates/menu.mustache) or\r\n     *                              tool_bananas/yellow (admin/tool/bananas/templates/yellow.mustache)\r\n     * @param {Object} context - Could be array, string or simple value for the context of the template.\r\n     * @param {string} themeName - Name of the current theme.\r\n     * @return {Promise} JQuery promise object resolved when the template has been rendered.\r\n     */\r\n    render: (templateName, context, themeName = config.theme) => {\r\n        const renderer = new Renderer();\r\n\r\n        // Turn the Native Promise into a jQuery Promise for backwards compatability.\r\n        return $.when(new Promise((resolve, reject) => {\r\n            renderer.render(templateName, context, themeName)\r\n            .then(resolve)\r\n            .catch(reject);\r\n        }))\r\n        .then(({html, js}) => $.Deferred().resolve(html, js));\r\n    },\r\n\r\n    /**\r\n     * Prefetch a set of templates without rendering them.\r\n     *\r\n     * @method getTemplate\r\n     * @param {Array} templateNames The list of templates to fetch\r\n     * @param {String} [themeName=config.themeName] The name of the theme to use\r\n     * @returns {Promise}\r\n     */\r\n    prefetchTemplates: (templateNames, themeName = config.theme) => {\r\n        const Loader = Renderer.getLoader();\r\n\r\n        return Loader.prefetchTemplates(templateNames, themeName);\r\n    },\r\n\r\n    /**\r\n     * Every call to render creates a new instance of the class and calls render on it. This\r\n     * means each render call has it's own class variables.\r\n     *\r\n     * This alernate to the standard .render() function returns the html and js in a single object suitable for a\r\n     * native Promise.\r\n     *\r\n     * @method renderForPromise\r\n     * @param {string} templateName - should consist of the component and the name of the template like this:\r\n     *                              core/menu (lib/templates/menu.mustache) or\r\n     *                              tool_bananas/yellow (admin/tool/bananas/templates/yellow.mustache)\r\n     * @param {Object} context - Could be array, string or simple value for the context of the template.\r\n     * @param {string} themeName - Name of the current theme.\r\n     * @return {Promise} JQuery promise object resolved when the template has been rendered.\r\n     */\r\n    renderForPromise: (templateName, context, themeName) => {\r\n        const renderer = new Renderer();\r\n        return renderer.render(templateName, context, themeName);\r\n    },\r\n\r\n    /**\r\n     * Every call to renderIcon creates a new instance of the class and calls renderIcon on it. This\r\n     * means each render call has it's own class variables.\r\n     *\r\n     * @method renderPix\r\n     * @param {string} key - Icon key.\r\n     * @param {string} component - Icon component\r\n     * @param {string} title - Icon title\r\n     * @return {Promise} JQuery promise object resolved when the pix has been rendered.\r\n     */\r\n    renderPix: (key, component, title) => {\r\n        const renderer = new Renderer();\r\n        return wrapPromiseInWhenable(renderer.renderIcon(\r\n            key,\r\n            getNormalisedComponent(component),\r\n            title\r\n        ));\r\n    },\r\n\r\n    /**\r\n     * Execute a block of JS returned from a template.\r\n     * Call this AFTER adding the template HTML into the DOM so the nodes can be found.\r\n     *\r\n     * @method runTemplateJS\r\n     * @param {string} source - A block of javascript.\r\n     */\r\n    runTemplateJS: runTemplateJS,\r\n\r\n    /**\r\n     * Replace a node in the page with some new HTML and run the JS.\r\n     *\r\n     * @method replaceNodeContents\r\n     * @param {JQuery} element - Element or selector to replace.\r\n     * @param {String} newHTML - HTML to insert / replace.\r\n     * @param {String} newJS - Javascript to run after the insertion.\r\n     * @return {Array} The list of new DOM Nodes\r\n     */\r\n    replaceNodeContents: (element, newHTML, newJS) => domReplace(element, newHTML, newJS, true),\r\n\r\n    /**\r\n     * Insert a node in the page with some new HTML and run the JS.\r\n     *\r\n     * @method replaceNode\r\n     * @param {JQuery} element - Element or selector to replace.\r\n     * @param {String} newHTML - HTML to insert / replace.\r\n     * @param {String} newJS - Javascript to run after the insertion.\r\n     * @return {Array} The list of new DOM Nodes\r\n     */\r\n    replaceNode: (element, newHTML, newJS) => domReplace(element, newHTML, newJS, false),\r\n\r\n    /**\r\n     * Prepend some HTML to a node and trigger events and fire javascript.\r\n     *\r\n     * @method prependNodeContents\r\n     * @param {jQuery|String} element - Element or selector to prepend HTML to\r\n     * @param {String} html - HTML to prepend\r\n     * @param {String} js - Javascript to run after we prepend the html\r\n     * @return {Array} The list of new DOM Nodes\r\n     */\r\n    prependNodeContents: (element, html, js) => domPrepend(element, html, js),\r\n\r\n    /**\r\n     * Append some HTML to a node and trigger events and fire javascript.\r\n     *\r\n     * @method appendNodeContents\r\n     * @param {jQuery|String} element - Element or selector to append HTML to\r\n     * @param {String} html - HTML to append\r\n     * @param {String} js - Javascript to run after we append the html\r\n     * @return {Array} The list of new DOM Nodes\r\n     */\r\n    appendNodeContents: (element, html, js) => domAppend(element, html, js),\r\n};\r\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireDefault","_jquery","config","filterEvents","Y","_renderer","runTemplateJS","source","trim","newScript","$","attr","html","append","find","length","window","console","error","domReplace","element","newHTML","newJS","replaceChildNodes","replaceNode","newNodes","NodeList","children","destroy","empty","replaceWith","notifyFilterContentUpdated","_exports","render","templateName","context","themeName","arguments","undefined","theme","renderer","Renderer","when","Promise","resolve","reject","then","catch","_ref","js","Deferred","prefetchTemplates","templateNames","getLoader","renderForPromise","renderPix","key","component","title","promise","renderIcon","getNormalisedComponent","replaceNodeContents","prependNodeContents","domPrepend","node","newContent","prepend","appendNodeContents","domAppend"],"mappings":"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"}