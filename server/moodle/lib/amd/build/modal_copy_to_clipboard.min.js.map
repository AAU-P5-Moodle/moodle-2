{"version":3,"file":"modal_copy_to_clipboard.min.js","sources":["../src/modal_copy_to_clipboard.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Contain the logic for the copy to clipboard modal, i.e. the modal contains a\r\n * readonly input text field, that contains a value. Clicking on the single\r\n * button \"Copy to clipboard\" in the footer, puts the content of the input\r\n * text field into the clipboard and closes the modal.\r\n *\r\n * Usage:\r\n * ModalCopyToClipboard.create(string:<stringToCopy>, string:<modalTitle>|null);\r\n *\r\n * @module     core/modal_copy_to_clipboard\r\n * @copyright  2023 Stephan Robotta <stephan.robotta@bfh.ch>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Modal from 'core/modal';\r\nimport 'core/copy_to_clipboard';\r\n\r\nexport default class CopyToClipboardModal extends Modal {\r\n    static TYPE = 'core/copytoclipboard';\r\n    static TEMPLATE = 'core/modal_copytoclipboard';\r\n\r\n    constructor(...config) {\r\n        // Override the constructor to set the removeOnClose property, and show the modal.\r\n        super(...config);\r\n        this.setRemoveOnClose(true);\r\n    }\r\n\r\n    /**\r\n     * Set up all the event handling for the modal.\r\n     * This is an override of the parent method, adding an event listener to close upon the action.\r\n     *\r\n     * @param {array} args\r\n     */\r\n    registerEventListeners(...args) {\r\n        super.registerEventListeners(...args);\r\n\r\n        this.getRoot().get(0).addEventListener('click', (e) => {\r\n            if (!e.target.closest('[data-action=\"copytoclipboard\"]')) {\r\n                return;\r\n            }\r\n\r\n            if (!this.getRoot().get(0).contains(e.target)) {\r\n                return;\r\n            }\r\n\r\n            // Note: We must call destroy() here, because the copy-to-clipboard action listens on the document,\r\n            // which will be processed after this event listener has been processed.\r\n            // By placing this in a setTimeout we move its processing to after the event loop has finished.\r\n            setTimeout(this.destroy.bind(this));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create a new instance of the Modal. Set the text that is being copied. By default, the text is put into the\r\n     * value of an input readonly field. If useTextArea is set to true, the text is rendered in a textarea element.\r\n     * The optional title argument is for the modal title. If not set, the generic string \"copy to clipboard\" is used.\r\n     *\r\n     * @param {Object} data used in the template\r\n     * @param {string} data.text the text to copy to the clipboard\r\n     * @param {boolean} data.useTextArea when the text to copy is displayed in a textarea, default is input\r\n     * @param {string|null} title\r\n     * @returns {Promise<void>}\r\n     */\r\n    static async create(\r\n        {\r\n            text,\r\n            useTextArea = false,\r\n        } = {},\r\n        title,\r\n    ) {\r\n        const modalConfig = {\r\n            templateContext: {\r\n                text,\r\n                useTextArea,\r\n            },\r\n        };\r\n        if (title) {\r\n            modalConfig.title = title;\r\n        }\r\n\r\n        return super.create(modalConfig);\r\n    }\r\n\r\n    configure(modalConfig) {\r\n        modalConfig.show = true;\r\n        modalConfig.removeOnClose = true;\r\n\r\n        super.configure(modalConfig);\r\n    }\r\n}\r\n\r\nCopyToClipboardModal.registerModalType();\r\n"],"names":["e","_modal","__esModule","default","CopyToClipboardModal","Modal","static","constructor","super","arguments","this","setRemoveOnClose","registerEventListeners","getRoot","get","addEventListener","target","closest","contains","setTimeout","destroy","bind","create","text","useTextArea","length","undefined","title","modalConfig","templateContext","configure","show","removeOnClose","_exports","registerModalType"],"mappings":"sIA6B+B,IAAAA;;;;;;;;;;;;;qFAA/BC,QAA+BD,EAA/BC,SAA+BD,EAAAE,WAAAF,EAAAG,CAAAA,QAAAH,GAGhB,MAAMI,6BAA6BC,OAAAA,QAC9CC,YAAc,uBACdA,gBAAkB,6BAElBC,WAAAA,GAEIC,SAAMC,WACNC,KAAKC,kBAAiB,EAC1B,CAQAC,sBAAAA,GACIJ,MAAMI,0BAAuBH,WAE7BC,KAAKG,UAAUC,IAAI,GAAGC,iBAAiB,SAAUf,IACxCA,EAAEgB,OAAOC,QAAQ,oCAIjBP,KAAKG,UAAUC,IAAI,GAAGI,SAASlB,EAAEgB,SAOtCG,WAAWT,KAAKU,QAAQC,KAAKX,MAAM,GAE3C,CAaA,mBAAaY,GAMX,IALEC,KACIA,KAAIC,YACJA,aAAc,GACjBf,UAAAgB,OAAAhB,QAAAiB,IAAAjB,UAAAiB,GAAAjB,UAAG,GAAA,GACJkB,MAAKlB,UAAAgB,OAAAhB,EAAAA,kBAAAiB,EAEL,MAAME,YAAc,CAChBC,gBAAiB,CACbN,UACAC,0BAOR,OAJIG,QACAC,YAAYD,MAAQA,OAGjBnB,MAAMc,OAAOM,YACxB,CAEAE,SAAAA,CAAUF,aACNA,YAAYG,MAAO,EACnBH,YAAYI,eAAgB,EAE5BxB,MAAMsB,UAAUF,YACpB,EAGqC,OAFxCK,SAAA9B,QAAAC,qBAEDA,qBAAqB8B,oBAAoBD,SAAA9B,OAAA"}