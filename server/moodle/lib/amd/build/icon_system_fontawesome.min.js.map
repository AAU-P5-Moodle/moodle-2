{"version":3,"file":"icon_system_fontawesome.min.js","sources":["../src/icon_system_fontawesome.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * An Icon System implementation for FontAwesome.\r\n *\r\n * @module core/icon_system_fontawesome\r\n * @copyright  2017 Damyon Wiese\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {call as fetchMany} from './ajax';\r\nimport LocalStorage from './localstorage';\r\nimport IconSystem from './icon_system';\r\nimport * as Mustache from './mustache';\r\nimport * as Config from './config';\r\nimport * as Url from './url';\r\n\r\n/**\r\n * An set of properties for an icon.\r\n * @typedef {object} IconProperties\r\n * @property {array} attributes\r\n * @private\r\n */\r\n\r\n/**\r\n * The FontAwesome icon system.\r\n */\r\nexport default class IconSystemFontawesome extends IconSystem {\r\n    /**\r\n     * @var {Map} staticMap A map of icon names to FA Icon.\r\n     * @private\r\n     */\r\n    static staticMap = null;\r\n\r\n    /**\r\n     * @var {Promise} fetchPromise The promise used when fetching the result\r\n     * @private\r\n     */\r\n    static fetchPromise = null;\r\n\r\n    /**\r\n     * @var {string} cacheKey The key used to store the icon map in LocalStorage.\r\n     * @private\r\n     */\r\n    static cacheKey = `core_iconsystem/theme/${Config.theme}/core/iconmap-fontawesome`;\r\n\r\n    /**\r\n     * Prefetch resources so later calls to renderIcon can be resolved synchronously.\r\n     *\r\n     * @returns {Promise<IconSystemFontawesome>}\r\n     */\r\n    init() {\r\n        if (IconSystemFontawesome.staticMap) {\r\n            return Promise.resolve(this);\r\n        }\r\n\r\n        if (this.getMapFromCache()) {\r\n            return Promise.resolve(this);\r\n        }\r\n\r\n        if (IconSystemFontawesome.fetchPromise) {\r\n            return IconSystemFontawesome.fetchPromise;\r\n        }\r\n\r\n        return this.fetchMapFromServer();\r\n    }\r\n\r\n    /**\r\n     * Get the icon map from LocalStorage.\r\n     *\r\n     * @private\r\n     * @returns {Map}\r\n     */\r\n    getMapFromCache() {\r\n        const map = LocalStorage.get(IconSystemFontawesome.cacheKey);\r\n        if (map) {\r\n            IconSystemFontawesome.staticMap = new Map(JSON.parse(map));\r\n        }\r\n        return IconSystemFontawesome.staticMap;\r\n    }\r\n\r\n    /**\r\n     * Fetch the map data from the server.\r\n     *\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _fetchMapFromServer() {\r\n        return fetchMany([{\r\n            methodname: 'core_output_load_fontawesome_icon_system_map',\r\n            args: {\r\n                themename: Config.theme,\r\n            },\r\n        }], true, false, false, 0, Config.themerev)[0];\r\n    }\r\n\r\n    /**\r\n     * Fetch the map data from the server.\r\n     *\r\n     * @returns {Promise<IconSystemFontawesome>}\r\n     * @private\r\n     */\r\n    async fetchMapFromServer() {\r\n        IconSystemFontawesome.fetchPromise = (async () => {\r\n            const mapData = await this._fetchMapFromServer();\r\n\r\n            IconSystemFontawesome.staticMap = new Map(Object.entries(mapData).map(([, value]) => ([\r\n                `${value.component}/${value.pix}`,\r\n                value.to,\r\n            ])));\r\n            LocalStorage.set(\r\n                IconSystemFontawesome.cacheKey,\r\n                JSON.stringify(Array.from(IconSystemFontawesome.staticMap.entries())),\r\n            );\r\n\r\n            return this;\r\n        })();\r\n\r\n        return IconSystemFontawesome.fetchPromise;\r\n    }\r\n\r\n    /**\r\n     * Render an icon.\r\n     *\r\n     * @param {string} key\r\n     * @param {string} component\r\n     * @param {string} title\r\n     * @param {string} template\r\n     * @return {string} The rendered HTML content\r\n     */\r\n    renderIcon(key, component, title, template) {\r\n        const iconKey = `${component}/${key}`;\r\n        const mappedIcon = IconSystemFontawesome.staticMap.get(iconKey);\r\n        const unmappedIcon = this.getUnmappedIcon(mappedIcon, key, component, title);\r\n\r\n        const context = {\r\n            title,\r\n            unmappedIcon,\r\n            alt: title,\r\n            key: mappedIcon,\r\n        };\r\n\r\n        if (typeof title === \"undefined\" || title === '') {\r\n            context['aria-hidden'] = true;\r\n        }\r\n\r\n        return Mustache.render(template, context).trim();\r\n    }\r\n\r\n    /**\r\n     * Get the unmapped icon content, if the icon is not mapped.\r\n     *\r\n     * @param {IconProperties} mappedIcon\r\n     * @param {string} key\r\n     * @param {string} component\r\n     * @param {string} title\r\n     * @returns {IconProperties|null}\r\n     * @private\r\n     */\r\n    getUnmappedIcon(mappedIcon, key, component, title) {\r\n        if (mappedIcon) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            attributes: [\r\n                {name: 'src', value: Url.imageUrl(key, component)},\r\n                {name: 'alt', value: title},\r\n                {name: 'title', value: title}\r\n            ],\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get the name of the template to pre-cache for this icon system.\r\n     *\r\n     * @return {string}\r\n     * @method getTemplateName\r\n     */\r\n    getTemplateName() {\r\n        return 'core/pix_icon_fontawesome';\r\n    }\r\n}\r\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireDefault","_localstorage","_icon_system","Mustache","Config","Url","IconSystemFontawesome","IconSystem","static","theme","init","staticMap","this","getMapFromCache","Promise","resolve","fetchPromise","fetchMapFromServer","map","LocalStorage","cacheKey","Map","JSON","parse","_fetchMapFromServer","fetchMany","methodname","args","themename","themerev","mapData","entries","_ref","value","component","pix","to","stringify","Array","from","renderIcon","key","title","template","iconKey","mappedIcon","context","unmappedIcon","getUnmappedIcon","alt","render","trim","attributes","name","imageUrl","getTemplateName","_exports"],"mappings":"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"}