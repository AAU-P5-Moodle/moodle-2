{"version":3,"file":"fetch.min.js","sources":["../src/fetch.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * The core/fetch module allows you to make web service requests to the Moodle API.\r\n *\r\n * @module     core/fetch\r\n * @copyright  Andrew Lyons <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @example <caption>Perform a single GET request</caption>\r\n * import Fetch from 'core/fetch';\r\n *\r\n * const result = Fetch.performGet('mod_example', 'animals', { params: { type: 'mammal' } });\r\n *\r\n * result.then((response) => {\r\n *    // Do something with the Response object.\r\n * })\r\n * .catch((error) => {\r\n *     // Handle the error\r\n * });\r\n */\r\n\r\nimport Cfg from 'core/config';\r\nimport PendingPromise from './pending';\r\n\r\n/**\r\n * A wrapper around the Request, including a Promise that is resolved when the request is complete.\r\n *\r\n * @class RequestWrapper\r\n * @private\r\n */\r\nclass RequestWrapper {\r\n    /** @var {Request} */\r\n    #request = null;\r\n\r\n    /** @var {Promise} */\r\n    #promise = null;\r\n\r\n    /** @var {Function} */\r\n    #resolve = null;\r\n\r\n    /** @var {Function} */\r\n    #reject = null;\r\n\r\n    /**\r\n     * Create a new RequestWrapper.\r\n     *\r\n     * @param {Request} request The request object that is wrapped\r\n     */\r\n    constructor(request) {\r\n        this.#request = request;\r\n        this.#promise = new Promise((resolve, reject) => {\r\n            this.#resolve = resolve;\r\n            this.#reject = reject;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the wrapped Request.\r\n     *\r\n     * @returns {Request}\r\n     * @private\r\n     */\r\n    get request() {\r\n        return this.#request;\r\n    }\r\n\r\n    /**\r\n     * Get the Promise link to this request.\r\n     *\r\n     * @return {Promise}\r\n     * @private\r\n     */\r\n    get promise() {\r\n        return this.#promise;\r\n    }\r\n\r\n    /**\r\n     * Handle the response from the request.\r\n     *\r\n     * @param {Response} response\r\n     * @private\r\n     */\r\n    handleResponse(response) {\r\n        if (response.ok) {\r\n            this.#resolve(response);\r\n        } else {\r\n            this.#reject(response.statusText);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * A class to handle requests to the Moodle REST API.\r\n *\r\n * @class Fetch\r\n */\r\nexport default class Fetch {\r\n    /**\r\n     * Make a single request to the Moodle API.\r\n     *\r\n     * @param {string} component The frankenstyle component name\r\n     * @param {string} action The component action to perform\r\n     * @param {object} params\r\n     * @param {object} [params.params = {}] The parameters to pass to the API\r\n     * @param {string|Object|FormData} [params.body = null] The HTTP method to use\r\n     * @param {string} [params.method = \"GET\"] The HTTP method to use\r\n     * @returns {Promise<Response>} A promise that resolves to the Response object for the request\r\n     */\r\n    static async request(\r\n        component,\r\n        action,\r\n        {\r\n            params = {},\r\n            body = null,\r\n            method = 'GET',\r\n        } = {},\r\n    ) {\r\n        const pending = new PendingPromise(`Requesting ${component}/${action} with ${method}`);\r\n        const requestWrapper = Fetch.#getRequest(\r\n            Fetch.#normaliseComponent(component),\r\n            action,\r\n            { params, method, body },\r\n        );\r\n        const result = await fetch(requestWrapper.request);\r\n\r\n        pending.resolve();\r\n\r\n        requestWrapper.handleResponse(result);\r\n\r\n        return requestWrapper.promise;\r\n    }\r\n\r\n    /**\r\n     * Make a request to the Moodle API.\r\n     *\r\n     * @param {string} component The frankenstyle component name\r\n     * @param {string} action The component action to perform\r\n     * @param {object} params\r\n     * @param {object} [params.params = {}] The parameters to pass to the API\r\n     * @returns {Promise<Response>} A promise that resolves to the Response object for the request\r\n     */\r\n    static performGet(\r\n        component,\r\n        action,\r\n        {\r\n            params = {},\r\n        } = {},\r\n    ) {\r\n        return this.request(\r\n            component,\r\n            action,\r\n            { params, method: 'GET' },\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Make a request to the Moodle API.\r\n     *\r\n     * @param {string} component The frankenstyle component name\r\n     * @param {string} action The component action to perform\r\n     * @param {object} params\r\n     * @param {object} [params.params = {}] The parameters to pass to the API\r\n     * @returns {Promise<Response>} A promise that resolves to the Response object for the request\r\n     */\r\n    static performHead(\r\n        component,\r\n        action,\r\n        {\r\n            params = {},\r\n        } = {},\r\n    ) {\r\n        return this.request(\r\n            component,\r\n            action,\r\n            { params, method: 'HEAD' },\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Make a request to the Moodle API.\r\n     *\r\n     * @param {string} component The frankenstyle component name\r\n     * @param {string} action The component action to perform\r\n     * @param {object} params\r\n     * @param {string|Object|FormData} params.body The HTTP method to use\r\n     * @returns {Promise<Response>} A promise that resolves to the Response object for the request\r\n     */\r\n    static performPost(\r\n        component,\r\n        action,\r\n        {\r\n            body,\r\n        } = {},\r\n    ) {\r\n        return this.request(\r\n            component,\r\n            action,\r\n            { body, method: 'POST' },\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Make a request to the Moodle API.\r\n     *\r\n     * @param {string} component The frankenstyle component name\r\n     * @param {string} action The component action to perform\r\n     * @param {object} params\r\n     * @param {string|Object|FormData} params.body The HTTP method to use\r\n     * @returns {Promise<Response>} A promise that resolves to the Response object for the request\r\n     */\r\n    static performPut(\r\n        component,\r\n        action,\r\n        {\r\n            body,\r\n        } = {},\r\n    ) {\r\n        return this.request(\r\n            component,\r\n            action,\r\n            { body, method: 'PUT' },\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Make a PATCH request to the Moodle API.\r\n     *\r\n     * @param {string} component The frankenstyle component name\r\n     * @param {string} action The component action to perform\r\n     * @param {object} params\r\n     * @param {string|Object|FormData} params.body The HTTP method to use\r\n     * @returns {Promise<Response>} A promise that resolves to the Response object for the request\r\n     */\r\n    static performPatch(\r\n        component,\r\n        action,\r\n        {\r\n            body,\r\n        } = {},\r\n    ) {\r\n        return this.request(\r\n            component,\r\n            action,\r\n            { body, method: 'PATCH' },\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Make a request to the Moodle API.\r\n     *\r\n     * @param {string} component The frankenstyle component name\r\n     * @param {string} action The component action to perform\r\n     * @param {object} params\r\n     * @param {object} [params.params = {}] The parameters to pass to the API\r\n     * @param {string|Object|FormData} [params.body = null] The HTTP method to use\r\n     * @returns {Promise<Response>} A promise that resolves to the Response object for the request\r\n     */\r\n    static performDelete(\r\n        component,\r\n        action,\r\n        {\r\n            params = {},\r\n            body = null,\r\n        } = {},\r\n    ) {\r\n        return this.request(\r\n            component,\r\n            action,\r\n            {\r\n                body,\r\n                params,\r\n                method: 'DELETE',\r\n            },\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Normalise the component name to remove the core_ prefix.\r\n     *\r\n     * @param {string} component\r\n     * @returns {string}\r\n     */\r\n    static #normaliseComponent(component) {\r\n        return component.replace(/^core_/, '');\r\n    }\r\n\r\n    /**\r\n     * Get the Request for a given API request.\r\n     *\r\n     * @param {string} component The frankenstyle component name\r\n     * @param {string} endpoint The endpoint within the componet to call\r\n     * @param {object} params\r\n     * @param {object} [params.params = {}] The parameters to pass to the API\r\n     * @param {string|Object|FormData} [params.body = null] The HTTP method to use\r\n     * @param {string} [params.method = \"GET\"] The HTTP method to use\r\n     * @returns {RequestWrapper}\r\n     */\r\n    static #getRequest(\r\n        component,\r\n        endpoint,\r\n        {\r\n            params = {},\r\n            body = null,\r\n            method = 'GET',\r\n        }\r\n    ) {\r\n        const url = new URL(`${Cfg.apibase}/rest/v2/${component}/${endpoint}`);\r\n        const options = {\r\n            method,\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n        };\r\n\r\n        Object.entries(params).forEach(([key, value]) => {\r\n            url.searchParams.append(key, value);\r\n        });\r\n\r\n        if (body) {\r\n            if (body instanceof FormData) {\r\n                options.body = body;\r\n            } else if (body instanceof Object) {\r\n                options.body = JSON.stringify(body);\r\n            } else {\r\n                options.body = body;\r\n            }\r\n        }\r\n\r\n        return new RequestWrapper(new Request(url, options));\r\n    }\r\n}\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_config","_pending","RequestWrapper","request","promise","resolve","reject","constructor","this","Promise","handleResponse","response","ok","statusText","Fetch","component","action","params","body","method","arguments","length","undefined","pending","PendingPromise","requestWrapper","getRequest","normaliseComponent","result","fetch","performGet","performHead","performPost","performPut","performPatch","performDelete","replace","endpoint","_ref","url","URL","Cfg","apibase","options","headers","Accept","Object","entries","forEach","_ref2","key","value","searchParams","append","FormData","JSON","stringify","Request","_exports"],"mappings":"+FAmCuC,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;;;;;;;;;;;;qFADvCG,QAAAJ,uBAAAI,SACAC,SAAAL,uBAAAK,UAQA,MAAMC,eAEFC,SAAW,KAGXC,SAAW,KAGXC,SAAW,KAGXC,QAAU,KAOVC,WAAAA,CAAYJ,SACRK,MAAKL,QAAWA,QAChBK,MAAKJ,QAAW,IAAIK,SAAQ,CAACJ,QAASC,UAClCE,MAAKH,QAAWA,QAChBG,MAAKF,OAAUA,MAAM,GAE7B,CAQA,WAAIH,GACA,OAAOK,MAAKL,OAChB,CAQA,WAAIC,GACA,OAAOI,MAAKJ,OAChB,CAQAM,cAAAA,CAAeC,UACPA,SAASC,GACTJ,MAAKH,QAASM,UAEdH,MAAKF,OAAQK,SAASE,WAE9B,EAQW,MAAMC,MAYjB,oBAAaX,CACTY,UACAC,QAMF,IALEC,OACIA,OAAS,CAAE,EAAAC,KACXA,KAAO,KAAIC,OACXA,OAAS,OACZC,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,GAEJ,MAAMG,QAAU,IAAIC,SAAAA,QAAe,cAAcT,aAAaC,eAAeG,UACvEM,eAAiBX,OAAMY,WACzBZ,OAAMa,mBAAoBZ,WAC1BC,OACA,CAAEC,cAAQE,cAAQD,YAEhBU,aAAeC,MAAMJ,eAAetB,SAM1C,OAJAoB,QAAQlB,UAERoB,eAAef,eAAekB,QAEvBH,eAAerB,OAC1B,CAWA,iBAAO0B,CACHf,UACAC,QAIF,IAHEC,OACIA,OAAS,CAAC,GACbG,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,GAEJ,OAAOZ,KAAKL,QACRY,UACAC,OACA,CAAEC,cAAQE,OAAQ,OAE1B,CAWA,kBAAOY,CACHhB,UACAC,QAIF,IAHEC,OACIA,OAAS,CAAC,GACbG,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,GAEJ,OAAOZ,KAAKL,QACRY,UACAC,OACA,CAAEC,cAAQE,OAAQ,QAE1B,CAWA,kBAAOa,CACHjB,UACAC,QAIF,IAHEE,KACIA,MACHE,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,GAEJ,OAAOZ,KAAKL,QACRY,UACAC,OACA,CAAEE,UAAMC,OAAQ,QAExB,CAWA,iBAAOc,CACHlB,UACAC,QAIF,IAHEE,KACIA,MACHE,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,GAEJ,OAAOZ,KAAKL,QACRY,UACAC,OACA,CAAEE,UAAMC,OAAQ,OAExB,CAWA,mBAAOe,CACHnB,UACAC,QAIF,IAHEE,KACIA,MACHE,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,GAEJ,OAAOZ,KAAKL,QACRY,UACAC,OACA,CAAEE,UAAMC,OAAQ,SAExB,CAYA,oBAAOgB,CACHpB,UACAC,QAKF,IAJEC,OACIA,OAAS,CAAE,EAAAC,KACXA,KAAO,MACVE,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,GAEJ,OAAOZ,KAAKL,QACRY,UACAC,OACA,CACIE,UACAD,cACAE,OAAQ,UAGpB,CAQA,yBAAOQ,CAAoBZ,WACvB,OAAOA,UAAUqB,QAAQ,SAAU,GACvC,CAaA,iBAAOV,CACHX,UACAsB,SAAQC,MAMV,IALErB,OACIA,OAAS,CAAE,EAAAC,KACXA,KAAO,KAAIC,OACXA,OAAS,OACZmB,KAED,MAAMC,IAAM,IAAIC,IAAI,GAAGC,QAAAA,QAAIC,mBAAmB3B,aAAasB,YACrDM,QAAU,CACZxB,cACAyB,QAAS,CACLC,OAAU,mBACV,eAAgB,qBAkBxB,OAdAC,OAAOC,QAAQ9B,QAAQ+B,SAAQC,QAAkB,IAAhBC,IAAKC,OAAMF,MACxCV,IAAIa,aAAaC,OAAOH,IAAKC,MAAM,IAGnCjC,OACIA,gBAAgBoC,SAChBX,QAAQzB,KAAOA,KAEfyB,QAAQzB,KADDA,gBAAgB4B,OACRS,KAAKC,UAAUtC,MAEfA,MAIhB,IAAIhB,eAAe,IAAIuD,QAAQlB,IAAKI,SAC/C,EACH,OAAAe,SAAA3D,QAAAe,MAAA4C,SAAA3D,OAAA"}