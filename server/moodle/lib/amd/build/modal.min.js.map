{"version":3,"file":"modal.min.js","sources":["../src/modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Contain the logic for modals.\r\n *\r\n * @module core/modal\r\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport $ from 'jquery';\r\nimport * as Templates from 'core/templates';\r\nimport * as Notification from 'core/notification';\r\nimport * as KeyCodes from 'core/key_codes';\r\nimport ModalBackdrop from 'core/modal_backdrop';\r\nimport ModalEvents from 'core/modal_events';\r\nimport * as ModalRegistry from 'core/modal_registry';\r\nimport Pending from 'core/pending';\r\nimport * as CustomEvents from 'core/custom_interaction_events';\r\nimport * as FilterEvents from 'core_filters/events';\r\nimport * as FocusLock from 'core/local/aria/focuslock';\r\nimport * as Aria from 'core/aria';\r\nimport * as Fullscreen from 'core/fullscreen';\r\nimport {removeToastRegion} from './toast';\r\n\r\n/**\r\n * A configuration to provide to the modal.\r\n *\r\n * @typedef {Object} ModalConfig\r\n *\r\n * @property {string} [type] The type of modal to create.\r\n * @property {string|Promise<string>} [title] The title of the modal.\r\n * @property {string|Promise<string>} [body] The body of the modal.\r\n * @property {string|Promise<string>} [footer] The footer of the modal.\r\n * @property {boolean} [show=false] Whether to show the modal immediately.\r\n * @property {boolean} [scrollable=true] Whether the modal should be scrollable.\r\n * @property {boolean} [removeOnClose=true] Whether the modal should be removed from the DOM when it is closed.\r\n * @property {Element|jQuery} [returnElement] The element to focus when closing the modal.\r\n * @property {boolean} [large=false] Whether the modal should be a large modal.\r\n * @property {boolean} [isVerticallyCentered=false] Whether the modal should be vertically centered.\r\n * @property {object} [buttons={}] The buttons to display in the footer as a key => title pair.\r\n */\r\n\r\nconst SELECTORS = {\r\n    CONTAINER: '[data-region=\"modal-container\"]',\r\n    MODAL: '[data-region=\"modal\"]',\r\n    HEADER: '[data-region=\"header\"]',\r\n    TITLE: '[data-region=\"title\"]',\r\n    BODY: '[data-region=\"body\"]',\r\n    FOOTER: '[data-region=\"footer\"]',\r\n    HIDE: '[data-action=\"hide\"]',\r\n    DIALOG: '[role=dialog]',\r\n    FORM: 'form',\r\n    MENU_BAR: '[role=menubar]',\r\n    HAS_Z_INDEX: '.moodle-has-zindex',\r\n    CAN_RECEIVE_FOCUS: 'input:not([type=\"hidden\"]), a[href], button, textarea, select, [tabindex]',\r\n};\r\n\r\nconst TEMPLATES = {\r\n    LOADING: 'core/loading',\r\n    BACKDROP: 'core/modal_backdrop',\r\n};\r\n\r\nexport default class Modal {\r\n    /** @var {string} The type of modal */\r\n    static TYPE = 'default';\r\n\r\n    /** @var {string} The template to use for this modal */\r\n    static TEMPLATE = 'core/modal';\r\n\r\n    /** @var {Promise} Module singleton for the backdrop to be reused by all Modal instances */\r\n    static backdropPromise = null;\r\n\r\n    /**\r\n     * @var {Number} A counter that gets incremented for each modal created.\r\n     * This can be used to generate unique values for the modals.\r\n     */\r\n    static modalCounter = 0;\r\n\r\n    /**\r\n     * Getter method for .root element.\r\n     * @return {object} jQuery object\r\n     */\r\n    get root() {\r\n        return $(this._root.filter(SELECTORS.CONTAINER));\r\n    }\r\n\r\n    /**\r\n     * Setter method for .root element.\r\n     * @param {object} root jQuery object\r\n     */\r\n    set root(root) {\r\n        this._root = root;\r\n    }\r\n\r\n    /**\r\n     * Constructor for the Modal.\r\n     *\r\n     * @param {HTMLElement} root The HTMLElement at the root of the Modal content\r\n     */\r\n    constructor(root) {\r\n        this.root = $(root);\r\n\r\n        this.modal = this.root.find(SELECTORS.MODAL);\r\n        this.header = this.modal.find(SELECTORS.HEADER);\r\n        this.headerPromise = $.Deferred();\r\n        this.title = this.header.find(SELECTORS.TITLE);\r\n        this.titlePromise = $.Deferred();\r\n        this.body = this.modal.find(SELECTORS.BODY);\r\n        this.bodyPromise = $.Deferred();\r\n        this.footer = this.modal.find(SELECTORS.FOOTER);\r\n        this.footerPromise = $.Deferred();\r\n        this.hiddenSiblings = [];\r\n        this.isAttached = false;\r\n        this.bodyJS = null;\r\n        this.footerJS = null;\r\n        this.modalCount = Modal.modalCounter++;\r\n        this.attachmentPoint = document.createElement('div');\r\n        document.body.append(this.attachmentPoint);\r\n        this.focusOnClose = null;\r\n\r\n        if (!this.root.is(SELECTORS.CONTAINER)) {\r\n            Notification.exception({message: 'Element is not a modal container'});\r\n        }\r\n\r\n        if (!this.modal.length) {\r\n            Notification.exception({message: 'Container does not contain a modal'});\r\n        }\r\n\r\n        if (!this.header.length) {\r\n            Notification.exception({message: 'Modal is missing a header region'});\r\n        }\r\n\r\n        if (!this.title.length) {\r\n            Notification.exception({message: 'Modal header is missing a title region'});\r\n        }\r\n\r\n        if (!this.body.length) {\r\n            Notification.exception({message: 'Modal is missing a body region'});\r\n        }\r\n\r\n        if (!this.footer.length) {\r\n            Notification.exception({message: 'Modal is missing a footer region'});\r\n        }\r\n\r\n        this.registerEventListeners();\r\n    }\r\n\r\n    /**\r\n     * Register a modal with the legacy modal registry.\r\n     *\r\n     * This is provided to allow backwards-compatibility with existing code that uses the legacy modal registry.\r\n     * It is not necessary to register modals for code only present in Moodle 4.3 and later.\r\n     */\r\n    static registerModalType() {\r\n        if (!this.TYPE) {\r\n            throw new Error(`Unknown modal type`, this);\r\n        }\r\n\r\n        if (!this.TEMPLATE) {\r\n            throw new Error(`Unknown modal template`, this);\r\n        }\r\n        ModalRegistry.register(\r\n            this.TYPE,\r\n            this,\r\n            this.TEMPLATE,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create a new modal using the ModalFactory.\r\n     * This is a shortcut to creating the modal.\r\n     * Create a new modal using the supplied configuration.\r\n     *\r\n     * @param {ModalConfig} modalConfig\r\n     * @returns {Promise<Modal>}\r\n     */\r\n    static async create(modalConfig = {}) {\r\n        const pendingModalPromise = new Pending('core/modal_factory:create');\r\n        modalConfig.type = this.TYPE;\r\n\r\n        const templateName = this._getTemplateName(modalConfig);\r\n        const templateContext = modalConfig.templateContext || {};\r\n        const {html} = await Templates.renderForPromise(templateName, templateContext);\r\n\r\n        const modal = new this(html);\r\n        modal.configure(modalConfig);\r\n\r\n        pendingModalPromise.resolve();\r\n\r\n        return modal;\r\n    }\r\n\r\n    /**\r\n     * A helper to get the template name for this modal.\r\n     *\r\n     * @param {ModalConfig} modalConfig\r\n     * @returns {string}\r\n     * @protected\r\n     */\r\n    static _getTemplateName(modalConfig) {\r\n        if (modalConfig.template) {\r\n            return modalConfig.template;\r\n        }\r\n\r\n        if (this.TEMPLATE) {\r\n            return this.TEMPLATE;\r\n        }\r\n\r\n        if (ModalRegistry.has(this.TYPE)) {\r\n            // Note: This is provided as an interim backwards-compatability layer and will be removed four releases after 4.3.\r\n            window.console.warning(\r\n                'Use of core/modal_registry is deprecated. ' +\r\n                'Please define your modal template in a new static TEMPLATE property on your modal class.',\r\n            );\r\n            const config = ModalRegistry.get(this.TYPE);\r\n            return config.template;\r\n        }\r\n\r\n        throw new Error(`Unable to determine template name for modal ${this.TYPE}`);\r\n    }\r\n\r\n    /**\r\n     * Configure the modal.\r\n     *\r\n     * @param {ModalConfig} param0 The configuration options\r\n     */\r\n    configure({\r\n        show = false,\r\n        large = false,\r\n        isVerticallyCentered = false,\r\n        removeOnClose = false,\r\n        scrollable = true,\r\n        returnElement,\r\n        title,\r\n        body,\r\n        footer,\r\n        buttons = {},\r\n    } = {}) {\r\n        if (large) {\r\n            this.setLarge();\r\n        }\r\n\r\n        if (isVerticallyCentered) {\r\n            this.setVerticallyCentered();\r\n        }\r\n\r\n        // If configured remove the modal when hiding it.\r\n        // Ideally this should be true, but we need to identify places that this breaks first.\r\n        this.setRemoveOnClose(removeOnClose);\r\n        this.setReturnElement(returnElement);\r\n        this.setScrollable(scrollable);\r\n\r\n        if (title !== undefined) {\r\n            this.setTitle(title);\r\n        }\r\n\r\n        if (body !== undefined) {\r\n            this.setBody(body);\r\n        }\r\n\r\n        if (footer !== undefined) {\r\n            this.setFooter(footer);\r\n        }\r\n\r\n        Object.entries(buttons).forEach(([key, value]) => this.setButtonText(key, value));\r\n\r\n        // If configured show the modal.\r\n        if (show) {\r\n            this.show();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach the modal to the correct part of the page.\r\n     *\r\n     * If it hasn't already been added it runs any\r\n     * javascript that has been cached until now.\r\n     *\r\n     * @method attachToDOM\r\n     */\r\n    attachToDOM() {\r\n        this.getAttachmentPoint().append(this._root);\r\n\r\n        if (this.isAttached) {\r\n            return;\r\n        }\r\n\r\n        FocusLock.trapFocus(this.root[0]);\r\n\r\n        // If we'd cached any JS then we can run it how that the modal is\r\n        // attached to the DOM.\r\n        if (this.bodyJS) {\r\n            Templates.runTemplateJS(this.bodyJS);\r\n            this.bodyJS = null;\r\n        }\r\n\r\n        if (this.footerJS) {\r\n            Templates.runTemplateJS(this.footerJS);\r\n            this.footerJS = null;\r\n        }\r\n\r\n        this.isAttached = true;\r\n    }\r\n\r\n    /**\r\n     * Count the number of other visible modals (not including this one).\r\n     *\r\n     * @method countOtherVisibleModals\r\n     * @return {int}\r\n     */\r\n    countOtherVisibleModals() {\r\n        let count = 0;\r\n        $('body').find(SELECTORS.CONTAINER).each((index, element) => {\r\n            element = $(element);\r\n\r\n            // If we haven't found ourself and the element is visible.\r\n            if (!this.root.is(element) && element.hasClass('show')) {\r\n                count++;\r\n            }\r\n        });\r\n\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Get the modal backdrop.\r\n     *\r\n     * @method getBackdrop\r\n     * @return {object} jQuery promise\r\n     */\r\n    getBackdrop() {\r\n        if (!Modal.backdropPromise) {\r\n            Modal.backdropPromise = Templates.render(TEMPLATES.BACKDROP, {})\r\n                .then((html) => new ModalBackdrop($(html)))\r\n                .catch(Notification.exception);\r\n        }\r\n\r\n        return Modal.backdropPromise;\r\n    }\r\n\r\n    /**\r\n     * Get the root element of this modal.\r\n     *\r\n     * @method getRoot\r\n     * @return {object} jQuery object\r\n     */\r\n    getRoot() {\r\n        return this.root;\r\n    }\r\n\r\n    /**\r\n     * Get the modal element of this modal.\r\n     *\r\n     * @method getModal\r\n     * @return {object} jQuery object\r\n     */\r\n    getModal() {\r\n        return this.modal;\r\n    }\r\n\r\n    /**\r\n     * Get the modal title element.\r\n     *\r\n     * @method getTitle\r\n     * @return {object} jQuery object\r\n     */\r\n    getTitle() {\r\n        return this.title;\r\n    }\r\n\r\n    /**\r\n     * Get the modal body element.\r\n     *\r\n     * @method getBody\r\n     * @return {object} jQuery object\r\n     */\r\n    getBody() {\r\n        return this.body;\r\n    }\r\n\r\n    /**\r\n     * Get the modal footer element.\r\n     *\r\n     * @method getFooter\r\n     * @return {object} jQuery object\r\n     */\r\n    getFooter() {\r\n        return this.footer;\r\n    }\r\n\r\n    /**\r\n     * Get a promise resolving to the title region.\r\n     *\r\n     * @method getTitlePromise\r\n     * @return {Promise}\r\n     */\r\n    getTitlePromise() {\r\n        return this.titlePromise;\r\n    }\r\n\r\n    /**\r\n     * Get a promise resolving to the body region.\r\n     *\r\n     * @method getBodyPromise\r\n     * @return {object} jQuery object\r\n     */\r\n    getBodyPromise() {\r\n        return this.bodyPromise;\r\n    }\r\n\r\n    /**\r\n     * Get a promise resolving to the footer region.\r\n     *\r\n     * @method getFooterPromise\r\n     * @return {object} jQuery object\r\n     */\r\n    getFooterPromise() {\r\n        return this.footerPromise;\r\n    }\r\n\r\n    /**\r\n     * Get the unique modal count.\r\n     *\r\n     * @method getModalCount\r\n     * @return {int}\r\n     */\r\n    getModalCount() {\r\n        return this.modalCount;\r\n    }\r\n\r\n    /**\r\n     * Set the modal title element.\r\n     *\r\n     * This method is overloaded to take either a string value for the title or a jQuery promise that is resolved with\r\n     * HTML most commonly from a Str.get_string call.\r\n     *\r\n     * @method setTitle\r\n     * @param {(string|object)} value The title string or jQuery promise which resolves to the title.\r\n     */\r\n    setTitle(value) {\r\n        const title = this.getTitle();\r\n        this.titlePromise = $.Deferred();\r\n\r\n        this.asyncSet(value, title.html.bind(title))\r\n        .then(() => {\r\n            this.titlePromise.resolve(title);\r\n            return;\r\n        })\r\n        .catch(Notification.exception);\r\n    }\r\n\r\n    /**\r\n     * Set the modal body element.\r\n     *\r\n     * This method is overloaded to take either a string value for the body or a jQuery promise that is resolved with\r\n     * HTML and Javascript most commonly from a Templates.render call.\r\n     *\r\n     * @method setBody\r\n     * @param {(string|object)} value The body string or jQuery promise which resolves to the body.\r\n     * @fires event:filterContentUpdated\r\n     */\r\n    setBody(value) {\r\n        this.bodyPromise = $.Deferred();\r\n\r\n        const body = this.getBody();\r\n\r\n        if (typeof value === 'string') {\r\n            // Just set the value if it's a string.\r\n            body.html(value);\r\n            FilterEvents.notifyFilterContentUpdated(body);\r\n            this.getRoot().trigger(ModalEvents.bodyRendered, this);\r\n            this.bodyPromise.resolve(body);\r\n        } else {\r\n            const modalPromise = new Pending(`amd-modal-js-pending-id-${this.getModalCount()}`);\r\n            // Otherwise we assume it's a promise to be resolved with\r\n            // html and javascript.\r\n            let contentPromise = null;\r\n            body.css('overflow', 'hidden');\r\n\r\n            // Ensure that the `value` is a jQuery Promise.\r\n            value = $.when(value);\r\n\r\n            if (value.state() == 'pending') {\r\n                // We're still waiting for the body promise to resolve so\r\n                // let's show a loading icon.\r\n                let height = body.innerHeight();\r\n                if (height < 100) {\r\n                    height = 100;\r\n                }\r\n\r\n                body.animate({height: `${height}px`}, 150);\r\n\r\n                body.html('');\r\n                contentPromise = Templates.render(TEMPLATES.LOADING, {})\r\n                    .then((html) => {\r\n                        const loadingIcon = $(html).hide();\r\n                        body.html(loadingIcon);\r\n                        loadingIcon.fadeIn(150);\r\n\r\n                        // We only want the loading icon to fade out\r\n                        // when the content for the body has finished\r\n                        // loading.\r\n                        return $.when(loadingIcon.promise(), value);\r\n                    })\r\n                    .then((loadingIcon) => {\r\n                        // Once the content has finished loading and\r\n                        // the loading icon has been shown then we can\r\n                        // fade the icon away to reveal the content.\r\n                        return loadingIcon.fadeOut(100).promise();\r\n                    })\r\n                    .then(() => {\r\n                        return value;\r\n                    });\r\n            } else {\r\n                // The content is already loaded so let's just display\r\n                // it to the user. No need for a loading icon.\r\n                contentPromise = value;\r\n            }\r\n\r\n            // Now we can actually display the content.\r\n            contentPromise.then((html, js) => {\r\n                let result = null;\r\n\r\n                if (this.isVisible()) {\r\n                    // If the modal is visible then we should display\r\n                    // the content gracefully for the user.\r\n                    body.css('opacity', 0);\r\n                    const currentHeight = body.innerHeight();\r\n                    body.html(html);\r\n                    // We need to clear any height values we've set here\r\n                    // in order to measure the height of the content being\r\n                    // added. This then allows us to animate the height\r\n                    // transition.\r\n                    body.css('height', '');\r\n                    const newHeight = body.innerHeight();\r\n                    body.css('height', `${currentHeight}px`);\r\n                    result = body.animate(\r\n                        {height: `${newHeight}px`, opacity: 1},\r\n                        {duration: 150, queue: false}\r\n                    ).promise();\r\n                } else {\r\n                    // Since the modal isn't visible we can just immediately\r\n                    // set the content. No need to animate it.\r\n                    body.html(html);\r\n                }\r\n\r\n                if (js) {\r\n                    if (this.isAttached) {\r\n                        // If we're in the DOM then run the JS immediately.\r\n                        Templates.runTemplateJS(js);\r\n                    } else {\r\n                        // Otherwise cache it to be run when we're attached.\r\n                        this.bodyJS = js;\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            })\r\n            .then((result) => {\r\n                FilterEvents.notifyFilterContentUpdated(body);\r\n                this.getRoot().trigger(ModalEvents.bodyRendered, this);\r\n                return result;\r\n            })\r\n            .then(() => {\r\n                this.bodyPromise.resolve(body);\r\n                return;\r\n            })\r\n            .catch(Notification.exception)\r\n            .always(() => {\r\n                // When we're done displaying all of the content we need\r\n                // to clear the custom values we've set here.\r\n                body.css('height', '');\r\n                body.css('overflow', '');\r\n                body.css('opacity', '');\r\n                modalPromise.resolve();\r\n\r\n                return;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Alternative to setBody() that can be used from non-Jquery modules\r\n     *\r\n     * @param {Promise} promise promise that returns {html, js} object\r\n     * @return {Promise}\r\n     */\r\n    setBodyContent(promise) {\r\n        // Call the leegacy API for now and pass it a jQuery Promise.\r\n        // This is a non-spec feature of jQuery and cannot be produced with spec promises.\r\n        // We can encourage people to migrate to this approach, and in future we can swap\r\n        // it so that setBody() calls setBodyPromise().\r\n        return promise.then(({html, js}) => this.setBody($.when(html, js)))\r\n            .catch(exception => {\r\n                this.hide();\r\n                throw exception;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Set the modal footer element. The footer element is made visible, if it\r\n     * isn't already.\r\n     *\r\n     * This method is overloaded to take either a string\r\n     * value for the body or a jQuery promise that is resolved with HTML and Javascript\r\n     * most commonly from a Templates.render call.\r\n     *\r\n     * @method setFooter\r\n     * @param {(string|object)} value The footer string or jQuery promise\r\n     */\r\n    setFooter(value) {\r\n        // Make sure the footer is visible.\r\n        this.showFooter();\r\n        this.footerPromise = $.Deferred();\r\n\r\n        const footer = this.getFooter();\r\n\r\n        if (typeof value === 'string') {\r\n            // Just set the value if it's a string.\r\n            footer.html(value);\r\n            this.footerPromise.resolve(footer);\r\n        } else {\r\n            // Otherwise we assume it's a promise to be resolved with\r\n            // html and javascript.\r\n            Templates.render(TEMPLATES.LOADING, {})\r\n            .then((html) => {\r\n                footer.html(html);\r\n\r\n                return value;\r\n            })\r\n            .then((html, js) => {\r\n                footer.html(html);\r\n\r\n                if (js) {\r\n                    if (this.isAttached) {\r\n                        // If we're in the DOM then run the JS immediately.\r\n                        Templates.runTemplateJS(js);\r\n                    } else {\r\n                        // Otherwise cache it to be run when we're attached.\r\n                        this.footerJS = js;\r\n                    }\r\n                }\r\n\r\n                return footer;\r\n            })\r\n            .then((footer) => {\r\n                this.footerPromise.resolve(footer);\r\n                this.showFooter();\r\n                return;\r\n            })\r\n            .catch(Notification.exception);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if the footer has any content in it.\r\n     *\r\n     * @method hasFooterContent\r\n     * @return {bool}\r\n     */\r\n    hasFooterContent() {\r\n        return this.getFooter().children().length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Hide the footer element.\r\n     *\r\n     * @method hideFooter\r\n     */\r\n    hideFooter() {\r\n        this.getFooter().addClass('hidden');\r\n    }\r\n\r\n    /**\r\n     * Show the footer element.\r\n     *\r\n     * @method showFooter\r\n     */\r\n    showFooter() {\r\n        this.getFooter().removeClass('hidden');\r\n    }\r\n\r\n    /**\r\n     * Mark the modal as a large modal.\r\n     *\r\n     * @method setLarge\r\n     */\r\n    setLarge() {\r\n        if (this.isLarge()) {\r\n            return;\r\n        }\r\n\r\n        this.getModal().addClass('modal-lg');\r\n    }\r\n\r\n    /**\r\n     * Mark the modal as a centered modal.\r\n     *\r\n     * @method setVerticallyCentered\r\n     */\r\n    setVerticallyCentered() {\r\n        if (this.isVerticallyCentered()) {\r\n            return;\r\n        }\r\n        this.getModal().addClass('modal-dialog-centered');\r\n    }\r\n\r\n    /**\r\n     * Check if the modal is a large modal.\r\n     *\r\n     * @method isLarge\r\n     * @return {bool}\r\n     */\r\n    isLarge() {\r\n        return this.getModal().hasClass('modal-lg');\r\n    }\r\n\r\n    /**\r\n     * Check if the modal is vertically centered.\r\n     *\r\n     * @method isVerticallyCentered\r\n     * @return {bool}\r\n     */\r\n    isVerticallyCentered() {\r\n        return this.getModal().hasClass('modal-dialog-centered');\r\n    }\r\n\r\n    /**\r\n     * Mark the modal as a small modal.\r\n     *\r\n     * @method setSmall\r\n     */\r\n    setSmall() {\r\n        if (this.isSmall()) {\r\n            return;\r\n        }\r\n\r\n        this.getModal().removeClass('modal-lg');\r\n    }\r\n\r\n    /**\r\n     * Check if the modal is a small modal.\r\n     *\r\n     * @method isSmall\r\n     * @return {bool}\r\n     */\r\n    isSmall() {\r\n        return !this.getModal().hasClass('modal-lg');\r\n    }\r\n\r\n    /**\r\n     * Set this modal to be scrollable or not.\r\n     *\r\n     * @method setScrollable\r\n     * @param {bool} value Whether the modal is scrollable or not\r\n     */\r\n    setScrollable(value) {\r\n        if (!value) {\r\n            this.getModal()[0].classList.remove('modal-dialog-scrollable');\r\n            return;\r\n        }\r\n\r\n        this.getModal()[0].classList.add('modal-dialog-scrollable');\r\n    }\r\n\r\n\r\n    /**\r\n     * Determine the highest z-index value currently on the page.\r\n     *\r\n     * @method calculateZIndex\r\n     * @return {int}\r\n     */\r\n    calculateZIndex() {\r\n        const items = $(`${SELECTORS.DIALOG}, ${SELECTORS.MENU_BAR}, ${SELECTORS.HAS_Z_INDEX}`);\r\n        let zIndex = parseInt(this.root.css('z-index'));\r\n\r\n        items.each((index, item) => {\r\n            item = $(item);\r\n            if (!item.is(':visible')) {\r\n                // Do not include items which are not visible in the z-index calculation.\r\n                // This is important because some dialogues are not removed from the DOM.\r\n                return;\r\n            }\r\n            // Note that webkit browsers won't return the z-index value from the CSS stylesheet\r\n            // if the element doesn't have a position specified. Instead it'll return \"auto\".\r\n            const itemZIndex = item.css('z-index') ? parseInt(item.css('z-index')) : 0;\r\n\r\n            if (itemZIndex > zIndex) {\r\n                zIndex = itemZIndex;\r\n            }\r\n        });\r\n\r\n        return zIndex;\r\n    }\r\n\r\n    /**\r\n     * Check if this modal is visible.\r\n     *\r\n     * @method isVisible\r\n     * @return {bool}\r\n     */\r\n    isVisible() {\r\n        return this.root.hasClass('show');\r\n    }\r\n\r\n    /**\r\n     * Check if this modal has focus.\r\n     *\r\n     * @method hasFocus\r\n     * @return {bool}\r\n     */\r\n    hasFocus() {\r\n        const target = $(document.activeElement);\r\n        return this.root.is(target) || this.root.has(target).length;\r\n    }\r\n\r\n    /**\r\n     * Check if this modal has CSS transitions applied.\r\n     *\r\n     * @method hasTransitions\r\n     * @return {bool}\r\n     */\r\n    hasTransitions() {\r\n        return this.getRoot().hasClass('fade');\r\n    }\r\n\r\n    /**\r\n     * Gets the jQuery wrapped node that the Modal should be attached to.\r\n     *\r\n     * @returns {jQuery}\r\n     */\r\n    getAttachmentPoint() {\r\n        return $(Fullscreen.getElement() || this.attachmentPoint);\r\n    }\r\n\r\n    /**\r\n     * Display this modal. The modal will be attached to the DOM if it hasn't\r\n     * already been.\r\n     *\r\n     * @method show\r\n     * @returns {Promise}\r\n     */\r\n    show() {\r\n        if (this.isVisible()) {\r\n            return $.Deferred().resolve();\r\n        }\r\n\r\n        const pendingPromise = new Pending('core/modal:show');\r\n\r\n        if (this.hasFooterContent()) {\r\n            this.showFooter();\r\n        } else {\r\n            this.hideFooter();\r\n        }\r\n\r\n        this.attachToDOM();\r\n\r\n        // If the focusOnClose was not set. Set the focus back to triggered element.\r\n        if (!this.focusOnClose && document.activeElement) {\r\n            this.focusOnClose = document.activeElement;\r\n        }\r\n\r\n        return this.getBackdrop()\r\n        .then((backdrop) => {\r\n            const currentIndex = this.calculateZIndex();\r\n            const newIndex = currentIndex + 2;\r\n            const newBackdropIndex = newIndex - 1;\r\n            this.root.css('z-index', newIndex);\r\n            backdrop.setZIndex(newBackdropIndex);\r\n            backdrop.show();\r\n\r\n            this.root.removeClass('hide').addClass('show');\r\n            this.accessibilityShow();\r\n            this.getModal().focus();\r\n            $('body').addClass('modal-open');\r\n            this.root.trigger(ModalEvents.shown, this);\r\n\r\n            return;\r\n        })\r\n        .then(pendingPromise.resolve);\r\n    }\r\n\r\n    /**\r\n     * Hide this modal if it does not contain a form.\r\n     *\r\n     * @method hideIfNotForm\r\n     */\r\n    hideIfNotForm() {\r\n        const formElement = this.modal.find(SELECTORS.FORM);\r\n        if (formElement.length == 0) {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide this modal.\r\n     *\r\n     * @method hide\r\n     */\r\n    hide() {\r\n        this.getBackdrop().done((backdrop) => {\r\n            FocusLock.untrapFocus();\r\n\r\n            if (!this.countOtherVisibleModals()) {\r\n                // Hide the backdrop if we're the last open modal.\r\n                backdrop.hide();\r\n                $('body').removeClass('modal-open');\r\n            }\r\n\r\n            const currentIndex = parseInt(this.root.css('z-index'));\r\n            this.root.css('z-index', '');\r\n            backdrop.setZIndex(currentIndex - 3);\r\n\r\n            this.accessibilityHide();\r\n\r\n            if (this.hasTransitions()) {\r\n                // Wait for CSS transitions to complete before hiding the element.\r\n                this.getRoot().one('transitionend webkitTransitionEnd oTransitionEnd', () => {\r\n                    this.getRoot().removeClass('show').addClass('hide');\r\n                });\r\n            } else {\r\n                this.getRoot().removeClass('show').addClass('hide');\r\n            }\r\n\r\n            // Ensure the modal is moved onto the body node if it is still attached to the DOM.\r\n            if ($(document.body).find(this.getRoot()).length) {\r\n                $(document.body).append(this.getRoot());\r\n            }\r\n\r\n            // Closes popover elements that are inside the modal at the time the modal is closed.\r\n            this.getRoot().find('[data-toggle=\"popover\"]').each(function() {\r\n                document.getElementById(this.getAttribute('aria-describedby'))?.remove();\r\n            });\r\n\r\n            this.root.trigger(ModalEvents.hidden, this);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Remove this modal from the DOM.\r\n     *\r\n     * @method destroy\r\n     */\r\n    destroy() {\r\n        this.hide();\r\n        removeToastRegion(this.getBody().get(0));\r\n        this.root.remove();\r\n        this.root.trigger(ModalEvents.destroyed, this);\r\n        this.attachmentPoint.remove();\r\n    }\r\n\r\n    /**\r\n     * Sets the appropriate aria attributes on this dialogue and the other\r\n     * elements in the DOM to ensure that screen readers are able to navigate\r\n     * the dialogue popup correctly.\r\n     *\r\n     * @method accessibilityShow\r\n     */\r\n    accessibilityShow() {\r\n        // Make us visible to screen readers.\r\n        Aria.unhide(this.root.get());\r\n\r\n        // Hide siblings.\r\n        Aria.hideSiblings(this.root.get()[0]);\r\n    }\r\n\r\n    /**\r\n     * Restores the aria visibility on the DOM elements changed when displaying\r\n     * the dialogue popup and makes the dialogue aria hidden to allow screen\r\n     * readers to navigate the main page correctly when the dialogue is closed.\r\n     *\r\n     * @method accessibilityHide\r\n     */\r\n    accessibilityHide() {\r\n        // Unhide siblings.\r\n        Aria.unhideSiblings(this.root.get()[0]);\r\n\r\n        // Hide this modal.\r\n        Aria.hide(this.root.get());\r\n    }\r\n\r\n    /**\r\n     * Set up all of the event handling for the modal.\r\n     *\r\n     * @method registerEventListeners\r\n     */\r\n    registerEventListeners() {\r\n        this.getRoot().on('keydown', (e) => {\r\n            if (!this.isVisible()) {\r\n                return;\r\n            }\r\n\r\n            if (e.keyCode == KeyCodes.escape) {\r\n                if (this.removeOnClose) {\r\n                    this.destroy();\r\n                } else {\r\n                    this.hide();\r\n                }\r\n            }\r\n        });\r\n\r\n        // Listen for clicks on the modal container.\r\n        this.getRoot().click((e) => {\r\n            // If the click wasn't inside the modal element then we should\r\n            // hide the modal.\r\n            if (!$(e.target).closest(SELECTORS.MODAL).length) {\r\n                // The check above fails to detect the click was inside the modal when the DOM tree is already changed.\r\n                // So, we check if we can still find the container element or not. If not, then the DOM tree is changed.\r\n                // It's best not to hide the modal in that case.\r\n                if ($(e.target).closest(SELECTORS.CONTAINER).length) {\r\n                    const outsideClickEvent = $.Event(ModalEvents.outsideClick);\r\n                    this.getRoot().trigger(outsideClickEvent, this);\r\n\r\n                    if (!outsideClickEvent.isDefaultPrevented()) {\r\n                        this.hideIfNotForm();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        CustomEvents.define(this.getModal(), [CustomEvents.events.activate]);\r\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.HIDE, (e, data) => {\r\n            if (this.removeOnClose) {\r\n                this.destroy();\r\n            } else {\r\n                this.hide();\r\n            }\r\n            data.originalEvent.preventDefault();\r\n        });\r\n\r\n        this.getRoot().on(ModalEvents.hidden, () => {\r\n            if (this.focusOnClose) {\r\n                // Focus on the element that actually triggers the modal.\r\n                this.focusOnClose.focus();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Register a listener to close the dialogue when the cancel button is pressed.\r\n     *\r\n     * @method registerCloseOnCancel\r\n     */\r\n    registerCloseOnCancel() {\r\n        // Handle the clicking of the Cancel button.\r\n        this.getModal().on(CustomEvents.events.activate, this.getActionSelector('cancel'), (e, data) => {\r\n            const cancelEvent = $.Event(ModalEvents.cancel);\r\n            this.getRoot().trigger(cancelEvent, this);\r\n\r\n            if (!cancelEvent.isDefaultPrevented()) {\r\n                data.originalEvent.preventDefault();\r\n\r\n                if (this.removeOnClose) {\r\n                    this.destroy();\r\n                } else {\r\n                    this.hide();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Register a listener to close the dialogue when the save button is pressed.\r\n     *\r\n     * @method registerCloseOnSave\r\n     */\r\n    registerCloseOnSave() {\r\n        // Handle the clicking of the Cancel button.\r\n        this.getModal().on(CustomEvents.events.activate, this.getActionSelector('save'), (e, data) => {\r\n            const saveEvent = $.Event(ModalEvents.save);\r\n            this.getRoot().trigger(saveEvent, this);\r\n\r\n            if (!saveEvent.isDefaultPrevented()) {\r\n                data.originalEvent.preventDefault();\r\n\r\n                if (this.removeOnClose) {\r\n                    this.destroy();\r\n                } else {\r\n                    this.hide();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Register a listener to close the dialogue when the delete button is pressed.\r\n     *\r\n     * @method registerCloseOnDelete\r\n     */\r\n    registerCloseOnDelete() {\r\n        // Handle the clicking of the Cancel button.\r\n        this.getModal().on(CustomEvents.events.activate, this.getActionSelector('delete'), (e, data) => {\r\n            const deleteEvent = $.Event(ModalEvents.delete);\r\n            this.getRoot().trigger(deleteEvent, this);\r\n\r\n            if (!deleteEvent.isDefaultPrevented()) {\r\n                data.originalEvent.preventDefault();\r\n\r\n                if (this.removeOnClose) {\r\n                    this.destroy();\r\n                } else {\r\n                    this.hide();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set or resolve and set the value using the function.\r\n     *\r\n     * @method asyncSet\r\n     * @param {(string|object)} value The string or jQuery promise.\r\n     * @param {function} setFunction The setter\r\n     * @return {Promise}\r\n     */\r\n    asyncSet(value, setFunction) {\r\n        const getWrappedValue = (value) => {\r\n            if (value instanceof Promise) {\r\n                return $.when(value);\r\n            }\r\n\r\n            if (typeof value !== 'object' || !value.hasOwnProperty('then')) {\r\n                return $.Deferred().resolve(value);\r\n            }\r\n\r\n            return value;\r\n        };\r\n\r\n        return getWrappedValue(value)\r\n            .then((content) => setFunction(content))\r\n            .catch(Notification.exception);\r\n    }\r\n\r\n    /**\r\n     * Set the title text of a button.\r\n     *\r\n     * This method is overloaded to take either a string value for the button title or a jQuery promise that is resolved with\r\n     * text most commonly from a Str.get_string call.\r\n     *\r\n     * @param {DOMString} action The action of the button\r\n     * @param {(String|object)} value The button text, or a promise which will resolve to it\r\n     * @returns {Promise}\r\n     */\r\n    setButtonText(action, value) {\r\n        const button = this.getFooter().find(this.getActionSelector(action));\r\n\r\n        if (!button) {\r\n            throw new Error(\"Unable to find the '\" + action + \"' button\");\r\n        }\r\n\r\n        return this.asyncSet(value, button.text.bind(button));\r\n    }\r\n\r\n    /**\r\n     * Get the Selector for an action.\r\n     *\r\n     * @param {String} action\r\n     * @returns {DOMString}\r\n     */\r\n    getActionSelector(action) {\r\n        return \"[data-action='\" + action + \"']\";\r\n    }\r\n\r\n    /**\r\n     * Set the flag to remove the modal from the DOM on close.\r\n     *\r\n     * @param {Boolean} remove\r\n     */\r\n    setRemoveOnClose(remove) {\r\n        this.removeOnClose = remove;\r\n    }\r\n\r\n    /**\r\n     * Set the return element for the modal.\r\n     *\r\n     * @param {Element|jQuery} element Element to focus when the modal is closed\r\n     */\r\n    setReturnElement(element) {\r\n        this.focusOnClose = element;\r\n    }\r\n\r\n    /**\r\n     * Set the a button enabled or disabled.\r\n     *\r\n     * @param {DOMString} action The action of the button\r\n     * @param {Boolean} disabled the new disabled value\r\n     */\r\n    setButtonDisabled(action, disabled) {\r\n        const button = this.getFooter().find(this.getActionSelector(action));\r\n\r\n        if (!button) {\r\n            throw new Error(\"Unable to find the '\" + action + \"' button\");\r\n        }\r\n        if (disabled) {\r\n            button.attr('disabled', '');\r\n        } else {\r\n            button.removeAttr('disabled');\r\n        }\r\n    }\r\n}\r\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireDefault","_jquery","Templates","Notification","KeyCodes","_modal_backdrop","_modal_events","ModalRegistry","_pending","CustomEvents","FilterEvents","FocusLock","Aria","Fullscreen","SELECTORS","TEMPLATES","Modal","static","root","$","this","_root","filter","constructor","modal","find","header","headerPromise","Deferred","title","titlePromise","body","bodyPromise","footer","footerPromise","hiddenSiblings","isAttached","bodyJS","footerJS","modalCount","modalCounter","attachmentPoint","document","createElement","append","focusOnClose","is","exception","message","length","registerEventListeners","registerModalType","TYPE","Error","TEMPLATE","register","create","modalConfig","arguments","undefined","pendingModalPromise","Pending","type","templateName","_getTemplateName","templateContext","html","renderForPromise","configure","resolve","template","window","console","warning","show","large","isVerticallyCentered","removeOnClose","scrollable","returnElement","buttons","setLarge","setVerticallyCentered","setRemoveOnClose","setReturnElement","setScrollable","setTitle","setBody","setFooter","entries","forEach","_ref","key","value","setButtonText","attachToDOM","getAttachmentPoint","trapFocus","runTemplateJS","countOtherVisibleModals","count","each","index","element","hasClass","getBackdrop","backdropPromise","render","then","ModalBackdrop","catch","getRoot","getModal","getTitle","getBody","getFooter","getTitlePromise","getBodyPromise","getFooterPromise","getModalCount","asyncSet","bind","notifyFilterContentUpdated","trigger","ModalEvents","bodyRendered","modalPromise","contentPromise","css","when","state","height","innerHeight","animate","loadingIcon","hide","fadeIn","promise","fadeOut","js","result","isVisible","currentHeight","newHeight","opacity","duration","queue","always","setBodyContent","_ref2","showFooter","hasFooterContent","children","hideFooter","addClass","removeClass","isLarge","setSmall","isSmall","classList","add","remove","calculateZIndex","items","zIndex","parseInt","item","itemZIndex","hasFocus","target","activeElement","hasTransitions","getElement","pendingPromise","backdrop","newIndex","newBackdropIndex","setZIndex","accessibilityShow","focus","shown","hideIfNotForm","done","untrapFocus","currentIndex","accessibilityHide","one","getElementById","getAttribute","hidden","destroy","removeToastRegion","destroyed","unhide","hideSiblings","unhideSiblings","on","keyCode","escape","click","closest","outsideClickEvent","Event","outsideClick","isDefaultPrevented","define","events","activate","data","originalEvent","preventDefault","registerCloseOnCancel","getActionSelector","cancelEvent","cancel","registerCloseOnSave","saveEvent","save","registerCloseOnDelete","deleteEvent","delete","setFunction","Promise","getWrappedValue","content","action","button","text","setButtonDisabled","disabled","attr","removeAttr","_exports"],"mappings":"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"}