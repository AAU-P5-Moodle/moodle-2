{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Utility functions.\r\n *\r\n * @module core/utils\r\n * @copyright  2019 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Pending from 'core/pending';\r\nimport jQuery from 'jquery';\r\n\r\n /**\r\n  * Create a wrapper function to throttle the execution of the given\r\n  *\r\n  * function to at most once every specified period.\r\n  *\r\n  * If the function is attempted to be executed while it's in cooldown\r\n  * (during the wait period) then it'll immediately execute again as\r\n  * soon as the cooldown is over.\r\n  *\r\n  * @method\r\n  * @param {Function} func The function to throttle\r\n  * @param {Number} wait The number of milliseconds to wait between executions\r\n  * @return {Function}\r\n  */\r\nexport const throttle = (func, wait) => {\r\n    let onCooldown = false;\r\n    let runAgain = null;\r\n    const run = function(...args) {\r\n        if (runAgain === null) {\r\n            // This is the first time the function has been called.\r\n            runAgain = false;\r\n        } else {\r\n            // This function has been called a second time during the wait period\r\n            // so re-run it once the wait period is over.\r\n            runAgain = true;\r\n        }\r\n\r\n        if (onCooldown) {\r\n            // Function has already run for this wait period.\r\n            return;\r\n        }\r\n\r\n        func.apply(this, args);\r\n        onCooldown = true;\r\n\r\n        setTimeout(() => {\r\n            const recurse = runAgain;\r\n            onCooldown = false;\r\n            runAgain = null;\r\n\r\n            if (recurse) {\r\n                run(args);\r\n            }\r\n        }, wait);\r\n    };\r\n\r\n    return run;\r\n};\r\n\r\n/**\r\n * @property {Map} debounceMap A map of functions to their debounced pending promises.\r\n */\r\nconst debounceMap = new Map();\r\n\r\n/**\r\n * Create a wrapper function to debounce the execution of the given\r\n * function. Each attempt to execute the function will reset the cooldown\r\n * period.\r\n *\r\n * @method\r\n * @param {Function} func The function to debounce\r\n * @param {Number} wait The number of milliseconds to wait after the final attempt to execute\r\n * @param {Object} [options]\r\n * @param {boolean} [options.pending=false] Whether to wrap the debounced method in a pending promise\r\n * @param {boolean} [options.cancel=false] Whether to add a cancel method to the debounced function\r\n * @return {Function}\r\n */\r\nexport const debounce = (\r\n    func,\r\n    wait,\r\n    {\r\n        pending = false,\r\n        cancel = false,\r\n    } = {},\r\n) => {\r\n    let timeout = null;\r\n\r\n    const returnedFunction = (...args) => {\r\n        if (pending && !debounceMap.has(returnedFunction)) {\r\n            debounceMap.set(returnedFunction, new Pending('core/utils:debounce'));\r\n        }\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(async () => {\r\n            // Get the current pending promise and immediately empty it.\r\n            // This is important to allow the function to be debounced again as soon as possible.\r\n            // We do not resolve it until later - but that's fine because the promise is appropriately scoped.\r\n            const pendingPromise = debounceMap.get(returnedFunction);\r\n            debounceMap.delete(returnedFunction);\r\n\r\n            // Allow the debounced function to return a Promise.\r\n            // This ensures that Behat will not continue until the function has finished executing.\r\n            await func.apply(this, args);\r\n\r\n            // Resolve the pending promise if it exists.\r\n            pendingPromise?.resolve();\r\n        }, wait);\r\n    };\r\n\r\n    if (cancel) {\r\n        returnedFunction.cancel = () => {\r\n            const pendingPromise = debounceMap.get(returnedFunction);\r\n            pendingPromise?.resolve();\r\n            clearTimeout(timeout);\r\n        };\r\n    }\r\n\r\n    return returnedFunction;\r\n};\r\n\r\n/**\r\n * Normalise the provided component such that '', 'moodle', and 'core' are treated consistently.\r\n *\r\n * @param   {String} component\r\n * @returns {String}\r\n */\r\nexport const getNormalisedComponent = (component) => {\r\n    if (component) {\r\n        if (component !== 'moodle' && component !== 'core') {\r\n            return component;\r\n        }\r\n    }\r\n\r\n    return 'core';\r\n};\r\n\r\n/**\r\n * Wrap a Native Promise in a jQuery Whenable for b/c.\r\n *\r\n * @param {*} promise\r\n * @returns {jQuery}\r\n */\r\nexport const wrapPromiseInWhenable = (promise) => jQuery.when(promise);\r\n"],"names":["_pending","_interopRequireDefault","_jquery","e","__esModule","default","_exports","throttle","func","wait","onCooldown","runAgain","run","_len","arguments","length","args","Array","_key","apply","this","setTimeout","recurse","debounceMap","Map","debounce","pending","cancel","undefined","timeout","returnedFunction","_len2","_key2","has","set","Pending","clearTimeout","async","pendingPromise","get","delete","resolve","getNormalisedComponent","component","wrapPromiseInWhenable","promise","jQuery","when"],"mappings":"+PAuBAA,SAAAC,uBAAAD,UACAE,QAAAD,uBAAAC;;;;;;;;AATA,SAAAD,uBAAAE,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA,CA0DEG,SAAAC,SAjCsBA,CAACC,KAAMC,QAC3B,IAAIC,YAAa,EACbC,SAAW,KACf,MAAMC,IAAM,WAAkB,IAAA,IAAAC,KAAAC,UAAAC,OAANC,KAAIC,IAAAA,MAAAJ,MAAAK,KAAA,EAAAA,KAAAL,KAAAK,OAAJF,KAAIE,MAAAJ,UAAAI,MAGpBP,SAFa,OAAbA,SASAD,aAKJF,KAAKW,MAAMC,KAAMJ,MACjBN,YAAa,EAEbW,YAAW,KACP,MAAMC,QAAUX,SAChBD,YAAa,EACbC,SAAW,KAEPW,SACAV,IAAII,KACR,GACDP,QAGP,OAAOG,GAAG,EAMd,MAAMW,YAAc,IAAIC,IAuDtBlB,SAAAmB,SAxCsB,SACpBjB,KACAC,MAKC,IAJDiB,QACIA,SAAU,EAAKC,OACfA,QAAS,GACZb,UAAAC,OAAAD,QAAAc,IAAAd,UAAAc,GAAAd,UAAG,GAAA,GAEAe,QAAU,KAEd,MAAMC,iBAAmB,WAAa,IAAA,IAAAC,MAAAjB,UAAAC,OAATC,KAAIC,IAAAA,MAAAc,OAAAC,MAAA,EAAAA,MAAAD,MAAAC,QAAJhB,KAAIgB,OAAAlB,UAAAkB,OACzBN,UAAYH,YAAYU,IAAIH,mBAC5BP,YAAYW,IAAIJ,iBAAkB,IAAIK,SAAO9B,QAAC,wBAElD+B,aAAaP,SACbA,QAAUR,YAAWgB,UAIjB,MAAMC,eAAiBf,YAAYgB,IAAIT,kBACvCP,YAAYiB,OAAOV,wBAIbtB,KAAKW,MA7FK,UA6FOH,MAGvBsB,gBAAgBG,SAAS,GAC1BhC,OAWP,OARIkB,SACAG,iBAAiBH,OAAS,KACtB,MAAMW,eAAiBf,YAAYgB,IAAIT,kBACvCQ,gBAAgBG,UAChBL,aAAaP,QAAQ,GAItBC,kBAiBTxB,SAAAoC,uBARqCC,WAC/BA,WACkB,WAAdA,WAAwC,SAAdA,UACnBA,UAIR,OAS4DrC,SAAAsC,sBAAjCC,SAAYC,gBAAOC,KAAKF,QAAS"}