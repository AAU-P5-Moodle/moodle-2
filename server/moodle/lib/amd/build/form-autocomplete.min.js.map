{"version":3,"file":"form-autocomplete.min.js","sources":["../src/form-autocomplete.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Autocomplete wrapper for select2 library.\r\n *\r\n * @module     core/form-autocomplete\r\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/log',\r\n    'core/str',\r\n    'core/templates',\r\n    'core/notification',\r\n    'core/loadingicon',\r\n    'core/aria',\r\n    'core_form/changechecker',\r\n], function(\r\n    $,\r\n    log,\r\n    str,\r\n    templates,\r\n    notification,\r\n    LoadingIcon,\r\n    Aria,\r\n    FormChangeChecker\r\n) {\r\n    // Private functions and variables.\r\n    /** @var {Object} KEYS - List of keycode constants. */\r\n    var KEYS = {\r\n        DOWN: 40,\r\n        ENTER: 13,\r\n        SPACE: 32,\r\n        ESCAPE: 27,\r\n        COMMA: 44,\r\n        UP: 38,\r\n        LEFT: 37,\r\n        RIGHT: 39\r\n    };\r\n\r\n    var uniqueId = Date.now();\r\n\r\n    /**\r\n     * Make an item in the selection list \"active\".\r\n     *\r\n     * @method activateSelection\r\n     * @private\r\n     * @param {Number} index The index in the current (visible) list of selection.\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @return {Promise}\r\n     */\r\n    var activateSelection = function(index, state) {\r\n        // Find the elements in the DOM.\r\n        var selectionElement = $(document.getElementById(state.selectionId));\r\n\r\n        index = wrapListIndex(index, selectionElement.children('[aria-selected=true]').length);\r\n        // Find the specified element.\r\n        var element = $(selectionElement.children('[aria-selected=true]').get(index));\r\n        // Create an id we can assign to this element.\r\n        var itemId = state.selectionId + '-' + index;\r\n\r\n        // Deselect all the selections.\r\n        selectionElement.children().attr('data-active-selection', null).attr('id', '');\r\n\r\n        // Select only this suggestion and assign it the id.\r\n        element.attr('data-active-selection', true).attr('id', itemId);\r\n\r\n        // Tell the input field it has a new active descendant so the item is announced.\r\n        selectionElement.attr('aria-activedescendant', itemId);\r\n        selectionElement.attr('data-active-value', element.attr('data-value'));\r\n\r\n        return $.Deferred().resolve();\r\n    };\r\n\r\n    /**\r\n     * Get the actively selected element from the state object.\r\n     *\r\n     * @param   {Object} state\r\n     * @returns {jQuery}\r\n     */\r\n    var getActiveElementFromState = function(state) {\r\n        var selectionRegion = $(document.getElementById(state.selectionId));\r\n        var activeId = selectionRegion.attr('aria-activedescendant');\r\n\r\n        if (activeId) {\r\n            var activeElement = $(document.getElementById(activeId));\r\n            if (activeElement.length) {\r\n                // The active descendent still exists.\r\n                return activeElement;\r\n            }\r\n        }\r\n\r\n        // Ensure we are creating a properly formed selector based on the active value.\r\n        var activeValue = selectionRegion.attr('data-active-value')?.replace(/\"/g, '\\\\\"');\r\n        return selectionRegion.find('[data-value=\"' + activeValue + '\"]');\r\n    };\r\n\r\n    /**\r\n     * Update the active selection from the given state object.\r\n     *\r\n     * @param   {Object} state\r\n     */\r\n    var updateActiveSelectionFromState = function(state) {\r\n        var activeElement = getActiveElementFromState(state);\r\n        var activeValue = activeElement.attr('data-value');\r\n\r\n        var selectionRegion = $(document.getElementById(state.selectionId));\r\n        if (activeValue) {\r\n            // Find the index of the currently selected index.\r\n            var activeIndex = selectionRegion.find('[aria-selected=true]').index(activeElement);\r\n\r\n            if (activeIndex !== -1) {\r\n                activateSelection(activeIndex, state);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Either the active index was not set, or it could not be found.\r\n        // Select the first value instead.\r\n        activateSelection(0, state);\r\n    };\r\n\r\n    /**\r\n     * Update the element that shows the currently selected items.\r\n     *\r\n     * @method updateSelectionList\r\n     * @private\r\n     * @param {Object} options Original options for this autocomplete element.\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     * @return {Promise}\r\n     */\r\n    var updateSelectionList = function(options, state, originalSelect) {\r\n        var pendingKey = 'form-autocomplete-updateSelectionList-' + state.inputId;\r\n        M.util.js_pending(pendingKey);\r\n\r\n        // Build up a valid context to re-render the template.\r\n        var items = rebuildOptions(originalSelect.children('option:selected'), false);\r\n        var newSelection = $(document.getElementById(state.selectionId));\r\n\r\n        if (!hasItemListChanged(state, items)) {\r\n            M.util.js_complete(pendingKey);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        state.items = items;\r\n\r\n        var context = $.extend(options, state);\r\n        // Render the template.\r\n        return templates.render(options.templates.items, context)\r\n        .then(function(html, js) {\r\n            // Add it to the page.\r\n            templates.replaceNodeContents(newSelection, html, js);\r\n\r\n            updateActiveSelectionFromState(state);\r\n\r\n            return;\r\n        })\r\n        .then(function() {\r\n            return M.util.js_complete(pendingKey);\r\n        })\r\n        .catch(notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Check whether the list of items stored in the state has changed.\r\n     *\r\n     * @param   {Object} state\r\n     * @param   {Array} items\r\n     * @returns {Boolean}\r\n     */\r\n    var hasItemListChanged = function(state, items) {\r\n        if (state.items.length !== items.length) {\r\n            return true;\r\n        }\r\n\r\n        // Check for any items in the state items which are not present in the new items list.\r\n        return state.items.filter(item => items.indexOf(item) === -1).length > 0;\r\n    };\r\n\r\n    /**\r\n     * Notify of a change in the selection.\r\n     *\r\n     * @param {jQuery} originalSelect The jQuery object matching the hidden select list.\r\n     */\r\n    var notifyChange = function(originalSelect) {\r\n        FormChangeChecker.markFormChangedFromNode(originalSelect[0]);\r\n\r\n        // Note, jQuery .change() was not working here. Better to\r\n        // use plain JavaScript anyway.\r\n        originalSelect[0].dispatchEvent(new Event('change', {bubbles: true}));\r\n    };\r\n\r\n    /**\r\n     * Remove the given item from the list of selected things.\r\n     *\r\n     * @method deselectItem\r\n     * @private\r\n     * @param {Object} options Original options for this autocomplete element.\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @param {Element} item The item to be deselected.\r\n     * @param {Element} originalSelect The original select list.\r\n     * @return {Promise}\r\n     */\r\n    var deselectItem = function(options, state, item, originalSelect) {\r\n        var selectedItemValue = $(item).attr('data-value');\r\n\r\n        // Preprend an empty option to the select list to avoid having a default selected option.\r\n        if (originalSelect.find('option').first().attr('value') !== undefined) {\r\n            originalSelect.prepend($('<option>'));\r\n        }\r\n\r\n        // Look for a match, and toggle the selected property if there is a match.\r\n        originalSelect.children('option').each(function(index, ele) {\r\n            if ($(ele).attr('value') == selectedItemValue) {\r\n                $(ele).prop('selected', false);\r\n                // We remove newly created custom tags from the suggestions list when they are deselected.\r\n                if ($(ele).attr('data-iscustom')) {\r\n                    $(ele).remove();\r\n                }\r\n            }\r\n        });\r\n        // Rerender the selection list.\r\n        return updateSelectionList(options, state, originalSelect)\r\n        .then(function() {\r\n            // Notify that the selection changed.\r\n            notifyChange(originalSelect);\r\n\r\n            return;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Make an item in the suggestions \"active\" (about to be selected).\r\n     *\r\n     * @method activateItem\r\n     * @private\r\n     * @param {Number} index The index in the current (visible) list of suggestions.\r\n     * @param {Object} state State variables for this instance of autocomplete.\r\n     * @return {Promise}\r\n     */\r\n    var activateItem = function(index, state) {\r\n        // Find the elements in the DOM.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n\r\n        // Count the visible items.\r\n        var length = suggestionsElement.children(':not([aria-hidden])').length;\r\n        // Limit the index to the upper/lower bounds of the list (wrap in both directions).\r\n        index = index % length;\r\n        while (index < 0) {\r\n            index += length;\r\n        }\r\n        // Find the specified element.\r\n        var element = $(suggestionsElement.children(':not([aria-hidden])').get(index));\r\n        // Find the index of this item in the full list of suggestions (including hidden).\r\n        var globalIndex = $(suggestionsElement.children('[role=option]')).index(element);\r\n        // Create an id we can assign to this element.\r\n        var itemId = state.suggestionsId + '-' + globalIndex;\r\n\r\n        // Deselect all the suggestions.\r\n        suggestionsElement.children().attr('aria-selected', false).attr('id', '');\r\n        // Select only this suggestion and assign it the id.\r\n        element.attr('aria-selected', true).attr('id', itemId);\r\n        // Tell the input field it has a new active descendant so the item is announced.\r\n        inputElement.attr('aria-activedescendant', itemId);\r\n\r\n        // Scroll it into view.\r\n        var scrollPos = element.offset().top\r\n                       - suggestionsElement.offset().top\r\n                       + suggestionsElement.scrollTop()\r\n                       - (suggestionsElement.height() / 2);\r\n        return suggestionsElement.animate({\r\n            scrollTop: scrollPos\r\n        }, 100).promise();\r\n    };\r\n\r\n    /**\r\n     * Return the index of the currently selected item in the suggestions list.\r\n     *\r\n     * @param {jQuery} suggestionsElement\r\n     * @return {Integer}\r\n     */\r\n    var getCurrentItem = function(suggestionsElement) {\r\n        // Find the active one.\r\n        var element = suggestionsElement.children('[aria-selected=true]');\r\n        // Find its index.\r\n        return suggestionsElement.children(':not([aria-hidden])').index(element);\r\n    };\r\n\r\n    /**\r\n     * Limit the index to the upper/lower bounds of the list (wrap in both directions).\r\n     *\r\n     * @param {Integer} index The target index.\r\n     * @param {Integer} length The length of the list of visible items.\r\n     * @return {Integer} The resulting index with necessary wrapping applied.\r\n     */\r\n    var wrapListIndex = function(index, length) {\r\n        index = index % length;\r\n        while (index < 0) {\r\n            index += length;\r\n        }\r\n        return index;\r\n    };\r\n\r\n    /**\r\n     * Return the index of the next item in the list without aria-disabled=true.\r\n     *\r\n     * @param {Integer} current The index of the current item.\r\n     * @param {Array} suggestions The list of suggestions.\r\n     * @return {Integer}\r\n     */\r\n    var getNextEnabledItem = function(current, suggestions) {\r\n        var nextIndex = wrapListIndex(current + 1, suggestions.length);\r\n        if (suggestions[nextIndex].getAttribute('aria-disabled')) {\r\n            return getNextEnabledItem(nextIndex, suggestions);\r\n        }\r\n        return nextIndex;\r\n    };\r\n\r\n    /**\r\n     * Return the index of the previous item in the list without aria-disabled=true.\r\n     *\r\n     * @param {Integer} current The index of the current item.\r\n     * @param {Array} suggestions The list of suggestions.\r\n     * @return {Integer}\r\n     */\r\n    var getPreviousEnabledItem = function(current, suggestions) {\r\n        var previousIndex = wrapListIndex(current - 1, suggestions.length);\r\n        if (suggestions[previousIndex].getAttribute('aria-disabled')) {\r\n            return getPreviousEnabledItem(previousIndex, suggestions);\r\n        }\r\n        return previousIndex;\r\n    };\r\n\r\n    /**\r\n     * Build a list of renderable options based on a set of option elements from the original select list.\r\n     *\r\n     * @param {jQuery} originalOptions\r\n     * @param {Boolean} includeEmpty\r\n     * @return {Array}\r\n     */\r\n    var rebuildOptions = function(originalOptions, includeEmpty) {\r\n        var options = [];\r\n        originalOptions.each(function(index, ele) {\r\n            var label;\r\n            if ($(ele).data('html')) {\r\n                label = $(ele).data('html');\r\n            } else {\r\n                label = $(ele).html();\r\n            }\r\n            if (includeEmpty || label !== '') {\r\n                options.push({\r\n                    label: label,\r\n                    value: $(ele).attr('value'),\r\n                    disabled: ele.disabled,\r\n                    classes: ele.classList,\r\n                });\r\n            }\r\n        });\r\n        return options;\r\n    };\r\n\r\n    /**\r\n     * Find the index of the current active suggestion, and activate the next one.\r\n     *\r\n     * @method activateNextItem\r\n     * @private\r\n     * @param {Object} state State variable for this auto complete element.\r\n     * @return {Promise}\r\n     */\r\n    var activateNextItem = function(state) {\r\n        // Find the list of suggestions.\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n        var suggestions = suggestionsElement.children(':not([aria-hidden])');\r\n        var current = getCurrentItem(suggestionsElement);\r\n        // Activate the next one.\r\n        return activateItem(getNextEnabledItem(current, suggestions), state);\r\n    };\r\n\r\n    /**\r\n     * Find the index of the current active selection, and activate the previous one.\r\n     *\r\n     * @method activatePreviousSelection\r\n     * @private\r\n     * @param {Object} state State variables for this instance of autocomplete.\r\n     * @return {Promise}\r\n     */\r\n    var activatePreviousSelection = function(state) {\r\n        // Find the list of selections.\r\n        var selectionsElement = $(document.getElementById(state.selectionId));\r\n        // Find the active one.\r\n        var element = selectionsElement.children('[data-active-selection]');\r\n        if (!element) {\r\n            return activateSelection(0, state);\r\n        }\r\n        // Find it's index.\r\n        var current = selectionsElement.children('[aria-selected=true]').index(element);\r\n        // Activate the next one.\r\n        return activateSelection(current - 1, state);\r\n    };\r\n\r\n    /**\r\n     * Find the index of the current active selection, and activate the next one.\r\n     *\r\n     * @method activateNextSelection\r\n     * @private\r\n     * @param {Object} state State variables for this instance of autocomplete.\r\n     * @return {Promise}\r\n     */\r\n    var activateNextSelection = function(state) {\r\n        // Find the list of selections.\r\n        var selectionsElement = $(document.getElementById(state.selectionId));\r\n\r\n        // Find the active one.\r\n        var element = selectionsElement.children('[data-active-selection]');\r\n        var current = 0;\r\n\r\n        if (element) {\r\n            // The element was found. Determine the index and move to the next one.\r\n            current = selectionsElement.children('[aria-selected=true]').index(element);\r\n            current = current + 1;\r\n        } else {\r\n            // No selected item found. Move to the first.\r\n            current = 0;\r\n        }\r\n\r\n        return activateSelection(current, state);\r\n    };\r\n\r\n    /**\r\n     * Find the index of the current active suggestion, and activate the previous one.\r\n     *\r\n     * @method activatePreviousItem\r\n     * @private\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @return {Promise}\r\n     */\r\n    var activatePreviousItem = function(state) {\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n        var suggestions = suggestionsElement.children(':not([aria-hidden])');\r\n        var current = getCurrentItem(suggestionsElement);\r\n        // Activate the previous one.\r\n        return activateItem(getPreviousEnabledItem(current, suggestions), state);\r\n    };\r\n\r\n    /**\r\n     * Close the list of suggestions.\r\n     *\r\n     * @method closeSuggestions\r\n     * @private\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @return {Promise}\r\n     */\r\n    var closeSuggestions = function(state) {\r\n        // Find the elements in the DOM.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n\r\n        if (inputElement.attr('aria-expanded') === \"true\") {\r\n            // Announce the list of suggestions was closed.\r\n            inputElement.attr('aria-expanded', false);\r\n        }\r\n        // Read the current list of selections.\r\n        inputElement.attr('aria-activedescendant', state.selectionId);\r\n\r\n        // Hide the suggestions list (from screen readers too).\r\n        Aria.hide(suggestionsElement.get());\r\n        suggestionsElement.hide();\r\n\r\n        return $.Deferred().resolve();\r\n    };\r\n\r\n    /**\r\n     * Rebuild the list of suggestions based on the current values in the select list, and the query.\r\n     *\r\n     * @method updateSuggestions\r\n     * @private\r\n     * @param {Object} options The original options for this autocomplete.\r\n     * @param {Object} state The state variables for this autocomplete.\r\n     * @param {String} query The current text for the search string.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     * @return {Promise}\r\n     */\r\n    var updateSuggestions = function(options, state, query, originalSelect) {\r\n        var pendingKey = 'form-autocomplete-updateSuggestions-' + state.inputId;\r\n        M.util.js_pending(pendingKey);\r\n\r\n        // Find the elements in the DOM.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n\r\n        // Used to track if we found any visible suggestions.\r\n        var matchingElements = false;\r\n        // Options is used by the context when rendering the suggestions from a template.\r\n        var suggestions = rebuildOptions(originalSelect.children('option:not(:selected)'), true);\r\n\r\n        // Re-render the list of suggestions.\r\n        var searchquery = state.caseSensitive ? query : query.toLocaleLowerCase();\r\n        var context = $.extend({options: suggestions}, options, state);\r\n        var returnVal = templates.render(\r\n            'core/form_autocomplete_suggestions',\r\n            context\r\n        )\r\n        .then(function(html, js) {\r\n            // We have the new template, insert it in the page.\r\n            templates.replaceNode(suggestionsElement, html, js);\r\n\r\n            // Get the element again.\r\n            suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n\r\n            // Show it if it is hidden.\r\n            Aria.unhide(suggestionsElement.get());\r\n            suggestionsElement.show();\r\n\r\n            // For each option in the list, hide it if it doesn't match the query.\r\n            suggestionsElement.children().each(function(index, node) {\r\n                node = $(node);\r\n                if ((options.caseSensitive && node.text().indexOf(searchquery) > -1) ||\r\n                        (!options.caseSensitive && node.text().toLocaleLowerCase().indexOf(searchquery) > -1)) {\r\n                    Aria.unhide(node.get());\r\n                    node.show();\r\n                    matchingElements = true;\r\n                } else {\r\n                    node.hide();\r\n                    Aria.hide(node.get());\r\n                }\r\n            });\r\n            // If we found any matches, show the list.\r\n            inputElement.attr('aria-expanded', true);\r\n            if (originalSelect.attr('data-notice')) {\r\n                // Display a notice rather than actual suggestions.\r\n                suggestionsElement.html(originalSelect.attr('data-notice'));\r\n            } else if (matchingElements) {\r\n                // We only activate the first item in the list if tags is false,\r\n                // because otherwise \"Enter\" would select the first item, instead of\r\n                // creating a new tag.\r\n                if (!options.tags) {\r\n                    activateItem(0, state);\r\n                }\r\n            } else {\r\n                // Nothing matches. Tell them that.\r\n                str.get_string('nosuggestions', 'form').done(function(nosuggestionsstr) {\r\n                    suggestionsElement.html(nosuggestionsstr);\r\n                });\r\n            }\r\n\r\n            return suggestionsElement;\r\n        })\r\n        .then(function() {\r\n            return M.util.js_complete(pendingKey);\r\n        })\r\n        .catch(notification.exception);\r\n\r\n        return returnVal;\r\n    };\r\n\r\n    /**\r\n     * Create a new item for the list (a tag).\r\n     *\r\n     * @method createItem\r\n     * @private\r\n     * @param {Object} options The original options for the autocomplete.\r\n     * @param {Object} state State variables for the autocomplete.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     * @return {Promise}\r\n     */\r\n    var createItem = function(options, state, originalSelect) {\r\n        // Find the element in the DOM.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        // Get the current text in the input field.\r\n        var query = inputElement.val();\r\n        var tags = query.split(',');\r\n        var found = false;\r\n\r\n        $.each(tags, function(tagindex, tag) {\r\n            // If we can only select one at a time, deselect any current value.\r\n            tag = tag.trim();\r\n            if (tag !== '') {\r\n                if (!options.multiple) {\r\n                    originalSelect.children('option').prop('selected', false);\r\n                }\r\n                // Look for an existing option in the select list that matches this new tag.\r\n                originalSelect.children('option').each(function(index, ele) {\r\n                    if ($(ele).attr('value') == tag) {\r\n                        found = true;\r\n                        $(ele).prop('selected', true);\r\n                    }\r\n                });\r\n                // Only create the item if it's new.\r\n                if (!found) {\r\n                    var option = $('<option>');\r\n                    option.append(document.createTextNode(tag));\r\n                    option.attr('value', tag);\r\n                    originalSelect.append(option);\r\n                    option.prop('selected', true);\r\n                    // We mark newly created custom options as we handle them differently if they are \"deselected\".\r\n                    option.attr('data-iscustom', true);\r\n                }\r\n            }\r\n        });\r\n\r\n        return updateSelectionList(options, state, originalSelect)\r\n        .then(function() {\r\n            // Notify that the selection changed.\r\n            notifyChange(originalSelect);\r\n\r\n            return;\r\n        })\r\n        .then(function() {\r\n            // Clear the input field.\r\n            inputElement.val('');\r\n\r\n            return;\r\n        })\r\n        .then(function() {\r\n            // Close the suggestions list.\r\n            return closeSuggestions(state);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Select the currently active item from the suggestions list.\r\n     *\r\n     * @method selectCurrentItem\r\n     * @private\r\n     * @param {Object} options The original options for the autocomplete.\r\n     * @param {Object} state State variables for the autocomplete.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     * @return {Promise}\r\n     */\r\n    var selectCurrentItem = function(options, state, originalSelect) {\r\n        // Find the elements in the page.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n        // Here loop through suggestions and set val to join of all selected items.\r\n\r\n        var selectedItemValue = suggestionsElement.children('[aria-selected=true]').attr('data-value');\r\n        // The select will either be a single or multi select, so the following will either\r\n        // select one or more items correctly.\r\n        // Take care to use 'prop' and not 'attr' for selected properties.\r\n        // If only one can be selected at a time, start by deselecting everything.\r\n        if (!options.multiple) {\r\n            originalSelect.children('option').prop('selected', false);\r\n        }\r\n        // Look for a match, and toggle the selected property if there is a match.\r\n        originalSelect.children('option').each(function(index, ele) {\r\n            if ($(ele).attr('value') == selectedItemValue) {\r\n                $(ele).prop('selected', true);\r\n            }\r\n        });\r\n\r\n        return updateSelectionList(options, state, originalSelect)\r\n        .then(function() {\r\n            // Notify that the selection changed.\r\n            notifyChange(originalSelect);\r\n\r\n            return;\r\n        })\r\n        .then(function() {\r\n            if (options.closeSuggestionsOnSelect) {\r\n                // Clear the input element.\r\n                inputElement.val('');\r\n                // Close the list of suggestions.\r\n                return closeSuggestions(state);\r\n            } else {\r\n                // Focus on the input element so the suggestions does not auto-close.\r\n                inputElement.focus();\r\n                // Remove the last selected item from the suggestions list.\r\n                return updateSuggestions(options, state, inputElement.val(), originalSelect);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Fetch a new list of options via ajax.\r\n     *\r\n     * @method updateAjax\r\n     * @private\r\n     * @param {Event} e The event that triggered this update.\r\n     * @param {Object} options The original options for the autocomplete.\r\n     * @param {Object} state The state variables for the autocomplete.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     * @param {Object} ajaxHandler This is a module that does the ajax fetch and translates the results.\r\n     * @return {Promise}\r\n     */\r\n    var updateAjax = function(e, options, state, originalSelect, ajaxHandler) {\r\n        var pendingPromise = addPendingJSPromise('updateAjax');\r\n        // We need to show the indicator outside of the hidden select list.\r\n        // So we get the parent id of the hidden select list.\r\n        var parentElement = $(document.getElementById(state.selectId)).parent();\r\n        LoadingIcon.addIconToContainerRemoveOnCompletion(parentElement, pendingPromise);\r\n\r\n        // Get the query to pass to the ajax function.\r\n        var query = $(e.currentTarget).val();\r\n        // Call the transport function to do the ajax (name taken from Select2).\r\n        ajaxHandler.transport(options.selector, query, function(results) {\r\n            // We got a result - pass it through the translator before using it.\r\n            var processedResults = ajaxHandler.processResults(options.selector, results);\r\n            var existingValues = [];\r\n\r\n            // Now destroy all options that are not current\r\n            originalSelect.children('option').each(function(optionIndex, option) {\r\n                option = $(option);\r\n                if (!option.prop('selected')) {\r\n                    option.remove();\r\n                } else {\r\n                    existingValues.push(String(option.attr('value')));\r\n                }\r\n            });\r\n\r\n            if (!options.multiple && originalSelect.children('option').length === 0) {\r\n                // If this is a single select - and there are no current options\r\n                // the first option added will be selected by the browser. This causes a bug!\r\n                // We need to insert an empty option so that none of the real options are selected.\r\n                var option = $('<option>');\r\n                originalSelect.append(option);\r\n            }\r\n            if ($.isArray(processedResults)) {\r\n                // Add all the new ones returned from ajax.\r\n                $.each(processedResults, function(resultIndex, result) {\r\n                    if (existingValues.indexOf(String(result.value)) === -1) {\r\n                        var option = $('<option>');\r\n                        option.append(result.label);\r\n                        option.attr('value', result.value);\r\n                        originalSelect.append(option);\r\n                    }\r\n                });\r\n                originalSelect.attr('data-notice', '');\r\n            } else {\r\n                // The AJAX handler returned a string instead of the array.\r\n                originalSelect.attr('data-notice', processedResults);\r\n            }\r\n            // Update the list of suggestions now from the new values in the select list.\r\n            pendingPromise.resolve(updateSuggestions(options, state, '', originalSelect));\r\n        }, function(error) {\r\n            pendingPromise.reject(error);\r\n        });\r\n\r\n        return pendingPromise;\r\n    };\r\n\r\n    /**\r\n     * Add all the event listeners required for keyboard nav, blur clicks etc.\r\n     *\r\n     * @method addNavigation\r\n     * @private\r\n     * @param {Object} options The options used to create this autocomplete element.\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     */\r\n    var addNavigation = function(options, state, originalSelect) {\r\n        // Start with the input element.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        // Add keyboard nav with keydown.\r\n        inputElement.on('keydown', function(e) {\r\n            var pendingJsPromise = addPendingJSPromise('addNavigation-' + state.inputId + '-' + e.keyCode);\r\n\r\n            switch (e.keyCode) {\r\n                case KEYS.DOWN:\r\n                    // If the suggestion list is open, move to the next item.\r\n                    if (!options.showSuggestions) {\r\n                        // Do not consume this event.\r\n                        pendingJsPromise.resolve();\r\n                        return true;\r\n                    } else if (inputElement.attr('aria-expanded') === \"true\") {\r\n                        pendingJsPromise.resolve(activateNextItem(state));\r\n                    } else {\r\n                        // Handle ajax population of suggestions.\r\n                        if (!inputElement.val() && options.ajax) {\r\n                            require([options.ajax], function(ajaxHandler) {\r\n                                pendingJsPromise.resolve(updateAjax(e, options, state, originalSelect, ajaxHandler));\r\n                            });\r\n                        } else {\r\n                            // Open the suggestions list.\r\n                            pendingJsPromise.resolve(updateSuggestions(options, state, inputElement.val(), originalSelect));\r\n                        }\r\n                    }\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n                    return false;\r\n                case KEYS.UP:\r\n                    // Choose the previous active item.\r\n                    pendingJsPromise.resolve(activatePreviousItem(state));\r\n\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n                    return false;\r\n                case KEYS.ENTER:\r\n                    var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n                    if ((inputElement.attr('aria-expanded') === \"true\") &&\r\n                            (suggestionsElement.children('[aria-selected=true]').length > 0)) {\r\n                        // If the suggestion list has an active item, select it.\r\n                        pendingJsPromise.resolve(selectCurrentItem(options, state, originalSelect));\r\n                    } else if (options.tags) {\r\n                        // If tags are enabled, create a tag.\r\n                        pendingJsPromise.resolve(createItem(options, state, originalSelect));\r\n                    } else {\r\n                        pendingJsPromise.resolve();\r\n                    }\r\n\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n                    return false;\r\n                case KEYS.ESCAPE:\r\n                    if (inputElement.attr('aria-expanded') === \"true\") {\r\n                        // If the suggestion list is open, close it.\r\n                        pendingJsPromise.resolve(closeSuggestions(state));\r\n                    } else {\r\n                        pendingJsPromise.resolve();\r\n                    }\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n                    return false;\r\n            }\r\n            pendingJsPromise.resolve();\r\n            return true;\r\n        });\r\n        // Support multi lingual COMMA keycode (44).\r\n        inputElement.on('keypress', function(e) {\r\n\r\n            if (e.keyCode === KEYS.COMMA) {\r\n                if (options.tags) {\r\n                    // If we are allowing tags, comma should create a tag (or enter).\r\n                    addPendingJSPromise('keypress-' + e.keyCode)\r\n                    .resolve(createItem(options, state, originalSelect));\r\n                }\r\n                // We handled this event, so prevent it.\r\n                e.preventDefault();\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        // Support submitting the form without leaving the autocomplete element,\r\n        // or submitting too quick before the blur handler action is completed.\r\n        inputElement.closest('form').on('submit', function() {\r\n            if (options.tags) {\r\n                // If tags are enabled, create a tag.\r\n                addPendingJSPromise('form-autocomplete-submit')\r\n                .resolve(createItem(options, state, originalSelect));\r\n            }\r\n\r\n            return true;\r\n        });\r\n        inputElement.on('blur', function() {\r\n            var pendingPromise = addPendingJSPromise('form-autocomplete-blur');\r\n            window.setTimeout(function() {\r\n                // Get the current element with focus.\r\n                var focusElement = $(document.activeElement);\r\n                var timeoutPromise = $.Deferred();\r\n\r\n                // Only close the menu if the input hasn't regained focus and if the element still exists,\r\n                // and regain focus if the scrollbar is clicked.\r\n                // Due to the half a second delay, it is possible that the input element no longer exist\r\n                // by the time this code is being executed.\r\n                if (focusElement.is(document.getElementById(state.suggestionsId))) {\r\n                    inputElement.focus(); // Probably the scrollbar is clicked. Regain focus.\r\n                } else if (!focusElement.is(inputElement) && $(document.getElementById(state.inputId)).length) {\r\n                    if (options.tags) {\r\n                        timeoutPromise.then(function() {\r\n                            return createItem(options, state, originalSelect);\r\n                        })\r\n                        .catch();\r\n                    }\r\n                    timeoutPromise.then(function() {\r\n                        return closeSuggestions(state);\r\n                    })\r\n                    .catch();\r\n                }\r\n\r\n                timeoutPromise.then(function() {\r\n                    return pendingPromise.resolve();\r\n                })\r\n                .catch();\r\n                timeoutPromise.resolve();\r\n            }, 500);\r\n        });\r\n        if (options.showSuggestions) {\r\n            var arrowElement = $(document.getElementById(state.downArrowId));\r\n            arrowElement.on('click', function(e) {\r\n                var pendingPromise = addPendingJSPromise('form-autocomplete-show-suggestions');\r\n\r\n                // Prevent the close timer, or we will open, then close the suggestions.\r\n                inputElement.focus();\r\n\r\n                // Handle ajax population of suggestions.\r\n                if (!inputElement.val() && options.ajax) {\r\n                    require([options.ajax], function(ajaxHandler) {\r\n                        pendingPromise.resolve(updateAjax(e, options, state, originalSelect, ajaxHandler));\r\n                    });\r\n                } else {\r\n                    // Else - open the suggestions list.\r\n                    pendingPromise.resolve(updateSuggestions(options, state, inputElement.val(), originalSelect));\r\n                }\r\n            });\r\n        }\r\n\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n        // Remove any click handler first.\r\n        suggestionsElement.parent().prop(\"onclick\", null).off(\"click\");\r\n        suggestionsElement.parent().on('click', `#${state.suggestionsId} [role=option]`, function(e) {\r\n            var pendingPromise = addPendingJSPromise('form-autocomplete-parent');\r\n            // Handle clicks on suggestions.\r\n            var element = $(e.currentTarget).closest('[role=option]');\r\n            var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n            // Find the index of the clicked on suggestion.\r\n            var current = suggestionsElement.children(':not([aria-hidden])').index(element);\r\n\r\n            // Activate it.\r\n            activateItem(current, state)\r\n            .then(function() {\r\n                // And select it.\r\n                return selectCurrentItem(options, state, originalSelect);\r\n            })\r\n            .then(function() {\r\n                return pendingPromise.resolve();\r\n            })\r\n            .catch();\r\n        });\r\n        var selectionElement = $(document.getElementById(state.selectionId));\r\n\r\n        // Handle clicks on the selected items (will unselect an item).\r\n        selectionElement.on('click', '[role=option]', function(e) {\r\n            var pendingPromise = addPendingJSPromise('form-autocomplete-clicks');\r\n\r\n            // Remove it from the selection.\r\n            pendingPromise.resolve(deselectItem(options, state, $(e.currentTarget), originalSelect));\r\n        });\r\n\r\n        // When listbox is focused, focus on the first option if there is no focused option.\r\n        selectionElement.on('focus', function() {\r\n            updateActiveSelectionFromState(state);\r\n        });\r\n\r\n        // Keyboard navigation for the selection list.\r\n        selectionElement.on('keydown', function(e) {\r\n            var pendingPromise = addPendingJSPromise('form-autocomplete-keydown-' + e.keyCode);\r\n            switch (e.keyCode) {\r\n                case KEYS.RIGHT:\r\n                case KEYS.DOWN:\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n\r\n                    // Choose the next selection item.\r\n                    pendingPromise.resolve(activateNextSelection(state));\r\n                    return;\r\n                case KEYS.LEFT:\r\n                case KEYS.UP:\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n\r\n                    // Choose the previous selection item.\r\n                    pendingPromise.resolve(activatePreviousSelection(state));\r\n                    return;\r\n                case KEYS.SPACE:\r\n                case KEYS.ENTER:\r\n                    // Get the item that is currently selected.\r\n                    var selectedItem = $(document.getElementById(state.selectionId)).children('[data-active-selection]');\r\n                    if (selectedItem) {\r\n                        e.preventDefault();\r\n\r\n                        // Unselect this item.\r\n                        pendingPromise.resolve(deselectItem(options, state, selectedItem, originalSelect));\r\n                    }\r\n                    return;\r\n            }\r\n\r\n            // Not handled. Resolve the promise.\r\n            pendingPromise.resolve();\r\n        });\r\n        // Whenever the input field changes, update the suggestion list.\r\n        if (options.showSuggestions) {\r\n            // Store the value of the field as its last value, when the field gains focus.\r\n            inputElement.on('focus', function(e) {\r\n                var query = $(e.currentTarget).val();\r\n                $(e.currentTarget).data('last-value', query);\r\n            });\r\n\r\n            // If this field uses ajax, set it up.\r\n            if (options.ajax) {\r\n                require([options.ajax], function(ajaxHandler) {\r\n                    // Creating throttled handlers free of race conditions, and accurate.\r\n                    // This code keeps track of a throttleTimeout, which is periodically polled.\r\n                    // Once the throttled function is executed, the fact that it is running is noted.\r\n                    // If a subsequent request comes in whilst it is running, this request is re-applied.\r\n                    var throttleTimeout = null;\r\n                    var inProgress = false;\r\n                    var pendingKey = 'autocomplete-throttledhandler';\r\n                    var handler = function(e) {\r\n                        // Empty the current timeout.\r\n                        throttleTimeout = null;\r\n\r\n                        // Mark this request as in-progress.\r\n                        inProgress = true;\r\n\r\n                        // Process the request.\r\n                        updateAjax(e, options, state, originalSelect, ajaxHandler)\r\n                        .then(function() {\r\n                            // Check if the throttleTimeout is still empty.\r\n                            // There's a potential condition whereby the JS request takes long enough to complete that\r\n                            // another task has been queued.\r\n                            // In this case another task will be kicked off and we must wait for that before marking htis as\r\n                            // complete.\r\n                            if (null === throttleTimeout) {\r\n                                // Mark this task as complete.\r\n                                M.util.js_complete(pendingKey);\r\n                            }\r\n                            inProgress = false;\r\n\r\n                            return arguments[0];\r\n                        })\r\n                        .catch(notification.exception);\r\n                    };\r\n\r\n                    // For input events, we do not want to trigger many, many updates.\r\n                    var throttledHandler = function(e) {\r\n                        window.clearTimeout(throttleTimeout);\r\n                        if (inProgress) {\r\n                            // A request is currently ongoing.\r\n                            // Delay this request another 100ms.\r\n                            throttleTimeout = window.setTimeout(throttledHandler.bind(this, e), 100);\r\n                            return;\r\n                        }\r\n\r\n                        if (throttleTimeout === null) {\r\n                            // There is currently no existing timeout handler, and it has not been recently cleared, so\r\n                            // this is the start of a throttling check.\r\n                            M.util.js_pending(pendingKey);\r\n                        }\r\n\r\n                        // There is currently no existing timeout handler, and it has not been recently cleared, so this\r\n                        // is the start of a throttling check.\r\n                        // Queue a call to the handler.\r\n                        throttleTimeout = window.setTimeout(handler.bind(this, e), 300);\r\n                    };\r\n\r\n                    // Trigger an ajax update after the text field value changes.\r\n                    inputElement.on('input', function(e) {\r\n                        var query = $(e.currentTarget).val();\r\n                        var last = $(e.currentTarget).data('last-value');\r\n                        // IE11 fires many more input events than required - even when the value has not changed.\r\n                        if (last !== query) {\r\n                            throttledHandler(e);\r\n                        }\r\n                        $(e.currentTarget).data('last-value', query);\r\n                    });\r\n                });\r\n            } else {\r\n                inputElement.on('input', function(e) {\r\n                    var query = $(e.currentTarget).val();\r\n                    var last = $(e.currentTarget).data('last-value');\r\n                    // IE11 fires many more input events than required - even when the value has not changed.\r\n                    // We need to only do this for real value changed events or the suggestions will be\r\n                    // unclickable on IE11 (because they will be rebuilt before the click event fires).\r\n                    // Note - because of this we cannot close the list when the query is empty or it will break\r\n                    // on IE11.\r\n                    if (last !== query) {\r\n                        updateSuggestions(options, state, query, originalSelect);\r\n                    }\r\n                    $(e.currentTarget).data('last-value', query);\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Create and return an unresolved Promise for some pending JS.\r\n     *\r\n     * @param   {String} key The unique identifier for this promise\r\n     * @return  {Promise}\r\n     */\r\n    var addPendingJSPromise = function(key) {\r\n            var pendingKey = 'form-autocomplete:' + key;\r\n\r\n            M.util.js_pending(pendingKey);\r\n\r\n            var pendingPromise = $.Deferred();\r\n\r\n            pendingPromise\r\n            .then(function() {\r\n                M.util.js_complete(pendingKey);\r\n\r\n                return arguments[0];\r\n            })\r\n            .catch(notification.exception);\r\n\r\n            return pendingPromise;\r\n    };\r\n\r\n    /**\r\n     * Turn a boring select box into an auto-complete beast.\r\n     *\r\n     * @method enhanceField\r\n     * @param {string} selector The selector that identifies the select box.\r\n     * @param {boolean} tags Whether to allow support for tags (can define new entries).\r\n     * @param {string} ajax Name of an AMD module to handle ajax requests. If specified, the AMD\r\n     *                      module must expose 2 functions \"transport\" and \"processResults\".\r\n     *                      These are modeled on Select2 see: https://select2.github.io/options.html#ajax\r\n     * @param {String|Promise<string>} placeholder - The text to display before a selection is made.\r\n     * @param {Boolean} caseSensitive - If search has to be made case sensitive.\r\n     * @param {Boolean} showSuggestions - If suggestions should be shown\r\n     * @param {String|Promise<string>} noSelectionString - Text to display when there is no selection\r\n     * @param {Boolean} closeSuggestionsOnSelect - Whether to close the suggestions immediately after making a selection.\r\n     * @param {Object} templateOverrides A set of templates to use instead of the standard templates\r\n     * @return {Promise}\r\n     */\r\n     var enhanceField = async function(selector, tags, ajax, placeholder, caseSensitive, showSuggestions, noSelectionString,\r\n                          closeSuggestionsOnSelect, templateOverrides) {\r\n            // Set some default values.\r\n            var options = {\r\n                selector: selector,\r\n                tags: false,\r\n                ajax: false,\r\n                placeholder: await placeholder,\r\n                caseSensitive: false,\r\n                showSuggestions: true,\r\n                noSelectionString: await noSelectionString,\r\n                templates: $.extend({\r\n                        input: 'core/form_autocomplete_input',\r\n                        items: 'core/form_autocomplete_selection_items',\r\n                        layout: 'core/form_autocomplete_layout',\r\n                        selection: 'core/form_autocomplete_selection',\r\n                        suggestions: 'core/form_autocomplete_suggestions',\r\n                    }, templateOverrides),\r\n            };\r\n            var pendingKey = 'autocomplete-setup-' + selector;\r\n            M.util.js_pending(pendingKey);\r\n            if (typeof tags !== \"undefined\") {\r\n                options.tags = tags;\r\n            }\r\n            if (typeof ajax !== \"undefined\") {\r\n                options.ajax = ajax;\r\n            }\r\n            if (typeof caseSensitive !== \"undefined\") {\r\n                options.caseSensitive = caseSensitive;\r\n            }\r\n            if (typeof showSuggestions !== \"undefined\") {\r\n                options.showSuggestions = showSuggestions;\r\n            }\r\n            if (typeof noSelectionString === \"undefined\") {\r\n                str.get_string('noselection', 'form').done(function(result) {\r\n                    options.noSelectionString = result;\r\n                }).fail(notification.exception);\r\n            }\r\n\r\n            // Look for the select element.\r\n            var originalSelect = $(selector);\r\n            if (!originalSelect) {\r\n                log.debug('Selector not found: ' + selector);\r\n                M.util.js_complete(pendingKey);\r\n                return false;\r\n            }\r\n\r\n            // Ensure we enhance the element only once.\r\n            if (originalSelect.data('enhanced') === 'enhanced') {\r\n                M.util.js_complete(pendingKey);\r\n                return false;\r\n            }\r\n            originalSelect.data('enhanced', 'enhanced');\r\n\r\n            // Hide the original select.\r\n            Aria.hide(originalSelect.get());\r\n            originalSelect.css('visibility', 'hidden');\r\n\r\n            // Find or generate some ids.\r\n            var state = {\r\n                selectId: originalSelect.attr('id'),\r\n                inputId: 'form_autocomplete_input-' + uniqueId,\r\n                suggestionsId: 'form_autocomplete_suggestions-' + uniqueId,\r\n                selectionId: 'form_autocomplete_selection-' + uniqueId,\r\n                downArrowId: 'form_autocomplete_downarrow-' + uniqueId,\r\n                items: [],\r\n                required: originalSelect[0]?.ariaRequired === 'true',\r\n            };\r\n\r\n            // Increment the unique counter so we don't get duplicates ever.\r\n            uniqueId++;\r\n\r\n            options.multiple = originalSelect.attr('multiple');\r\n            if (!options.multiple) {\r\n                // If this is a single select then there is no way to de-select the current value -\r\n                // unless we add a bogus blank option to be selected when nothing else is.\r\n                // This matches similar code in updateAjax above.\r\n                originalSelect.prepend('<option>');\r\n            }\r\n\r\n            if (typeof closeSuggestionsOnSelect !== \"undefined\") {\r\n                options.closeSuggestionsOnSelect = closeSuggestionsOnSelect;\r\n            } else {\r\n                // If not specified, this will close suggestions by default for single-select elements only.\r\n                options.closeSuggestionsOnSelect = !options.multiple;\r\n            }\r\n\r\n            var originalLabel = $('[for=' + state.selectId + ']');\r\n            // Create the new markup and insert it after the select.\r\n            var suggestions = rebuildOptions(originalSelect.children('option'), true);\r\n\r\n            // Render all the parts of our UI.\r\n            var context = $.extend({}, options, state);\r\n            context.options = suggestions;\r\n            context.items = [];\r\n\r\n            // Collect rendered inline JS to be executed once the HTML is shown.\r\n            var collectedjs = '';\r\n\r\n            var renderLayout = templates.render(options.templates.layout, {})\r\n            .then(function(html) {\r\n                return $(html);\r\n            });\r\n\r\n            var renderInput = templates.render(options.templates.input, context).then(function(html, js) {\r\n                collectedjs += js;\r\n                return $(html);\r\n            });\r\n\r\n            var renderDatalist = templates.render(options.templates.suggestions, context).then(function(html, js) {\r\n                collectedjs += js;\r\n                return $(html);\r\n            });\r\n\r\n            var renderSelection = templates.render(options.templates.selection, context).then(function(html, js) {\r\n                collectedjs += js;\r\n                return $(html);\r\n            });\r\n\r\n            return Promise.all([renderLayout, renderInput, renderDatalist, renderSelection])\r\n            .then(function([layout, input, suggestions, selection]) {\r\n                originalSelect.hide();\r\n                var container = originalSelect.parent();\r\n\r\n                // Ensure that the data-fieldtype is set for behat.\r\n                input.find('input').attr('data-fieldtype', 'autocomplete');\r\n\r\n                container.append(layout);\r\n                container.find('[data-region=\"form_autocomplete-input\"]').replaceWith(input);\r\n                container.find('[data-region=\"form_autocomplete-suggestions\"]').replaceWith(suggestions);\r\n                container.find('[data-region=\"form_autocomplete-selection\"]').replaceWith(selection);\r\n\r\n                templates.runTemplateJS(collectedjs);\r\n\r\n                // Update the form label to point to the text input.\r\n                originalLabel.attr('for', state.inputId);\r\n                // Add the event handlers.\r\n                addNavigation(options, state, originalSelect);\r\n\r\n                var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n                // Hide the suggestions by default.\r\n                suggestionsElement.hide();\r\n                Aria.hide(suggestionsElement.get());\r\n\r\n                return;\r\n            })\r\n            .then(function() {\r\n                // Show the current values in the selection list.\r\n                return updateSelectionList(options, state, originalSelect);\r\n            })\r\n            .then(function() {\r\n                return M.util.js_complete(pendingKey);\r\n            })\r\n            .catch(function(error) {\r\n                M.util.js_complete(pendingKey);\r\n                notification.exception(error);\r\n            });\r\n    };\r\n\r\n    return {\r\n        // Public variables and functions.\r\n        enhanceField: enhanceField,\r\n\r\n        /**\r\n         * We need to use jQuery here as some calling code uses .done() and .fail() rather than native .then() and .catch()\r\n         *\r\n         * @method enhance\r\n         * @return {Promise} A jQuery promise\r\n         */\r\n        enhance: function() {\r\n            return $.when(enhanceField(...arguments));\r\n        }\r\n    };\r\n});\r\n"],"names":["define","$","log","str","templates","notification","LoadingIcon","Aria","FormChangeChecker","KEYS","uniqueId","Date","now","activateSelection","index","state","selectionElement","document","getElementById","selectionId","wrapListIndex","children","length","element","get","itemId","attr","Deferred","resolve","updateActiveSelectionFromState","activeElement","selectionRegion","activeId","activeValue","replace","find","getActiveElementFromState","activeIndex","updateSelectionList","options","originalSelect","pendingKey","inputId","M","util","js_pending","items","rebuildOptions","newSelection","hasItemListChanged","js_complete","Promise","context","extend","render","then","html","js","replaceNodeContents","catch","exception","filter","item","indexOf","notifyChange","markFormChangedFromNode","dispatchEvent","Event","bubbles","deselectItem","selectedItemValue","undefined","first","prepend","each","ele","prop","remove","activateItem","inputElement","suggestionsElement","suggestionsId","globalIndex","scrollPos","offset","top","scrollTop","height","animate","promise","getCurrentItem","getNextEnabledItem","current","suggestions","nextIndex","getAttribute","getPreviousEnabledItem","previousIndex","originalOptions","includeEmpty","label","data","push","value","disabled","classes","classList","closeSuggestions","hide","updateSuggestions","query","matchingElements","searchquery","caseSensitive","toLocaleLowerCase","replaceNode","unhide","show","node","text","tags","get_string","done","nosuggestionsstr","createItem","val","split","found","tagindex","tag","trim","multiple","option","append","createTextNode","selectCurrentItem","closeSuggestionsOnSelect","focus","updateAjax","e","ajaxHandler","pendingPromise","addPendingJSPromise","parentElement","selectId","parent","addIconToContainerRemoveOnCompletion","currentTarget","transport","selector","results","processedResults","processResults","existingValues","optionIndex","String","isArray","resultIndex","result","error","reject","addNavigation","on","pendingJsPromise","keyCode","showSuggestions","activateNextItem","ajax","require","preventDefault","activatePreviousItem","closest","window","setTimeout","focusElement","timeoutPromise","is","downArrowId","off","selectionsElement","activateNextSelection","activatePreviousSelection","selectedItem","throttleTimeout","inProgress","handler","arguments","throttledHandler","clearTimeout","bind","this","key","enhanceField","async","placeholder","noSelectionString","templateOverrides","input","layout","selection","fail","debug","css","required","ariaRequired","originalLabel","collectedjs","renderLayout","renderInput","renderDatalist","renderSelection","all","_ref","container","replaceWith","runTemplateJS","enhance","when"],"mappings":"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"}