{"version":3,"file":"search_combobox.min.js","sources":["../../src/comboboxsearch/search_combobox.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport $ from 'jquery';\r\nimport {debounce} from 'core/utils';\r\nimport Pending from 'core/pending';\r\n\r\n/**\r\n * The class that manages the state of the search within a combobox.\r\n *\r\n * @module    core/comboboxsearch/search_combobox\r\n * @copyright 2023 Mathew May <mathew.solutions>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nexport default class {\r\n    // Define our standard lookups.\r\n    selectors = {\r\n        component: this.componentSelector(),\r\n        toggle: '[data-toggle=\"dropdown\"]',\r\n        instance: '[data-region=\"instance\"]',\r\n        input: '[data-action=\"search\"]',\r\n        clearSearch: '[data-action=\"clearsearch\"]',\r\n        dropdown: this.dropdownSelector(),\r\n        resultitems: '[role=\"option\"]',\r\n        viewall: '#select-all',\r\n        combobox: '[role=\"combobox\"]',\r\n    };\r\n\r\n    // The results from the called filter function.\r\n    matchedResults = [];\r\n\r\n    // What did the user search for?\r\n    searchTerm = '';\r\n\r\n    // What the user searched for as a lowercase.\r\n    preppedSearchTerm = null;\r\n\r\n    // The DOM nodes after the dropdown render.\r\n    resultNodes = [];\r\n\r\n    // Where does the user currently have focus?\r\n    currentNode = null;\r\n\r\n    // The current node for the view all link.\r\n    currentViewAll = null;\r\n\r\n    dataset = null;\r\n\r\n    datasetSize = 0;\r\n\r\n    // DOM nodes that persist.\r\n    component = document.querySelector(this.selectors.component);\r\n    instance = this.component.dataset.instance;\r\n    toggle = this.component.querySelector(this.selectors.toggle);\r\n    searchInput = this.component.querySelector(this.selectors.input);\r\n    searchDropdown = this.component.querySelector(this.selectors.dropdown);\r\n    clearSearchButton = this.component.querySelector(this.selectors.clearSearch);\r\n    combobox = this.component.querySelector(this.selectors.combobox);\r\n    $component = $(this.component);\r\n\r\n    constructor() {\r\n        // If we have a search input, try to get the value otherwise fallback.\r\n        this.setSearchTerms(this.searchInput?.value ?? '');\r\n        // Begin handling the base search component.\r\n        this.registerClickHandlers();\r\n\r\n        // Conditionally set up the input handler since we don't know exactly how we were called.\r\n        // If the combobox is rendered later, then you'll need to call this.registerInputHandlers() manually.\r\n        // An example of this is the collapse columns in the gradebook.\r\n        if (this.searchInput !== null) {\r\n            this.registerInputHandlers();\r\n            this.registerChangeHandlers();\r\n        }\r\n\r\n        // If we have a search term, show the clear button.\r\n        if (this.getSearchTerm() !== '') {\r\n            this.clearSearchButton.classList.remove('d-none');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stub out a required function.\r\n     */\r\n    fetchDataset() {\r\n        throw new Error(`fetchDataset() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Stub out a required function.\r\n     * @param {Array} dataset\r\n     */\r\n    filterDataset(dataset) {\r\n        throw new Error(`filterDataset(${dataset}) must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Stub out a required function.\r\n     */\r\n    filterMatchDataset() {\r\n        throw new Error(`filterMatchDataset() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Stub out a required function.\r\n     */\r\n    renderDropdown() {\r\n        throw new Error(`renderDropdown() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Stub out a required function.\r\n     */\r\n    componentSelector() {\r\n        throw new Error(`componentSelector() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Stub out a required function.\r\n     */\r\n    dropdownSelector() {\r\n        throw new Error(`dropdownSelector() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Stub out a required function.\r\n     * @deprecated since Moodle 4.4\r\n     */\r\n    triggerSelector() {\r\n        window.console.warning('triggerSelector() is deprecated. Consider using this.selectors.toggle');\r\n    }\r\n\r\n    /**\r\n     * Return the dataset that we will be searching upon.\r\n     *\r\n     * @returns {Promise<null>}\r\n     */\r\n    async getDataset() {\r\n        if (!this.dataset) {\r\n            this.dataset = await this.fetchDataset();\r\n        }\r\n        this.datasetSize = this.dataset.length;\r\n        return this.dataset;\r\n    }\r\n\r\n    /**\r\n     * Return the size of the dataset.\r\n     *\r\n     * @returns {number}\r\n     */\r\n    getDatasetSize() {\r\n        return this.datasetSize;\r\n    }\r\n\r\n    /**\r\n     * Return the results of the filter upon the dataset.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    getMatchedResults() {\r\n        return this.matchedResults;\r\n    }\r\n\r\n    /**\r\n     * Given a filter has been run across the dataset, store the matched results.\r\n     *\r\n     * @param {Array} result\r\n     */\r\n    setMatchedResults(result) {\r\n        this.matchedResults = result;\r\n    }\r\n\r\n    /**\r\n     * Get the value that the user entered.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getSearchTerm() {\r\n        return this.searchTerm;\r\n    }\r\n\r\n    /**\r\n     * Get the transformed search value.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getPreppedSearchTerm() {\r\n        return this.preppedSearchTerm;\r\n    }\r\n\r\n    /**\r\n     * When a user searches for something, set our variable to manage it.\r\n     *\r\n     * @param {string} result\r\n     */\r\n    setSearchTerms(result) {\r\n        this.searchTerm = result;\r\n        this.preppedSearchTerm = result.toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Return an object containing a handfull of dom nodes that we sometimes need the value of.\r\n     *\r\n     * @returns {object}\r\n     */\r\n    getHTMLElements() {\r\n        this.updateNodes();\r\n        return {\r\n            searchDropdown: this.searchDropdown,\r\n            currentViewAll: this.currentViewAll,\r\n            searchInput: this.searchInput,\r\n            clearSearchButton: this.clearSearchButton,\r\n            trigger: this.component.querySelector(this.selectors.trigger),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * When called, close the dropdown and reset the input field attributes.\r\n     *\r\n     * @param {Boolean} clear Conditionality clear the input box.\r\n     */\r\n    closeSearch(clear = false) {\r\n        this.toggleDropdown();\r\n        if (clear) {\r\n            // Hide the \"clear\" search button search bar.\r\n            this.clearSearchButton.classList.add('d-none');\r\n            // Clear the entered search query in the search bar and hide the search results container.\r\n            this.setSearchTerms('');\r\n            this.searchInput.value = \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check whether search results are currently visible.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    searchResultsVisible() {\r\n        const {searchDropdown} = this.getHTMLElements();\r\n        // If a Node is not visible, then the offsetParent is null.\r\n        return searchDropdown.offsetParent !== null;\r\n    }\r\n\r\n    /**\r\n     * When called, update the dropdown fields.\r\n     *\r\n     * @param {Boolean} on Flag to toggle hiding or showing values.\r\n     */\r\n    toggleDropdown(on = false) {\r\n        if (on) {\r\n            $(this.toggle).dropdown('show');\r\n        } else {\r\n            $(this.toggle).dropdown('hide');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * These class members change when a new result set is rendered. So update for fresh data.\r\n     */\r\n    updateNodes() {\r\n        this.resultNodes = [...this.component.querySelectorAll(this.selectors.resultitems)];\r\n        this.currentNode = this.resultNodes.find(r => r.id === document.activeElement.id);\r\n        this.currentViewAll = this.component.querySelector(this.selectors.viewall);\r\n        this.clearSearchButton = this.component.querySelector(this.selectors.clearSearch);\r\n        this.searchInput = this.component.querySelector(this.selectors.input);\r\n        this.searchDropdown = this.component.querySelector(this.selectors.dropdown);\r\n    }\r\n\r\n    /**\r\n     * Register clickable event listeners.\r\n     */\r\n    registerClickHandlers() {\r\n        // Register click events within the component.\r\n        this.component.addEventListener('click', this.clickHandler.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Register change event listeners.\r\n     */\r\n    registerChangeHandlers() {\r\n        const valueElement = this.component.querySelector(`#${this.combobox.dataset.inputElement}`);\r\n        valueElement.addEventListener('change', this.changeHandler.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Register input event listener for the text input area.\r\n     */\r\n    registerInputHandlers() {\r\n        // Register & handle the text input.\r\n        this.searchInput.addEventListener('input', debounce(async() => {\r\n            if (this.getSearchTerm() === this.searchInput.value && this.searchResultsVisible()) {\r\n                window.console.warn(`Search term matches input value - skipping`);\r\n                // The debounce canhappen multiple times quickly. GRrargh\r\n                return;\r\n            }\r\n            this.setSearchTerms(this.searchInput.value);\r\n\r\n            const pendingPromise = new Pending();\r\n            if (this.getSearchTerm() === '') {\r\n                this.toggleDropdown();\r\n                this.clearSearchButton.classList.add('d-none');\r\n                await this.filterrenderpipe();\r\n            } else {\r\n                this.clearSearchButton.classList.remove('d-none');\r\n                await this.renderAndShow();\r\n            }\r\n            pendingPromise.resolve();\r\n        }, 300, {pending: true}));\r\n    }\r\n\r\n    /**\r\n     * Update any changeable nodes, filter and then render the result.\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    async filterrenderpipe() {\r\n        this.updateNodes();\r\n        this.setMatchedResults(await this.filterDataset(await this.getDataset()));\r\n        this.filterMatchDataset();\r\n        await this.renderDropdown();\r\n    }\r\n\r\n    /**\r\n     * A combo method to take the matching fields and render out the results.\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    async renderAndShow() {\r\n        // User has given something for us to filter against.\r\n        this.setMatchedResults(await this.filterDataset(await this.getDataset()));\r\n        await this.filterMatchDataset();\r\n        // Replace the dropdown node contents and show the results.\r\n        await this.renderDropdown();\r\n        // Set the dropdown to open.\r\n        this.toggleDropdown(true);\r\n    }\r\n\r\n    /**\r\n     * The handler for when a user interacts with the component.\r\n     *\r\n     * @param {MouseEvent} e The triggering event that we are working with.\r\n     */\r\n    async clickHandler(e) {\r\n        this.updateNodes();\r\n        // The \"clear search\" button is triggered.\r\n        if (e.target.closest(this.selectors.clearSearch)) {\r\n            this.closeSearch(true);\r\n            this.searchInput.focus();\r\n            // Remove aria-activedescendant when the available options change.\r\n            this.searchInput.removeAttribute('aria-activedescendant');\r\n        }\r\n        // User may have accidentally clicked off the dropdown and wants to reopen it.\r\n        if (\r\n            this.getSearchTerm() !== ''\r\n            && !this.getHTMLElements().searchDropdown.classList.contains('show')\r\n            && e.target.closest(this.selectors.input)\r\n        ) {\r\n            await this.renderAndShow();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The handler for when a user changes the value of the component (selects an option from the dropdown).\r\n     *\r\n     * @param {Event} e The change event.\r\n     */\r\n    // eslint-disable-next-line no-unused-vars\r\n    changeHandler(e) {\r\n        // Components may override this method to do something.\r\n    }\r\n}\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_jquery","_pending","_exports","selectors","component","this","componentSelector","toggle","instance","input","clearSearch","dropdown","dropdownSelector","resultitems","viewall","combobox","matchedResults","searchTerm","preppedSearchTerm","resultNodes","currentNode","currentViewAll","dataset","datasetSize","document","querySelector","searchInput","searchDropdown","clearSearchButton","$component","$","constructor","setSearchTerms","value","registerClickHandlers","registerInputHandlers","registerChangeHandlers","getSearchTerm","classList","remove","fetchDataset","Error","name","filterDataset","filterMatchDataset","renderDropdown","triggerSelector","window","console","warning","getDataset","length","getDatasetSize","getMatchedResults","setMatchedResults","result","getPreppedSearchTerm","toLowerCase","getHTMLElements","updateNodes","trigger","closeSearch","clear","arguments","undefined","toggleDropdown","add","searchResultsVisible","offsetParent","querySelectorAll","find","r","id","activeElement","addEventListener","clickHandler","bind","inputElement","changeHandler","debounce","async","warn","pendingPromise","Pending","filterrenderpipe","renderAndShow","resolve","pending","target","closest","focus","removeAttribute","contains"],"mappings":"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"}