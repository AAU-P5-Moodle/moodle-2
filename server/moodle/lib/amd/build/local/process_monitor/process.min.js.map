{"version":3,"file":"process.min.js","sources":["../../../src/local/process_monitor/process.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * The process motnitor's process reactive component.\r\n *\r\n * @module     core/local/process_monitor/process\r\n * @class      core/local/process_monitor/process\r\n * @copyright  2022 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {BaseComponent} from 'core/reactive';\r\nimport {manager} from 'core/local/process_monitor/manager';\r\n\r\nexport default class extends BaseComponent {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     */\r\n    create() {\r\n        // Optional component name for debugging.\r\n        this.name = 'process_monitor_process';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            CLOSE: `[data-action=\"closeProcess\"]`,\r\n            ERROR: `[data-for=\"error\"]`,\r\n            PROGRESSBAR: `progress`,\r\n            NAME: `[data-for=\"name\"]`,\r\n        };\r\n        // Default classes to toggle on refresh.\r\n        this.classes = {\r\n            HIDE: `d-none`,\r\n        };\r\n        this.id = this.element.dataset.id;\r\n    }\r\n\r\n    /**\r\n     * Static method to create a component instance form the mustache template.\r\n     *\r\n     * @param {string} query the DOM main element query selector\r\n     * @param {object} selectors optional css selector overrides\r\n     * @return {this}\r\n     */\r\n    static init(query, selectors) {\r\n        return new this({\r\n            element: document.querySelector(query),\r\n            reactive: manager,\r\n            selectors,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     *\r\n     * @param {Object} state the initial state\r\n     */\r\n    stateReady(state) {\r\n        this._refreshItem({state, element: state.queue.get(this.id)});\r\n        this.addEventListener(this.getElement(this.selectors.CLOSE), 'click', this._removeProcess);\r\n    }\r\n\r\n    /**\r\n     * Return the component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        return [\r\n            {watch: `queue[${this.id}]:updated`, handler: this._refreshItem},\r\n            {watch: `queue[${this.id}]:deleted`, handler: this.remove},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Create a monitor item.\r\n     *\r\n     * @param {object} args the watcher arguments\r\n     * @param {object} args.element the item state data\r\n     */\r\n    async _refreshItem({element}) {\r\n        const name = this.getElement(this.selectors.NAME);\r\n        name.innerHTML = element.name;\r\n\r\n        const progressbar = this.getElement(this.selectors.PROGRESSBAR);\r\n        progressbar.classList.toggle(this.classes.HIDE, element.finished);\r\n        progressbar.value = element.percentage;\r\n\r\n        const close = this.getElement(this.selectors.CLOSE);\r\n        close.classList.toggle(this.classes.HIDE, !element.error);\r\n\r\n        const error = this.getElement(this.selectors.ERROR);\r\n        error.innerHTML = element.error;\r\n        error.classList.toggle(this.classes.HIDE, !element.error);\r\n    }\r\n\r\n    /**\r\n     * Close the process.\r\n     */\r\n    _removeProcess() {\r\n        this.reactive.dispatch('removeProcess', this.id);\r\n    }\r\n}\r\n"],"names":["_default","BaseComponent","create","this","name","selectors","CLOSE","ERROR","PROGRESSBAR","NAME","classes","HIDE","id","element","dataset","init","query","document","querySelector","reactive","manager","stateReady","state","_refreshItem","queue","get","addEventListener","getElement","_removeProcess","getWatchers","watch","handler","remove","_ref","innerHTML","progressbar","classList","toggle","finished","value","percentage","error","dispatch","_exports","default"],"mappings":";;;;;;;;;AA2Be,MAAAA,iBAAcC,UAAAA,cAKzBC,MAAAA,GAEIC,KAAKC,KAAO,0BAEZD,KAAKE,UAAY,CACbC,MAAO,+BACPC,MAAO,qBACPC,YAAa,WACbC,KAAM,qBAGVN,KAAKO,QAAU,CACXC,KAAM,UAEVR,KAAKS,GAAKT,KAAKU,QAAQC,QAAQF,EACnC,CASA,WAAOG,CAAKC,MAAOX,WACf,OAAO,IAAIF,KAAK,CACZU,QAASI,SAASC,cAAcF,OAChCG,SAAUC,SAAOA,QACjBf,qBAER,CAOAgB,UAAAA,CAAWC,OACPnB,KAAKoB,aAAa,CAACD,YAAOT,QAASS,MAAME,MAAMC,IAAItB,KAAKS,MACxDT,KAAKuB,iBAAiBvB,KAAKwB,WAAWxB,KAAKE,UAAUC,OAAQ,QAASH,KAAKyB,eAC/E,CAOAC,WAAAA,GACI,MAAO,CACH,CAACC,MAAO,SAAS3B,KAAKS,cAAemB,QAAS5B,KAAKoB,cACnD,CAACO,MAAO,SAAS3B,KAAKS,cAAemB,QAAS5B,KAAK6B,QAE3D,CAQA,kBAAMT,CAAYU,MAAY,IAAXpB,QAACA,SAAQoB,KACX9B,KAAKwB,WAAWxB,KAAKE,UAAUI,MACvCyB,UAAYrB,QAAQT,KAEzB,MAAM+B,YAAchC,KAAKwB,WAAWxB,KAAKE,UAAUG,aACnD2B,YAAYC,UAAUC,OAAOlC,KAAKO,QAAQC,KAAME,QAAQyB,UACxDH,YAAYI,MAAQ1B,QAAQ2B,WAEdrC,KAAKwB,WAAWxB,KAAKE,UAAUC,OACvC8B,UAAUC,OAAOlC,KAAKO,QAAQC,MAAOE,QAAQ4B,OAEnD,MAAMA,MAAQtC,KAAKwB,WAAWxB,KAAKE,UAAUE,OAC7CkC,MAAMP,UAAYrB,QAAQ4B,MAC1BA,MAAML,UAAUC,OAAOlC,KAAKO,QAAQC,MAAOE,QAAQ4B,MACvD,CAKAb,cAAAA,GACIzB,KAAKgB,SAASuB,SAAS,gBAAiBvC,KAAKS,GACjD,EACH,OAAA+B,SAAAC,QAAA5C,SAAA2C,SAAAC,OAAA"}