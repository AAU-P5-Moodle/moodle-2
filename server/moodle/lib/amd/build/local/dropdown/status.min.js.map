{"version":3,"file":"status.min.js","sources":["../../../src/local/dropdown/status.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Dropdown status JS controls.\r\n *\r\n * The status controls enable extra configurarions for the dropdown like:\r\n * - Sync the button text with the selected option.\r\n * - Update the status of the button when the selected option changes. This will\r\n *   trigger a \"change\" event when the status changes.\r\n *\r\n * @module      core/local/dropdown/status\r\n * @copyright   2023 Ferran Recio <ferran@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {DropdownDialog} from 'core/local/dropdown/dialog';\r\n\r\nconst Selectors = {\r\n    checkedIcon: '[data-for=\"checkedIcon\"]',\r\n    option: '[role=\"option\"]',\r\n    optionItem: '[data-optionnumber]',\r\n    optionIcon: '.option-icon',\r\n    selectedOption: '[role=\"option\"][aria-selected=\"true\"]',\r\n    uncheckedIcon: '[data-for=\"uncheckedIcon\"]',\r\n};\r\n\r\nconst Classes = {\r\n    selected: 'selected',\r\n    disabled: 'disabled',\r\n    hidden: 'd-none',\r\n};\r\n\r\n/**\r\n * Dropdown dialog class.\r\n * @private\r\n */\r\nexport class DropdownStatus extends DropdownDialog {\r\n    /**\r\n     * Constructor.\r\n     * @param {HTMLElement} element The element to initialize.\r\n     */\r\n    constructor(element) {\r\n        super(element);\r\n        this.buttonSync = element.dataset.buttonSync == 'true';\r\n        this.updateStatus = element.dataset.updateStatus == 'true';\r\n    }\r\n\r\n    /**\r\n     * Initialize the subpanel element.\r\n     *\r\n     * This method adds the event listeners to the subpanel and the position classes.\r\n     * @private\r\n     */\r\n    init() {\r\n        super.init();\r\n\r\n        if (this.element.dataset.dropdownStatusInitialized) {\r\n            return;\r\n        }\r\n\r\n        this.panel.addEventListener('click', this._contentClickHandler.bind(this));\r\n\r\n        if (this.element.dataset.buttonSync == 'true') {\r\n            this.setButtonSyncEnabled(true);\r\n        }\r\n        if (this.element.dataset.updateStatus == 'true') {\r\n            this.setUpdateStatusEnabled(true);\r\n        }\r\n\r\n        this.element.dataset.dropdownStatusInitialized = true;\r\n    }\r\n\r\n    /**\r\n     * Handle click events on the status content.\r\n     * @param {Event} event The event.\r\n     * @private\r\n     */\r\n    _contentClickHandler(event) {\r\n        const option = event.target.closest(Selectors.option);\r\n        if (!option) {\r\n            return;\r\n        }\r\n        if (option.getAttribute('aria-disabled') === 'true') {\r\n            return;\r\n        }\r\n        if (option.getAttribute('aria-selected') === 'true') {\r\n            return;\r\n        }\r\n        if (this.isUpdateStatusEnabled()) {\r\n            this.setSelectedValue(option.dataset.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the selected value.\r\n     * @param {string} value The value to set.\r\n     */\r\n    setSelectedValue(value) {\r\n        const selected = this.panel.querySelector(Selectors.selectedOption);\r\n        if (selected && selected.dataset.value === value) {\r\n            return;\r\n        }\r\n        if (selected) {\r\n            this._updateOptionChecked(selected, false);\r\n        }\r\n        const option = this.panel.querySelector(`${Selectors.option}[data-value=\"${value}\"]`);\r\n        if (option) {\r\n            this._updateOptionChecked(option, true);\r\n        }\r\n        if (this.isButtonSyncEnabled()) {\r\n            this.syncButtonText();\r\n        }\r\n        // Emit standard radio button event with the selected option.\r\n        this.element.dispatchEvent(new Event('change'));\r\n    }\r\n\r\n    /**\r\n     * Update the option checked content.\r\n     * @private\r\n     * @param {HTMLElement} option the option element to set\r\n     * @param {Boolean} checked the new checked value\r\n     */\r\n    _updateOptionChecked(option, checked) {\r\n        option.setAttribute('aria-selected', checked.toString());\r\n        option.classList.toggle(Classes.selected, checked);\r\n        option.classList.toggle(Classes.disabled, checked);\r\n\r\n        const optionItem = option.closest(Selectors.optionItem);\r\n        if (optionItem) {\r\n            this._updateOptionItemChecked(optionItem, checked);\r\n        }\r\n\r\n        if (checked) {\r\n            this.element.dataset.value = option.dataset.value;\r\n        } else if (this.element.dataset.value === option.dataset.value) {\r\n            delete this.element.dataset.value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the option item checked content.\r\n     * @private\r\n     * @param {HTMLElement} optionItem\r\n     * @param {Boolean} checked\r\n     */\r\n    _updateOptionItemChecked(optionItem, checked) {\r\n        const selectedClasses = optionItem.dataset.selectedClasses ?? Classes.selected;\r\n        for (const selectedClass of selectedClasses.split(' ')) {\r\n            optionItem.classList.toggle(selectedClass, checked);\r\n        }\r\n        if (checked) {\r\n            optionItem.dataset.selected = checked;\r\n        } else {\r\n            delete optionItem?.dataset.selected;\r\n        }\r\n        const checkedIcon = optionItem.querySelector(Selectors.checkedIcon);\r\n        if (checkedIcon) {\r\n            checkedIcon.classList.toggle(Classes.hidden, !checked);\r\n        }\r\n        const uncheckedIcon = optionItem.querySelector(Selectors.uncheckedIcon);\r\n        if (uncheckedIcon) {\r\n            uncheckedIcon.classList.toggle(Classes.hidden, checked);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Return the selected value.\r\n     * @returns {string|null} The selected value.\r\n     */\r\n    getSelectedValue() {\r\n        const selected = this.panel.querySelector(Selectors.selectedOption);\r\n        return selected?.dataset.value ?? null;\r\n    }\r\n\r\n    /**\r\n     * Set the button sync value.\r\n     *\r\n     * If the sync is enabled, the button text will show the selected option.\r\n     *\r\n     * @param {Boolean} value The value to set.\r\n     */\r\n    setButtonSyncEnabled(value) {\r\n        if (value) {\r\n            this.element.dataset.buttonSync = 'true';\r\n        } else {\r\n            delete this.element.dataset.buttonSync;\r\n        }\r\n        if (value) {\r\n            this.syncButtonText();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return if the button sync is enabled.\r\n     * @returns {Boolean} The button sync value.\r\n     */\r\n    isButtonSyncEnabled() {\r\n        return this.element.dataset.buttonSync == 'true';\r\n    }\r\n\r\n    /**\r\n     * Sync the button text with the selected option.\r\n     */\r\n    syncButtonText() {\r\n        const selected = this.panel.querySelector(Selectors.selectedOption);\r\n        if (!selected) {\r\n            return;\r\n        }\r\n        let newText = selected.textContent;\r\n        const optionIcon = this._getOptionIcon(selected);\r\n        if (optionIcon) {\r\n            newText = optionIcon.innerHTML + newText;\r\n        }\r\n        this.button.innerHTML = newText;\r\n    }\r\n\r\n    /**\r\n     * Set the update status value.\r\n     *\r\n     * @param {Boolean} value The value to set.\r\n     */\r\n    setUpdateStatusEnabled(value) {\r\n        if (value) {\r\n            this.element.dataset.updateStatus = 'true';\r\n        } else {\r\n            delete this.element.dataset.updateStatus;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return if the update status is enabled.\r\n     * @returns {Boolean} The update status value.\r\n     */\r\n    isUpdateStatusEnabled() {\r\n        return this.element.dataset.updateStatus == 'true';\r\n    }\r\n\r\n    _getOptionIcon(option) {\r\n        const optionItem = option.closest(Selectors.optionItem);\r\n        if (!optionItem) {\r\n            return null;\r\n        }\r\n        return optionItem.querySelector(Selectors.optionIcon);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Get the dropdown dialog instance form a selector.\r\n * @param {string} selector The query selector to init.\r\n * @returns {DropdownStatus|null} The dropdown dialog instance if any.\r\n */\r\nexport const getDropdownStatus = (selector) => {\r\n    const dropdownElement = document.querySelector(selector);\r\n    if (!dropdownElement) {\r\n        return null;\r\n    }\r\n    return new DropdownStatus(dropdownElement);\r\n};\r\n\r\n/**\r\n * Initialize module.\r\n *\r\n * @method\r\n * @param {string} selector The query selector to init.\r\n */\r\nexport const init = (selector) => {\r\n    const dropdown = getDropdownStatus(selector);\r\n    if (!dropdown) {\r\n        throw new Error(`Dopdown status element not found: ${selector}`);\r\n    }\r\n    dropdown.init();\r\n};\r\n"],"names":["Selectors","Classes","DropdownStatus","DropdownDialog","constructor","element","super","this","buttonSync","dataset","updateStatus","init","dropdownStatusInitialized","panel","addEventListener","_contentClickHandler","bind","setButtonSyncEnabled","setUpdateStatusEnabled","event","option","target","closest","getAttribute","isUpdateStatusEnabled","setSelectedValue","value","selected","querySelector","_updateOptionChecked","isButtonSyncEnabled","syncButtonText","dispatchEvent","Event","checked","setAttribute","toString","classList","toggle","optionItem","_updateOptionItemChecked","selectedClasses","selectedClass","split","checkedIcon","uncheckedIcon","getSelectedValue","newText","textContent","optionIcon","_getOptionIcon","innerHTML","button","_exports","getDropdownStatus","selector","dropdownElement","document","dropdown","Error"],"mappings":"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"}