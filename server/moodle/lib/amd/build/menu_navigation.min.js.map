{"version":3,"file":"menu_navigation.min.js","sources":["../src/menu_navigation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Keyboard initialization for a given html node.\r\n *\r\n * @module     core/menu_navigation\r\n * @copyright  2021 Moodle\r\n * @author     Mathew May <mathew.solutions>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nconst SELECTORS = {\r\n    'menuitem': '[role=\"menuitem\"]',\r\n    'tab': '[role=\"tab\"]',\r\n    'dropdowntoggle': '[data-toggle=\"dropdown\"]',\r\n    'primarymenuitemactive': '.primary-navigation .dropdown-item[aria-current=\"true\"]',\r\n};\r\n\r\nlet openDropdownNode = null;\r\n\r\n/**\r\n * Small helper function to check if a given node is null or not.\r\n *\r\n * @param {HTMLElement|null} item The node that we want to compare.\r\n * @param {HTMLElement} fallback Either the first node or final node that can be focused on.\r\n * @return {HTMLElement}\r\n */\r\nconst clickErrorHandler = (item, fallback) => {\r\n    if (item !== null) {\r\n        return item;\r\n    } else {\r\n        return fallback;\r\n    }\r\n};\r\n\r\n/**\r\n * Control classes etc of the selected dropdown item and its' parent <a>\r\n *\r\n * @param {HTMLElement} src The node within the dropdown the user selected.\r\n */\r\nconst menuItemHelper = src => {\r\n    let parent;\r\n\r\n    // Do not apply any actions if the selected dropdown item is explicitly instructing to not display an active state.\r\n    if (src.dataset.disableactive) {\r\n        return;\r\n    }\r\n    // Handling for dropdown escapes.\r\n    // A bulk of the handling is already done by aria.js just add polish.\r\n    if (src.classList.contains('dropdown-item')) {\r\n        parent = src.closest('.dropdown-menu');\r\n        const dropDownToggle = document.getElementById(parent.getAttribute('aria-labelledby'));\r\n        dropDownToggle.classList.add('active');\r\n        dropDownToggle.setAttribute('tabindex', 0);\r\n    } else if (src.matches(`${SELECTORS.tab},${SELECTORS.menuitem}`) && !src.matches(SELECTORS.dropdowntoggle)) {\r\n        parent = src.parentElement.parentElement.querySelector('.dropdown-menu');\r\n    } else {\r\n        return;\r\n    }\r\n    // Remove active class from any other dropdown elements.\r\n    Array.prototype.forEach.call(parent.children, node => {\r\n        const menuItem = node.querySelector(SELECTORS.menuitem);\r\n        if (menuItem !== null) {\r\n            menuItem.classList.remove('active');\r\n            // Remove aria selection state.\r\n            menuItem.removeAttribute('aria-current');\r\n        }\r\n    });\r\n    // Set the applicable element's selection state.\r\n    if (src.getAttribute('role') === 'menuitem') {\r\n        src.setAttribute('aria-current', 'true');\r\n    }\r\n};\r\n\r\n/**\r\n * Check if there are sub items in a dropdown menu. There can be one element active only. That is usually controlled\r\n * by the server. However, when you click, the newly clicked item gets the active state as well. This is no problem\r\n * because the user leaves the page and a new page load happens. When the user hits the back button, the old page dom\r\n * is restored from the cache, with both menu items active. If there is such a case, we need to uncheck the item that\r\n * was clicked when leaving this page.\r\n * Make sure that this function is applied in the main menu only. The gradebook may contain drop down menus as well\r\n * were more than one item can be flagged as active.\r\n */\r\nconst dropDownMenuActiveCheck = function() {\r\n    const items = document.querySelectorAll(SELECTORS.primarymenuitemactive);\r\n    // Do the check only, if there is more than one subitem active.\r\n    if (items !== null && items.length > 1) {\r\n        items.forEach(function(e) {\r\n            // Get the link target from the href attribute and compare it with the current url in the browser.\r\n            const href = e.getAttribute('href');\r\n            const windowHref = window.location.href || '';\r\n            const windowPath = window.location.pathname || '';\r\n            if (href !== windowHref && href !== windowPath\r\n                && href !== windowHref + '/index.php' && href !== windowPath + 'index.php') {\r\n                e.classList.remove('active');\r\n                e.removeAttribute('aria-current');\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * Defined keyboard event handling so we can remove listeners on nodes on resize etc.\r\n *\r\n * @param {event} e The triggering element and key presses etc.\r\n */\r\nconst keyboardListenerEvents = e => {\r\n    const src = e.srcElement;\r\n    const firstNode = e.currentTarget.firstElementChild;\r\n    const lastNode = findUsableLastNode(e.currentTarget);\r\n\r\n    // Handling for dropdown escapes.\r\n    // A bulk of the handling is already done by aria.js just add polish.\r\n    if (src.classList.contains('dropdown-item')) {\r\n        if (e.key == 'ArrowRight' ||\r\n            e.key == 'ArrowLeft') {\r\n            e.preventDefault();\r\n            if (openDropdownNode !== null) {\r\n                openDropdownNode.parentElement.click();\r\n            }\r\n        }\r\n        if (e.key == ' ' ||\r\n            e.key == 'Enter') {\r\n            e.preventDefault();\r\n\r\n            menuItemHelper(src);\r\n\r\n            if (!src.parentElement.classList.contains('dropdown')) {\r\n                src.click();\r\n            }\r\n        }\r\n    } else {\r\n        const rtl = window.right_to_left();\r\n        const arrowNext = rtl ? 'ArrowLeft' : 'ArrowRight';\r\n        const arrowPrevious = rtl ? 'ArrowRight' : 'ArrowLeft';\r\n\r\n        if (src.getAttribute('role') === 'menuitem') {\r\n            // When not rendered within a dropdown menu, handle keyboard navigation if the element is rendered as a menu item.\r\n            if (e.key == arrowNext) {\r\n                e.preventDefault();\r\n                setFocusNext(src, firstNode);\r\n            }\r\n            if (e.key == arrowPrevious) {\r\n                e.preventDefault();\r\n                setFocusPrev(src, lastNode);\r\n            }\r\n            // Let aria.js handle the dropdowns.\r\n            if (e.key == 'ArrowUp' ||\r\n                e.key == 'ArrowDown') {\r\n                openDropdownNode = src;\r\n                e.preventDefault();\r\n            }\r\n            if (e.key == 'Home') {\r\n                e.preventDefault();\r\n                setFocusHomeEnd(firstNode);\r\n            }\r\n            if (e.key == 'End') {\r\n                e.preventDefault();\r\n                setFocusHomeEnd(lastNode);\r\n            }\r\n        }\r\n\r\n        if (e.key == ' ' ||\r\n            e.key == 'Enter') {\r\n            e.preventDefault();\r\n            // Aria.js handles dropdowns etc.\r\n            if (!src.parentElement.classList.contains('dropdown')) {\r\n                src.click();\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Defined click event handling so we can remove listeners on nodes on resize etc.\r\n *\r\n * @param {event} e The triggering element and key presses etc.\r\n */\r\nconst clickListenerEvents = e => {\r\n    const src = e.srcElement;\r\n    menuItemHelper(src);\r\n};\r\n\r\n/**\r\n * The initial entry point that a given module can pass a HTMLElement.\r\n *\r\n * @param {HTMLElement} elementRoot The menu to add handlers upon.\r\n */\r\nexport default elementRoot => {\r\n    // Remove any and all instances of old listeners on the passed element.\r\n    elementRoot.removeEventListener('keydown', keyboardListenerEvents);\r\n    elementRoot.removeEventListener('click', clickListenerEvents);\r\n    // (Re)apply our event listeners to the passed element.\r\n    elementRoot.addEventListener('keydown', keyboardListenerEvents);\r\n    elementRoot.addEventListener('click', clickListenerEvents);\r\n};\r\n\r\n// We need this triggered only when the user hits the back button.\r\nwindow.addEventListener('pageshow', dropDownMenuActiveCheck);\r\n\r\n/**\r\n * Handle the focusing to the next element in the dropdown.\r\n *\r\n * @param {HTMLElement|null} currentNode The node that we want to take action on.\r\n * @param {HTMLElement} firstNode The backup node to focus as a last resort.\r\n */\r\nconst setFocusNext = (currentNode, firstNode) => {\r\n    const listElement = currentNode.parentElement;\r\n    const nextListItem = ((el) => {\r\n        do {\r\n            el = el.nextElementSibling;\r\n        } while (el && !el.offsetHeight); // We only work with the visible tabs.\r\n        return el;\r\n    })(listElement);\r\n    const nodeToSelect = clickErrorHandler(nextListItem, firstNode);\r\n    const parent = listElement.parentElement;\r\n    const isTabList = parent.getAttribute('role') === 'tablist';\r\n    const itemSelector = isTabList ? SELECTORS.tab : SELECTORS.menuitem;\r\n    const menuItem = nodeToSelect.querySelector(itemSelector);\r\n    menuItem.focus();\r\n};\r\n\r\n/**\r\n * Handle the focusing to the previous element in the dropdown.\r\n *\r\n * @param {HTMLElement|null} currentNode The node that we want to take action on.\r\n * @param {HTMLElement} lastNode The backup node to focus as a last resort.\r\n */\r\nconst setFocusPrev = (currentNode, lastNode) => {\r\n    const listElement = currentNode.parentElement;\r\n    const nextListItem = ((el) => {\r\n        do {\r\n            el = el.previousElementSibling;\r\n        } while (el && !el.offsetHeight); // We only work with the visible tabs.\r\n        return el;\r\n    })(listElement);\r\n    const nodeToSelect = clickErrorHandler(nextListItem, lastNode);\r\n    const parent = listElement.parentElement;\r\n    const isTabList = parent.getAttribute('role') === 'tablist';\r\n    const itemSelector = isTabList ? SELECTORS.tab : SELECTORS.menuitem;\r\n    const menuItem = nodeToSelect.querySelector(itemSelector);\r\n    menuItem.focus();\r\n};\r\n\r\n/**\r\n * Focus on either the start or end of a nav list.\r\n *\r\n * @param {HTMLElement} node The element to focus on.\r\n */\r\nconst setFocusHomeEnd = node => {\r\n    node.querySelector(SELECTORS.menuitem).focus();\r\n};\r\n\r\n/**\r\n * We need to look within the menu to find a last node we can add focus to.\r\n *\r\n * @param {HTMLElement} elementRoot Menu to find a final child node within.\r\n * @return {HTMLElement}\r\n */\r\nconst findUsableLastNode = elementRoot => {\r\n    const lastNode = elementRoot.lastElementChild;\r\n\r\n    // An example is the more menu existing but hidden on the page for the time being.\r\n    if (!lastNode.classList.contains('d-none')) {\r\n        return elementRoot.lastElementChild;\r\n    } else {\r\n        // Cast the HTMLCollection & reverse it.\r\n        const extractedNodes = Array.prototype.map.call(elementRoot.children, node => {\r\n            return node;\r\n        }).reverse();\r\n\r\n        // Get rid of any nodes we can not set focus on.\r\n        const nodesToUse = extractedNodes.filter((node => {\r\n            if (!node.classList.contains('d-none')) {\r\n                return node;\r\n            }\r\n        }));\r\n\r\n        // If we find no elements we can set focus on, fall back to the absolute first element.\r\n        if (nodesToUse.length !== 0) {\r\n            return nodesToUse[0];\r\n        } else {\r\n            return elementRoot.firstElementChild;\r\n        }\r\n    }\r\n};\r\n"],"names":["SELECTORS","openDropdownNode","clickErrorHandler","item","fallback","menuItemHelper","src","parent","dataset","disableactive","classList","contains","closest","dropDownToggle","document","getElementById","getAttribute","add","setAttribute","matches","parentElement","querySelector","Array","prototype","forEach","call","children","node","menuItem","remove","removeAttribute","keyboardListenerEvents","e","srcElement","firstNode","currentTarget","firstElementChild","lastNode","findUsableLastNode","key","preventDefault","click","rtl","window","right_to_left","arrowNext","arrowPrevious","setFocusNext","setFocusPrev","setFocusHomeEnd","clickListenerEvents","_exports","default","elementRoot","removeEventListener","addEventListener","items","querySelectorAll","length","href","windowHref","location","windowPath","pathname","currentNode","listElement","nextListItem","el","nextElementSibling","offsetHeight","nodeToSelect","itemSelector","focus","previousElementSibling","lastElementChild","nodesToUse","map","reverse","filter"],"mappings":"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"}