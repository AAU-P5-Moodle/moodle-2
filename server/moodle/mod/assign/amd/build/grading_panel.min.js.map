{"version":3,"file":"grading_panel.min.js","sources":["../src/grading_panel.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript controller for the \"Grading\" panel at the right of the page.\r\n *\r\n * @module     mod_assign/grading_panel\r\n * @copyright  2016 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.1\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/yui',\r\n    'core/notification',\r\n    'core/templates',\r\n    'core/fragment',\r\n    'core/ajax',\r\n    'core/str',\r\n    'mod_assign/grading_form_change_checker',\r\n    'mod_assign/grading_events',\r\n    'core_form/events',\r\n    'core/toast',\r\n    'core_form/changechecker',\r\n], function(\r\n    $,\r\n    Y,\r\n    notification,\r\n    templates,\r\n    fragment,\r\n    ajax,\r\n    str,\r\n    checker,\r\n    GradingEvents,\r\n    FormEvents,\r\n    Toast,\r\n    FormChangeChecker\r\n) {\r\n\r\n    /**\r\n     * GradingPanel class.\r\n     *\r\n     * @class mod_assign/grading_panel\r\n     * @param {String} selector The selector for the page region containing the user navigation.\r\n     */\r\n    var GradingPanel = function(selector) {\r\n        this._regionSelector = selector;\r\n        this._region = $(selector);\r\n        this._userCache = [];\r\n\r\n        this.registerEventListeners();\r\n    };\r\n\r\n    /** @property {String} Selector for the page region containing the user navigation. */\r\n    GradingPanel.prototype._regionSelector = null;\r\n\r\n    /** @property {Integer} Remember the last user id to prevent unnessecary reloads. */\r\n    GradingPanel.prototype._lastUserId = 0;\r\n\r\n    /** @property {Integer} Remember the last attempt number to prevent unnessecary reloads. */\r\n    GradingPanel.prototype._lastAttemptNumber = -1;\r\n\r\n    /** @property {JQuery} JQuery node for the page region containing the user navigation. */\r\n    GradingPanel.prototype._region = null;\r\n\r\n     /** @property {Integer} The id of the next user in the grading list */\r\n    GradingPanel.prototype.nextUserId = null;\r\n\r\n     /** @property {Boolean} Next user exists in the grading list */\r\n    GradingPanel.prototype.nextUser = false;\r\n\r\n    /**\r\n     * Fade the dom node out, update it, and fade it back.\r\n     *\r\n     * @private\r\n     * @method _niceReplaceNodeContents\r\n     * @param {JQuery} node\r\n     * @param {String} html\r\n     * @param {String} js\r\n     * @return {Deferred} promise resolved when the animations are complete.\r\n     */\r\n    GradingPanel.prototype._niceReplaceNodeContents = function(node, html, js) {\r\n        var promise = $.Deferred();\r\n\r\n        node.fadeOut(\"fast\", function() {\r\n            templates.replaceNodeContents(node, html, js);\r\n            node.fadeIn(\"fast\", function() {\r\n                promise.resolve();\r\n            });\r\n        });\r\n\r\n        return promise.promise();\r\n    };\r\n\r\n    /**\r\n     * Make sure all form fields have the latest saved state.\r\n     * @private\r\n     * @method _saveFormState\r\n     */\r\n    GradingPanel.prototype._saveFormState = function() {\r\n        // Copy data from notify students checkbox which was moved out of the form.\r\n        var checked = $('[data-region=\"grading-actions-form\"] [name=\"sendstudentnotifications\"]').prop(\"checked\");\r\n        $('.gradeform [name=\"sendstudentnotifications\"]').val(checked);\r\n    };\r\n\r\n    /**\r\n     * Make form submit via ajax.\r\n     *\r\n     * @private\r\n     * @param {Object} event\r\n     * @param {Integer} nextUserId\r\n     * @param {Boolean} nextUser optional. Load next user in the grading list.\r\n     * @method _submitForm\r\n     * @fires event:formSubmittedByJavascript\r\n     */\r\n    GradingPanel.prototype._submitForm = function(event, nextUserId, nextUser) {\r\n        // If the form has data in comment-area, then we need to save that comment\r\n        var commentAreaElement = document.querySelector('.comment-area');\r\n        if (commentAreaElement) {\r\n            var commentTextAreaElement = commentAreaElement.querySelector('.db > textarea');\r\n            if (commentTextAreaElement.value !== '') {\r\n                var commentActionPostElement = commentAreaElement.querySelector('.fd a[id^=\"comment-action-post-\"]');\r\n                commentActionPostElement.click();\r\n            }\r\n        }\r\n\r\n        // The form was submitted - send it via ajax instead.\r\n        var form = $(this._region.find('form.gradeform'));\r\n\r\n        $('[data-region=\"overlay\"]').show();\r\n\r\n        // Mark the form as submitted in the change checker.\r\n        FormChangeChecker.markFormSubmitted(form[0]);\r\n\r\n        // We call this, so other modules can update the form with the latest state.\r\n        form.trigger('save-form-state');\r\n\r\n        // Tell all form fields we are about to submit the form.\r\n        FormEvents.notifyFormSubmittedByJavascript(form[0]);\r\n\r\n        // Now we get all the current values from the form.\r\n        var data = form.serialize();\r\n        var assignmentid = this._region.attr('data-assignmentid');\r\n\r\n        // Now we can continue...\r\n        ajax.call([{\r\n            methodname: 'mod_assign_submit_grading_form',\r\n            args: {assignmentid: assignmentid, userid: this._lastUserId, jsonformdata: JSON.stringify(data)},\r\n            done: this._handleFormSubmissionResponse.bind(this, data, nextUserId, nextUser),\r\n            fail: notification.exception\r\n        }]);\r\n    };\r\n\r\n    /**\r\n     * Handle form submission response.\r\n     *\r\n     * @private\r\n     * @method _handleFormSubmissionResponse\r\n     * @param {Array} formdata - submitted values\r\n     * @param {Number} [nextUserId] The id of the user to load after the form is saved\r\n     * @param {Boolean} [nextUser] - Whether to switch to next user in the grading list.\r\n     * @param {Array} response List of errors.\r\n     */\r\n    GradingPanel.prototype._handleFormSubmissionResponse = function(formdata, nextUserId, nextUser, response) {\r\n        if (typeof nextUserId === \"undefined\") {\r\n            nextUserId = this._lastUserId;\r\n        }\r\n        if (response.length) {\r\n            // There was an error saving the grade. Re-render the form using the submitted data so we can show\r\n            // validation errors.\r\n            $(document).trigger('reset', [this._lastUserId, formdata]);\r\n        } else {\r\n            str.get_string('gradechangessaveddetail', 'mod_assign')\r\n            .then(function(str) {\r\n                Toast.add(str);\r\n                return str;\r\n            })\r\n            .catch(notification.exception);\r\n\r\n            // Reset the form state.\r\n            var form = $(this._region.find('form.gradeform'));\r\n            FormChangeChecker.resetFormDirtyState(form[0]);\r\n\r\n            if (nextUserId == this._lastUserId) {\r\n                $(document).trigger('reset', nextUserId);\r\n            } else if (nextUser) {\r\n                $(document).trigger('done-saving-show-next', true);\r\n            } else {\r\n                $(document).trigger('user-changed', nextUserId);\r\n            }\r\n        }\r\n        $('[data-region=\"overlay\"]').hide();\r\n    };\r\n\r\n    /**\r\n     * Refresh form with default values.\r\n     *\r\n     * @private\r\n     * @method _resetForm\r\n     * @param {Event} e\r\n     * @param {Integer} userid\r\n     * @param {Array} formdata\r\n     */\r\n    GradingPanel.prototype._resetForm = function(e, userid, formdata) {\r\n        // The form was cancelled - refresh with default values.\r\n        var event = $.Event(\"custom\");\r\n        if (typeof userid == \"undefined\") {\r\n            userid = this._lastUserId;\r\n        }\r\n        this._lastUserId = 0;\r\n        this._refreshGradingPanel(event, userid, formdata);\r\n    };\r\n\r\n    /**\r\n     * Open a picker to choose an older attempt.\r\n     *\r\n     * @private\r\n     * @param {Object} e\r\n     * @method _chooseAttempt\r\n     */\r\n    GradingPanel.prototype._chooseAttempt = function(e) {\r\n        // Show a dialog.\r\n\r\n        // The form is in the element pointed to by data-submissions.\r\n        var link = $(e.target);\r\n        var submissionsId = link.data('submissions');\r\n        var submissionsform = $(document.getElementById(submissionsId));\r\n        var formcopy = submissionsform.clone();\r\n        var formhtml = formcopy.wrap($('<form/>')).html();\r\n\r\n        str.get_strings([\r\n            {key: 'viewadifferentattempt', component: 'mod_assign'},\r\n            {key: 'view', component: 'core'},\r\n            {key: 'cancel', component: 'core'},\r\n        ]).done(function(strs) {\r\n            notification.confirm(strs[0], formhtml, strs[1], strs[2], function() {\r\n                var attemptnumber = $(\"input:radio[name='select-attemptnumber']:checked\").val();\r\n\r\n                this._refreshGradingPanel(null, this._lastUserId, '', attemptnumber);\r\n            }.bind(this));\r\n        }.bind(this)).fail(notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Add popout buttons\r\n     *\r\n     * @private\r\n     * @method _addPopoutButtons\r\n     * @param {JQuery} selector The region selector to add popout buttons to.\r\n     */\r\n    GradingPanel.prototype._addPopoutButtons = function(selector) {\r\n        var region = $(selector);\r\n\r\n        templates.render('mod_assign/popout_button', {}).done(function(html) {\r\n            var parents = region.find('[data-fieldtype=\"filemanager\"],[data-fieldtype=\"editor\"],[data-fieldtype=\"grading\"]')\r\n                    .closest('.fitem');\r\n            parents.addClass('has-popout').find('label').parent().append(html);\r\n\r\n            region.on('click', '[data-region=\"popout-button\"]', this._togglePopout.bind(this));\r\n        }.bind(this)).fail(notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Make a div \"popout\" or \"popback\".\r\n     *\r\n     * @private\r\n     * @method _togglePopout\r\n     * @param {Event} event\r\n     */\r\n    GradingPanel.prototype._togglePopout = function(event) {\r\n        event.preventDefault();\r\n        var container = $(event.target).closest('.fitem');\r\n        if (container.hasClass('popout')) {\r\n            $('.popout').removeClass('popout');\r\n        } else {\r\n            $('.popout').removeClass('popout');\r\n            container.addClass('popout');\r\n            container.addClass('moodle-has-zindex');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the user context - re-render the template in the page.\r\n     *\r\n     * @private\r\n     * @method _refreshGradingPanel\r\n     * @param {Event} event\r\n     * @param {Number} userid\r\n     * @param {String} submissiondata serialised submission data.\r\n     * @param {Integer} attemptnumber\r\n     */\r\n    GradingPanel.prototype._refreshGradingPanel = function(event, userid, submissiondata, attemptnumber) {\r\n        var contextid = this._region.attr('data-contextid');\r\n        if (typeof submissiondata === 'undefined') {\r\n            submissiondata = '';\r\n        }\r\n        if (typeof attemptnumber === 'undefined') {\r\n            attemptnumber = -1;\r\n        }\r\n        // Skip reloading if it is the same user.\r\n        if (this._lastUserId == userid && this._lastAttemptNumber == attemptnumber && submissiondata === '') {\r\n            return;\r\n        }\r\n        this._lastUserId = userid;\r\n        this._lastAttemptNumber = attemptnumber;\r\n        $(document).trigger('start-loading-user');\r\n        // Tell behat to back off too.\r\n        window.M.util.js_pending('mod-assign-loading-user');\r\n        // First insert the loading template.\r\n        templates.render('mod_assign/loading', {}).done(function(html, js) {\r\n            // Update the page.\r\n            this._niceReplaceNodeContents(this._region, html, js).done(function() {\r\n                if (userid > 0) {\r\n                    this._region.show();\r\n                    // Reload the grading form \"fragment\" for this user.\r\n                    var params = {userid: userid, attemptnumber: attemptnumber, jsonformdata: JSON.stringify(submissiondata)};\r\n                    fragment.loadFragment('mod_assign', 'gradingpanel', contextid, params).done(function(html, js) {\r\n                        this._niceReplaceNodeContents(this._region, html, js)\r\n                        .done(function() {\r\n                            checker.saveFormState('[data-region=\"grade-panel\"] .gradeform');\r\n                            $(document).on('editor-content-restored', function() {\r\n                                // If the editor has some content that has been restored\r\n                                // then save the form state again for comparison.\r\n                                checker.saveFormState('[data-region=\"grade-panel\"] .gradeform');\r\n                            });\r\n                            $('[data-region=\"attempt-chooser\"]').on('click', this._chooseAttempt.bind(this));\r\n                            this._addPopoutButtons('[data-region=\"grade-panel\"] .gradeform');\r\n                            $(document).trigger('finish-loading-user');\r\n                            // Tell behat we are friends again.\r\n                            window.M.util.js_complete('mod-assign-loading-user');\r\n                        }.bind(this))\r\n                        .fail(notification.exception);\r\n                    }.bind(this)).fail(notification.exception);\r\n                    $('[data-region=\"review-panel\"]').show();\r\n                } else {\r\n                    this._region.hide();\r\n                    $('[data-region=\"review-panel\"]').hide();\r\n                    $(document).trigger('finish-loading-user');\r\n                    // Tell behat we are friends again.\r\n                    window.M.util.js_complete('mod-assign-loading-user');\r\n                }\r\n            }.bind(this));\r\n        }.bind(this)).fail(notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Get next user data and store it in global variables\r\n     *\r\n     * @private\r\n     * @method _getNextUser\r\n     * @param {Event} event\r\n     * @param {Object} data Next user's data\r\n     */\r\n    GradingPanel.prototype._getNextUser = function(event, data) {\r\n        this.nextUserId = data.nextUserId;\r\n        this.nextUser = data.nextUser;\r\n    };\r\n\r\n    /**\r\n     * Handle the save-and-show-next event\r\n     *\r\n     * @private\r\n     * @method _handleSaveAndShowNext\r\n     */\r\n    GradingPanel.prototype._handleSaveAndShowNext = function() {\r\n        this._submitForm(null, this.nextUserId, this.nextUser);\r\n    };\r\n\r\n    /**\r\n     * Get the grade panel element.\r\n     *\r\n     * @method getPanelElement\r\n     * @return {jQuery}\r\n     */\r\n    GradingPanel.prototype.getPanelElement = function() {\r\n        return $('[data-region=\"grade-panel\"]');\r\n    };\r\n\r\n    /**\r\n     * Hide the grade panel.\r\n     *\r\n     * @method collapsePanel\r\n     */\r\n    GradingPanel.prototype.collapsePanel = function() {\r\n        this.getPanelElement().addClass('collapsed');\r\n    };\r\n\r\n    /**\r\n     * Show the grade panel.\r\n     *\r\n     * @method expandPanel\r\n     */\r\n    GradingPanel.prototype.expandPanel = function() {\r\n        this.getPanelElement().removeClass('collapsed');\r\n    };\r\n\r\n    /**\r\n     * Register event listeners for the grade panel.\r\n     *\r\n     * @method registerEventListeners\r\n     */\r\n    GradingPanel.prototype.registerEventListeners = function() {\r\n        var docElement = $(document);\r\n        var region = $(this._region);\r\n        // Add an event listener to prevent form submission when pressing enter key.\r\n        region.on('submit', 'form', function(e) {\r\n            e.preventDefault();\r\n        });\r\n\r\n        docElement.on('next-user', this._getNextUser.bind(this));\r\n        docElement.on('user-changed', this._refreshGradingPanel.bind(this));\r\n        docElement.on('save-changes', this._submitForm.bind(this));\r\n        docElement.on('save-and-show-next', this._handleSaveAndShowNext.bind(this));\r\n        docElement.on('reset', this._resetForm.bind(this));\r\n\r\n        docElement.on('save-form-state', this._saveFormState.bind(this));\r\n\r\n        docElement.on(GradingEvents.COLLAPSE_GRADE_PANEL, function() {\r\n            this.collapsePanel();\r\n        }.bind(this));\r\n\r\n        // We should expand if the review panel is collapsed.\r\n        docElement.on(GradingEvents.COLLAPSE_REVIEW_PANEL, function() {\r\n            this.expandPanel();\r\n        }.bind(this));\r\n\r\n        docElement.on(GradingEvents.EXPAND_GRADE_PANEL, function() {\r\n            this.expandPanel();\r\n        }.bind(this));\r\n    };\r\n\r\n    return GradingPanel;\r\n});\r\n"],"names":["define","$","Y","notification","templates","fragment","ajax","str","checker","GradingEvents","FormEvents","Toast","FormChangeChecker","GradingPanel","selector","this","_regionSelector","_region","_userCache","registerEventListeners","prototype","_lastUserId","_lastAttemptNumber","nextUserId","nextUser","_niceReplaceNodeContents","node","html","js","promise","Deferred","fadeOut","replaceNodeContents","fadeIn","resolve","_saveFormState","checked","prop","val","_submitForm","event","commentAreaElement","document","querySelector","value","click","form","find","show","markFormSubmitted","trigger","notifyFormSubmittedByJavascript","data","serialize","assignmentid","attr","call","methodname","args","userid","jsonformdata","JSON","stringify","done","_handleFormSubmissionResponse","bind","fail","exception","formdata","response","length","get_string","then","add","catch","resetFormDirtyState","hide","_resetForm","e","Event","_refreshGradingPanel","_chooseAttempt","submissionsId","target","formhtml","getElementById","clone","wrap","get_strings","key","component","strs","confirm","attemptnumber","_addPopoutButtons","region","render","closest","addClass","parent","append","on","_togglePopout","preventDefault","container","hasClass","removeClass","submissiondata","contextid","window","M","util","js_pending","params","loadFragment","saveFormState","js_complete","_getNextUser","_handleSaveAndShowNext","getPanelElement","collapsePanel","expandPanel","docElement","COLLAPSE_GRADE_PANEL","COLLAPSE_REVIEW_PANEL","EXPAND_GRADE_PANEL"],"mappings":"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"}