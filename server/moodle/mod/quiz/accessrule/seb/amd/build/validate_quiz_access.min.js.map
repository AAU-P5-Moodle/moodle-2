{"version":3,"file":"validate_quiz_access.min.js","sources":["../src/validate_quiz_access.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Validate Safe Exam Browser access keys.\r\n *\r\n * @module     quizaccess_seb/validate_quiz_access\r\n * @author     Andrew Madden <andrewmadden@catalyst-au.net>\r\n * @copyright  2021 Catalyst IT\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Ajax from 'core/ajax';\r\nimport Config from 'core/config';\r\nimport Notification from \"core/notification\";\r\nimport * as View from 'quizaccess_seb/view';\r\n\r\n// SafeExamBrowser object will be automatically initialized if using the SafeExamBrowser application.\r\nwindow.SafeExamBrowser = window.SafeExamBrowser || null;\r\n\r\n/**\r\n * Once the keys are fetched, action checking access.\r\n *\r\n * @param {init} cmid Value of course module id of the quiz.\r\n * @param {boolean} autoreconfigure Value of Moodle setting: quizaccess_seb/autoreconfigureseb.\r\n */\r\nconst safeExamBrowserKeysUpdated = (cmid, autoreconfigure = false) => {\r\n    // Action opening up the quiz.\r\n    isQuizAccessValid(cmid).then((response) => {\r\n        // Show the alert for an extra second to allow user to see it.\r\n        setTimeout(View.clearLoadingAlert, 1000);\r\n\r\n        if (response.configkey && response.browserexamkey) {\r\n            View.allowAccess();\r\n        } else {\r\n            // If autoreconfigureseb is enabled, attempt to reconfigure page with quiz settings.\r\n            if (autoreconfigure === true && response.configkey === false) {\r\n                reconfigureSafeExamBrowser(cmid);\r\n            }\r\n            setTimeout(View.showValidationFailedModal, 1000);\r\n        }\r\n\r\n        return response;\r\n    }).catch(err => {\r\n        Notification.exception(err);\r\n    });\r\n};\r\n\r\n/**\r\n * Validate keys in Moodle backend.\r\n *\r\n * @param {init} cmid Value of course module id of the quiz.\r\n * @return {Promise}\r\n */\r\nconst isQuizAccessValid = (cmid) => {\r\n    const request = {\r\n        methodname: 'quizaccess_seb_validate_quiz_keys',\r\n        args: {\r\n            cmid: cmid,\r\n            url: window.location.href,\r\n            configkey: window.SafeExamBrowser.security.configKey,\r\n            browserexamkey: window.SafeExamBrowser.security.browserExamKey\r\n        },\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Check if the key is not yet set.\r\n *\r\n * @param {string} key config key or browser exam key.\r\n * @return {boolean}\r\n */\r\nconst isKeyEmpty = (key) => {\r\n    // If the SafeExamBrowser object is defined, the default 'empty' value of the configKey and browserExamKey is ':'.\r\n    return key === \":\";\r\n};\r\n\r\n/**\r\n * Reload Safe Exam Browser with current quiz configuration.\r\n *\r\n * @param {init} cmid Value of course module id of the quiz.\r\n */\r\nconst reconfigureSafeExamBrowser = (cmid) => {\r\n    const domain = Config.wwwroot.replace(/^http/i, 'seb');\r\n    const redirecturl = domain + '/mod/quiz/accessrule/seb/config.php?cmid=' + cmid;\r\n    document.location.replace(redirecturl);\r\n};\r\n\r\n/**\r\n * Initialize the process of fetching the keys.\r\n *\r\n * @param {init} cmid Value of course module id of the quiz.\r\n * @param {boolean} autoreconfigure Value of Moodle setting: quizaccess_seb/autoreconfigureseb.\r\n */\r\nexport const init = async(cmid, autoreconfigure = false) => {\r\n    // If the SafeExamBrowser object is instantiated, try and use it to fetch the access keys.\r\n    if (window.SafeExamBrowser !== null) {\r\n        await View.addLoadingAlert();\r\n        // If the SEB keys are already set, we can call our callback directly.\r\n\r\n        if (!isKeyEmpty(window.SafeExamBrowser.security.configKey) || !isKeyEmpty(window.SafeExamBrowser.security.browserExamKey)) {\r\n            safeExamBrowserKeysUpdated(cmid, autoreconfigure);\r\n        } else {\r\n            window.SafeExamBrowser.security.updateKeys(safeExamBrowserKeysUpdated);\r\n        }\r\n    }\r\n};\r\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireDefault","__esModule","default","_ajax","_config","_notification","View","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","window","SafeExamBrowser","safeExamBrowserKeysUpdated","cmid","autoreconfigure","arguments","length","undefined","isQuizAccessValid","then","response","setTimeout","clearLoadingAlert","configkey","browserexamkey","allowAccess","reconfigureSafeExamBrowser","showValidationFailedModal","catch","err","Notification","exception","request","methodname","args","url","location","href","security","configKey","browserExamKey","Ajax","isKeyEmpty","key","redirecturl","Config","wwwroot","replace","document","_exports","init","async","addLoadingAlert","updateKeys"],"mappings":"kLA2B4C,SAAAA,yBAAAC,GAAA,GAAA,mBAAAC,QAAA,OAAA,KAAA,IAAAC,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,eAAAF,yBAAA,SAAAC,GAAAA,OAAAA,EAAAG,EAAAD,IAAAF,EAAA,CAAA,SAAAI,uBAAAJ,GAAAA,OAAAA,GAAAA,EAAAK,WAAAL,EAAAM,CAAAA,QAAAN,EAAA;;;;;;;;kFAH5CO,MAAAH,uBAAAG,OACAC,QAAAJ,uBAAAI,SACAC,cAAAL,uBAAAK,eACAC,KAA4C,SAAAV,EAAAE,GAAAA,IAAAA,GAAAF,GAAAA,EAAAK,WAAAL,OAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAM,MAAAA,CAAAA,QAAAN,GAAAG,IAAAA,EAAAJ,yBAAAG,GAAA,GAAAC,GAAAA,EAAAQ,IAAAX,GAAA,OAAAG,EAAAS,IAAAZ,GAAA,IAAAa,EAAA,CAAAC,UAAA,MAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,IAAA,IAAAC,KAAAnB,EAAAmB,GAAAA,YAAAA,GAAAC,CAAAA,EAAAA,eAAAC,KAAArB,EAAAmB,GAAAG,CAAAA,IAAAA,EAAAP,EAAAC,OAAAE,yBAAAlB,EAAAmB,GAAAG,KAAAA,IAAAA,EAAAV,KAAAU,EAAAC,KAAAP,OAAAC,eAAAJ,EAAAM,EAAAG,GAAAT,EAAAM,GAAAnB,EAAAmB,GAAAN,OAAAA,EAAAP,QAAAN,EAAAG,GAAAA,EAAAoB,IAAAvB,EAAAa,GAAAA,CAAA,CAA5CW,CAAAd,MAGAe,OAAOC,gBAAkBD,OAAOC,iBAAmB,KAQnD,MAAMC,2BAA6B,SAACC,MAAkC,IAA5BC,gBAAeC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAErDG,kBAAkBL,MAAMM,MAAMC,WAE1BC,WAAW1B,KAAK2B,kBAAmB,KAE/BF,SAASG,WAAaH,SAASI,eAC/B7B,KAAK8B,gBAGmB,IAApBX,kBAAmD,IAAvBM,SAASG,WACrCG,2BAA2Bb,MAE/BQ,WAAW1B,KAAKgC,0BAA2B,MAGxCP,YACRQ,OAAMC,MACLC,cAAAA,QAAaC,UAAUF,IAAI,KAU7BX,kBAAqBL,OACvB,MAAMmB,QAAU,CACZC,WAAY,oCACZC,KAAM,CACFrB,KAAMA,KACNsB,IAAKzB,OAAO0B,SAASC,KACrBd,UAAWb,OAAOC,gBAAgB2B,SAASC,UAC3Cf,eAAgBd,OAAOC,gBAAgB2B,SAASE,iBAIxD,OAAOC,MAAAA,QAAKnC,KAAK,CAAC0B,UAAU,EAAE,EAS5BU,WAAcC,KAED,MAARA,IAQLjB,2BAA8Bb,OAChC,MACM+B,YADSC,QAAAA,QAAOC,QAAQC,QAAQ,SAAU,OACnB,4CAA8ClC,KAC3EmC,SAASZ,SAASW,QAAQH,YAAY,EAqBxCK,SAAAC,KAZkBC,eAAMtC,MAAkC,IAA5BC,gBAAeC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAEZ,OAA3BL,OAAOC,wBACDhB,KAAKyD,kBAGNV,WAAWhC,OAAOC,gBAAgB2B,SAASC,YAAeG,WAAWhC,OAAOC,gBAAgB2B,SAASE,gBAGtG9B,OAAOC,gBAAgB2B,SAASe,WAAWzC,4BAF3CA,2BAA2BC,KAAMC,kBAK3C"}