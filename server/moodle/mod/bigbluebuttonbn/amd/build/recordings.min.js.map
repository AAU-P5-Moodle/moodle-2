{"version":3,"file":"recordings.min.js","sources":["../src/recordings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * JS for the recordings page on mod_bigbluebuttonbn plugin.\r\n *\r\n * @module      mod_bigbluebuttonbn/recordings\r\n * @copyright   2021 Blindside Networks Inc\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport * as repository from './repository';\r\nimport {exception as displayException, saveCancelPromise} from 'core/notification';\r\nimport {prefetchStrings} from 'core/prefetch';\r\nimport {getString, getStrings} from 'core/str';\r\nimport {addIconToContainerWithPromise} from 'core/loadingicon';\r\nimport Pending from 'core/pending';\r\n\r\nconst stringsWithKeys = {\r\n    first: 'view_recording_yui_first',\r\n    prev: 'view_recording_yui_prev',\r\n    next: 'view_recording_yui_next',\r\n    last: 'view_recording_yui_last',\r\n    goToLabel: 'view_recording_yui_page',\r\n    goToAction: 'view_recording_yui_go',\r\n    perPage: 'view_recording_yui_rows',\r\n    showAll: 'view_recording_yui_show_all',\r\n};\r\n// Load global strings.\r\nprefetchStrings('bigbluebuttonbn', Object.entries(stringsWithKeys).map((entry) => entry[1]));\r\n\r\nconst getStringsForYui = () => {\r\n    const stringMap = Object.keys(stringsWithKeys).map(key => {\r\n        return {\r\n            key: stringsWithKeys[key],\r\n            component: 'mod_bigbluebuttonbn',\r\n        };\r\n    });\r\n\r\n    // Return an object with the matching string keys (we want an object with {<stringkey>: <stringvalue>...}).\r\n    return getStrings(stringMap)\r\n        .then((stringArray) => Object.assign(\r\n            {},\r\n            ...Object.keys(stringsWithKeys).map(\r\n                (key, index) => ({[key]: stringArray[index]})\r\n            )\r\n        ));\r\n};\r\n\r\nconst getYuiInstance = lang => new Promise(resolve => {\r\n    // eslint-disable-next-line\r\n    YUI({\r\n        lang,\r\n    }).use('intl', 'datatable', 'datatable-sort', 'datatable-paginator', 'datatype-number', Y => {\r\n        resolve(Y);\r\n    });\r\n});\r\n\r\n/**\r\n * Format the supplied date per the specified locale.\r\n *\r\n * @param   {string} locale\r\n * @param   {number} date\r\n * @returns {array}\r\n */\r\nconst formatDate = (locale, date) => {\r\n    const realDate = new Date(date);\r\n    return realDate.toLocaleDateString(locale, {\r\n        weekday: 'long',\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n    });\r\n};\r\n\r\n/**\r\n * Format response data for the table.\r\n *\r\n * @param   {string} response JSON-encoded table data\r\n * @returns {array}\r\n */\r\nconst getFormattedData = response => {\r\n    const recordingData = response.tabledata;\r\n    return JSON.parse(recordingData.data);\r\n};\r\n\r\nconst getTableNode = tableSelector => document.querySelector(tableSelector);\r\n\r\nconst fetchRecordingData = tableSelector => {\r\n    const tableNode = getTableNode(tableSelector);\r\n    if (tableNode === null) {\r\n        return Promise.resolve(false);\r\n    }\r\n\r\n    if (tableNode.dataset.importMode) {\r\n        return repository.fetchRecordingsToImport(\r\n            tableNode.dataset.bbbid,\r\n            tableNode.dataset.bbbSourceInstanceId,\r\n            tableNode.dataset.bbbSourceCourseId,\r\n            tableNode.dataset.tools,\r\n            tableNode.dataset.groupId\r\n        );\r\n    } else {\r\n        return repository.fetchRecordings(\r\n            tableNode.dataset.bbbid,\r\n            tableNode.dataset.tools,\r\n            tableNode.dataset.groupId\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * Fetch the data table functinos for the specified table.\r\n *\r\n * @param {String} tableId in which we will display the table\r\n * @param {String} searchFormId The Id of the relate.\r\n * @param {Object} dataTable\r\n * @returns {Object}\r\n * @private\r\n */\r\nconst getDataTableFunctions = (tableId, searchFormId, dataTable) => {\r\n    const tableNode = getTableNode(tableId);\r\n    const bbbid = tableNode.dataset.bbbid;\r\n\r\n    const updateTableFromResponse = response => {\r\n        if (!response || !response.status) {\r\n            // There was no output at all.\r\n            return;\r\n        }\r\n\r\n        dataTable.get('data').reset(getFormattedData(response));\r\n        dataTable.set(\r\n            'currentData',\r\n            dataTable.get('data')\r\n        );\r\n\r\n        const currentFilter = dataTable.get('currentFilter');\r\n        if (currentFilter) {\r\n            filterByText(currentFilter);\r\n        }\r\n    };\r\n\r\n    const refreshTableData = () => fetchRecordingData(tableId).then(updateTableFromResponse);\r\n\r\n    const filterByText = value => {\r\n        const dataModel = dataTable.get('currentData');\r\n        dataTable.set('currentFilter', value);\r\n\r\n        const escapedRegex = value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\r\n        const rsearch = new RegExp(`<span>.*?${escapedRegex}.*?</span>`, 'i');\r\n\r\n        dataTable.set('data', dataModel.filter({asList: true}, item => {\r\n            const name = item.get('recording');\r\n            if (name && rsearch.test(name)) {\r\n                return true;\r\n            }\r\n\r\n            const description = item.get('description');\r\n            return description && rsearch.test(description);\r\n        }));\r\n    };\r\n\r\n    const requestAction = async(element) => {\r\n        const getDataFromAction = (element, dataType) => {\r\n            const dataElement = element.closest(`[data-${dataType}]`);\r\n            if (dataElement) {\r\n                return dataElement.dataset[dataType];\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        const elementData = element.dataset;\r\n        const payload = {\r\n            bigbluebuttonbnid: bbbid,\r\n            recordingid: getDataFromAction(element, 'recordingid'),\r\n            additionaloptions: getDataFromAction(element, 'additionaloptions'),\r\n            action: elementData.action,\r\n        };\r\n        // Slight change for import, for additional options.\r\n        if (!payload.additionaloptions) {\r\n            payload.additionaloptions = {};\r\n        }\r\n        if (elementData.action === 'import') {\r\n            const bbbsourceid = getDataFromAction(element, 'source-instance-id');\r\n            const bbbcourseid = getDataFromAction(element, 'source-course-id');\r\n            if (!payload.additionaloptions) {\r\n                payload.additionaloptions = {};\r\n            }\r\n            payload.additionaloptions.sourceid = bbbsourceid ? bbbsourceid : 0;\r\n            payload.additionaloptions.bbbcourseid = bbbcourseid ? bbbcourseid : 0;\r\n        }\r\n        // Now additional options should be a json string.\r\n        payload.additionaloptions = JSON.stringify(payload.additionaloptions);\r\n        if (element.dataset.requireConfirmation === \"1\") {\r\n            // Create the confirmation dialogue.\r\n            try {\r\n                await saveCancelPromise(\r\n                    getString('confirm'),\r\n                    recordingConfirmationMessage(payload),\r\n                    getString('ok', 'moodle'),\r\n                );\r\n            } catch {\r\n                // User cancelled the dialogue.\r\n                return;\r\n            }\r\n        }\r\n\r\n        return repository.updateRecording(payload);\r\n    };\r\n\r\n    const recordingConfirmationMessage = async(data) => {\r\n\r\n        const playbackElement = document.querySelector(`#playbacks-${data.recordingid}`);\r\n        const recordingType = await getString(\r\n            playbackElement.dataset.imported === 'true' ? 'view_recording_link' : 'view_recording',\r\n            'bigbluebuttonbn'\r\n        );\r\n\r\n        const confirmation = await getString(`view_recording_${data.action}_confirmation`, 'bigbluebuttonbn', recordingType);\r\n\r\n        if (data.action === 'import') {\r\n            return confirmation;\r\n        }\r\n\r\n        // If it has associated links imported in a different course/activity, show that in confirmation dialog.\r\n        const associatedLinkCount = document.querySelector(`a#recording-${data.action}-${data.recordingid}`)?.dataset?.links;\r\n        if (!associatedLinkCount || associatedLinkCount === 0) {\r\n            return confirmation;\r\n        }\r\n\r\n        const confirmationWarning = await getString(\r\n            associatedLinkCount === 1\r\n                ? `view_recording_${data.action}_confirmation_warning_p`\r\n                : `view_recording_${data.action}_confirmation_warning_s`,\r\n            'bigbluebuttonbn',\r\n            associatedLinkCount\r\n        );\r\n\r\n        return confirmationWarning + '\\n\\n' + confirmation;\r\n    };\r\n\r\n    /**\r\n     * Process an action event.\r\n     *\r\n     * @param   {Event} e\r\n     */\r\n    const processAction = e => {\r\n        const popoutLink = e.target.closest('[data-action=\"play\"]');\r\n        if (popoutLink) {\r\n            e.preventDefault();\r\n\r\n            const videoPlayer = window.open('', '_blank');\r\n            videoPlayer.opener = null;\r\n            videoPlayer.location.href = popoutLink.href;\r\n            // TODO send a recording viewed event when this event will be implemented.\r\n            return;\r\n        }\r\n\r\n        // Fetch any clicked anchor.\r\n        const clickedLink = e.target.closest('a[data-action]');\r\n        if (clickedLink && !clickedLink.classList.contains('disabled')) {\r\n            e.preventDefault();\r\n\r\n            // Create a spinning icon on the table.\r\n            const iconPromise = addIconToContainerWithPromise(dataTable.get('boundingBox').getDOMNode());\r\n\r\n            requestAction(clickedLink)\r\n                .then(refreshTableData)\r\n                .then(iconPromise.resolve)\r\n                .catch(displayException);\r\n        }\r\n    };\r\n\r\n    const processSearchSubmission = e => {\r\n        // Prevent the default action.\r\n        e.preventDefault();\r\n        const parentNode = e.target.closest('div[role=search]');\r\n        const searchInput = parentNode.querySelector('input[name=search]');\r\n        filterByText(searchInput.value);\r\n    };\r\n\r\n    const registerEventListeners = () => {\r\n        // Add event listeners to the table boundingBox.\r\n        const boundingBox = dataTable.get('boundingBox').getDOMNode();\r\n        boundingBox.addEventListener('click', processAction);\r\n\r\n        // Setup the search from handlers.\r\n        const searchForm = document.querySelector(searchFormId);\r\n        if (searchForm) {\r\n            const searchButton = document.querySelector(searchFormId + ' button');\r\n            searchButton.addEventListener('click', processSearchSubmission);\r\n        }\r\n    };\r\n\r\n    return {\r\n        filterByText,\r\n        refreshTableData,\r\n        registerEventListeners,\r\n    };\r\n};\r\n\r\n/**\r\n * Setup the data table for the specified BBB instance.\r\n *\r\n * @param {String} tableId in which we will display the table\r\n * @param {String} searchFormId The Id of the relate.\r\n * @param   {object} response The response from the data request\r\n * @returns {Promise}\r\n */\r\nconst setupDatatable = (tableId, searchFormId, response) => {\r\n    if (!response) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    if (!response.status) {\r\n        // Something failed. Continue to show the plain output.\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const recordingData = response.tabledata;\r\n\r\n    const pendingPromise = new Pending('mod_bigbluebuttonbn/recordings/setupDatatable');\r\n    return Promise.all([getYuiInstance(recordingData.locale), getStringsForYui()])\r\n        .then(([yuiInstance, strings]) => {\r\n            // Here we use a custom formatter for date.\r\n            // See https://clarle.github.io/yui3/yui/docs/api/classes/DataTable.BodyView.Formatters.html\r\n            // Inspired from examples here: https://clarle.github.io/yui3/yui/docs/datatable/\r\n            // Normally formatter have the prototype: (col) => (cell) => <computed value>, see:\r\n            // https://clarle.github.io/yui3/yui/docs/api/files/datatable_js_formatters.js.html#l100 .\r\n            const dateCustomFormatter = () => (cell) => formatDate(recordingData.locale, cell.value);\r\n            // Add the fetched strings to the YUI Instance.\r\n            yuiInstance.Intl.add('datatable-paginator', yuiInstance.config.lang, {...strings});\r\n            yuiInstance.DataTable.BodyView.Formatters.customDate = dateCustomFormatter;\r\n            return yuiInstance;\r\n        })\r\n        .then(yuiInstance => {\r\n\r\n            const tableData = getFormattedData(response);\r\n            yuiInstance.RecordsPaginatorView = Y.Base.create('my-paginator-view', yuiInstance.DataTable.Paginator.View, [], {\r\n                _modelChange: function(e) {\r\n                    var changed = e.changed,\r\n                        totalItems = (changed && changed.totalItems);\r\n                    if (totalItems) {\r\n                        this._updateControlsUI(e.target.get('page'));\r\n                    }\r\n                }\r\n            });\r\n            return new yuiInstance.DataTable({\r\n                paginatorView: \"RecordsPaginatorView\",\r\n                width: \"1195px\",\r\n                columns: recordingData.columns,\r\n                data: tableData,\r\n                rowsPerPage: 10,\r\n                paginatorLocation: ['header', 'footer'],\r\n                autoSync: true\r\n            });\r\n        })\r\n        .then(dataTable => {\r\n            dataTable.render(tableId);\r\n            const {registerEventListeners} = getDataTableFunctions(\r\n                tableId,\r\n                searchFormId,\r\n                dataTable);\r\n            registerEventListeners();\r\n            return dataTable;\r\n        })\r\n        .then(dataTable => {\r\n            pendingPromise.resolve();\r\n            return dataTable;\r\n        });\r\n};\r\n\r\n/**\r\n * Initialise recordings code.\r\n *\r\n * @method init\r\n * @param {String} tableId in which we will display the table\r\n * @param {String} searchFormId The Id of the relate.\r\n */\r\nexport const init = (tableId, searchFormId) => {\r\n    const pendingPromise = new Pending('mod_bigbluebuttonbn/recordings:init');\r\n\r\n    fetchRecordingData(tableId)\r\n        .then(response => setupDatatable(tableId, searchFormId, response))\r\n        .then(() => pendingPromise.resolve())\r\n        .catch(displayException);\r\n};\r\n"],"names":["e","_getRequireWildcardCache","WeakMap","r","t","repository","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","_pending","stringsWithKeys","first","prev","next","last","goToLabel","goToAction","perPage","showAll","prefetchStrings","entries","map","entry","getStringsForYui","stringMap","keys","key","component","getStrings","then","stringArray","assign","index","getFormattedData","response","recordingData","tabledata","JSON","parse","data","getTableNode","tableSelector","document","querySelector","fetchRecordingData","tableNode","Promise","resolve","dataset","importMode","fetchRecordingsToImport","bbbid","bbbSourceInstanceId","bbbSourceCourseId","tools","groupId","fetchRecordings","getDataTableFunctions","tableId","searchFormId","dataTable","updateTableFromResponse","status","reset","currentFilter","filterByText","refreshTableData","value","dataModel","escapedRegex","replace","rsearch","RegExp","filter","asList","item","name","test","description","recordingConfirmationMessage","async","playbackElement","recordingid","recordingType","getString","imported","confirmation","action","associatedLinkCount","links","processAction","popoutLink","target","closest","preventDefault","videoPlayer","window","open","opener","location","href","clickedLink","classList","contains","iconPromise","addIconToContainerWithPromise","getDOMNode","getDataFromAction","element","dataType","dataElement","elementData","payload","bigbluebuttonbnid","additionaloptions","bbbsourceid","bbbcourseid","sourceid","stringify","requireConfirmation","saveCancelPromise","updateRecording","requestAction","catch","displayException","processSearchSubmission","searchInput","registerEventListeners","addEventListener","setupDatatable","pendingPromise","Pending","all","lang","locale","YUI","use","Y","_ref","yuiInstance","strings","Intl","add","config","DataTable","BodyView","Formatters","customDate","dateCustomFormatter","cell","formatDate","date","Date","toLocaleDateString","weekday","year","month","day","tableData","RecordsPaginatorView","Base","create","Paginator","View","_modelChange","changed","totalItems","this","_updateControlsUI","paginatorView","width","columns","rowsPerPage","paginatorLocation","autoSync","render","_exports","init"],"mappings":"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"}