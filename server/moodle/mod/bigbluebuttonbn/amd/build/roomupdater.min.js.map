{"version":3,"file":"roomupdater.min.js","sources":["../src/roomupdater.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * JS room updater.\r\n *\r\n * @module      mod_bigbluebuttonbn/roomupdater\r\n * @copyright   2021 Blindside Networks Inc\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Pending from 'core/pending';\r\nimport Templates from \"core/templates\";\r\nimport {exception as displayException} from 'core/notification';\r\nimport {getMeetingInfo} from './repository';\r\n\r\nlet timerReference = null;\r\nlet timerRunning = false;\r\nlet pollInterval = 0;\r\nlet pollIntervalFactor = 1;\r\nconst MAX_POLL_INTERVAL_FACTOR = 10;\r\n\r\nconst resetValues = () => {\r\n    timerRunning = false;\r\n    timerReference = null;\r\n    pollInterval = 0;\r\n    pollIntervalFactor = 1;\r\n};\r\n\r\n/**\r\n * Start the information poller.\r\n * @param {Number} interval interval in miliseconds between each poll action.\r\n */\r\nexport const start = (interval) => {\r\n    resetValues();\r\n    timerRunning = true;\r\n    pollInterval = interval;\r\n    poll();\r\n};\r\n\r\n/**\r\n * Stop the room updater.\r\n */\r\nexport const stop = () => {\r\n    if (timerReference) {\r\n        clearTimeout(timerReference);\r\n    }\r\n    resetValues();\r\n};\r\n\r\n/**\r\n * Start the information poller.\r\n */\r\nconst poll = () => {\r\n    if (!timerRunning || !pollInterval) {\r\n        // The poller has been stopped.\r\n        return;\r\n    }\r\n    updateRoom()\r\n        .then((updateOk) => {\r\n            if (!updateOk) {\r\n                pollIntervalFactor = (pollIntervalFactor < MAX_POLL_INTERVAL_FACTOR) ?\r\n                    pollIntervalFactor + 1 : MAX_POLL_INTERVAL_FACTOR;\r\n                // We make sure if there is an error that we do not try too often.\r\n            }\r\n            timerReference = setTimeout(() => poll(), pollInterval * pollIntervalFactor);\r\n            return true;\r\n        })\r\n        .catch();\r\n};\r\n\r\n/**\r\n * Update the room information.\r\n *\r\n * @param {boolean} [updatecache=false] should we update cache\r\n * @returns {Promise}\r\n */\r\nexport const updateRoom = (updatecache = false) => {\r\n    const bbbRoomViewElement = document.getElementById('bigbluebuttonbn-room-view');\r\n    if (bbbRoomViewElement === null) {\r\n        return Promise.resolve(false);\r\n    }\r\n\r\n    const bbbId = bbbRoomViewElement.dataset.bbbId;\r\n    const groupId = bbbRoomViewElement.dataset.groupId;\r\n\r\n    const pendingPromise = new Pending('mod_bigbluebuttonbn/roomupdater:updateRoom');\r\n\r\n    return getMeetingInfo(bbbId, groupId, updatecache)\r\n        .then(data => {\r\n            // Just make sure we have the right information for the template.\r\n            data.haspresentations = !!(data.presentations && data.presentations.length);\r\n            return Templates.renderForPromise('mod_bigbluebuttonbn/room_view', data);\r\n        })\r\n        .then(({html, js}) => Templates.replaceNode(bbbRoomViewElement, html, js))\r\n        .then(() => pendingPromise.resolve())\r\n        .catch(displayException);\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_pending","_templates","timerReference","timerRunning","pollInterval","pollIntervalFactor","resetValues","_exports","start","interval","poll","stop","clearTimeout","updateRoom","then","updateOk","setTimeout","catch","updatecache","arguments","length","undefined","bbbRoomViewElement","document","getElementById","Promise","resolve","bbbId","dataset","groupId","pendingPromise","Pending","getMeetingInfo","data","haspresentations","presentations","Templates","renderForPromise","_ref","html","js","replaceNode","displayException"],"mappings":"0LAwBuC,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;qHADvCG,SAAAJ,uBAAAI,UACAC,WAAAL,uBAAAK,YAIA,IAAIC,eAAiB,KACjBC,cAAe,EACfC,aAAe,EACfC,mBAAqB,EACzB,MAEMC,YAAcA,KAChBH,cAAe,EACfD,eAAiB,KACjBE,aAAe,EACfC,mBAAqB,CAAC,EAYxBE,SAAAC,MALoBC,WAClBH,cACAH,cAAe,EACfC,aAAeK,SACfC,MAAM,EAWRH,SAAAI,KALkBA,KACZT,gBACAU,aAAaV,gBAEjBI,aAAa,EAMjB,MAAMI,KAAOA,KACJP,cAAiBC,cAItBS,aACKC,MAAMC,WACEA,WACDV,mBAAsBA,mBAzCL,GA0CbA,mBAAqB,EA1CR,IA6CrBH,eAAiBc,YAAW,IAAMN,QAAQN,aAAeC,qBAClD,KAEVY,OAAO,EASHJ,WAAa,WAAyB,IAAxBK,YAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAClC,MAAMG,mBAAqBC,SAASC,eAAe,6BACnD,GAA2B,OAAvBF,mBACA,OAAOG,QAAQC,SAAQ,GAG3B,MAAMC,MAAQL,mBAAmBM,QAAQD,MACnCE,QAAUP,mBAAmBM,QAAQC,QAErCC,eAAiB,IAAIC,SAAOhC,QAAC,8CAEnC,OAAO,EAAAiC,YAAAA,gBAAeL,MAAOE,QAASX,aACjCJ,MAAKmB,OAEFA,KAAKC,oBAAsBD,KAAKE,gBAAiBF,KAAKE,cAAcf,QAC7DgB,mBAAUC,iBAAiB,gCAAiCJ,SAEtEnB,MAAKwB,OAAA,IAACC,KAACA,KAAIC,GAAEA,IAAGF,KAAA,OAAKF,WAAAA,QAAUK,YAAYnB,mBAAoBiB,KAAMC,GAAG,IACxE1B,MAAK,IAAMgB,eAAeJ,YAC1BT,MAAMyB,0BACbnC,SAAAM,WAAAA,UAAA"}