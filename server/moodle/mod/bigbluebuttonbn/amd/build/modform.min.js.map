{"version":3,"file":"modform.min.js","sources":["../src/modform.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * JS for the mod_form page on mod_bigbluebuttonbn plugin.\r\n *\r\n * @module      mod_bigbluebuttonbn/modform\r\n * @copyright   2021 Blindside Networks Inc\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {getString} from 'core/str';\r\nimport Notification from 'core/notification';\r\nimport Templates from \"core/templates\";\r\n\r\n/**\r\n * Get all selectors in one place.\r\n *\r\n */\r\nconst ELEMENT_SELECTOR = {\r\n    instanceTypeSelection: () => document.querySelector('select#id_type'),\r\n    instanceTypeProfiles: () => document.querySelector('[data-profile-types]'),\r\n    participantData: () => document.querySelector('[data-participant-data]'),\r\n    participantList: () => document.getElementsByName('participants')[0],\r\n    participantTable: () => document.getElementById('participant_list_table'),\r\n    participantSelectionType: () => document.getElementsByName('bigbluebuttonbn_participant_selection_type')[0],\r\n    participantSelection: () => document.getElementsByName('bigbluebuttonbn_participant_selection')[0],\r\n    participantAddButton: () => document.getElementsByName('bigbluebuttonbn_participant_selection_add')[0],\r\n};\r\n/**\r\n * Initialise the moodle form code.\r\n *\r\n * This will help hide or show items depending on the selection of the instance type.\r\n *\r\n * @method init\r\n * @param {object} info\r\n */\r\nexport const init = (info) => {\r\n    const selectedType = ELEMENT_SELECTOR.instanceTypeSelection();\r\n    const instanceTypeProfiles = JSON.parse(ELEMENT_SELECTOR.instanceTypeProfiles().dataset.profileTypes);\r\n\r\n    let profileType = info.instanceTypeDefault;\r\n    if (selectedType !== null && selectedType.selectedIndex !== -1) {\r\n        profileType = selectedType.options[selectedType.selectedIndex].value;\r\n    }\r\n\r\n    const isFeatureEnabled = (profileType, feature) => {\r\n        const features = instanceTypeProfiles[profileType].features;\r\n        return (features.indexOf(feature) !== -1);\r\n    };\r\n    applyInstanceTypeProfile(profileType, isFeatureEnabled);\r\n\r\n    // Change form visible fields depending on the selection.\r\n    selectedType.addEventListener('change', (e) => {\r\n        applyInstanceTypeProfile(e.target.value, isFeatureEnabled);\r\n    });\r\n\r\n    ELEMENT_SELECTOR.participantSelectionType().addEventListener('change', (e) => {\r\n        const currentTypeSelect = e.target;\r\n        updateSelectionFromType(currentTypeSelect);\r\n    });\r\n\r\n    ELEMENT_SELECTOR.participantAddButton().addEventListener('click', (e) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        participantAddFromCurrentSelection();\r\n    });\r\n\r\n    participantListInit();\r\n};\r\n\r\n/**\r\n * Show or hide form element depending on the selected profile\r\n *\r\n * @param {string} profileType\r\n * @param {function} isFeatureEnabled\r\n */\r\nconst applyInstanceTypeProfile = (profileType, isFeatureEnabled) => {\r\n    let showAll = isFeatureEnabled(profileType, 'all');\r\n    const showFieldset = (id, show) => {\r\n        // Show room settings validation.\r\n        const node = document.querySelector('#' + id);\r\n        if (!node) {\r\n            return;\r\n        }\r\n        if (show) {\r\n            node.style.display = 'block';\r\n            return;\r\n        }\r\n        node.style.display = 'none';\r\n    };\r\n    const showInput = (id, show) => {\r\n        // Show room settings validation.\r\n        const node = document.querySelector('#' + id);\r\n        if (!node) {\r\n            return;\r\n        }\r\n        var ancestor = node.closest('div').closest('div');\r\n        if (show) {\r\n            ancestor.style.display = 'block';\r\n            return;\r\n        }\r\n        ancestor.style.display = 'none';\r\n    };\r\n    const showFormGroup = (id, show) => {\r\n        // Show room settings validation.\r\n        const node = document.querySelector('#fgroup_id_' + id);\r\n        if (!node) {\r\n            return;\r\n        }\r\n        if (show) {\r\n            node.classList.remove('hidden');\r\n            return;\r\n        }\r\n        node.classList.add('hidden');\r\n    };\r\n    // Show room settings validation.\r\n    showFieldset('id_room', showAll ||\r\n        isFeatureEnabled(profileType, 'showroom'));\r\n    showInput('id_record', showAll ||\r\n        isFeatureEnabled(profileType, 'showroom'));\r\n    // Show recordings settings validation.\r\n    showFieldset('id_recordings', showAll ||\r\n        isFeatureEnabled(profileType, 'showrecordings'));\r\n    // Show recordings imported settings validation.\r\n    showInput('id_recordings_imported', showAll ||\r\n        isFeatureEnabled(profileType, 'showrecordings'));\r\n    // Show lock settings validation.\r\n    showFieldset('id_lock', showAll ||\r\n        isFeatureEnabled(profileType, 'lock'));\r\n    // Show guest settings validation.\r\n    showFieldset('id_guestaccess', showAll ||\r\n        isFeatureEnabled(profileType, 'showroom'));\r\n    // Preuploadpresentation feature validation.\r\n    showFieldset('id_preuploadpresentation', showAll ||\r\n        isFeatureEnabled(profileType, 'preuploadpresentation'));\r\n    // Participants feature validation.\r\n    showFieldset('id_permissions', showAll ||\r\n        isFeatureEnabled(profileType, 'permissions'));\r\n    // Schedule feature validation.\r\n    showFieldset('id_schedule', showAll ||\r\n        isFeatureEnabled(profileType, 'schedule'));\r\n    // Common module settings validation.\r\n    showFieldset('id_modstandardelshdr', showAll ||\r\n        isFeatureEnabled(profileType, 'modstandardelshdr'));\r\n    // Restrict access validation.\r\n    showFieldset('id_availabilityconditionsheader', showAll ||\r\n        isFeatureEnabled(profileType, 'availabilityconditionsheader'));\r\n    // Tags validation.\r\n    showFieldset('id_tagshdr', showAll || isFeatureEnabled(profileType, 'tagshdr'));\r\n    // Competencies validation.\r\n    showFieldset('id_competenciessection', showAll ||\r\n        isFeatureEnabled(profileType, 'competenciessection'));\r\n    // Completion validation.\r\n    showFormGroup('completionattendancegroup', showAll ||\r\n        isFeatureEnabled(profileType, 'completionattendance'));\r\n    // Completion validation.\r\n    showFormGroup('completionengagementgroup', showAll ||\r\n        isFeatureEnabled(profileType, 'completionengagement'));\r\n};\r\n\r\n/**\r\n * Init the participant list\r\n */\r\nconst participantListInit = () => {\r\n    const participantData = JSON.parse(ELEMENT_SELECTOR.participantData().dataset.participantData);\r\n    const participantList = getParticipantList();\r\n    participantList.forEach(participant => {\r\n        const selectionTypeValue = participant.selectiontype;\r\n        const selectionValue = participant.selectionid;\r\n        const selectionRole = participant.role;\r\n        if (participant.selectiontype === 'all' ||\r\n            typeof participantData[participant.selectiontype].children[participant.selectionid] !== 'undefined') {\r\n            // Add it to the form, but don't add the delete button if it is the first item.\r\n            participantAddToForm(selectionTypeValue, selectionValue, selectionRole, true).then();\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Add rows to the participant list depending on the current selection.\r\n *\r\n * @param {string} selectionTypeValue\r\n * @param {string} selectionValue\r\n * @param {string} selectedRole\r\n * @param {boolean} canRemove\r\n * @returns {Promise<void>}\r\n */\r\nconst participantAddToForm = async(selectionTypeValue, selectionValue, selectedRole, canRemove) => {\r\n    const participantData = JSON.parse(ELEMENT_SELECTOR.participantData().dataset.participantData);\r\n    const sviewer = await getString('mod_form_field_participant_bbb_role_viewer', 'mod_bigbluebuttonbn');\r\n    const smoderator = await getString('mod_form_field_participant_bbb_role_moderator', 'mod_bigbluebuttonbn');\r\n    let roles = {\r\n        viewer: {'id': 'viewer', label: sviewer},\r\n        moderator: {'id': 'moderator', label: smoderator}\r\n    };\r\n    roles[selectedRole].isselected = true;\r\n    try {\r\n        const listTable = document.querySelector('#participant_list_table tbody');\r\n        const templateContext = {\r\n            'selectiontypevalue': selectionTypeValue,\r\n            'selectionvalue': selectionValue,\r\n            'participanttype': participantData[selectionTypeValue].name,\r\n            'participantvalue':\r\n                (selectionTypeValue !== 'all') ?\r\n                    participantData[selectionTypeValue].children[selectionValue].name : null,\r\n            'roles': Object.values(roles),\r\n            'canRemove': canRemove\r\n        };\r\n        const {html, js} = await Templates.renderForPromise('mod_bigbluebuttonbn/participant_form_add', templateContext);\r\n        const newNode = Templates.appendNodeContents(listTable, html, js)[0];\r\n        newNode.querySelector('.participant-select').addEventListener('change', () => {\r\n            participantListRoleUpdate(selectionTypeValue, selectionValue);\r\n        });\r\n        // Now add the callbacks: participantListRoleUpdate() and participantRemove().\r\n        const removeNode = newNode.querySelector('.remove-button');\r\n        if (removeNode) {\r\n            removeNode\r\n                .addEventListener('click', () => {\r\n                    participantRemove(selectionTypeValue, selectionValue);\r\n                });\r\n        }\r\n\r\n    } catch (e) {\r\n        Notification.exception(e);\r\n    }\r\n};\r\n/*\r\n\r\n */\r\n\r\n/**\r\n * Update the related form element with the list value.\r\n *\r\n * @param {object} list\r\n */\r\nconst participantListUpdate = (list) => {\r\n    const participantList = ELEMENT_SELECTOR.participantList();\r\n    participantList.value = JSON.stringify(list);\r\n};\r\n\r\n/**\r\n *\r\n * @returns {any}\r\n */\r\nconst getParticipantList = () => {\r\n    const participantListValue = ELEMENT_SELECTOR.participantList().value;\r\n    if (participantListValue) {\r\n        return JSON.parse(participantListValue);\r\n    }\r\n    return [];\r\n};\r\n\r\n/**\r\n * Remove participant both in the table/form and in the form element.\r\n *\r\n * @param {string} selectionTypeValue\r\n * @param {string} selectionValue\r\n */\r\nconst participantRemove = (selectionTypeValue, selectionValue) => {\r\n    const pList = getParticipantList();\r\n    const id = 'participant_list_tr_' + selectionTypeValue + '-' + selectionValue;\r\n    const participantListTable = ELEMENT_SELECTOR.participantTable();\r\n    const selectionid = (selectionValue === '' ? null : selectionValue);\r\n    for (let i = 0; i < pList.length; i++) {\r\n        if (pList[i].selectiontype === selectionTypeValue &&\r\n            pList[i].selectionid === selectionid) {\r\n            pList.splice(i, 1);\r\n        }\r\n    }\r\n    // Remove from the form.\r\n    for (let i = 0; i < participantListTable.rows.length; i++) {\r\n        if (participantListTable.rows[i].id === id) {\r\n            participantListTable.deleteRow(i);\r\n        }\r\n    }\r\n    // Update value in the form.\r\n    participantListUpdate(pList);\r\n};\r\n\r\n/**\r\n * Role update\r\n *\r\n * @param {string} type\r\n * @param {string} id\r\n */\r\nconst participantListRoleUpdate = (type, id) => {\r\n    // Update in memory.\r\n    const participantListRoleSelection = document.querySelector(`#participant_list_tr_${type}-${id} .participant-select`);\r\n    const pList = getParticipantList();\r\n\r\n    for (var i = 0; i < pList.length; i++) {\r\n        if (pList[i].selectiontype === type && pList[i].selectionid === id) {\r\n            pList[i].role = participantListRoleSelection.value;\r\n        }\r\n    }\r\n    // Update in the form.\r\n    participantListUpdate(pList);\r\n};\r\n\r\n/**\r\n * Add participant from the currently selected options\r\n */\r\nconst participantAddFromCurrentSelection = () => {\r\n    let selectionType = ELEMENT_SELECTOR.participantSelectionType();\r\n    let selection = ELEMENT_SELECTOR.participantSelection();\r\n    const pList = getParticipantList();\r\n    // Lookup to see if it has been added already.\r\n    for (var i = 0; i < pList.length; i++) {\r\n        if (pList[i].selectiontype === selectionType.value &&\r\n            pList[i].selectionid === selection.value) {\r\n            return;\r\n        }\r\n    }\r\n    pList.push({\r\n        \"selectiontype\": selectionType.value,\r\n        \"selectionid\": selection.value,\r\n        \"role\": \"viewer\"\r\n    });\r\n    // Add it to the form.\r\n    participantAddToForm(selectionType.value, selection.value, 'viewer', true).then();\r\n    // Update in the form.\r\n    participantListUpdate(pList);\r\n};\r\n\r\n/**\r\n * Update selectable options when changing types\r\n *\r\n * @param {HTMLNode} currentTypeSelect\r\n */\r\nconst updateSelectionFromType = (currentTypeSelect) => {\r\n    const createNewOption = (selectItem, label, value) => {\r\n        const option = document.createElement('option');\r\n        option.text = label;\r\n        option.value = value;\r\n\r\n        selectItem.add(option);\r\n    };\r\n\r\n    const participantData = JSON.parse(ELEMENT_SELECTOR.participantData().dataset.participantData);\r\n    // Clear all selection items.\r\n    const participantSelect = ELEMENT_SELECTOR.participantSelection();\r\n    while (participantSelect.firstChild) {\r\n        participantSelect.removeChild(participantSelect.firstChild);\r\n    }\r\n    // Add options depending on the selection.\r\n    if (currentTypeSelect.selectedIndex !== -1) {\r\n        const options = Object.values(participantData[currentTypeSelect.value].children);\r\n        options.forEach(option => {\r\n            createNewOption(participantSelect, option.name, option.id);\r\n        });\r\n\r\n        if (currentTypeSelect.value === 'all') {\r\n            createNewOption(participantSelect, '---------------', 'all');\r\n            participantSelect.disabled = true;\r\n        } else {\r\n            participantSelect.disabled = false;\r\n        }\r\n    }\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_notification","_templates","ELEMENT_SELECTOR","instanceTypeSelection","document","querySelector","instanceTypeProfiles","participantData","participantList","getElementsByName","participantTable","getElementById","participantSelectionType","participantSelection","participantAddButton","_exports","init","info","selectedType","JSON","parse","dataset","profileTypes","profileType","instanceTypeDefault","selectedIndex","options","value","isFeatureEnabled","feature","features","indexOf","applyInstanceTypeProfile","addEventListener","target","currentTypeSelect","updateSelectionFromType","stopPropagation","preventDefault","participantAddFromCurrentSelection","participantListInit","showAll","showFieldset","id","show","node","style","display","showInput","ancestor","closest","showFormGroup","classList","remove","add","getParticipantList","forEach","participant","selectionTypeValue","selectiontype","selectionValue","selectionid","selectionRole","role","children","participantAddToForm","then","async","selectedRole","canRemove","roles","viewer","label","getString","moderator","isselected","listTable","templateContext","selectiontypevalue","selectionvalue","participanttype","name","participantvalue","Object","values","html","js","Templates","renderForPromise","newNode","appendNodeContents","participantListRoleUpdate","removeNode","participantRemove","Notification","exception","participantListUpdate","list","stringify","participantListValue","pList","participantListTable","i","length","splice","rows","deleteRow","type","participantListRoleSelection","selectionType","selection","push","createNewOption","selectItem","option","createElement","text","participantSelect","firstChild","removeChild","disabled"],"mappings":"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"}