{"version":3,"file":"homeworkchooser.min.js","sources":["../src/homeworkchooser.js"],"sourcesContent":["// homeworkchooser.js (Updated Version)\n\nimport $ from 'jquery';\nimport Ajax from 'core/ajax';\nimport MyModal from 'mod_homework/modal_homework';\nimport ModalEvents from 'core/modal_events';\nimport Dropzone from 'core/dropzone';\n\nlet dropZoneFiles = []; // Store files to upload later\nlet uploadedFileIds = []; // Store file IDs after successful upload\n\n/**\n * Initializes the Homework Chooser Modal.\n *\n * @param {int} cmid\n * @param {string} title\n * @param {int} currentHomework\n * @returns {Promise<void>}\n */\nexport const init = async(cmid, title, currentHomework) => {\n    $('#open-homework-chooser').on('click', () => {\n        Ajax.call([{\n            methodname: 'mod_homework_get_homework_chooser',\n            args: {cmid: cmid},\n            done: async function(response) {\n                const modal = await MyModal.create({\n                    title: title,\n                    body: `${response.html}`,\n                    // footer: 'An example footer content',\n                    large: true,\n                    removeOnClose: true\n                });\n\n                // Show the modal\n                modal.show();\n\n                // Initialize elements once the modal content is rendered\n                modal.getRoot().on(ModalEvents.shown, () => {\n                    // Initialize the elements after modal is displayed\n                    const radioButtons = modal.getRoot().find('input[name=\"option\"]');\n                    const pageRangeInput = modal.getRoot().find('#page-range-input')[0];\n                    const videoTimeInput = modal.getRoot().find('#video-time-input')[0];\n                    const linkDiv = modal.getRoot().find('#linkDiv')[0];\n                    const dropzonePdfContainer = modal.getRoot().find('#dropzone-pdf-container')[0];\n                    const dropzoneVideoContainer = modal.getRoot().find('#dropzone-video-container')[0];\n\n                    // Attach event listeners for radio buttons\n                    radioButtons.each((_, radio) => {\n                        radio.addEventListener('change', toggleInputs);\n                    });\n\n                    initializePDFDropzone(dropzonePdfContainer);\n                    initializeVideoDropzone(dropzoneVideoContainer)\n\n                    // Function to toggle between text and link inputs\n                    /**\n                     *\n                     */\n                    function toggleInputs() {\n                        if (document.getElementById(\"option1\").checked) {\n                            pageRangeInput.style.display = \"block\";\n                            videoTimeInput.style.display = \"none\";\n                            linkDiv.style.display = \"none\";\n                            dropzonePdfContainer.style.display = \"block\";\n                            dropzoneVideoContainer.style.display = \"none\";\n\n                            dropZoneFiles = [];\n                            uploadedFileIds = [];\n                        } else if (document.getElementById(\"option2\").checked) {\n                            pageRangeInput.style.display = \"none\";\n                            videoTimeInput.style.display = \"none\";\n                            linkDiv.style.display = \"block\";\n                            dropzonePdfContainer.style.display = \"none\";\n                            dropzoneVideoContainer.style.display = \"none\";\n\n                            dropZoneFiles = [];\n                            uploadedFileIds = [];\n                        } else if (document.getElementById(\"option3\").checked) {\n                            pageRangeInput.style.display = \"none\";\n                            videoTimeInput.style.display = \"block\";\n                            linkDiv.style.display = \"none\";\n                            dropzonePdfContainer.style.display = \"none\";\n                            dropzoneVideoContainer.style.display = \"block\";\n\n                            dropZoneFiles = [];\n                            uploadedFileIds = [];\n                        }\n                    }\n                });\n\n                // Attach an event listener to handle the modal hidden event\n                modal.getRoot().on(ModalEvents.hidden, () => {\n                    console.log('Modal closed!');\n                });\n\n                // Attach event listeners for buttons\n                modal.getRoot().on('click', '[data-action=\"submit\"]', (e) => {\n                    e.preventDefault();\n\n                    handleFormSubmit(modal, currentHomework);\n                });\n\n                modal.getRoot().on('click', '[data-action=\"cancel\"]', (e) => {\n                    e.preventDefault();\n                    modal.destroy();\n                });\n            },\n            fail: (error) => {\n                console.error(\"Failed to load homework chooser content:\", error);\n            }\n        }]);\n    });\n};\n\nconst initializePDFDropzone = (container) => {\n    const dropZone = new Dropzone(container, \"application/pdf\", (files) => {\n        for (let file of files) {\n            if (file.type === \"application/pdf\") {\n                dropZoneFiles.push(file); // Store file for later upload\n            } else {\n                console.warn(\"Invalid file type:\", file.type);\n            }\n        }\n    });\n\n    dropZone.setLabel(\"Drop PDF files here (Optional)\");\n    dropZone.init();\n};\n\nconst initializeVideoDropzone = (container) => {\n    const dropZone = new Dropzone(container, \"video/*\", (files) => {\n        for (let file of files) {\n            if (file.type.startsWith(\"video/\")) {\n                dropZoneFiles.push(file); // Store file for later upload\n            } else {\n                console.warn(\"Invalid file type:\", file.type);\n            }\n        }\n    });\n\n    dropZone.setLabel(\"Drop video files here (Optional)\");\n    dropZone.init();\n};\n\nconst uploadDropzoneFiles = async () => {\n    for (let file of dropZoneFiles) {\n        try {\n            const formData = new FormData();\n            formData.append(\"file\", file);\n\n            const response = await fetch(\"/mod/homework/upload_file.php\", {\n                method: \"POST\",\n                body: formData\n            });\n\n            const result = await response.json();\n\n            if (response.ok && result.status === 'success') {\n                console.log(\"File uploaded successfully:\", file.name);\n                console.log(result);\n                uploadedFileIds.push(result.fileid); // Store the file ID\n            } else {\n                console.error(\"Failed to upload file:\", file.name);\n            }\n        } catch (error) {\n            console.error(\"Error uploading file:\", file.name, error);\n        }\n    }\n    dropZoneFiles = []; // Clear stored files after upload\n};\n\n/**\n * Handles form submission inside the modal.\n * @param {Modal} modal - The instance of the modal containing the form.\n * @param currentHomework - The id of the homework which is being edited.\n */\nconst handleFormSubmit = async (modal, currentHomework) => {\n    let inputField = modal.getRoot().find('#inputField')[0];\n\n    // Set up a custom validity message if the field is empty\n    if (inputField.value.trim() === \"\") {\n        inputField.setCustomValidity(\"Input field must not be empty\");\n    } else {\n        inputField.setCustomValidity(\"\"); // Clear the custom message when input is valid\n    }\n\n    // Manually check the validity of the input field\n    inputField.reportValidity();\n\n    // If the field is invalid, stop the function execution\n    if (!inputField.checkValidity()) {\n        return; // Exit if input field is invalid\n    }\n\n    if (modal.getRoot().find('#option1').is(':checked')) {\n        let startPageInput = modal.getRoot().find('#startPage')[0];\n        let endPageInput = modal.getRoot().find('#endPage')[0];\n\n        if (!validatePageRange(startPageInput, endPageInput)) {\n            return;\n        }\n\n        let startPage = startPageInput.value;\n        let endPage = endPageInput.value;\n\n        await uploadDropzoneFiles();\n\n        // AJAX call to send data to the server\n        Ajax.call([{\n            methodname: 'mod_homework_save_homework_literature',  // Your PHP function that will handle the data\n            args: {\n                inputfield: inputField.value,\n                startpage: startPage,\n                endpage: endPage,\n                homeworkid: currentHomework,\n                fileid: uploadedFileIds.length ? uploadedFileIds[0] : null\n            },\n            done: function(response) {\n                console.log(\"Data saved successfully:\", response);\n                dropZoneFiles = [];\n                uploadedFileIds = [];\n                modal.destroy();\n            },\n            fail: function(error) {\n                console.error(\"Failed to save data:\", error);\n            }\n        }]);\n\n    } else if (modal.getRoot().find('#option2').is(':checked')) {\n\n        let link = modal.getRoot().find('#link').val();\n\n        // AJAX call to send data to the server\n        Ajax.call([{\n            methodname: 'mod_homework_save_homework_link',  // Your PHP function that will handle the data\n            args: {\n                inputfield: inputField.value,\n                link: link,\n                homeworkid: currentHomework,\n            },\n            done: function(response) {\n                console.log(\"Data saved successfully:\", response);\n                modal.destroy();\n            },\n            fail: function(error) {\n                console.error(\"Failed to save data:\", error);\n            }\n        }]);\n    } else if (modal.getRoot().find('#option3').is(':checked')) {\n        let startTimeInput = modal.getRoot().find('#startTime')[0];\n        let endTimeInput = modal.getRoot().find('#endTime')[0];\n\n        if (!validateTimeRange(startTimeInput, endTimeInput)) {\n            return;\n        }\n\n        let startTime = startTimeInput.value;\n        let endTime = endTimeInput.value;\n\n        await uploadDropzoneFiles();\n\n        Ajax.call([{\n            methodname: 'mod_homework_save_homework_video',\n            args: {\n                inputfield: inputField.value,\n                starttime: startTime,\n                endtime: endTime,\n                homeworkid: currentHomework,\n                fileid: uploadedFileIds.length ? uploadedFileIds[0] : null\n            },\n            done: function(response) {\n                console.log(\"Data saved successfully:\", response);\n                modal.destroy();\n            },\n            fail: function(error) {\n                console.error(\"Failed to save data:\", error);\n            }\n        }]);\n    }\n\n    function validatePageRange(startPageInput, endPageInput) {\n        const startPage = parseInt(startPageInput.value, 10);\n        const endPage = parseInt(endPageInput.value, 10);\n\n        if (endPageInput.value !== \"\" && startPageInput.value !== \"\") {\n            if (endPage < startPage) {\n                endPageInput.setCustomValidity(\"End Page must be greater than or equal to Start Page\");\n                endPageInput.reportValidity();\n                return false;\n            } else {\n                endPageInput.setCustomValidity(\"\"); // Clear error message if valid\n            }\n        } else {\n            endPageInput.setCustomValidity(\"\"); // Clear error if either field is empty\n        }\n\n        endPageInput.reportValidity();\n        return endPageInput.checkValidity(); // Return true if valid\n    }\n\n    function validateTimeRange(startTimeInput, endTimeInput) {\n        const startTime = parseInt(startTimeInput.value, 10);\n        const endTime = parseInt(endTimeInput.value, 10);\n\n        if (endTimeInput.value !== \"\" && startTimeInput.value !== \"\") {\n            if (endTime < startTime) {\n                endTimeInput.setCustomValidity(\"End Time must be greater than or equal to Start Time\");\n                endTimeInput.reportValidity();\n                return false;\n            } else {\n                endTimeInput.setCustomValidity(\"\"); // Clear error message if valid\n            }\n        } else {\n            endTimeInput.setCustomValidity(\"\"); // Clear error if either field is empty\n        }\n\n        endTimeInput.reportValidity();\n        return endTimeInput.checkValidity(); // Return true if valid\n    }\n};\n\nconst initializeDropzone = (container) => {\n    const dropZone = new Dropzone(container, \"application/pdf\", async (files) => {\n        for (let file of files) {\n            if (file.type === \"application/pdf\") { // Validate file type\n                try {\n                    const formData = new FormData();\n                    formData.append(\"file\", file);\n\n                    const response = await fetch(\"/mod/homework/save_homework_file.php\", {\n                        method: \"POST\",\n                        body: formData\n                    });\n\n                    if (response.ok) {\n                        console.log(\"File uploaded successfully:\", file.name);\n                    } else {\n                        console.error(\"Failed to upload file:\", file.name);\n                    }\n                } catch (error) {\n                    console.error(\"Error uploading file:\", file.name, error);\n                }\n            } else {\n                console.warn(\"Invalid file type:\", file.type);\n            }\n        }\n    });\n\n    dropZone.setLabel(\"(Optional) Drop PDF files here\");\n    dropZone.init();\n};"],"names":["_interopRequireDefault","e","__esModule","default","_jquery","_ajax","_modal_homework","_modal_events","_dropzone","dropZoneFiles","uploadedFileIds","_exports","init","async","cmid","title","currentHomework","$","on","Ajax","call","methodname","args","done","response","modal","MyModal","create","body","html","large","removeOnClose","show","getRoot","ModalEvents","shown","radioButtons","find","pageRangeInput","videoTimeInput","linkDiv","dropzonePdfContainer","dropzoneVideoContainer","toggleInputs","document","getElementById","checked","style","display","each","_","radio","addEventListener","initializePDFDropzone","initializeVideoDropzone","hidden","console","log","preventDefault","handleFormSubmit","destroy","fail","error","container","dropZone","Dropzone","files","file","type","push","warn","setLabel","startsWith","uploadDropzoneFiles","formData","FormData","append","fetch","method","result","json","ok","status","name","fileid","inputField","value","trim","setCustomValidity","reportValidity","checkValidity","is","startPageInput","endPageInput","startPage","parseInt","endPage","validatePageRange","inputfield","startpage","endpage","homeworkid","length","link","val","startTimeInput","endTimeInput","startTime","endTime","validateTimeRange","starttime","endtime"],"mappings":"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"}