{"version":3,"file":"homeworkchooser.min.js","sources":["../src/homeworkchooser.js"],"sourcesContent":["import $ from 'jquery';\r\nimport Ajax from 'core/ajax';\r\nimport MyModal from 'mod_homework/modal_homework';\r\nimport ModalEvents from 'core/modal_events';\r\n\r\n/**\r\n * Homework/amd/src/modal_homework.js\r\n *\r\n * @package\r\n * @copyright 2024, cs-24-sw-5-01 <cs-24-sw-5-01@student.aau.dk>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n *\r\n */\r\n\r\n/**\r\n * Initializes the Homework Chooser Modal.\r\n * @param {int} cmid\r\n * @param {string} title\r\n * @returns {Promise<void>}\r\n */\r\nexport const init = async(cmid, title) => {\r\n    $('#open-homework-chooser').on('click', () => {\r\n        Ajax.call([{\r\n            methodname: 'mod_homework_get_homework_chooser',\r\n            args: {cmid: cmid},\r\n            done: async function(response) {\r\n                const modal = await MyModal.create({\r\n                    title: title,\r\n                    body: `${response.html}`,\r\n                    large: true,\r\n                    removeOnClose: true,\r\n                });\r\n\r\n                // Show the modal.\r\n                await modal.show();\r\n\r\n                // Initialize elements once the modal content is rendered.\r\n                modal.getRoot().on(ModalEvents.shown, () => {\r\n                    // Initialize the elements after modal is displayed.\r\n                    const startPageInput = modal.getRoot().find('#startPage')[0];\r\n                    const endPageInput = modal.getRoot().find('#endPage')[0];\r\n                    const radioButtons = modal.getRoot().find('input[name=\"option\"]');\r\n                    const testTextarea = modal.getRoot().find('#page-range-input')[0];\r\n                    const testLink = modal.getRoot().find('#linkDiv')[0];\r\n\r\n                    // Attach event listeners for page input validation.\r\n                    startPageInput.addEventListener('input', validatePageRange);\r\n                    endPageInput.addEventListener('input', validatePageRange);\r\n\r\n                    // Attach event listeners for radio buttons.\r\n                    radioButtons.each((_, radio) => {\r\n                        radio.addEventListener('change', toggleInputs);\r\n                    });\r\n\r\n                    // Function to validate page range.\r\n                    /**\r\n                     *\r\n                     */\r\n                    function validatePageRange() {\r\n                        const startPage = parseInt(startPageInput.value, 10);\r\n                        const endPage = parseInt(endPageInput.value, 10);\r\n\r\n                        if (endPageInput.value !== \"\" && startPageInput.value !== \"\") {\r\n                            if (endPage < startPage) {\r\n                                endPageInput.setCustomValidity(\"End Page must be greater than or equal to Start Page\");\r\n                            } else {\r\n                                endPageInput.setCustomValidity(\"\"); // Clear error message if valid\r\n                            }\r\n                        } else {\r\n                            endPageInput.setCustomValidity(\"\"); // Clear error if either field is empty\r\n                        }\r\n                    }\r\n\r\n                    // Function to toggle between text and link inputs.\r\n                    /**\r\n                     *\r\n                     */\r\n                    function toggleInputs() {\r\n                        if (document.getElementById(\"option1\").checked) {\r\n                            testTextarea.style.display = \"block\";\r\n                            testLink.style.display = \"none\";\r\n                        } else if (document.getElementById(\"option2\").checked) {\r\n                            testTextarea.style.display = \"none\";\r\n                            testLink.style.display = \"block\";\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Attach event listeners for buttons\r\n                modal.getRoot().on('click', '[data-action=\"submit\"]', (e) => {\r\n                    e.preventDefault();\r\n                    handleFormSubmit(modal);\r\n                });\r\n\r\n                modal.getRoot().on('click', '[data-action=\"cancel\"]', (e) => {\r\n                    e.preventDefault();\r\n                    modal.destroy();\r\n                });\r\n            },\r\n            fail: (error) => {\r\n                throw new Error(`Failed to load homework chooser content: ${error}`);\r\n            }\r\n        }]);\r\n    });\r\n};\r\n\r\n/**\r\n * Handles form submission inside the modal.\r\n *\r\n * @param {Modal} modal - The instance of the modal containing the form.\r\n */\r\nconst handleFormSubmit = (modal) => {\r\n    let inputField = modal.getRoot().find('#inputField').val();\r\n\r\n    if (inputField.value === \"\") {\r\n        inputField.setCustomValidity(\"Please fill in the input field.\");\r\n        inputField.reportValidity(); // Shows the custom message\r\n        event.preventDefault(); // Prevents form submission\r\n    } else {\r\n        inputField.setCustomValidity(\"\"); // Clear the custom message\r\n    }\r\n\r\n    if (modal.getRoot().find('#option1').is(':checked')) {\r\n        let startPage = modal.getRoot().find('#startPage').val();\r\n        let endPage = modal.getRoot().find('#endPage').val();\r\n\r\n        // AJAX call to send data to the server.\r\n        Ajax.call([{\r\n            methodname: 'mod_homework_save_homework_literature',\r\n            args: {\r\n                inputfield: inputField,\r\n                startpage: startPage,\r\n                endpage: endPage,\r\n            },\r\n            done: function() {\r\n                // Close the modal after successful submission.\r\n                modal.hide();\r\n            },\r\n            fail: function(error) {\r\n                throw new Error(`Failed to save data: ${error}`);\r\n            }\r\n        }]);\r\n    } else if (modal.getRoot().find('#option2').is(':checked')) {\r\n        let link = modal.getRoot().find('#link').val();\r\n\r\n        // AJAX call to send data to the server.\r\n        Ajax.call([{\r\n            methodname: 'mod_homework_save_homework_link',\r\n            args: {\r\n                inputfield: inputField,\r\n                link: link,\r\n            },\r\n            done: function() {\r\n                // Close the modal after successful submission.\r\n                modal.hide();\r\n            },\r\n            fail: function(error) {\r\n                throw new Error(`Failed to save data: ${error}`);\r\n            }\r\n        }]);\r\n    }\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_jquery","_ajax","_modal_homework","_modal_events","_exports","init","async","cmid","title","$","on","Ajax","call","methodname","args","done","response","modal","MyModal","create","body","html","large","removeOnClose","show","getRoot","ModalEvents","shown","startPageInput","find","endPageInput","radioButtons","testTextarea","testLink","validatePageRange","startPage","parseInt","value","endPage","setCustomValidity","toggleInputs","document","getElementById","checked","style","display","addEventListener","each","_","radio","preventDefault","handleFormSubmit","destroy","fail","error","Error","inputField","val","reportValidity","event","is","inputfield","startpage","endpage","hide","link"],"mappings":"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"}