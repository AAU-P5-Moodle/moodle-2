{"version":3,"file":"form-field.min.js","sources":["../src/form-field.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A module that enables the setting of form field values on the client side.\r\n *\r\n * @module     mod_lti/form-field\r\n * @copyright  2016 Jun Pataleta <jun@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.2\r\n */\r\ndefine(['jquery'],\r\n    function($) {\r\n        /**\r\n         * Form field class.\r\n         *\r\n         * @param {string} name Field name.\r\n         * @param {number} type The field type.\r\n         * @param {boolean} resetIfUndefined Flag to reset the field to the default value if undefined in the return data.\r\n         * @param {string|number|boolean} defaultValue The default value to use for the field.\r\n         * @constructor\r\n         */\r\n        var FormField = function(name, type, resetIfUndefined, defaultValue) {\r\n            this.name = name;\r\n            this.id = 'id_' + this.name;\r\n            this.selector = '#' + this.id;\r\n            this.type = type;\r\n            this.resetIfUndefined = resetIfUndefined;\r\n            this.defaultValue = defaultValue;\r\n        };\r\n\r\n        /**\r\n         * Form field types.\r\n         *\r\n         * @type {{TEXT: number, SELECT: number, CHECKBOX: number, EDITOR: number}}\r\n         */\r\n        FormField.TYPES = {\r\n            TEXT: 1,\r\n            SELECT: 2,\r\n            CHECKBOX: 3,\r\n            EDITOR: 4\r\n        };\r\n\r\n        /**\r\n         * Sets the values for a form field.\r\n         *\r\n         * @param {string|boolean|number} value The value to be set into the field.\r\n         */\r\n        FormField.prototype.setFieldValue = function(value) {\r\n            if (value === null) {\r\n                if (this.resetIfUndefined) {\r\n                    value = this.defaultValue;\r\n                } else {\r\n                    // No need set the field value if value is null and there's no need to reset the field.\r\n                    return;\r\n                }\r\n            }\r\n\r\n            switch (this.type) {\r\n                case FormField.TYPES.CHECKBOX:\r\n                    if (value) {\r\n                        $(this.selector).prop('checked', true);\r\n                    } else {\r\n                        $(this.selector).prop('checked', false);\r\n                    }\r\n                    break;\r\n                case FormField.TYPES.EDITOR:\r\n                    if (typeof value.text !== 'undefined') {\r\n                        /* global tinyMCE:false */\r\n\r\n                        // Set text in editor's editable content, if applicable.\r\n                        // Check if it is an Atto editor.\r\n                        var attoEditor = $(this.selector + 'editable');\r\n                        if (attoEditor.length) {\r\n                            attoEditor.html(value.text);\r\n                        } else if (typeof tinyMCE !== 'undefined') {\r\n                            // If the editor is not Atto, try to fallback to TinyMCE.\r\n                            if (tinyMCE.majorVersion == \"3\") {\r\n                                // Tiny 3.\r\n                                tinyMCE.execInstanceCommand(this.id, 'mceInsertContent', false, value.text);\r\n                            } else {\r\n                                // Tiny 4+.\r\n                                tinyMCE.get(this.id).setContent(value.text);\r\n                            }\r\n                        }\r\n\r\n                        // Set text to actual editor text area.\r\n                        $(this.selector).val(value.text);\r\n                    }\r\n                    break;\r\n                default:\r\n                    $(this.selector).val(value);\r\n                    break;\r\n            }\r\n        };\r\n\r\n        return FormField;\r\n    }\r\n);\r\n"],"names":["define","$","FormField","name","type","resetIfUndefined","defaultValue","this","id","selector","TYPES","TEXT","SELECT","CHECKBOX","EDITOR","prototype","setFieldValue","value","prop","text","attoEditor","length","html","tinyMCE","majorVersion","execInstanceCommand","get","setContent","val"],"mappings":";;;;;;;;AAuBAA,4BAAO,CAAC,WACJ,SAASC,GAUL,IAAIC,UAAY,SAASC,KAAMC,KAAMC,iBAAkBC,cACnDC,KAAKJ,KAAOA,KACZI,KAAKC,GAAK,MAAQD,KAAKJ,KACvBI,KAAKE,SAAW,IAAMF,KAAKC,GAC3BD,KAAKH,KAAOA,KACZG,KAAKF,iBAAmBA,iBACxBE,KAAKD,aAAeA,cAoExB,OA5DAJ,UAAUQ,MAAQ,CACdC,KAAM,EACNC,OAAQ,EACRC,SAAU,EACVC,OAAQ,GAQZZ,UAAUa,UAAUC,cAAgB,SAASC,OACzC,GAAc,OAAVA,MAAgB,CAChB,IAAIV,KAAKF,iBAIL,OAHAY,MAAQV,KAAKD,YAKrB,CAEA,OAAQC,KAAKH,MACT,KAAKF,UAAUQ,MAAMG,SACbI,MACAhB,EAAEM,KAAKE,UAAUS,KAAK,WAAW,GAEjCjB,EAAEM,KAAKE,UAAUS,KAAK,WAAW,GAErC,MACJ,KAAKhB,UAAUQ,MAAMI,OACjB,QAA0B,IAAfG,MAAME,KAAsB,CAKnC,IAAIC,WAAanB,EAAEM,KAAKE,SAAW,YAC/BW,WAAWC,OACXD,WAAWE,KAAKL,MAAME,MACI,oBAAZI,UAEc,KAAxBA,QAAQC,aAERD,QAAQE,oBAAoBlB,KAAKC,GAAI,oBAAoB,EAAOS,MAAME,MAGtEI,QAAQG,IAAInB,KAAKC,IAAImB,WAAWV,MAAME,OAK9ClB,EAAEM,KAAKE,UAAUmB,IAAIX,MAAME,KAC/B,CACA,MACJ,QACIlB,EAAEM,KAAKE,UAAUmB,IAAIX,SAK1Bf,SACX"}