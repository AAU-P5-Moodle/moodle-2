{"version":3,"file":"user_picker.min.js","sources":["../../../../../src/local/grades/local/grader/user_picker.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * This module will tie together all of the different calls the gradable module will make.\r\n *\r\n * @module     mod_forum/local/grades/local/grader/user_picker\r\n * @copyright  2019 Mathew May <mathew.solutions>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Templates from 'core/templates';\r\nimport Selectors from './user_picker/selectors';\r\nimport {getString} from 'core/str';\r\n\r\nconst templatePath = 'mod_forum/local/grades/local/grader';\r\n\r\n/**\r\n * The Grader User Picker.\r\n *\r\n * @class mod_forum/local/grades/local/grader/user_picker\r\n */\r\nclass UserPicker {\r\n\r\n    /**\r\n     * Constructor for the User Picker.\r\n     *\r\n     * @constructor mod_forum/local/grades/local/grader/user_picker\r\n     * @param {Array} userList List of users\r\n     * @param {Function} showUserCallback The callback used to display the user\r\n     * @param {Function} preChangeUserCallback The callback to use before changing user\r\n     */\r\n    constructor(userList, showUserCallback, preChangeUserCallback) {\r\n        this.userList = userList;\r\n        this.showUserCallback = showUserCallback;\r\n        this.preChangeUserCallback = preChangeUserCallback;\r\n        this.currentUserIndex = 0;\r\n\r\n        // Ensure that render is bound correctly.\r\n        this.render = this.render.bind(this);\r\n        this.setUserId = this.setUserId.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Set the current userid without rendering the change.\r\n     * To show the user, call showUser too.\r\n     *\r\n     * @param {Number} userId\r\n     */\r\n    setUserId(userId) {\r\n        // Determine the current index based on the user ID.\r\n        const userIndex = this.userList.findIndex(user => {\r\n            return user.id === parseInt(userId);\r\n        });\r\n\r\n        if (userIndex === -1) {\r\n            throw Error(`User with id ${userId} not found`);\r\n        }\r\n\r\n        this.currentUserIndex = userIndex;\r\n    }\r\n\r\n    /**\r\n     * Render the user picker.\r\n     */\r\n    async render() {\r\n        // Create the root node.\r\n        this.root = document.createElement('div');\r\n\r\n        const {html, js} = await this.renderNavigator();\r\n        Templates.replaceNodeContents(this.root, html, js);\r\n\r\n        // Call the showUser function to show the first user immediately.\r\n        await this.showUser(this.currentUser);\r\n\r\n        // Ensure that the event listeners are all bound.\r\n        this.registerEventListeners();\r\n    }\r\n\r\n    /**\r\n     * Render the navigator itself.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    renderNavigator() {\r\n        return Templates.renderForPromise(`${templatePath}/user_picker`, {});\r\n    }\r\n\r\n    /**\r\n     * Render the current user details for the picker.\r\n     *\r\n     * @param {Object} context The data used to render the user picker.\r\n     * @returns {Promise}\r\n     */\r\n    renderUserChange(context) {\r\n        return Templates.renderForPromise(`${templatePath}/user_picker/user`, context);\r\n    }\r\n\r\n    /**\r\n     * Show the specified user in the picker.\r\n     *\r\n     * @param {Object} user\r\n     */\r\n    async showUser(user) {\r\n        const [{html, js}] = await Promise.all([this.renderUserChange(user), this.showUserCallback(user)]);\r\n        const userRegion = this.root.querySelector(Selectors.regions.userRegion);\r\n        Templates.replaceNodeContents(userRegion, html, js);\r\n\r\n        // Update the hidden now-grading region so screen readers can announce the user that's currently being graded.\r\n        const currentUserRegion = this.root.querySelector(Selectors.regions.currentUser);\r\n        currentUserRegion.textContent = await getString('nowgradinguser', 'mod_forum', user.fullname);\r\n    }\r\n\r\n    /**\r\n     * Register the event listeners for the user picker.\r\n     */\r\n    registerEventListeners() {\r\n        this.root.addEventListener('click', async(e) => {\r\n            const button = e.target.closest(Selectors.actions.changeUser);\r\n\r\n            if (button) {\r\n                const result = await this.preChangeUserCallback(this.currentUser);\r\n\r\n                if (!result.failed) {\r\n                    this.updateIndex(parseInt(button.dataset.direction));\r\n                    await this.showUser(this.currentUser);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update the current user index.\r\n     *\r\n     * @param {Number} direction\r\n     * @returns {Number}}\r\n     */\r\n    updateIndex(direction) {\r\n        this.currentUserIndex += direction;\r\n\r\n        // Loop around the edges.\r\n        if (this.currentUserIndex < 0) {\r\n            this.currentUserIndex = this.userList.length - 1;\r\n        } else if (this.currentUserIndex > this.userList.length - 1) {\r\n            this.currentUserIndex = 0;\r\n        }\r\n\r\n        return this.currentUserIndex;\r\n    }\r\n\r\n    /**\r\n     * Get the details of the user currently shown with the total number of users, and the 1-indexed count of the\r\n     * current user.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    get currentUser() {\r\n        return {\r\n            ...this.userList[this.currentUserIndex],\r\n            total: this.userList.length,\r\n            displayIndex: this.currentUserIndex + 1,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get the root node for the User Picker.\r\n     *\r\n     * @returns {HTMLElement}\r\n     */\r\n    get rootNode() {\r\n        return this.root;\r\n    }\r\n}\r\n\r\n/**\r\n * Create a new user picker.\r\n *\r\n * @param {Array} users The list of users\r\n * @param {Function} showUserCallback The function to call to show a specific user\r\n * @param {Function} preChangeUserCallback The fucntion to call to save the grade for the current user\r\n * @param {Number} [currentUserID] The userid of the current user\r\n * @returns {UserPicker}\r\n */\r\nexport default async(\r\n    users,\r\n    showUserCallback,\r\n    preChangeUserCallback,\r\n    {\r\n        initialUserId = null,\r\n    } = {}\r\n) => {\r\n    const userPicker = new UserPicker(users, showUserCallback, preChangeUserCallback);\r\n    if (initialUserId) {\r\n        userPicker.setUserId(initialUserId);\r\n    }\r\n    await userPicker.render();\r\n\r\n    return userPicker;\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_templates","_selectors","UserPicker","constructor","userList","showUserCallback","preChangeUserCallback","this","currentUserIndex","render","bind","setUserId","userId","userIndex","findIndex","user","id","parseInt","Error","root","document","createElement","html","js","renderNavigator","Templates","replaceNodeContents","showUser","currentUser","registerEventListeners","renderForPromise","renderUserChange","context","Promise","all","userRegion","querySelector","Selectors","regions","textContent","getString","fullname","addEventListener","async","button","target","closest","actions","changeUser","failed","updateIndex","dataset","direction","length","total","displayIndex","rootNode","_exports","users","initialUserId","arguments","undefined","userPicker"],"mappings":"0KAwBgD,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;qFADhDG,WAAAJ,uBAAAI,YACAC,WAAAL,uBAAAK,YAUA,MAAMC,WAUFC,WAAAA,CAAYC,SAAUC,iBAAkBC,uBACpCC,KAAKH,SAAWA,SAChBG,KAAKF,iBAAmBA,iBACxBE,KAAKD,sBAAwBA,sBAC7BC,KAAKC,iBAAmB,EAGxBD,KAAKE,OAASF,KAAKE,OAAOC,KAAKH,MAC/BA,KAAKI,UAAYJ,KAAKI,UAAUD,KAAKH,KACzC,CAQAI,SAAAA,CAAUC,QAEN,MAAMC,UAAYN,KAAKH,SAASU,WAAUC,MAC/BA,KAAKC,KAAOC,SAASL,UAGhC,IAAmB,IAAfC,UACA,MAAMK,MAAM,gBAAgBN,oBAGhCL,KAAKC,iBAAmBK,SAC5B,CAKA,YAAMJ,GAEFF,KAAKY,KAAOC,SAASC,cAAc,OAEnC,MAAMC,KAACA,KAAIC,GAAEA,UAAYhB,KAAKiB,kBAC9BC,WAAS1B,QAAC2B,oBAAoBnB,KAAKY,KAAMG,KAAMC,UAGzChB,KAAKoB,SAASpB,KAAKqB,aAGzBrB,KAAKsB,wBACT,CAOAL,eAAAA,GACI,OAAOC,WAAAA,QAAUK,iBAAiB,kDAA+B,CAAA,EACrE,CAQAC,gBAAAA,CAAiBC,SACb,OAAOP,WAAAA,QAAUK,iBAAiB,uDAAoCE,QAC1E,CAOA,cAAML,CAASZ,MACX,OAAOO,KAACA,KAAIC,GAAEA,WAAaU,QAAQC,IAAI,CAAC3B,KAAKwB,iBAAiBhB,MAAOR,KAAKF,iBAAiBU,QACrFoB,WAAa5B,KAAKY,KAAKiB,cAAcC,WAAStC,QAACuC,QAAQH,YAC7DV,WAAS1B,QAAC2B,oBAAoBS,WAAYb,KAAMC,IAGtBhB,KAAKY,KAAKiB,cAAcC,WAAStC,QAACuC,QAAQV,aAClDW,kBAAoB,EAAAC,KAASA,WAAC,iBAAkB,YAAazB,KAAK0B,SACxF,CAKAZ,sBAAAA,GACItB,KAAKY,KAAKuB,iBAAiB,SAASC,UAChC,MAAMC,OAAS/C,EAAEgD,OAAOC,QAAQT,WAAStC,QAACgD,QAAQC,YAElD,GAAIJ,OAAQ,QACarC,KAAKD,sBAAsBC,KAAKqB,cAEzCqB,SACR1C,KAAK2C,YAAYjC,SAAS2B,OAAOO,QAAQC,kBACnC7C,KAAKoB,SAASpB,KAAKqB,aAEjC,IAER,CAQAsB,WAAAA,CAAYE,WAUR,OATA7C,KAAKC,kBAAoB4C,UAGrB7C,KAAKC,iBAAmB,EACxBD,KAAKC,iBAAmBD,KAAKH,SAASiD,OAAS,EACxC9C,KAAKC,iBAAmBD,KAAKH,SAASiD,OAAS,IACtD9C,KAAKC,iBAAmB,GAGrBD,KAAKC,gBAChB,CAQA,eAAIoB,GACA,MAAO,IACArB,KAAKH,SAASG,KAAKC,kBACtB8C,MAAO/C,KAAKH,SAASiD,OACrBE,aAAchD,KAAKC,iBAAmB,EAE9C,CAOA,YAAIgD,GACA,OAAOjD,KAAKY,IAChB,EACHsC,SAAA1D,QAWc4C,eACXe,MACArD,iBACAC,uBAIC,IAHDqD,cACIA,cAAgB,MACnBC,UAAAP,OAAAO,QAAAC,IAAAD,UAAAC,GAAAD,UAAG,GAAA,GAEJ,MAAME,WAAa,IAAI5D,WAAWwD,MAAOrD,iBAAkBC,uBAM3D,OALIqD,eACAG,WAAWnD,UAAUgD,qBAEnBG,WAAWrD,SAEVqD,YACV,OAAAL,SAAA1D,OAAA"}