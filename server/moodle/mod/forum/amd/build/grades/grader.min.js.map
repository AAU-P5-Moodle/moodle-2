{"version":3,"file":"grader.min.js","sources":["../../src/grades/grader.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * This module will tie together all of the different calls the gradable module will make.\r\n *\r\n * @module     mod_forum/grades/grader\r\n * @copyright  2019 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport * as Selectors from './grader/selectors';\r\nimport Repository from 'mod_forum/repository';\r\nimport Templates from 'core/templates';\r\nimport * as Grader from '../local/grades/grader';\r\nimport Notification from 'core/notification';\r\nimport CourseRepository from 'core_course/repository';\r\nimport {relativeUrl} from 'core/url';\r\n\r\nconst templateNames = {\r\n    contentRegion: 'mod_forum/grades/grader/discussion/posts',\r\n};\r\n\r\n/**\r\n * Curried function with CMID set, this is then used in unified grader as a fetch a users content.\r\n *\r\n * @param {Number} cmid\r\n * @param {Bool} experimentalDisplayMode\r\n * @return {Function}\r\n */\r\nconst getContentForUserIdFunction = (cmid, experimentalDisplayMode) => (userid) => {\r\n    /**\r\n     * Given the parent function is called with the second param set execute the partially executed function.\r\n     *\r\n     * @param {Number} userid\r\n     */\r\n    return Repository.getDiscussionByUserID(userid, cmid)\r\n        .then(context => {\r\n            // Rebuild the returned data for the template.\r\n            context.discussions = context.discussions.map(discussionPostMapper);\r\n            context.experimentaldisplaymode = experimentalDisplayMode ? true : false;\r\n\r\n            return Templates.render(templateNames.contentRegion, context);\r\n        })\r\n        .catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Curried function with CMID set, this is then used in unified grader as a fetch users call.\r\n * The function curried fetches all users in a course for a given CMID.\r\n *\r\n * @param {Number} courseID\r\n * @param {Number} groupID\r\n * @param {Boolean} onlyActive Whether to fetch only the active enrolled users or all enrolled users in the course.\r\n * @return {Array} Array of users for a given context.\r\n */\r\nconst getGradableUsersForCourseidFunction = (courseID, groupID, onlyActive) => async() => {\r\n    const context = await CourseRepository.getGradableUsersFromCourseID(courseID, groupID, onlyActive);\r\n\r\n    return context.users;\r\n};\r\n\r\n\r\nconst findGradableNode = node => node.closest(Selectors.gradableItem);\r\n\r\n/**\r\n * For a discussion we need to manipulate it's posts to hide certain UI elements.\r\n *\r\n * @param {Object} discussion\r\n * @return {Array} name, id, posts\r\n */\r\nconst discussionPostMapper = (discussion) => {\r\n    // Map postid => post.\r\n    const parentMap = new Map();\r\n    discussion.posts.parentposts.forEach(post => parentMap.set(post.id, post));\r\n    const userPosts = discussion.posts.userposts.map(post => {\r\n        post.readonly = true;\r\n        post.hasreplies = false;\r\n        post.replies = [];\r\n\r\n        const parent = post.parentid ? parentMap.get(post.parentid) : null;\r\n        if (parent) {\r\n            parent.hasreplies = false;\r\n            parent.replies = [];\r\n            parent.readonly = true;\r\n            post.parentauthorname = parent.author.fullname;\r\n        }\r\n\r\n        return {\r\n            parent,\r\n            post\r\n        };\r\n    });\r\n\r\n    return {\r\n        ...discussion,\r\n        posts: userPosts,\r\n    };\r\n};\r\n\r\n/**\r\n * Launch the Grader.\r\n *\r\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\r\n * @param {object} param\r\n * @param {bool} [param.focusOnClose=null]\r\n */\r\nconst launchWholeForumGrading = async(rootNode, {\r\n    focusOnClose = null,\r\n} = {}) => {\r\n    const data = rootNode.dataset;\r\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\r\n        'mod_forum',\r\n        data.contextid,\r\n        data.gradingComponent,\r\n        data.gradingComponentSubtype,\r\n        data.gradableItemtype\r\n    );\r\n\r\n    const groupID = data.group ? data.group : 0;\r\n    const onlyActive = data.gradeOnlyActiveUsers;\r\n\r\n    await Grader.launch(\r\n        getGradableUsersForCourseidFunction(data.courseId, groupID, onlyActive),\r\n        getContentForUserIdFunction(data.cmid, data.experimentalDisplayMode == \"1\"),\r\n        gradingPanelFunctions.getter,\r\n        gradingPanelFunctions.setter,\r\n        {\r\n            groupid: data.groupid,\r\n            initialUserId: data.initialuserid,\r\n            moduleName: data.name,\r\n            courseName: data.courseName,\r\n            courseUrl: relativeUrl('/course/view.php', {id: data.courseId}),\r\n            sendStudentNotifications: data.sendStudentNotifications,\r\n            focusOnClose,\r\n        }\r\n    );\r\n};\r\n\r\n/**\r\n * Launch the Grader.\r\n *\r\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\r\n * @param {object} param\r\n * @param {bool} [param.focusOnClose=null]\r\n */\r\nconst launchViewGrading = async(rootNode, {\r\n    focusOnClose = null,\r\n} = {}) => {\r\n    const data = rootNode.dataset;\r\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\r\n        'mod_forum',\r\n        data.contextid,\r\n        data.gradingComponent,\r\n        data.gradingComponentSubtype,\r\n        data.gradableItemtype\r\n    );\r\n\r\n    await Grader.view(\r\n        gradingPanelFunctions.getter,\r\n        data.userid,\r\n        data.name,\r\n        {\r\n            focusOnClose,\r\n        }\r\n    );\r\n};\r\n\r\n/**\r\n * Register listeners to launch the grading panel.\r\n */\r\nexport const registerLaunchListeners = () => {\r\n    document.addEventListener('click', async(e) => {\r\n        if (e.target.matches(Selectors.launch)) {\r\n            const rootNode = findGradableNode(e.target);\r\n\r\n            if (!rootNode) {\r\n                throw Error('Unable to find a gradable item');\r\n            }\r\n\r\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\r\n                // Note: The preventDefault must be before any async function calls because the function becomes async\r\n                // at that point and the default action is implemented.\r\n                e.preventDefault();\r\n                try {\r\n                    await launchWholeForumGrading(rootNode, {\r\n                        focusOnClose: e.target,\r\n                    });\r\n                } catch (error) {\r\n                    Notification.exception(error);\r\n                }\r\n            } else {\r\n                throw Error('Unable to find a valid gradable item');\r\n            }\r\n        }\r\n        if (e.target.matches(Selectors.viewGrade)) {\r\n            e.preventDefault();\r\n            const rootNode = findGradableNode(e.target);\r\n\r\n            if (!rootNode) {\r\n                throw Error('Unable to find a gradable item');\r\n            }\r\n\r\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\r\n                // Note: The preventDefault must be before any async function calls because the function becomes async\r\n                // at that point and the default action is implemented.\r\n                e.preventDefault();\r\n                try {\r\n                    await launchViewGrading(rootNode, {\r\n                        focusOnClose: e.target,\r\n                    });\r\n                } catch (error) {\r\n                    Notification.exception(error);\r\n                }\r\n            } else {\r\n                throw Error('Unable to find a valid gradable item');\r\n            }\r\n        }\r\n    });\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","_interopRequireWildcard","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","Selectors","_repository","_templates","Grader","_notification","_repository2","templateNames","findGradableNode","node","closest","gradableItem","discussionPostMapper","discussion","parentMap","Map","posts","parentposts","forEach","post","id","userPosts","userposts","map","readonly","hasreplies","replies","parent","parentid","parentauthorname","author","fullname","launchWholeForumGrading","async","rootNode","focusOnClose","arguments","length","undefined","data","dataset","gradingPanelFunctions","getGradingPanelFunctions","contextid","gradingComponent","gradingComponentSubtype","gradableItemtype","groupID","group","onlyActive","gradeOnlyActiveUsers","getContentForUserIdFunction","cmid","experimentalDisplayMode","launch","getGradableUsersForCourseidFunction","courseID","CourseRepository","getGradableUsersFromCourseID","users","courseId","userid","Repository","getDiscussionByUserID","then","context","discussions","experimentaldisplaymode","Templates","render","catch","Notification","exception","getter","setter","groupid","initialUserId","initialuserid","moduleName","name","courseName","courseUrl","relativeUrl","sendStudentNotifications","_exports","registerLaunchListeners","document","addEventListener","target","matches","Error","gradableItems","wholeForum","preventDefault","error","viewGrade","view","launchViewGrading"],"mappings":"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"}