{"version":3,"file":"expandconversation.min.js","sources":["../../src/grades/expandconversation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * This module handles the creation of a Modal that shows the user's post in context of the entire discussion.\r\n *\r\n * @module     mod_forum/grades/expandconversation\r\n * @copyright  2019 Mathew May <mathew.solutions>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport * as ForumSelectors from './grader/selectors';\r\nimport Repository from 'mod_forum/repository';\r\nimport {exception as showException} from \"core/notification\";\r\nimport Templates from 'core/templates';\r\nimport Modal from 'core/modal_cancel';\r\nimport * as ModalEvents from 'core/modal_events';\r\n\r\n/**\r\n * Find the Node containing the gradable details from the provided node by searching up the tree.\r\n *\r\n * @param {HTMLElement} node\r\n * @returns {HTMLElement}\r\n */\r\nconst findGradableNode = node => node.closest(ForumSelectors.expandConversation);\r\n\r\n/**\r\n * Show the post in context in a modal.\r\n *\r\n * @param {HTMLElement} rootNode The button that has been clicked\r\n * @param {object} param\r\n * @param {bool} [param.focusOnClose=null]\r\n */\r\nconst showPostInContext = async(rootNode, {\r\n    focusOnClose = null,\r\n} = {}) => {\r\n    const postId = rootNode.dataset.postid;\r\n    const discussionId = rootNode.dataset.discussionid;\r\n    const discussionName = rootNode.dataset.name;\r\n    const experimentalDisplayMode = rootNode.dataset.experimentalDisplayMode == \"1\";\r\n\r\n    const [\r\n        allPosts,\r\n        modal,\r\n    ] = await Promise.all([\r\n        Repository.getDiscussionPosts(parseInt(discussionId)),\r\n        Modal.create({\r\n            title: discussionName,\r\n            large: true,\r\n            removeOnClose: true,\r\n            returnElement: focusOnClose,\r\n        }),\r\n    ]);\r\n\r\n    const postsById = new Map(allPosts.posts.map(post => {\r\n        post.readonly = true;\r\n        post.hasreplies = false;\r\n        post.replies = [];\r\n        return [post.id, post];\r\n    }));\r\n\r\n    let posts = [];\r\n    allPosts.posts.forEach(post => {\r\n        if (post.parentid) {\r\n            const parent = postsById.get(post.parentid);\r\n            if (parent) {\r\n                post.parentauthorname = parent.author.fullname;\r\n                parent.hasreplies = true;\r\n                parent.replies.push(post);\r\n            } else {\r\n                posts.push(post);\r\n            }\r\n        } else {\r\n            posts.push(post);\r\n        }\r\n    });\r\n\r\n    modal.getRoot().on(ModalEvents.bodyRendered, () => {\r\n        const relevantPost = modal.getRoot()[0].querySelector(`#p${postId}`);\r\n        if (relevantPost) {\r\n            relevantPost.scrollIntoView({behavior: \"smooth\"});\r\n        }\r\n    });\r\n\r\n    modal.show();\r\n\r\n    // Note: We do not use await here because it messes with the Modal transitions.\r\n    const templatePromise = Templates.render('mod_forum/grades/grader/discussion/post_modal', {\r\n        posts,\r\n        experimentaldisplaymode: experimentalDisplayMode\r\n    });\r\n    modal.setBody(templatePromise);\r\n};\r\n\r\n/**\r\n * Register event listeners for the expand conversations button.\r\n *\r\n * @param {HTMLElement} rootNode The root to listen to.\r\n */\r\nexport const registerEventListeners = (rootNode) => {\r\n    rootNode.addEventListener('click', (e) => {\r\n        const rootNode = findGradableNode(e.target);\r\n\r\n        if (rootNode) {\r\n            e.preventDefault();\r\n\r\n            try {\r\n                showPostInContext(rootNode, {\r\n                    focusOnClose: e.target,\r\n                });\r\n            } catch (err) {\r\n                showException(err);\r\n            }\r\n        }\r\n    });\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","_interopRequireWildcard","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","ForumSelectors","_repository","_templates","_modal_cancel","ModalEvents","_exports","registerEventListeners","rootNode","addEventListener","target","closest","expandConversation","preventDefault","async","focusOnClose","arguments","length","undefined","postId","dataset","postid","discussionId","discussionid","discussionName","name","experimentalDisplayMode","allPosts","modal","Promise","all","Repository","getDiscussionPosts","parseInt","Modal","create","title","large","removeOnClose","returnElement","postsById","Map","posts","map","post","readonly","hasreplies","replies","id","forEach","parentid","parent","parentauthorname","author","fullname","push","getRoot","on","bodyRendered","relevantPost","querySelector","scrollIntoView","behavior","show","templatePromise","Templates","render","experimentaldisplaymode","setBody","showPostInContext","err","showException"],"mappings":"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"}