{"version":3,"file":"importmappingdialogue.min.js","sources":["../src/importmappingdialogue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript module for deleting a database as a preset.\r\n *\r\n * @module      mod_data/importmappingdialogue\r\n * @copyright   2022 Amaia Anabitarte <amaia@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Notification from 'core/notification';\r\nimport Ajax from 'core/ajax';\r\nimport Url from 'core/url';\r\nimport Templates from 'core/templates';\r\nimport Modal from 'core/modal';\r\nimport {prefetchStrings} from 'core/prefetch';\r\nimport {getString} from 'core/str';\r\n\r\n// Load global strings.\r\nprefetchStrings('mod_data', ['mapping:dialogtitle:usepreset']);\r\n\r\nconst selectors = {\r\n    selectPreset: '[data-action=\"selectpreset\"]',\r\n};\r\n\r\n/**\r\n * Initialize module\r\n */\r\nexport const init = () => {\r\n    registerEventListeners();\r\n};\r\n\r\n/**\r\n * Register events.\r\n */\r\nconst registerEventListeners = () => {\r\n    document.addEventListener('click', (event) => {\r\n        const preset = event.target.closest(selectors.selectPreset);\r\n        if (preset) {\r\n            event.preventDefault();\r\n            showMappingDialogue(preset);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Show the confirmation modal for uploading a preset.\r\n *\r\n * @param {HTMLElement} usepreset the preset to import.\r\n */\r\nconst showMappingDialogue = (usepreset) => {\r\n    const presetName = usepreset.dataset.presetname;\r\n    const cmId = usepreset.dataset.cmid;\r\n\r\n    getMappingInformation(cmId, presetName).then((result) => {\r\n        if (result.data && result.data.needsmapping) {\r\n            buildModal({\r\n                title: getString('mapping:dialogtitle:usepreset', 'mod_data', result.data.presetname),\r\n                body: Templates.render('mod_data/fields_mapping_body', result.data),\r\n                footer: Templates.render('mod_data/fields_mapping_footer', getMappingButtons(cmId, presetName)),\r\n                large: true,\r\n                show: true,\r\n            });\r\n        } else {\r\n            window.location.href = Url.relativeUrl(\r\n                'mod/data/field.php',\r\n                {\r\n                    id: cmId,\r\n                    mode: 'usepreset',\r\n                    fullname: presetName,\r\n                },\r\n                false\r\n            );\r\n        }\r\n        return true;\r\n    }).catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Given an object we want to build a modal ready to show\r\n *\r\n * @method buildModal\r\n * @param {Object} params the modal params\r\n * @param {Promise} params.title\r\n * @param {Promise} params.body\r\n * @param {Promise} params.footer\r\n * @return {Object} The modal ready to display immediately and render body in later.\r\n */\r\nconst buildModal = (params) => {\r\n    return Modal.create({\r\n        ...params,\r\n    }).then(modal => {\r\n        modal.showFooter();\r\n        modal.registerCloseOnCancel();\r\n        return modal;\r\n    }).catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Add buttons to render on mapping modal.\r\n *\r\n * @param {int} cmId The id of the current database activity.\r\n * @param {string} presetName The preset name to delete.\r\n * @return {array} Same data with buttons.\r\n */\r\nconst getMappingButtons = (cmId, presetName) => {\r\n    const data = {};\r\n\r\n    data.mapfieldsbutton = Url.relativeUrl(\r\n        'mod/data/field.php',\r\n        {\r\n            id: cmId,\r\n            fullname: presetName,\r\n            mode: 'usepreset',\r\n            action: 'select',\r\n        },\r\n        false\r\n    );\r\n\r\n    data.applybutton = Url.relativeUrl(\r\n        'mod/data/field.php',\r\n        {\r\n            id: cmId,\r\n            fullname: presetName,\r\n            mode: 'usepreset',\r\n            action: 'notmapping'\r\n        },\r\n        false\r\n    );\r\n\r\n    return data;\r\n};\r\n\r\n/**\r\n * Check whether we should show the mapping dialogue or not.\r\n *\r\n * @param {int} cmId The id of the current database activity.\r\n * @param {string} presetName The preset name to delete.\r\n * @return {promise} Resolved with the result and warnings of deleting a preset.\r\n */\r\nconst getMappingInformation = (cmId, presetName) => {\r\n    const request = {\r\n        methodname: 'mod_data_get_mapping_information',\r\n        args: {\r\n            cmid: cmId,\r\n            importedpreset: presetName,\r\n        }\r\n    };\r\n    return Ajax.call([request])[0];\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_notification","_ajax","_url","_templates","_modal","prefetchStrings","selectors","_exports","init","registerEventListeners","document","addEventListener","event","preset","target","closest","preventDefault","showMappingDialogue","usepreset","presetName","dataset","presetname","cmId","cmid","getMappingInformation","then","result","data","needsmapping","buildModal","title","getString","body","Templates","render","footer","getMappingButtons","large","show","window","location","href","Url","relativeUrl","id","mode","fullname","catch","Notification","exception","params","Modal","create","modal","showFooter","registerCloseOnCancel","mapfieldsbutton","action","applybutton","request","methodname","args","importedpreset","Ajax","call"],"mappings":"sOA2B+B,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;kFAJ/BG,cAAAJ,uBAAAI,eACAC,MAAAL,uBAAAK,OACAC,KAAAN,uBAAAM,MACAC,WAAAP,uBAAAO,YACAC,OAAAR,uBAAAQ,SAKA,EAAAC,2BAAgB,WAAY,CAAC,kCAE7B,MAAMC,uBACY,+BAQhBC,SAAAC,KAFkBA,KAChBC,wBAAwB,EAM5B,MAAMA,uBAAyBA,KAC3BC,SAASC,iBAAiB,SAAUC,QAChC,MAAMC,OAASD,MAAME,OAAOC,QAAQT,wBAChCO,SACAD,MAAMI,iBACNC,oBAAoBJ,QACxB,GACF,EAQAI,oBAAuBC,YACzB,MAAMC,WAAaD,UAAUE,QAAQC,WAC/BC,KAAOJ,UAAUE,QAAQG,KAE/BC,sBAAsBF,KAAMH,YAAYM,MAAMC,SACtCA,OAAOC,MAAQD,OAAOC,KAAKC,aAC3BC,WAAW,CACPC,OAAO,EAAAC,KAASA,WAAC,gCAAiC,WAAYL,OAAOC,KAAKN,YAC1EW,KAAMC,WAASlC,QAACmC,OAAO,+BAAgCR,OAAOC,MAC9DQ,OAAQF,WAAAA,QAAUC,OAAO,iCAAkCE,kBAAkBd,KAAMH,aACnFkB,OAAO,EACPC,MAAM,IAGVC,OAAOC,SAASC,KAAOC,aAAIC,YACvB,qBACA,CACIC,GAAItB,KACJuB,KAAM,YACNC,SAAU3B,aAEd,IAGD,KACR4B,MAAMC,cAAYjD,QAACkD,UAAU,EAa9BpB,WAAcqB,QACTC,OAAAA,QAAMC,OAAO,IACbF,SACJzB,MAAK4B,QACJA,MAAMC,aACND,MAAME,wBACCF,SACRN,MAAMC,cAAYjD,QAACkD,WAUpBb,kBAAoBA,CAACd,KAAMH,cAC7B,MAAMQ,KAAO,CAAA,EAwBb,OAtBAA,KAAK6B,gBAAkBd,KAAAA,QAAIC,YACvB,qBACA,CACIC,GAAItB,KACJwB,SAAU3B,WACV0B,KAAM,YACNY,OAAQ,WAEZ,GAGJ9B,KAAK+B,YAAchB,KAAAA,QAAIC,YACnB,qBACA,CACIC,GAAItB,KACJwB,SAAU3B,WACV0B,KAAM,YACNY,OAAQ,eAEZ,GAGG9B,IAAI,EAUTH,sBAAwBA,CAACF,KAAMH,cACjC,MAAMwC,QAAU,CACZC,WAAY,mCACZC,KAAM,CACFtC,KAAMD,KACNwC,eAAgB3C,aAGxB,OAAO4C,MAAAA,QAAKC,KAAK,CAACL,UAAU,EAAE,CAChC"}