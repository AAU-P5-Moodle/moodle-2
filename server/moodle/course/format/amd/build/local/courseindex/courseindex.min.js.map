{"version":3,"file":"courseindex.min.js","sources":["../../../src/local/courseindex/courseindex.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course index main component.\r\n *\r\n * @module     core_courseformat/local/courseindex/courseindex\r\n * @class     core_courseformat/local/courseindex/courseindex\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {BaseComponent} from 'core/reactive';\r\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\r\nimport jQuery from 'jquery';\r\nimport ContentTree from 'core_courseformat/local/courseeditor/contenttree';\r\n\r\nexport default class Component extends BaseComponent {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     */\r\n    create() {\r\n        // Optional component name for debugging.\r\n        this.name = 'courseindex';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            SECTION: `[data-for='section']`,\r\n            SECTION_CMLIST: `[data-for='cmlist']`,\r\n            CM: `[data-for='cm']`,\r\n            TOGGLER: `[data-action=\"togglecourseindexsection\"]`,\r\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\r\n            DRAWER: `.drawer`,\r\n        };\r\n        // Default classes to toggle on refresh.\r\n        this.classes = {\r\n            SECTIONHIDDEN: 'dimmed',\r\n            CMHIDDEN: 'dimmed',\r\n            SECTIONCURRENT: 'current',\r\n            COLLAPSED: `collapsed`,\r\n            SHOW: `show`,\r\n        };\r\n        // Arrays to keep cms and sections elements.\r\n        this.sections = {};\r\n        this.cms = {};\r\n    }\r\n\r\n    /**\r\n     * Static method to create a component instance form the mustache template.\r\n     *\r\n     * @param {element|string} target the DOM main element or its ID\r\n     * @param {object} selectors optional css selector overrides\r\n     * @return {Component}\r\n     */\r\n    static init(target, selectors) {\r\n        return new this({\r\n            element: document.getElementById(target),\r\n            reactive: getCurrentCourseEditor(),\r\n            selectors,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     *\r\n     * @param {Object} state the state data\r\n     */\r\n    stateReady(state) {\r\n        // Activate section togglers.\r\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\r\n\r\n        // Get cms and sections elements.\r\n        const sections = this.getElements(this.selectors.SECTION);\r\n        sections.forEach((section) => {\r\n            this.sections[section.dataset.id] = section;\r\n        });\r\n        const cms = this.getElements(this.selectors.CM);\r\n        cms.forEach((cm) => {\r\n            this.cms[cm.dataset.id] = cm;\r\n        });\r\n\r\n        this._expandPageCmSectionIfNecessary(state);\r\n        this._refreshPageItem({element: state.course, state});\r\n\r\n        // Configure Aria Tree.\r\n        this.contentTree = new ContentTree(this.element, this.selectors, this.reactive.isEditing);\r\n    }\r\n\r\n    getWatchers() {\r\n        return [\r\n            {watch: `section.indexcollapsed:updated`, handler: this._refreshSectionCollapsed},\r\n            {watch: `cm:created`, handler: this._createCm},\r\n            {watch: `cm:deleted`, handler: this._deleteCm},\r\n            {watch: `section:created`, handler: this._createSection},\r\n            {watch: `section:deleted`, handler: this._deleteSection},\r\n            {watch: `course.pageItem:created`, handler: this._refreshPageItem},\r\n            {watch: `course.pageItem:updated`, handler: this._refreshPageItem},\r\n            // Sections and cm sorting.\r\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\r\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Setup sections toggler.\r\n     *\r\n     * Toggler click is delegated to the main course index element because new sections can\r\n     * appear at any moment and this way we prevent accidental double bindings.\r\n     *\r\n     * @param {Event} event the triggered event\r\n     */\r\n    _sectionTogglers(event) {\r\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\r\n        const isChevron = event.target.closest(this.selectors.COLLAPSE);\r\n\r\n        if (sectionlink || isChevron) {\r\n\r\n            const section = event.target.closest(this.selectors.SECTION);\r\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\r\n            const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\r\n\r\n            // Update the state.\r\n            const sectionId = section.getAttribute('data-id');\r\n            if (!sectionlink || isCollapsed) {\r\n                this.reactive.dispatch(\r\n                    'sectionIndexCollapsed',\r\n                    [sectionId],\r\n                    !isCollapsed\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update section collapsed.\r\n     *\r\n     * @param {object} args\r\n     * @param {object} args.element The leement to be expanded\r\n     */\r\n    _refreshSectionCollapsed({element}) {\r\n        const target = this.getElement(this.selectors.SECTION, element.id);\r\n        if (!target) {\r\n            throw new Error(`Unkown section with ID ${element.id}`);\r\n        }\r\n        // Check if it is already done.\r\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\r\n        const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\r\n\r\n        if (element.indexcollapsed !== isCollapsed) {\r\n            this._expandSectionNode(element);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Expand a section node.\r\n     *\r\n     * By default the method will use element.indexcollapsed to decide if the\r\n     * section is opened or closed. However, using forceValue it is possible\r\n     * to open or close a section independant from the indexcollapsed attribute.\r\n     *\r\n     * @param {Object} element the course module state element\r\n     * @param {boolean} forceValue optional forced expanded value\r\n     */\r\n    _expandSectionNode(element, forceValue) {\r\n        const target = this.getElement(this.selectors.SECTION, element.id);\r\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\r\n        let collapsibleId = toggler.dataset.target ?? toggler.getAttribute(\"href\");\r\n        if (!collapsibleId) {\r\n            return;\r\n        }\r\n        collapsibleId = collapsibleId.replace('#', '');\r\n        const collapsible = document.getElementById(collapsibleId);\r\n        if (!collapsible) {\r\n            return;\r\n        }\r\n\r\n        if (forceValue === undefined) {\r\n            forceValue = (element.indexcollapsed) ? false : true;\r\n        }\r\n\r\n        // Course index is based on Bootstrap 4 collapsibles. To collapse them we need jQuery to\r\n        // interact with collapsibles methods. Hopefully, this will change in Bootstrap 5 because\r\n        // it does not require jQuery anymore (when MDL-71979 is integrated).\r\n        const togglerValue = (forceValue) ? 'show' : 'hide';\r\n        jQuery(collapsible).collapse(togglerValue);\r\n    }\r\n\r\n    /**\r\n     * Handle a page item update.\r\n     *\r\n     * @param {Object} details the update details\r\n     * @param {Object} details.state the state data.\r\n     * @param {Object} details.element the course state data.\r\n     */\r\n    _refreshPageItem({element, state}) {\r\n        if (!element?.pageItem?.isStatic || element.pageItem.type != 'cm') {\r\n            return;\r\n        }\r\n        // Check if we need to uncollapse the section and scroll to the element.\r\n        const section = state.section.get(element.pageItem.sectionId);\r\n        if (section.indexcollapsed) {\r\n            this._expandSectionNode(section, true);\r\n            setTimeout(\r\n                () => this.cms[element.pageItem.id]?.scrollIntoView({block: \"nearest\"}),\r\n                250\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Expand a section if the current page is a section's cm.\r\n     *\r\n     * @private\r\n     * @param {Object} state the course state.\r\n     */\r\n    _expandPageCmSectionIfNecessary(state) {\r\n        const pageCmInfo = this.reactive.getPageAnchorCmInfo();\r\n        if (!pageCmInfo) {\r\n            return;\r\n        }\r\n        this._expandSectionNode(state.section.get(pageCmInfo.sectionid), true);\r\n    }\r\n\r\n    /**\r\n     * Create a newcm instance.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.state\r\n     * @param {Object} param.element\r\n     */\r\n    async _createCm({state, element}) {\r\n        // Create a fake node while the component is loading.\r\n        const fakeelement = document.createElement('li');\r\n        fakeelement.classList.add('bg-pulse-grey', 'w-100');\r\n        fakeelement.innerHTML = '&nbsp;';\r\n        this.cms[element.id] = fakeelement;\r\n        // Place the fake node on the correct position.\r\n        this._refreshSectionCmlist({\r\n            state,\r\n            element: state.section.get(element.sectionid),\r\n        });\r\n        // Collect render data.\r\n        const exporter = this.reactive.getExporter();\r\n        const data = exporter.cm(state, element);\r\n        // Create the new content.\r\n        const newcomponent = await this.renderComponent(fakeelement, 'core_courseformat/local/courseindex/cm', data);\r\n        // Replace the fake node with the real content.\r\n        const newelement = newcomponent.getElement();\r\n        this.cms[element.id] = newelement;\r\n        fakeelement.parentNode.replaceChild(newelement, fakeelement);\r\n    }\r\n\r\n    /**\r\n     * Create a new section instance.\r\n     *\r\n     * @param {Object} details the update details.\r\n     * @param {Object} details.state the state data.\r\n     * @param {Object} details.element the element data.\r\n     */\r\n    async _createSection({state, element}) {\r\n        // Create a fake node while the component is loading.\r\n        const fakeelement = document.createElement('div');\r\n        fakeelement.classList.add('bg-pulse-grey', 'w-100');\r\n        fakeelement.innerHTML = '&nbsp;';\r\n        this.sections[element.id] = fakeelement;\r\n        // Place the fake node on the correct position.\r\n        this._refreshCourseSectionlist({\r\n            state,\r\n            element: state.course,\r\n        });\r\n        // Collect render data.\r\n        const exporter = this.reactive.getExporter();\r\n        const data = exporter.section(state, element);\r\n        // Create the new content.\r\n        const newcomponent = await this.renderComponent(fakeelement, 'core_courseformat/local/courseindex/section', data);\r\n        // Replace the fake node with the real content.\r\n        const newelement = newcomponent.getElement();\r\n        this.sections[element.id] = newelement;\r\n        fakeelement.parentNode.replaceChild(newelement, fakeelement);\r\n    }\r\n\r\n    /**\r\n     * Refresh a section cm list.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.element\r\n     */\r\n    _refreshSectionCmlist({element}) {\r\n        const cmlist = element.cmlist ?? [];\r\n        const listparent = this.getElement(this.selectors.SECTION_CMLIST, element.id);\r\n        this._fixOrder(listparent, cmlist, this.cms);\r\n    }\r\n\r\n    /**\r\n     * Refresh the section list.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.state\r\n     */\r\n    _refreshCourseSectionlist({state}) {\r\n        const sectionlist = this.reactive.getExporter().listedSectionIds(state);\r\n        this._fixOrder(this.element, sectionlist, this.sections);\r\n    }\r\n\r\n    /**\r\n     * Fix/reorder the section or cms order.\r\n     *\r\n     * @param {Element} container the HTML element to reorder.\r\n     * @param {Array} neworder an array with the ids order\r\n     * @param {Array} allitems the list of html elements that can be placed in the container\r\n     */\r\n    _fixOrder(container, neworder, allitems) {\r\n\r\n        // Empty lists should not be visible.\r\n        if (!neworder.length) {\r\n            container.classList.add('hidden');\r\n            container.innerHTML = '';\r\n            return;\r\n        }\r\n\r\n        // Grant the list is visible (in case it was empty).\r\n        container.classList.remove('hidden');\r\n\r\n        // Move the elements in order at the beginning of the list.\r\n        neworder.forEach((itemid, index) => {\r\n            const item = allitems[itemid];\r\n            // Get the current element at that position.\r\n            const currentitem = container.children[index];\r\n            if (currentitem === undefined) {\r\n                container.append(item);\r\n                return;\r\n            }\r\n            if (currentitem !== item && item) {\r\n                container.insertBefore(item, currentitem);\r\n            }\r\n        });\r\n        // Remove the remaining elements.\r\n        while (container.children.length > neworder.length) {\r\n            container.removeChild(container.lastChild);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a cm from the list.\r\n     *\r\n     * The actual DOM element removal is delegated to the cm component.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.element\r\n     */\r\n    _deleteCm({element}) {\r\n        delete this.cms[element.id];\r\n    }\r\n\r\n    /**\r\n     * Remove a section from the list.\r\n     *\r\n     * The actual DOM element removal is delegated to the section component.\r\n     *\r\n     * @param {Object} details the update details.\r\n     * @param {Object} details.element the element data.\r\n     */\r\n    _deleteSection({element}) {\r\n        delete this.sections[element.id];\r\n    }\r\n}\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_jquery","_contenttree","Component","BaseComponent","create","this","name","selectors","SECTION","SECTION_CMLIST","CM","TOGGLER","COLLAPSE","DRAWER","classes","SECTIONHIDDEN","CMHIDDEN","SECTIONCURRENT","COLLAPSED","SHOW","sections","cms","init","target","element","document","getElementById","reactive","getCurrentCourseEditor","stateReady","state","addEventListener","_sectionTogglers","getElements","forEach","section","dataset","id","cm","_expandPageCmSectionIfNecessary","_refreshPageItem","course","contentTree","ContentTree","isEditing","getWatchers","watch","handler","_refreshSectionCollapsed","_createCm","_deleteCm","_createSection","_deleteSection","_refreshCourseSectionlist","_refreshSectionCmlist","event","sectionlink","closest","isChevron","toggler","querySelector","isCollapsed","classList","contains","sectionId","getAttribute","dispatch","_ref","getElement","Error","indexcollapsed","_expandSectionNode","forceValue","collapsibleId","replace","collapsible","undefined","togglerValue","jQuery","collapse","_ref2","pageItem","isStatic","type","get","setTimeout","scrollIntoView","block","pageCmInfo","getPageAnchorCmInfo","sectionid","_ref3","fakeelement","createElement","add","innerHTML","data","getExporter","newelement","renderComponent","parentNode","replaceChild","_ref4","_ref5","cmlist","listparent","_fixOrder","_ref6","sectionlist","listedSectionIds","container","neworder","allitems","length","remove","itemid","index","item","currentitem","children","insertBefore","append","removeChild","lastChild","_ref7","_ref8","_exports"],"mappings":"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"}