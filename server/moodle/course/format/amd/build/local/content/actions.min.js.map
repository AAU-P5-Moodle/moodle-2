{"version":3,"file":"actions.min.js","sources":["../../../src/local/content/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course state actions dispatcher.\r\n *\r\n * This module captures all data-dispatch links in the course content and dispatch the proper\r\n * state mutation, including any confirmation and modal required.\r\n *\r\n * @module     core_courseformat/local/content/actions\r\n * @class      core_courseformat/local/content/actions\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {BaseComponent} from 'core/reactive';\r\nimport Modal from 'core/modal';\r\nimport ModalSaveCancel from 'core/modal_save_cancel';\r\nimport ModalDeleteCancel from 'core/modal_delete_cancel';\r\nimport ModalEvents from 'core/modal_events';\r\nimport Templates from 'core/templates';\r\nimport {prefetchStrings} from 'core/prefetch';\r\nimport {getString} from 'core/str';\r\nimport {getFirst} from 'core/normalise';\r\nimport {toggleBulkSelectionAction} from 'core_courseformat/local/content/actions/bulkselection';\r\nimport * as CourseEvents from 'core_course/events';\r\nimport Pending from 'core/pending';\r\nimport ContentTree from 'core_courseformat/local/courseeditor/contenttree';\r\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\r\nimport jQuery from 'jquery';\r\nimport Notification from \"core/notification\";\r\n\r\n// Load global strings.\r\nprefetchStrings('core', ['movecoursesection', 'movecoursemodule', 'confirm', 'delete']);\r\n\r\n// Mutations are dispatched by the course content actions.\r\n// Formats can use this module addActions static method to add custom actions.\r\n// Direct mutations can be simple strings (mutation) name or functions.\r\nconst directMutations = {\r\n    sectionHide: 'sectionHide',\r\n    sectionShow: 'sectionShow',\r\n    cmHide: 'cmHide',\r\n    cmShow: 'cmShow',\r\n    cmStealth: 'cmStealth',\r\n    cmMoveRight: 'cmMoveRight',\r\n    cmMoveLeft: 'cmMoveLeft',\r\n    cmNoGroups: 'cmNoGroups',\r\n    cmSeparateGroups: 'cmSeparateGroups',\r\n    cmVisibleGroups: 'cmVisibleGroups',\r\n};\r\n\r\nexport default class extends BaseComponent {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     */\r\n    create() {\r\n        // Optional component name for debugging.\r\n        this.name = 'content_actions';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            ACTIONLINK: `[data-action]`,\r\n            // Move modal selectors.\r\n            SECTIONLINK: `[data-for='section']`,\r\n            CMLINK: `[data-for='cm']`,\r\n            SECTIONNODE: `[data-for='sectionnode']`,\r\n            MODALTOGGLER: `[data-toggle='collapse']`,\r\n            ADDSECTION: `[data-action='addSection']`,\r\n            CONTENTTREE: `#destination-selector`,\r\n            ACTIONMENU: `.action-menu`,\r\n            ACTIONMENUTOGGLER: `[data-toggle=\"dropdown\"]`,\r\n            // Availability modal selectors.\r\n            OPTIONSRADIO: `[type='radio']`,\r\n            COURSEADDSECTION: `#course-addsection`,\r\n            MAXSECTIONSWARNING: `[data-region='max-sections-warning']`,\r\n            ADDSECTIONREGION: `[data-region='section-addsection']`,\r\n        };\r\n        // Component css classes.\r\n        this.classes = {\r\n            DISABLED: `disabled`,\r\n            ITALIC: `font-italic`,\r\n            DISPLAYNONE: `d-none`,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Add extra actions to the module.\r\n     *\r\n     * @param {array} actions array of methods to execute\r\n     */\r\n    static addActions(actions) {\r\n        for (const [action, mutationReference] of Object.entries(actions)) {\r\n            if (typeof mutationReference !== 'function' && typeof mutationReference !== 'string') {\r\n                throw new Error(`${action} action must be a mutation name or a function`);\r\n            }\r\n            directMutations[action] = mutationReference;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     *\r\n     * @param {Object} state the state data.\r\n     *\r\n     */\r\n    stateReady(state) {\r\n        // Delegate dispatch clicks.\r\n        this.addEventListener(\r\n            this.element,\r\n            'click',\r\n            this._dispatchClick\r\n        );\r\n        // Check section limit.\r\n        this._checkSectionlist({state});\r\n        // Add an Event listener to recalculate limits it if a section HTML is altered.\r\n        this.addEventListener(\r\n            this.element,\r\n            CourseEvents.sectionRefreshed,\r\n            () => this._checkSectionlist({state})\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Return the component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        return [\r\n            // Check section limit.\r\n            {watch: `course.sectionlist:updated`, handler: this._checkSectionlist},\r\n        ];\r\n    }\r\n\r\n    _dispatchClick(event) {\r\n        const target = event.target.closest(this.selectors.ACTIONLINK);\r\n        if (!target) {\r\n            return;\r\n        }\r\n        if (target.classList.contains(this.classes.DISABLED)) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // Invoke proper method.\r\n        const actionName = target.dataset.action;\r\n        const methodName = this._actionMethodName(actionName);\r\n\r\n        if (this[methodName] !== undefined) {\r\n            this[methodName](target, event);\r\n            return;\r\n        }\r\n\r\n        // Check direct mutations or mutations handlers.\r\n        if (directMutations[actionName] !== undefined) {\r\n            if (typeof directMutations[actionName] === 'function') {\r\n                directMutations[actionName](target, event);\r\n                return;\r\n            }\r\n            this._requestMutationAction(target, event, directMutations[actionName]);\r\n            return;\r\n        }\r\n    }\r\n\r\n    _actionMethodName(name) {\r\n        const requestName = name.charAt(0).toUpperCase() + name.slice(1);\r\n        return `_request${requestName}`;\r\n    }\r\n\r\n    /**\r\n     * Check the section list and disable some options if needed.\r\n     *\r\n     * @param {Object} detail the update details.\r\n     * @param {Object} detail.state the state object.\r\n     */\r\n    _checkSectionlist({state}) {\r\n        // Disable \"add section\" actions if the course max sections has been exceeded.\r\n        this._setAddSectionLocked(state.course.sectionlist.length > state.course.maxsections);\r\n    }\r\n\r\n    /**\r\n     * Return the ids represented by this element.\r\n     *\r\n     * Depending on the dataset attributes the action could represent a single id\r\n     * or a bulk actions with all the current selected ids.\r\n     *\r\n     * @param {HTMLElement} target\r\n     * @returns {Number[]} array of Ids\r\n     */\r\n    _getTargetIds(target) {\r\n        let ids = [];\r\n        if (target?.dataset?.id) {\r\n            ids.push(target.dataset.id);\r\n        }\r\n        const bulkType = target?.dataset?.bulk;\r\n        if (!bulkType) {\r\n            return ids;\r\n        }\r\n        const bulk = this.reactive.get('bulk');\r\n        if (bulk.enabled && bulk.selectedType === bulkType) {\r\n            ids = [...ids, ...bulk.selection];\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    /**\r\n     * Handle a move section request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestMoveSection(target, event) {\r\n        // Check we have an id.\r\n        const sectionIds = this._getTargetIds(target);\r\n        if (sectionIds.length == 0) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n\r\n        const pendingModalReady = new Pending(`courseformat/actions:prepareMoveSectionModal`);\r\n\r\n        // The section edit menu to refocus on end.\r\n        const editTools = this._getClosestActionMenuToogler(target);\r\n\r\n        // Collect section information from the state.\r\n        const exporter = this.reactive.getExporter();\r\n        const data = exporter.course(this.reactive.state);\r\n        let titleText = null;\r\n\r\n        // Add the target section id and title.\r\n        let sectionInfo = null;\r\n        if (sectionIds.length == 1) {\r\n            sectionInfo = this.reactive.get('section', sectionIds[0]);\r\n            data.sectionid = sectionInfo.id;\r\n            data.sectiontitle = sectionInfo.title;\r\n            data.information = await this.reactive.getFormatString('sectionmove_info', data.sectiontitle);\r\n            titleText = this.reactive.getFormatString('sectionmove_title');\r\n        } else {\r\n            data.information = await this.reactive.getFormatString('sectionsmove_info', sectionIds.length);\r\n            titleText = this.reactive.getFormatString('sectionsmove_title');\r\n        }\r\n\r\n\r\n        // Create the modal.\r\n        // Build the modal parameters from the event data.\r\n        const modal = await this._modalBodyRenderedPromise(Modal, {\r\n            title: titleText,\r\n            body: Templates.render('core_courseformat/local/content/movesection', data),\r\n        });\r\n\r\n        const modalBody = getFirst(modal.getBody());\r\n\r\n        // Disable current selected section ids.\r\n        sectionIds.forEach(sectionId => {\r\n            const currentElement = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-id='${sectionId}']`);\r\n            this._disableLink(currentElement);\r\n        });\r\n\r\n        // Setup keyboard navigation.\r\n        new ContentTree(\r\n            modalBody.querySelector(this.selectors.CONTENTTREE),\r\n            {\r\n                SECTION: this.selectors.SECTIONNODE,\r\n                TOGGLER: this.selectors.MODALTOGGLER,\r\n                COLLAPSE: this.selectors.MODALTOGGLER,\r\n            },\r\n            true\r\n        );\r\n\r\n        // Capture click.\r\n        modalBody.addEventListener('click', (event) => {\r\n            const target = event.target;\r\n            if (!target.matches('a') || target.dataset.for != 'section' || target.dataset.id === undefined) {\r\n                return;\r\n            }\r\n            if (target.getAttribute('aria-disabled')) {\r\n                return;\r\n            }\r\n            event.preventDefault();\r\n            this.reactive.dispatch('sectionMoveAfter', sectionIds, target.dataset.id);\r\n            this._destroyModal(modal, editTools);\r\n        });\r\n\r\n        pendingModalReady.resolve();\r\n    }\r\n\r\n    /**\r\n     * Handle a move cm request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestMoveCm(target, event) {\r\n        // Check we have an id.\r\n        const cmIds = this._getTargetIds(target);\r\n        if (cmIds.length == 0) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n\r\n        const pendingModalReady = new Pending(`courseformat/actions:prepareMoveCmModal`);\r\n\r\n        // The section edit menu to refocus on end.\r\n        const editTools = this._getClosestActionMenuToogler(target);\r\n\r\n        // Collect information from the state.\r\n        const exporter = this.reactive.getExporter();\r\n        const data = exporter.course(this.reactive.state);\r\n\r\n        let titleText = null;\r\n        if (cmIds.length == 1) {\r\n            const cmInfo = this.reactive.get('cm', cmIds[0]);\r\n            data.cmid = cmInfo.id;\r\n            data.cmname = cmInfo.name;\r\n            data.information = await this.reactive.getFormatString('cmmove_info', data.cmname);\r\n            if (cmInfo.hasdelegatedsection) {\r\n                titleText = this.reactive.getFormatString('cmmove_subsectiontitle');\r\n            } else {\r\n                titleText = this.reactive.getFormatString('cmmove_title');\r\n            }\r\n        } else {\r\n            data.information = await this.reactive.getFormatString('cmsmove_info', cmIds.length);\r\n            titleText = this.reactive.getFormatString('cmsmove_title');\r\n        }\r\n\r\n        // Create the modal.\r\n        // Build the modal parameters from the event data.\r\n        const modal = await this._modalBodyRenderedPromise(Modal, {\r\n            title: titleText,\r\n            body: Templates.render('core_courseformat/local/content/movecm', data),\r\n        });\r\n\r\n        const modalBody = getFirst(modal.getBody());\r\n\r\n        // Disable current selected section ids.\r\n        cmIds.forEach(cmId => {\r\n            const currentElement = modalBody.querySelector(`${this.selectors.CMLINK}[data-id='${cmId}']`);\r\n            this._disableLink(currentElement);\r\n        });\r\n\r\n        // Setup keyboard navigation.\r\n        new ContentTree(\r\n            modalBody.querySelector(this.selectors.CONTENTTREE),\r\n            {\r\n                SECTION: this.selectors.SECTIONNODE,\r\n                TOGGLER: this.selectors.MODALTOGGLER,\r\n                COLLAPSE: this.selectors.MODALTOGGLER,\r\n                ENTER: this.selectors.SECTIONLINK,\r\n            }\r\n        );\r\n\r\n        // Open the cm section node if possible (Bootstrap 4 uses jQuery to interact with collapsibles).\r\n        // All jQuery in this code can be replaced when MDL-71979 is integrated.\r\n        cmIds.forEach(cmId => {\r\n            const cmInfo = this.reactive.get('cm', cmId);\r\n            let selector;\r\n            if (!cmInfo.hasdelegatedsection) {\r\n                selector = `${this.selectors.CMLINK}[data-id='${cmId}']`;\r\n            } else {\r\n                selector = `${this.selectors.SECTIONLINK}[data-id='${cmInfo.sectionid}']`;\r\n            }\r\n            const currentElement = modalBody.querySelector(selector);\r\n            this._expandCmMoveModalParentSections(modalBody, currentElement);\r\n        });\r\n\r\n        modalBody.addEventListener('click', (event) => {\r\n            const target = event.target;\r\n            if (!target.matches('a') || target.dataset.for === undefined || target.dataset.id === undefined) {\r\n                return;\r\n            }\r\n            if (target.getAttribute('aria-disabled')) {\r\n                return;\r\n            }\r\n            event.preventDefault();\r\n\r\n            let targetSectionId;\r\n            let targetCmId;\r\n            let droppedCmIds = [...cmIds];\r\n            if (target.dataset.for == 'cm') {\r\n                const dropData = exporter.cmDraggableData(this.reactive.state, target.dataset.id);\r\n                targetSectionId = dropData.sectionid;\r\n                targetCmId = dropData.nextcmid;\r\n            } else {\r\n                const section = this.reactive.get('section', target.dataset.id);\r\n                targetSectionId = target.dataset.id;\r\n                targetCmId = section?.cmlist[0];\r\n            }\r\n            const section = this.reactive.get('section', targetSectionId);\r\n            if (section.component) {\r\n                // Remove cmIds which are not allowed to be moved to this delegated section (mostly\r\n                // all other delegated cm).\r\n                droppedCmIds = droppedCmIds.filter(cmId => {\r\n                    const cmInfo = this.reactive.get('cm', cmId);\r\n                    return !cmInfo.hasdelegatedsection;\r\n                });\r\n            }\r\n            if (droppedCmIds.length === 0) {\r\n                return; // No cm to move.\r\n            }\r\n            this.reactive.dispatch('cmMove', droppedCmIds, targetSectionId, targetCmId);\r\n            this._destroyModal(modal, editTools);\r\n        });\r\n\r\n        pendingModalReady.resolve();\r\n    }\r\n\r\n    /**\r\n     * Expand all the modal tree branches that contains the element.\r\n     *\r\n     * Bootstrap 4 uses jQuery to interact with collapsibles.\r\n     * All jQuery in this code can be replaced when MDL-71979 is integrated.\r\n     *\r\n     * @private\r\n     * @param {HTMLElement} modalBody the modal body element\r\n     * @param {HTMLElement} element the element to display\r\n     */\r\n    _expandCmMoveModalParentSections(modalBody, element) {\r\n        const sectionnode = element.closest(this.selectors.SECTIONNODE);\r\n        if (!sectionnode) {\r\n            return;\r\n        }\r\n\r\n        const toggler = jQuery(sectionnode).find(this.selectors.MODALTOGGLER);\r\n        let collapsibleId = toggler.data('target') ?? toggler.attr('href');\r\n        if (collapsibleId) {\r\n            // We cannot be sure we have # in the id element name.\r\n            collapsibleId = collapsibleId.replace('#', '');\r\n            const expandNode = modalBody.querySelector(`#${collapsibleId}`);\r\n            jQuery(expandNode).collapse('show');\r\n        }\r\n\r\n        // Section are a tree structure, we need to expand all the parents.\r\n        this._expandCmMoveModalParentSections(modalBody, sectionnode.parentElement);\r\n    }\r\n\r\n    /**\r\n     * Handle a create section request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestAddSection(target, event) {\r\n        event.preventDefault();\r\n        this.reactive.dispatch('addSection', target.dataset.id ?? 0);\r\n    }\r\n\r\n    /**\r\n     * Handle a delete section request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestDeleteSection(target, event) {\r\n        const sectionIds = this._getTargetIds(target);\r\n        if (sectionIds.length == 0) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n\r\n        // We don't need confirmation to delete empty sections.\r\n        let needsConfirmation = sectionIds.some(sectionId => {\r\n            const sectionInfo = this.reactive.get('section', sectionId);\r\n            const cmList = sectionInfo.cmlist ?? [];\r\n            return (cmList.length || sectionInfo.hassummary || sectionInfo.rawtitle);\r\n        });\r\n        if (!needsConfirmation) {\r\n            this._dispatchSectionDelete(sectionIds, target);\r\n            return;\r\n        }\r\n\r\n        let bodyText = null;\r\n        let titleText = null;\r\n        if (sectionIds.length == 1) {\r\n            titleText = this.reactive.getFormatString('sectiondelete_title');\r\n            const sectionInfo = this.reactive.get('section', sectionIds[0]);\r\n            bodyText = this.reactive.getFormatString('sectiondelete_info', {name: sectionInfo.title});\r\n        } else {\r\n            titleText = this.reactive.getFormatString('sectionsdelete_title');\r\n            bodyText = this.reactive.getFormatString('sectionsdelete_info', {count: sectionIds.length});\r\n        }\r\n\r\n        const modal = await this._modalBodyRenderedPromise(ModalDeleteCancel, {\r\n            title: titleText,\r\n            body: bodyText,\r\n        });\r\n\r\n        modal.getRoot().on(\r\n            ModalEvents.delete,\r\n            e => {\r\n                // Stop the default save button behaviour which is to close the modal.\r\n                e.preventDefault();\r\n                modal.destroy();\r\n                this._dispatchSectionDelete(sectionIds, target);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Dispatch the section delete action and handle the redirection if necessary.\r\n     *\r\n     * @param {Array} sectionIds  the IDs of the sections to delete.\r\n     * @param {Element} target the dispatch action element\r\n     */\r\n    async _dispatchSectionDelete(sectionIds, target) {\r\n        await this.reactive.dispatch('sectionDelete', sectionIds);\r\n        if (target.baseURI.includes('section.php')) {\r\n            // Redirect to the course main page if the section is the current page.\r\n            window.location.href = this.reactive.get('course').baseurl;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle a toggle cm selection.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestToggleSelectionCm(target, event) {\r\n        toggleBulkSelectionAction(this.reactive, target, event, 'cm');\r\n    }\r\n\r\n    /**\r\n     * Handle a toggle section selection.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestToggleSelectionSection(target, event) {\r\n        toggleBulkSelectionAction(this.reactive, target, event, 'section');\r\n    }\r\n\r\n    /**\r\n     * Basic mutation action helper.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     * @param {string} mutationName the mutation name\r\n     */\r\n    async _requestMutationAction(target, event, mutationName) {\r\n        if (!target.dataset.id && target.dataset.for !== 'bulkaction') {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        if (target.dataset.for === 'bulkaction') {\r\n            // If the mutation is a bulk action we use the current selection.\r\n            this.reactive.dispatch(mutationName, this.reactive.get('bulk').selection);\r\n        } else {\r\n            this.reactive.dispatch(mutationName, [target.dataset.id]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle a course module duplicate request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestCmDuplicate(target, event) {\r\n        const cmIds = this._getTargetIds(target);\r\n        if (cmIds.length == 0) {\r\n            return;\r\n        }\r\n        const sectionId = target.dataset.sectionid ?? null;\r\n        event.preventDefault();\r\n        this.reactive.dispatch('cmDuplicate', cmIds, sectionId);\r\n    }\r\n\r\n    /**\r\n     * Handle a delete cm request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestCmDelete(target, event) {\r\n        const cmIds = this._getTargetIds(target);\r\n        if (cmIds.length == 0) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n\r\n        let bodyText = null;\r\n        let titleText = null;\r\n        let delegatedsection = null;\r\n        if (cmIds.length == 1) {\r\n            const cmInfo = this.reactive.get('cm', cmIds[0]);\r\n            if (cmInfo.hasdelegatedsection) {\r\n                delegatedsection = cmInfo.delegatesectionid;\r\n                titleText = this.reactive.getFormatString('cmdelete_subsectiontitle');\r\n                bodyText = getString(\r\n                    'sectiondelete_info',\r\n                    'core_courseformat',\r\n                    {\r\n                        type: cmInfo.modname,\r\n                        name: cmInfo.name,\r\n                    }\r\n                );\r\n            } else {\r\n                titleText = this.reactive.getFormatString('cmdelete_title');\r\n                bodyText = getString(\r\n                    'cmdelete_info',\r\n                    'core_courseformat',\r\n                    {\r\n                        type: cmInfo.modname,\r\n                        name: cmInfo.name,\r\n                    }\r\n                );\r\n            }\r\n        } else {\r\n            titleText = getString('cmsdelete_title', 'core_courseformat');\r\n            bodyText = getString(\r\n                'cmsdelete_info',\r\n                'core_courseformat',\r\n                {count: cmIds.length}\r\n            );\r\n        }\r\n\r\n        const modal = await this._modalBodyRenderedPromise(ModalDeleteCancel, {\r\n            title: titleText,\r\n            body: bodyText,\r\n        });\r\n\r\n        modal.getRoot().on(\r\n            ModalEvents.delete,\r\n            e => {\r\n                // Stop the default save button behaviour which is to close the modal.\r\n                e.preventDefault();\r\n                modal.destroy();\r\n                this.reactive.dispatch('cmDelete', cmIds);\r\n                if (cmIds.length == 1 && delegatedsection && target.baseURI.includes('section.php')) {\r\n                    // Redirect to the course main page if the subsection is the current page.\r\n                    let parameters = new URLSearchParams(window.location.search);\r\n                    if (parameters.has('id') && parameters.get('id') == delegatedsection) {\r\n                        this._dispatchSectionDelete([delegatedsection], target);\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle a cm availability change request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     */\r\n    async _requestCmAvailability(target) {\r\n        const cmIds = this._getTargetIds(target);\r\n        if (cmIds.length == 0) {\r\n            return;\r\n        }\r\n        // Show the availability modal to decide which action to trigger.\r\n        const exporter = this.reactive.getExporter();\r\n        const data = {\r\n            allowstealth: exporter.canUseStealth(this.reactive.state, cmIds),\r\n        };\r\n        const modal = await this._modalBodyRenderedPromise(ModalSaveCancel, {\r\n            title: getString('availability', 'core'),\r\n            body: Templates.render('core_courseformat/local/content/cm/availabilitymodal', data),\r\n            saveButtonText: getString('apply', 'core'),\r\n        });\r\n\r\n        this._setupMutationRadioButtonModal(modal, cmIds);\r\n    }\r\n\r\n    /**\r\n     * Handle a section availability change request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     */\r\n    async _requestSectionAvailability(target) {\r\n        const sectionIds = this._getTargetIds(target);\r\n        if (sectionIds.length == 0) {\r\n            return;\r\n        }\r\n        const title = (sectionIds.length == 1) ? 'sectionavailability_title' : 'sectionsavailability_title';\r\n        // Show the availability modal to decide which action to trigger.\r\n        const modal = await this._modalBodyRenderedPromise(ModalSaveCancel, {\r\n            title: this.reactive.getFormatString(title),\r\n            body: Templates.render('core_courseformat/local/content/section/availabilitymodal', []),\r\n            saveButtonText: getString('apply', 'core'),\r\n        });\r\n\r\n        this._setupMutationRadioButtonModal(modal, sectionIds);\r\n    }\r\n\r\n    /**\r\n     * Add events to a mutation selector radio buttons modal.\r\n     * @param {Modal} modal\r\n     * @param {Number[]} ids the section or cm ids to apply the mutation\r\n     */\r\n    _setupMutationRadioButtonModal(modal, ids) {\r\n        // The save button is not enabled until the user selects an option.\r\n        modal.setButtonDisabled('save', true);\r\n\r\n        const submitFunction = (radio) => {\r\n            const mutation = radio?.value;\r\n            if (!mutation) {\r\n                return false;\r\n            }\r\n            this.reactive.dispatch(mutation, ids);\r\n            return true;\r\n        };\r\n\r\n        const modalBody = getFirst(modal.getBody());\r\n        const radioOptions = modalBody.querySelectorAll(this.selectors.OPTIONSRADIO);\r\n        radioOptions.forEach(radio => {\r\n            radio.addEventListener('change', () => {\r\n                modal.setButtonDisabled('save', false);\r\n            });\r\n            radio.parentNode.addEventListener('click', () => {\r\n                radio.checked = true;\r\n                modal.setButtonDisabled('save', false);\r\n            });\r\n            radio.parentNode.addEventListener('dblclick', dbClickEvent => {\r\n                if (submitFunction(radio)) {\r\n                    dbClickEvent.preventDefault();\r\n                    modal.destroy();\r\n                }\r\n            });\r\n        });\r\n\r\n        modal.getRoot().on(\r\n            ModalEvents.save,\r\n            () => {\r\n                const radio = modalBody.querySelector(`${this.selectors.OPTIONSRADIO}:checked`);\r\n                submitFunction(radio);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Disable all add sections actions.\r\n     *\r\n     * @param {boolean} locked the new locked value.\r\n     */\r\n    _setAddSectionLocked(locked) {\r\n        const targets = this.getElements(this.selectors.ADDSECTIONREGION);\r\n        targets.forEach(element => {\r\n            element.classList.toggle(this.classes.DISABLED, locked);\r\n            const addSectionElement = element.querySelector(this.selectors.ADDSECTION);\r\n            addSectionElement.classList.toggle(this.classes.DISABLED, locked);\r\n            this.setElementLocked(addSectionElement, locked);\r\n            // We tweak the element to show a tooltip as a title attribute.\r\n            if (locked) {\r\n                getString('sectionaddmax', 'core_courseformat')\r\n                    .then((text) => addSectionElement.setAttribute('title', text))\r\n                    .catch(Notification.exception);\r\n                addSectionElement.style.pointerEvents = null; // Unlocks the pointer events.\r\n                addSectionElement.style.userSelect = null; // Unlocks the pointer events.\r\n            } else {\r\n                addSectionElement.setAttribute('title', addSectionElement.dataset.addSections);\r\n            }\r\n        });\r\n        const courseAddSection = this.getElement(this.selectors.COURSEADDSECTION);\r\n        const addSection = courseAddSection.querySelector(this.selectors.ADDSECTION);\r\n        addSection.classList.toggle(this.classes.DISPLAYNONE, locked);\r\n        const noMoreSections = courseAddSection.querySelector(this.selectors.MAXSECTIONSWARNING);\r\n        noMoreSections.classList.toggle(this.classes.DISPLAYNONE, !locked);\r\n    }\r\n\r\n    /**\r\n     * Replace an element with a copy with a different tag name.\r\n     *\r\n     * @param {Element} element the original element\r\n     */\r\n    _disableLink(element) {\r\n        if (element) {\r\n            element.style.pointerEvents = 'none';\r\n            element.style.userSelect = 'none';\r\n            element.classList.add(this.classes.DISABLED);\r\n            element.classList.add(this.classes.ITALIC);\r\n            element.setAttribute('aria-disabled', true);\r\n            element.addEventListener('click', event => event.preventDefault());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render a modal and return a body ready promise.\r\n     *\r\n     * @param {Modal} ModalClass the modal class\r\n     * @param {object} modalParams the modal params\r\n     * @return {Promise} the modal body ready promise\r\n     */\r\n    _modalBodyRenderedPromise(ModalClass, modalParams) {\r\n        return new Promise((resolve, reject) => {\r\n            ModalClass.create(modalParams).then((modal) => {\r\n                modal.setRemoveOnClose(true);\r\n                // Handle body loading event.\r\n                modal.getRoot().on(ModalEvents.bodyRendered, () => {\r\n                    resolve(modal);\r\n                });\r\n                // Configure some extra modal params.\r\n                if (modalParams.saveButtonText !== undefined) {\r\n                    modal.setSaveButtonText(modalParams.saveButtonText);\r\n                }\r\n                if (modalParams.deleteButtonText !== undefined) {\r\n                    modal.setDeleteButtonText(modalParams.saveButtonText);\r\n                }\r\n                modal.show();\r\n                return;\r\n            }).catch(() => {\r\n                reject(`Cannot load modal content`);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Hide and later destroy a modal.\r\n     *\r\n     * Behat will fail if we remove the modal while some boostrap collapse is executing.\r\n     *\r\n     * @param {Modal} modal\r\n     * @param {HTMLElement} element the dom element to focus on.\r\n     */\r\n    _destroyModal(modal, element) {\r\n        modal.hide();\r\n        const pendingDestroy = new Pending(`courseformat/actions:destroyModal`);\r\n        if (element) {\r\n            element.focus();\r\n        }\r\n        setTimeout(() =>{\r\n            modal.destroy();\r\n            pendingDestroy.resolve();\r\n        }, 500);\r\n    }\r\n\r\n    /**\r\n     * Get the closest actions menu toggler to an action element.\r\n     *\r\n     * @param {HTMLElement} element the action link element\r\n     * @returns {HTMLElement|undefined}\r\n     */\r\n    _getClosestActionMenuToogler(element) {\r\n        const actionMenu = element.closest(this.selectors.ACTIONMENU);\r\n        if (!actionMenu) {\r\n            return undefined;\r\n        }\r\n        return actionMenu.querySelector(this.selectors.ACTIONMENUTOGGLER);\r\n    }\r\n}\r\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireDefault","__esModule","default","_modal","_modal_save_cancel","_modal_delete_cancel","_modal_events","_templates","CourseEvents","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","_pending","_contenttree","_jquery","_notification","prefetchStrings","directMutations","sectionHide","sectionShow","cmHide","cmShow","cmStealth","cmMoveRight","cmMoveLeft","cmNoGroups","cmSeparateGroups","cmVisibleGroups","_default","BaseComponent","create","this","name","selectors","ACTIONLINK","SECTIONLINK","CMLINK","SECTIONNODE","MODALTOGGLER","ADDSECTION","CONTENTTREE","ACTIONMENU","ACTIONMENUTOGGLER","OPTIONSRADIO","COURSEADDSECTION","MAXSECTIONSWARNING","ADDSECTIONREGION","classes","DISABLED","ITALIC","DISPLAYNONE","addActions","actions","action","mutationReference","entries","Error","stateReady","state","addEventListener","element","_dispatchClick","_checkSectionlist","sectionRefreshed","getWatchers","watch","handler","event","target","closest","classList","contains","preventDefault","actionName","dataset","methodName","_actionMethodName","undefined","_requestMutationAction","charAt","toUpperCase","slice","_ref","_setAddSectionLocked","course","sectionlist","length","maxsections","_getTargetIds","ids","id","push","bulkType","bulk","reactive","enabled","selectedType","selection","_requestMoveSection","sectionIds","pendingModalReady","Pending","editTools","_getClosestActionMenuToogler","data","getExporter","titleText","sectionInfo","sectionid","sectiontitle","title","information","getFormatString","modal","_modalBodyRenderedPromise","Modal","body","Templates","render","modalBody","getFirst","getBody","forEach","sectionId","currentElement","querySelector","_disableLink","ContentTree","SECTION","TOGGLER","COLLAPSE","matches","for","getAttribute","dispatch","_destroyModal","resolve","_requestMoveCm","cmIds","exporter","cmInfo","cmid","cmname","hasdelegatedsection","cmId","ENTER","selector","_expandCmMoveModalParentSections","targetSectionId","targetCmId","droppedCmIds","dropData","cmDraggableData","nextcmid","section","cmlist","component","filter","sectionnode","toggler","jQuery","find","collapsibleId","attr","replace","expandNode","collapse","parentElement","_requestAddSection","_requestDeleteSection","some","hassummary","rawtitle","_dispatchSectionDelete","bodyText","count","ModalDeleteCancel","getRoot","on","ModalEvents","delete","destroy","baseURI","includes","window","location","href","baseurl","_requestToggleSelectionCm","toggleBulkSelectionAction","_requestToggleSelectionSection","mutationName","_requestCmDuplicate","_requestCmDelete","delegatedsection","delegatesectionid","getString","type","modname","parameters","URLSearchParams","search","_requestCmAvailability","allowstealth","canUseStealth","ModalSaveCancel","saveButtonText","_setupMutationRadioButtonModal","_requestSectionAvailability","setButtonDisabled","submitFunction","radio","mutation","value","querySelectorAll","parentNode","checked","dbClickEvent","save","locked","getElements","toggle","addSectionElement","setElementLocked","then","text","setAttribute","catch","Notification","exception","style","pointerEvents","userSelect","addSections","courseAddSection","getElement","add","ModalClass","modalParams","Promise","reject","setRemoveOnClose","bodyRendered","setSaveButtonText","deleteButtonText","setDeleteButtonText","show","hide","pendingDestroy","focus","setTimeout","actionMenu","_exports"],"mappings":"mlBA0C6C,SAAAA,yBAAAC,GAAA,GAAA,mBAAAC,QAAA,OAAA,KAAA,IAAAC,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,eAAAF,yBAAA,SAAAC,GAAAA,OAAAA,EAAAG,EAAAD,IAAAF,EAAA,CAAA,SAAAI,uBAAAJ,GAAAA,OAAAA,GAAAA,EAAAK,WAAAL,EAAAM,CAAAA,QAAAN,EAAA;;;;;;;;;;;qFAd7CO,OAAAH,uBAAAG,QACAC,mBAAAJ,uBAAAI,oBACAC,qBAAAL,uBAAAK,sBACAC,cAAAN,uBAAAM,eACAC,WAAAP,uBAAAO,YAKAC,aAK6C,SAAAZ,EAAAE,GAAAA,IAAAA,GAAAF,GAAAA,EAAAK,WAAAL,OAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAM,MAAAA,CAAAA,QAAAN,GAAAG,IAAAA,EAAAJ,yBAAAG,GAAA,GAAAC,GAAAA,EAAAU,IAAAb,GAAA,OAAAG,EAAAW,IAAAd,GAAA,IAAAe,EAAA,CAAAC,UAAA,MAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,IAAA,IAAAC,KAAArB,EAAAqB,GAAAA,YAAAA,GAAAC,CAAAA,EAAAA,eAAAC,KAAAvB,EAAAqB,GAAAG,CAAAA,IAAAA,EAAAP,EAAAC,OAAAE,yBAAApB,EAAAqB,GAAAG,KAAAA,IAAAA,EAAAV,KAAAU,EAAAC,KAAAP,OAAAC,eAAAJ,EAAAM,EAAAG,GAAAT,EAAAM,GAAArB,EAAAqB,GAAAN,OAAAA,EAAAT,QAAAN,EAAAG,GAAAA,EAAAsB,IAAAzB,EAAAe,GAAAA,CAAA,CAL7CW,CAAAd,cACAe,SAAAvB,uBAAAuB,UACAC,aAAAxB,uBAAAwB,cAEAC,QAAAzB,uBAAAyB,SACAC,cAAA1B,uBAAA0B,gBAGA,EAAAC,UAAeA,iBAAC,OAAQ,CAAC,oBAAqB,mBAAoB,UAAW,WAK7E,MAAMC,gBAAkB,CACpBC,YAAa,cACbC,YAAa,cACbC,OAAQ,SACRC,OAAQ,SACRC,UAAW,YACXC,YAAa,cACbC,WAAY,aACZC,WAAY,aACZC,iBAAkB,mBAClBC,gBAAiB,mBAGN,MAAAC,iBAAcC,UAAAA,cAKzBC,MAAAA,GAEIC,KAAKC,KAAO,kBAEZD,KAAKE,UAAY,CACbC,WAAY,gBAEZC,YAAa,uBACbC,OAAQ,kBACRC,YAAa,2BACbC,aAAc,2BACdC,WAAY,6BACZC,YAAa,wBACbC,WAAY,eACZC,kBAAmB,2BAEnBC,aAAc,iBACdC,iBAAkB,qBAClBC,mBAAoB,uCACpBC,iBAAkB,sCAGtBf,KAAKgB,QAAU,CACXC,SAAU,WACVC,OAAQ,cACRC,YAAa,SAErB,CAOA,iBAAOC,CAAWC,SACd,IAAK,MAAOC,OAAQC,qBAAsBnD,OAAOoD,QAAQH,SAAU,CAC/D,GAAiC,mBAAtBE,mBAAiE,iBAAtBA,kBAClD,MAAM,IAAIE,MAAM,GAAGH,uDAEvBpC,gBAAgBoC,QAAUC,iBAC9B,CACJ,CAQAG,UAAAA,CAAWC,OAEP3B,KAAK4B,iBACD5B,KAAK6B,QACL,QACA7B,KAAK8B,gBAGT9B,KAAK+B,kBAAkB,CAACJ,cAExB3B,KAAK4B,iBACD5B,KAAK6B,QACL/D,aAAakE,kBACb,IAAMhC,KAAK+B,kBAAkB,CAACJ,eAEtC,CAOAM,WAAAA,GACI,MAAO,CAEH,CAACC,MAAO,6BAA8BC,QAASnC,KAAK+B,mBAE5D,CAEAD,cAAAA,CAAeM,OACX,MAAMC,OAASD,MAAMC,OAAOC,QAAQtC,KAAKE,UAAUC,YACnD,IAAKkC,OACD,OAEJ,GAAIA,OAAOE,UAAUC,SAASxC,KAAKgB,QAAQC,UAEvC,YADAmB,MAAMK,iBAKV,MAAMC,WAAaL,OAAOM,QAAQrB,OAC5BsB,WAAa5C,KAAK6C,kBAAkBH,YAE1C,QAAyBI,IAArB9C,KAAK4C,YAMT,YAAoCE,IAAhC5D,gBAAgBwD,YAC2B,mBAAhCxD,gBAAgBwD,iBACvBxD,gBAAgBwD,YAAYL,OAAQD,YAGxCpC,KAAK+C,uBAAuBV,OAAQD,MAAOlD,gBAAgBwD,kBAL/D,EALI1C,KAAK4C,YAAYP,OAAQD,MAajC,CAEAS,iBAAAA,CAAkB5C,MAEd,MAAO,WADaA,KAAK+C,OAAO,GAAGC,cAAgBhD,KAAKiD,MAAM,IAElE,CAQAnB,iBAAAA,CAAiBoB,MAAU,IAATxB,MAACA,OAAMwB,KAErBnD,KAAKoD,qBAAqBzB,MAAM0B,OAAOC,YAAYC,OAAS5B,MAAM0B,OAAOG,YAC7E,CAWAC,aAAAA,CAAcpB,QACV,IAAIqB,IAAM,GACNrB,QAAQM,SAASgB,IACjBD,IAAIE,KAAKvB,OAAOM,QAAQgB,IAE5B,MAAME,SAAWxB,QAAQM,SAASmB,KAClC,IAAKD,SACD,OAAOH,IAEX,MAAMI,KAAO9D,KAAK+D,SAAS/F,IAAI,QAI/B,OAHI8F,KAAKE,SAAWF,KAAKG,eAAiBJ,WACtCH,IAAM,IAAIA,OAAQI,KAAKI,YAEpBR,GACX,CAQA,yBAAMS,CAAoB9B,OAAQD,OAE9B,MAAMgC,WAAapE,KAAKyD,cAAcpB,QACtC,GAAyB,GAArB+B,WAAWb,OACX,OAGJnB,MAAMK,iBAEN,MAAM4B,kBAAoB,IAAIC,SAAO9G,QAAC,gDAGhC+G,UAAYvE,KAAKwE,6BAA6BnC,QAI9CoC,KADWzE,KAAK+D,SAASW,cACTrB,OAAOrD,KAAK+D,SAASpC,OAC3C,IAAIgD,UAAY,KAGZC,YAAc,KACO,GAArBR,WAAWb,QACXqB,YAAc5E,KAAK+D,SAAS/F,IAAI,UAAWoG,WAAW,IACtDK,KAAKI,UAAYD,YAAYjB,GAC7Bc,KAAKK,aAAeF,YAAYG,MAChCN,KAAKO,kBAAoBhF,KAAK+D,SAASkB,gBAAgB,mBAAoBR,KAAKK,cAChFH,UAAY3E,KAAK+D,SAASkB,gBAAgB,uBAE1CR,KAAKO,kBAAoBhF,KAAK+D,SAASkB,gBAAgB,oBAAqBb,WAAWb,QACvFoB,UAAY3E,KAAK+D,SAASkB,gBAAgB,uBAM9C,MAAMC,YAAclF,KAAKmF,0BAA0BC,eAAO,CACtDL,MAAOJ,UACPU,KAAMC,WAAS9H,QAAC+H,OAAO,8CAA+Cd,QAGpEe,WAAY,EAAAC,WAAQA,UAACP,MAAMQ,WAGjCtB,WAAWuB,SAAQC,YACf,MAAMC,eAAiBL,UAAUM,cAAc,GAAG9F,KAAKE,UAAUE,wBAAwBwF,eACzF5F,KAAK+F,aAAaF,eAAe,IAIrC,IAAIG,aAAWxI,QACXgI,UAAUM,cAAc9F,KAAKE,UAAUO,aACvC,CACIwF,QAASjG,KAAKE,UAAUI,YACxB4F,QAASlG,KAAKE,UAAUK,aACxB4F,SAAUnG,KAAKE,UAAUK,eAE7B,GAIJiF,UAAU5D,iBAAiB,SAAUQ,QACjC,MAAMC,OAASD,MAAMC,OAChBA,OAAO+D,QAAQ,MAA8B,WAAtB/D,OAAOM,QAAQ0D,UAA0CvD,IAAtBT,OAAOM,QAAQgB,KAG1EtB,OAAOiE,aAAa,mBAGxBlE,MAAMK,iBACNzC,KAAK+D,SAASwC,SAAS,mBAAoBnC,WAAY/B,OAAOM,QAAQgB,IACtE3D,KAAKwG,cAActB,MAAOX,YAAU,IAGxCF,kBAAkBoC,SACtB,CAQA,oBAAMC,CAAerE,OAAQD,OAEzB,MAAMuE,MAAQ3G,KAAKyD,cAAcpB,QACjC,GAAoB,GAAhBsE,MAAMpD,OACN,OAGJnB,MAAMK,iBAEN,MAAM4B,kBAAoB,IAAIC,SAAO9G,QAAC,2CAGhC+G,UAAYvE,KAAKwE,6BAA6BnC,QAG9CuE,SAAW5G,KAAK+D,SAASW,cACzBD,KAAOmC,SAASvD,OAAOrD,KAAK+D,SAASpC,OAE3C,IAAIgD,UAAY,KAChB,GAAoB,GAAhBgC,MAAMpD,OAAa,CACnB,MAAMsD,OAAS7G,KAAK+D,SAAS/F,IAAI,KAAM2I,MAAM,IAC7ClC,KAAKqC,KAAOD,OAAOlD,GACnBc,KAAKsC,OAASF,OAAO5G,KACrBwE,KAAKO,kBAAoBhF,KAAK+D,SAASkB,gBAAgB,cAAeR,KAAKsC,QAEvEpC,UADAkC,OAAOG,oBACKhH,KAAK+D,SAASkB,gBAAgB,0BAE9BjF,KAAK+D,SAASkB,gBAAgB,eAElD,MACIR,KAAKO,kBAAoBhF,KAAK+D,SAASkB,gBAAgB,eAAgB0B,MAAMpD,QAC7EoB,UAAY3E,KAAK+D,SAASkB,gBAAgB,iBAK9C,MAAMC,YAAclF,KAAKmF,0BAA0BC,eAAO,CACtDL,MAAOJ,UACPU,KAAMC,WAAS9H,QAAC+H,OAAO,yCAA0Cd,QAG/De,WAAY,EAAAC,WAAQA,UAACP,MAAMQ,WAGjCiB,MAAMhB,SAAQsB,OACV,MAAMpB,eAAiBL,UAAUM,cAAc,GAAG9F,KAAKE,UAAUG,mBAAmB4G,UACpFjH,KAAK+F,aAAaF,eAAe,IAIrC,IAAIG,aAAWxI,QACXgI,UAAUM,cAAc9F,KAAKE,UAAUO,aACvC,CACIwF,QAASjG,KAAKE,UAAUI,YACxB4F,QAASlG,KAAKE,UAAUK,aACxB4F,SAAUnG,KAAKE,UAAUK,aACzB2G,MAAOlH,KAAKE,UAAUE,cAM9BuG,MAAMhB,SAAQsB,OACV,MAAMJ,OAAS7G,KAAK+D,SAAS/F,IAAI,KAAMiJ,MACvC,IAAIE,SAIAA,SAHCN,OAAOG,oBAGG,GAAGhH,KAAKE,UAAUE,wBAAwByG,OAAOhC,cAFjD,GAAG7E,KAAKE,UAAUG,mBAAmB4G,SAIpD,MAAMpB,eAAiBL,UAAUM,cAAcqB,UAC/CnH,KAAKoH,iCAAiC5B,UAAWK,eAAe,IAGpEL,UAAU5D,iBAAiB,SAAUQ,QACjC,MAAMC,OAASD,MAAMC,OACrB,IAAKA,OAAO+D,QAAQ,WAA+BtD,IAAvBT,OAAOM,QAAQ0D,UAA2CvD,IAAtBT,OAAOM,QAAQgB,GAC3E,OAEJ,GAAItB,OAAOiE,aAAa,iBACpB,OAIJ,IAAIe,gBACAC,WAHJlF,MAAMK,iBAIN,IAAI8E,aAAe,IAAIZ,OACvB,GAA0B,MAAtBtE,OAAOM,QAAQ0D,IAAa,CAC5B,MAAMmB,SAAWZ,SAASa,gBAAgBzH,KAAK+D,SAASpC,MAAOU,OAAOM,QAAQgB,IAC9E0D,gBAAkBG,SAAS3C,UAC3ByC,WAAaE,SAASE,QAC1B,KAAO,CACH,MAAMC,QAAU3H,KAAK+D,SAAS/F,IAAI,UAAWqE,OAAOM,QAAQgB,IAC5D0D,gBAAkBhF,OAAOM,QAAQgB,GACjC2D,WAAaK,SAASC,OAAO,EACjC,CACgB5H,KAAK+D,SAAS/F,IAAI,UAAWqJ,iBACjCQ,YAGRN,aAAeA,aAAaO,QAAOb,OAChBjH,KAAK+D,SAAS/F,IAAI,KAAMiJ,MACxBD,uBAGK,IAAxBO,aAAahE,SAGjBvD,KAAK+D,SAASwC,SAAS,SAAUgB,aAAcF,gBAAiBC,YAChEtH,KAAKwG,cAActB,MAAOX,WAAU,IAGxCF,kBAAkBoC,SACtB,CAYAW,gCAAAA,CAAiC5B,UAAW3D,SACxC,MAAMkG,YAAclG,QAAQS,QAAQtC,KAAKE,UAAUI,aACnD,IAAKyH,YACD,OAGJ,MAAMC,SAAU,EAAAC,QAAAA,SAAOF,aAAaG,KAAKlI,KAAKE,UAAUK,cACxD,IAAI4H,cAAgBH,QAAQvD,KAAK,WAAauD,QAAQI,KAAK,QAC3D,GAAID,cAAe,CAEfA,cAAgBA,cAAcE,QAAQ,IAAK,IAC3C,MAAMC,WAAa9C,UAAUM,cAAc,IAAIqC,kBAC/C,EAAAF,QAAAA,SAAOK,YAAYC,SAAS,OAChC,CAGAvI,KAAKoH,iCAAiC5B,UAAWuC,YAAYS,cACjE,CAQA,wBAAMC,CAAmBpG,OAAQD,OAC7BA,MAAMK,iBACNzC,KAAK+D,SAASwC,SAAS,aAAclE,OAAOM,QAAQgB,IAAM,EAC9D,CAQA,2BAAM+E,CAAsBrG,OAAQD,OAChC,MAAMgC,WAAapE,KAAKyD,cAAcpB,QACtC,GAAyB,GAArB+B,WAAWb,OACX,OAWJ,GARAnB,MAAMK,kBAGkB2B,WAAWuE,MAAK/C,YACpC,MAAMhB,YAAc5E,KAAK+D,SAAS/F,IAAI,UAAW4H,WAEjD,OADehB,YAAYgD,QAAU,IACtBrE,QAAUqB,YAAYgE,YAAchE,YAAYiE,QAAQ,IAIvE,YADA7I,KAAK8I,uBAAuB1E,WAAY/B,QAI5C,IAAI0G,SAAW,KACXpE,UAAY,KAChB,GAAyB,GAArBP,WAAWb,OAAa,CACxBoB,UAAY3E,KAAK+D,SAASkB,gBAAgB,uBAC1C,MAAML,YAAc5E,KAAK+D,SAAS/F,IAAI,UAAWoG,WAAW,IAC5D2E,SAAW/I,KAAK+D,SAASkB,gBAAgB,qBAAsB,CAAChF,KAAM2E,YAAYG,OACtF,MACIJ,UAAY3E,KAAK+D,SAASkB,gBAAgB,wBAC1C8D,SAAW/I,KAAK+D,SAASkB,gBAAgB,sBAAuB,CAAC+D,MAAO5E,WAAWb,SAGvF,MAAM2B,YAAclF,KAAKmF,0BAA0B8D,6BAAmB,CAClElE,MAAOJ,UACPU,KAAM0D,WAGV7D,MAAMgE,UAAUC,GACZC,cAAAA,QAAYC,QACZnM,IAEIA,EAAEuF,iBACFyC,MAAMoE,UACNtJ,KAAK8I,uBAAuB1E,WAAY/B,OAAO,GAG3D,CAQA,4BAAMyG,CAAuB1E,WAAY/B,cAC/BrC,KAAK+D,SAASwC,SAAS,gBAAiBnC,YAC1C/B,OAAOkH,QAAQC,SAAS,iBAExBC,OAAOC,SAASC,KAAO3J,KAAK+D,SAAS/F,IAAI,UAAU4L,QAE3D,CAQA,+BAAMC,CAA0BxH,OAAQD,QACpC,EAAA0H,eAAAA,2BAA0B9J,KAAK+D,SAAU1B,OAAQD,MAAO,KAC5D,CAQA,oCAAM2H,CAA+B1H,OAAQD,QACzC,EAAA0H,eAAAA,2BAA0B9J,KAAK+D,SAAU1B,OAAQD,MAAO,UAC5D,CASA,4BAAMW,CAAuBV,OAAQD,MAAO4H,eACnC3H,OAAOM,QAAQgB,IAA6B,eAAvBtB,OAAOM,QAAQ0D,OAGzCjE,MAAMK,iBACqB,eAAvBJ,OAAOM,QAAQ0D,IAEfrG,KAAK+D,SAASwC,SAASyD,aAAchK,KAAK+D,SAAS/F,IAAI,QAAQkG,WAE/DlE,KAAK+D,SAASwC,SAASyD,aAAc,CAAC3H,OAAOM,QAAQgB,KAE7D,CAQA,yBAAMsG,CAAoB5H,OAAQD,OAC9B,MAAMuE,MAAQ3G,KAAKyD,cAAcpB,QACjC,GAAoB,GAAhBsE,MAAMpD,OACN,OAEJ,MAAMqC,UAAYvD,OAAOM,QAAQkC,WAAa,KAC9CzC,MAAMK,iBACNzC,KAAK+D,SAASwC,SAAS,cAAeI,MAAOf,UACjD,CAQA,sBAAMsE,CAAiB7H,OAAQD,OAC3B,MAAMuE,MAAQ3G,KAAKyD,cAAcpB,QACjC,GAAoB,GAAhBsE,MAAMpD,OACN,OAGJnB,MAAMK,iBAEN,IAAIsG,SAAW,KACXpE,UAAY,KACZwF,iBAAmB,KACvB,GAAoB,GAAhBxD,MAAMpD,OAAa,CACnB,MAAMsD,OAAS7G,KAAK+D,SAAS/F,IAAI,KAAM2I,MAAM,IACzCE,OAAOG,qBACPmD,iBAAmBtD,OAAOuD,kBAC1BzF,UAAY3E,KAAK+D,SAASkB,gBAAgB,4BAC1C8D,UAAW,EAAAsB,KAAAA,WACP,qBACA,oBACA,CACIC,KAAMzD,OAAO0D,QACbtK,KAAM4G,OAAO5G,SAIrB0E,UAAY3E,KAAK+D,SAASkB,gBAAgB,kBAC1C8D,UAAW,EAAAsB,KAAAA,WACP,gBACA,oBACA,CACIC,KAAMzD,OAAO0D,QACbtK,KAAM4G,OAAO5G,OAI7B,MACI0E,WAAY,EAAA0F,KAAAA,WAAU,kBAAmB,qBACzCtB,UAAW,EAAAsB,KAAAA,WACP,iBACA,oBACA,CAACrB,MAAOrC,MAAMpD,SAItB,MAAM2B,YAAclF,KAAKmF,0BAA0B8D,6BAAmB,CAClElE,MAAOJ,UACPU,KAAM0D,WAGV7D,MAAMgE,UAAUC,GACZC,cAAAA,QAAYC,QACZnM,IAKI,GAHAA,EAAEuF,iBACFyC,MAAMoE,UACNtJ,KAAK+D,SAASwC,SAAS,WAAYI,OACf,GAAhBA,MAAMpD,QAAe4G,kBAAoB9H,OAAOkH,QAAQC,SAAS,eAAgB,CAEjF,IAAIgB,WAAa,IAAIC,gBAAgBhB,OAAOC,SAASgB,QACjDF,WAAWzM,IAAI,OAASyM,WAAWxM,IAAI,OAASmM,kBAChDnK,KAAK8I,uBAAuB,CAACqB,kBAAmB9H,OAExD,IAGZ,CAOA,4BAAMsI,CAAuBtI,QACzB,MAAMsE,MAAQ3G,KAAKyD,cAAcpB,QACjC,GAAoB,GAAhBsE,MAAMpD,OACN,OAGJ,MACMkB,KAAO,CACTmG,aAFa5K,KAAK+D,SAASW,cAEJmG,cAAc7K,KAAK+D,SAASpC,MAAOgF,QAExDzB,YAAclF,KAAKmF,0BAA0B2F,2BAAiB,CAChE/F,OAAO,EAAAsF,KAAAA,WAAU,eAAgB,QACjChF,KAAMC,mBAAUC,OAAO,uDAAwDd,MAC/EsG,gBAAgB,EAAAV,KAAAA,WAAU,QAAS,UAGvCrK,KAAKgL,+BAA+B9F,MAAOyB,MAC/C,CAOA,iCAAMsE,CAA4B5I,QAC9B,MAAM+B,WAAapE,KAAKyD,cAAcpB,QACtC,GAAyB,GAArB+B,WAAWb,OACX,OAEJ,MAAMwB,MAA8B,GAArBX,WAAWb,OAAe,4BAA8B,6BAEjE2B,YAAclF,KAAKmF,0BAA0B2F,2BAAiB,CAChE/F,MAAO/E,KAAK+D,SAASkB,gBAAgBF,OACrCM,KAAMC,mBAAUC,OAAO,4DAA6D,IACpFwF,gBAAgB,EAAAV,KAAAA,WAAU,QAAS,UAGvCrK,KAAKgL,+BAA+B9F,MAAOd,WAC/C,CAOA4G,8BAAAA,CAA+B9F,MAAOxB,KAElCwB,MAAMgG,kBAAkB,QAAQ,GAEhC,MAAMC,eAAkBC,QACpB,MAAMC,SAAWD,OAAOE,MACxB,QAAKD,WAGLrL,KAAK+D,SAASwC,SAAS8E,SAAU3H,MAC1B,EAAI,EAGT8B,WAAY,EAAAC,WAAQA,UAACP,MAAMQ,WACZF,UAAU+F,iBAAiBvL,KAAKE,UAAUU,cAClD+E,SAAQyF,QACjBA,MAAMxJ,iBAAiB,UAAU,KAC7BsD,MAAMgG,kBAAkB,QAAQ,EAAM,IAE1CE,MAAMI,WAAW5J,iBAAiB,SAAS,KACvCwJ,MAAMK,SAAU,EAChBvG,MAAMgG,kBAAkB,QAAQ,EAAM,IAE1CE,MAAMI,WAAW5J,iBAAiB,YAAY8J,eACtCP,eAAeC,SACfM,aAAajJ,iBACbyC,MAAMoE,UACV,GACF,IAGNpE,MAAMgE,UAAUC,GACZC,cAAW5L,QAACmO,MACZ,KACI,MAAMP,MAAQ5F,UAAUM,cAAc,GAAG9F,KAAKE,UAAUU,wBACxDuK,eAAeC,MAAM,GAGjC,CAOAhI,oBAAAA,CAAqBwI,QACD5L,KAAK6L,YAAY7L,KAAKE,UAAUa,kBACxC4E,SAAQ9D,UACZA,QAAQU,UAAUuJ,OAAO9L,KAAKgB,QAAQC,SAAU2K,QAChD,MAAMG,kBAAoBlK,QAAQiE,cAAc9F,KAAKE,UAAUM,YAC/DuL,kBAAkBxJ,UAAUuJ,OAAO9L,KAAKgB,QAAQC,SAAU2K,QAC1D5L,KAAKgM,iBAAiBD,kBAAmBH,QAErCA,SACA,EAAAvB,KAAAA,WAAU,gBAAiB,qBACtB4B,MAAMC,MAASH,kBAAkBI,aAAa,QAASD,QACvDE,MAAMC,cAAAA,QAAaC,WACxBP,kBAAkBQ,MAAMC,cAAgB,KACxCT,kBAAkBQ,MAAME,WAAa,MAErCV,kBAAkBI,aAAa,QAASJ,kBAAkBpJ,QAAQ+J,YACtE,IAEJ,MAAMC,iBAAmB3M,KAAK4M,WAAW5M,KAAKE,UAAUW,kBACrC8L,iBAAiB7G,cAAc9F,KAAKE,UAAUM,YACtD+B,UAAUuJ,OAAO9L,KAAKgB,QAAQG,YAAayK,QAC/Be,iBAAiB7G,cAAc9F,KAAKE,UAAUY,oBACtDyB,UAAUuJ,OAAO9L,KAAKgB,QAAQG,aAAcyK,OAC/D,CAOA7F,YAAAA,CAAalE,SACLA,UACAA,QAAQ0K,MAAMC,cAAgB,OAC9B3K,QAAQ0K,MAAME,WAAa,OAC3B5K,QAAQU,UAAUsK,IAAI7M,KAAKgB,QAAQC,UACnCY,QAAQU,UAAUsK,IAAI7M,KAAKgB,QAAQE,QACnCW,QAAQsK,aAAa,iBAAiB,GACtCtK,QAAQD,iBAAiB,SAASQ,OAASA,MAAMK,mBAEzD,CASA0C,yBAAAA,CAA0B2H,WAAYC,aAClC,OAAO,IAAIC,SAAQ,CAACvG,QAASwG,UACzBH,WAAW/M,OAAOgN,aAAad,MAAM/G,QACjCA,MAAMgI,kBAAiB,GAEvBhI,MAAMgE,UAAUC,GAAGC,cAAW5L,QAAC2P,cAAc,KACzC1G,QAAQvB,MAAM,SAGiBpC,IAA/BiK,YAAYhC,gBACZ7F,MAAMkI,kBAAkBL,YAAYhC,qBAEHjI,IAAjCiK,YAAYM,kBACZnI,MAAMoI,oBAAoBP,YAAYhC,gBAE1C7F,MAAMqI,MACN,IACDnB,OAAM,KACLa,OAAO,4BAA4B,GACrC,GAEV,CAUAzG,aAAAA,CAActB,MAAOrD,SACjBqD,MAAMsI,OACN,MAAMC,eAAiB,IAAInJ,SAAO9G,QAAC,qCAC/BqE,SACAA,QAAQ6L,QAEZC,YAAW,KACPzI,MAAMoE,UACNmE,eAAehH,SAAS,GACzB,IACP,CAQAjC,4BAAAA,CAA6B3C,SACzB,MAAM+L,WAAa/L,QAAQS,QAAQtC,KAAKE,UAAUQ,YAClD,GAAKkN,WAGL,OAAOA,WAAW9H,cAAc9F,KAAKE,UAAUS,kBACnD,EACH,OAAAkN,SAAArQ,QAAAqC,SAAAgO,SAAArQ,OAAA"}