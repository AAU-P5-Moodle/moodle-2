{"version":3,"file":"section.min.js","sources":["../../../src/local/content/section.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course section format component.\r\n *\r\n * @module     core_courseformat/local/content/section\r\n * @class      core_courseformat/local/content/section\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Header from 'core_courseformat/local/content/section/header';\r\nimport DndSection from 'core_courseformat/local/courseeditor/dndsection';\r\nimport Templates from 'core/templates';\r\nimport Pending from \"core/pending\";\r\n\r\nexport default class extends DndSection {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     */\r\n    create() {\r\n        // Optional component name for debugging.\r\n        this.name = 'content_section';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            ACTIONMENU: '.section-actions',\r\n            SECTION_ITEM: `[data-for='section_title']`,\r\n            CM: `[data-for=\"cmitem\"]`,\r\n            SECTIONINFO: `[data-for=\"sectioninfo\"]`,\r\n            SECTIONBADGES: `[data-region=\"sectionbadges\"]`,\r\n            SHOWSECTION: `[data-action=\"sectionShow\"]`,\r\n            HIDESECTION: `[data-action=\"sectionHide\"]`,\r\n            ACTIONTEXT: `.menu-action-text`,\r\n            ICON: `.icon`,\r\n        };\r\n        // Most classes will be loaded later by DndCmItem.\r\n        this.classes = {\r\n            LOCKED: 'editinprogress',\r\n            HASDESCRIPTION: 'description',\r\n            HIDE: 'd-none',\r\n            HIDDEN: 'hidden',\r\n            CURRENT: 'current',\r\n        };\r\n\r\n        // We need our id to watch specific events.\r\n        this.id = this.element.dataset.id;\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     *\r\n     * @param {Object} state the initial state\r\n     */\r\n    stateReady(state) {\r\n        this.configState(state);\r\n        // Drag and drop is only available for components compatible course formats.\r\n        if (this.reactive.isEditing && this.reactive.supportComponents) {\r\n            // Section zero and other formats sections may not have a title to drag.\r\n            const sectionItem = this.getElement(this.selectors.SECTION_ITEM);\r\n            if (sectionItem) {\r\n                // Init the inner dragable element.\r\n                const headerComponent = new Header({\r\n                    ...this,\r\n                    element: sectionItem,\r\n                    fullregion: this.element,\r\n                });\r\n                this.configDragDrop(headerComponent);\r\n            }\r\n        }\r\n        this._openSectionIfNecessary();\r\n    }\r\n\r\n    /**\r\n     * Open the section if the anchored activity is inside.\r\n     */\r\n    async _openSectionIfNecessary() {\r\n        const pageCmInfo = this.reactive.getPageAnchorCmInfo();\r\n        if (!pageCmInfo || pageCmInfo.sectionid !== this.id) {\r\n            return;\r\n        }\r\n        await this.reactive.dispatch('sectionContentCollapsed', [this.id], false);\r\n        const pendingOpen = new Pending(`courseformat/section:openSectionIfNecessary`);\r\n        this.element.scrollIntoView({block: \"center\"});\r\n        setTimeout(() => {\r\n            this.reactive.dispatch('setPageItem', 'cm', pageCmInfo.id);\r\n            pendingOpen.resolve();\r\n        }, 250);\r\n    }\r\n\r\n    /**\r\n     * Component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        return [\r\n            {watch: `section[${this.id}]:updated`, handler: this._refreshSection},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Validate if the drop data can be dropped over the component.\r\n     *\r\n     * @param {Object} dropdata the exported drop data.\r\n     * @returns {boolean}\r\n     */\r\n    validateDropData(dropdata) {\r\n        // If the format uses one section per page sections dropping in the content is ignored.\r\n        if (dropdata?.type === 'section' && this.reactive.sectionReturn !== null) {\r\n            return false;\r\n        }\r\n        return super.validateDropData(dropdata);\r\n    }\r\n\r\n    /**\r\n     * Get the last CM element of that section.\r\n     *\r\n     * @returns {element|null}\r\n     */\r\n    getLastCm() {\r\n        const cms = this.getElements(this.selectors.CM);\r\n        // DndUpload may add extra elements so :last-child selector cannot be used.\r\n        if (!cms || cms.length === 0) {\r\n            return null;\r\n        }\r\n        const lastCm = cms[cms.length - 1];\r\n        // If it is a delegated section return the last item overall.\r\n        if (this.section.component !== null) {\r\n            return lastCm;\r\n        }\r\n        // If it is a regular section and the last item overall has a parent cm, return the parent instead.\r\n        const parentSection = lastCm.parentNode.closest(this.selectors.CM);\r\n        return parentSection ?? lastCm;\r\n    }\r\n\r\n    /**\r\n     * Get a fallback element when there is no CM in the section.\r\n     *\r\n     * @returns {element|null} the las course module element of the section.\r\n     */\r\n    getLastCmFallback() {\r\n        // The sectioninfo is always present, even when the section is empty.\r\n        return this.getElement(this.selectors.SECTIONINFO);\r\n    }\r\n\r\n    /**\r\n     * Update a content section using the state information.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshSection({element}) {\r\n        // Update classes.\r\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\r\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\r\n        this.element.classList.toggle(this.classes.HIDDEN, !element.visible ?? false);\r\n        this.element.classList.toggle(this.classes.CURRENT, element.current ?? false);\r\n        this.locked = element.locked;\r\n        // The description box classes depends on the section state.\r\n        const sectioninfo = this.getElement(this.selectors.SECTIONINFO);\r\n        if (sectioninfo) {\r\n            sectioninfo.classList.toggle(this.classes.HASDESCRIPTION, element.hasrestrictions);\r\n        }\r\n        // Update section badges and menus.\r\n        this._updateBadges(element);\r\n        this._updateActionsMenu(element);\r\n    }\r\n\r\n    /**\r\n     * Update a section badges using the state information.\r\n     *\r\n     * @param {object} section the section state.\r\n     */\r\n    _updateBadges(section) {\r\n        const current = this.getElement(`${this.selectors.SECTIONBADGES} [data-type='iscurrent']`);\r\n        current?.classList.toggle(this.classes.HIDE, !section.current);\r\n\r\n        const hiddenFromStudents = this.getElement(`${this.selectors.SECTIONBADGES} [data-type='hiddenfromstudents']`);\r\n        hiddenFromStudents?.classList.toggle(this.classes.HIDE, section.visible);\r\n    }\r\n\r\n    /**\r\n     * Update a section action menus.\r\n     *\r\n     * @param {object} section the section state.\r\n     */\r\n    async _updateActionsMenu(section) {\r\n        let selector;\r\n        let newAction;\r\n        if (section.visible) {\r\n            selector = this.selectors.SHOWSECTION;\r\n            newAction = 'sectionHide';\r\n        } else {\r\n            selector = this.selectors.HIDESECTION;\r\n            newAction = 'sectionShow';\r\n        }\r\n        // Find the affected action.\r\n        const affectedAction = this._getActionMenu(selector);\r\n        if (!affectedAction) {\r\n            return;\r\n        }\r\n        // Change action.\r\n        affectedAction.dataset.action = newAction;\r\n        // Change text.\r\n        const actionText = affectedAction.querySelector(this.selectors.ACTIONTEXT);\r\n        if (affectedAction.dataset?.swapname && actionText) {\r\n            const oldText = actionText?.innerText;\r\n            actionText.innerText = affectedAction.dataset.swapname;\r\n            affectedAction.dataset.swapname = oldText;\r\n        }\r\n        // Change icon.\r\n        const icon = affectedAction.querySelector(this.selectors.ICON);\r\n        if (affectedAction.dataset?.swapicon && icon) {\r\n            const newIcon = affectedAction.dataset.swapicon;\r\n            affectedAction.dataset.swapicon = affectedAction.dataset.icon;\r\n            affectedAction.dataset.icon = newIcon;\r\n            if (newIcon) {\r\n                const pixHtml = await Templates.renderPix(newIcon, 'core');\r\n                Templates.replaceNode(icon, pixHtml, '');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the action menu element from the selector.\r\n     *\r\n     * @param {string} selector The selector to find the action menu.\r\n     * @returns The action menu element.\r\n     */\r\n    _getActionMenu(selector) {\r\n        return document.querySelector(`${this.selectors.ACTIONMENU}[data-sectionid='${this.id}'] ${selector}`);\r\n    }\r\n}\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_header","_dndsection","_templates","_pending","_default","DndSection","create","this","name","selectors","ACTIONMENU","SECTION_ITEM","CM","SECTIONINFO","SECTIONBADGES","SHOWSECTION","HIDESECTION","ACTIONTEXT","ICON","classes","LOCKED","HASDESCRIPTION","HIDE","HIDDEN","CURRENT","id","element","dataset","stateReady","state","configState","reactive","isEditing","supportComponents","sectionItem","getElement","headerComponent","Header","fullregion","configDragDrop","_openSectionIfNecessary","pageCmInfo","getPageAnchorCmInfo","sectionid","dispatch","pendingOpen","Pending","scrollIntoView","block","setTimeout","resolve","getWatchers","watch","handler","_refreshSection","validateDropData","dropdata","type","sectionReturn","super","getLastCm","cms","getElements","length","lastCm","section","component","parentNode","closest","getLastCmFallback","_ref","classList","toggle","DRAGGING","dragging","locked","visible","current","sectioninfo","hasrestrictions","_updateBadges","_updateActionsMenu","hiddenFromStudents","selector","newAction","affectedAction","_getActionMenu","action","actionText","querySelector","swapname","oldText","innerText","icon","swapicon","newIcon","pixHtml","Templates","renderPix","replaceNode","document","_exports"],"mappings":"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"}