{"version":3,"file":"cmitem.min.js","sources":["../../../../src/local/content/section/cmitem.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course course module item component.\r\n *\r\n * This component is used to control specific course modules interactions like drag and drop.\r\n *\r\n * @module     core_courseformat/local/content/section/cmitem\r\n * @class      core_courseformat/local/content/section/cmitem\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport DndCmItem from 'core_courseformat/local/courseeditor/dndcmitem';\r\n\r\nexport default class extends DndCmItem {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     */\r\n    create() {\r\n        // Optional component name for debugging.\r\n        this.name = 'content_section_cmitem';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            BULKSELECT: `[data-for='cmBulkSelect']`,\r\n            BULKCHECKBOX: `[data-bulkcheckbox]`,\r\n            CARD: `[data-region='activity-card']`,\r\n            DRAGICON: `.editing_move`,\r\n            INPLACEEDITABLE: `[data-itemtype=\"activityname\"] > [data-inplaceeditablelink]`,\r\n        };\r\n        // Most classes will be loaded later by DndCmItem.\r\n        this.classes = {\r\n            LOCKED: 'editinprogress',\r\n            HIDE: 'd-none',\r\n            SELECTED: 'selected',\r\n        };\r\n        // We need our id to watch specific events.\r\n        this.id = this.element.dataset.id;\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     * @param {Object} state the state data\r\n     */\r\n    stateReady(state) {\r\n        this.configDragDrop(this.id);\r\n        this.getElement(this.selectors.DRAGICON)?.classList.add(this.classes.DRAGICON);\r\n        this._refreshBulk({state});\r\n    }\r\n\r\n    /**\r\n     * Component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        return [\r\n            {watch: `cm[${this.id}]:deleted`, handler: this.unregister},\r\n            {watch: `cm[${this.id}]:updated`, handler: this._refreshCm},\r\n            {watch: `bulk:updated`, handler: this._refreshBulk},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Return the custom activity card drag shadow image.\r\n     *\r\n     * The element returned will be used when the user drags the card.\r\n     *\r\n     * @returns {HTMLElement}\r\n     */\r\n    setDragImage() {\r\n        return this.getElement(this.selectors.CARD);\r\n    }\r\n\r\n    /**\r\n     * Update a course index cm using the state information.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshCm({element}) {\r\n        // Update classes.\r\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\r\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\r\n        this.locked = element.locked;\r\n    }\r\n\r\n    /**\r\n     * Update the bulk editing interface.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.state the state data\r\n     */\r\n    _refreshBulk({state}) {\r\n        const bulk = state.bulk;\r\n        // For now, dragging elements in bulk is not possible.\r\n        this.setDraggable(!bulk.enabled);\r\n        // Convert the card into an active element in bulk mode.\r\n        if (bulk.enabled) {\r\n            this.element.dataset.action = 'toggleSelectionCm';\r\n            this.element.dataset.preventDefault = 1;\r\n        } else {\r\n            this.element.removeAttribute('data-action');\r\n            this.element.removeAttribute('data-preventDefault');\r\n        }\r\n\r\n        this.getElement(this.selectors.BULKSELECT)?.classList.toggle(this.classes.HIDE, !bulk.enabled);\r\n\r\n        const disabled = !this._isCmBulkEnabled(bulk);\r\n        const selected = this._isSelected(bulk);\r\n        this._refreshActivityCard(bulk, selected);\r\n        this._setCheckboxValue(selected, disabled);\r\n    }\r\n\r\n    /**\r\n     * Update the activity card depending on the bulk selection.\r\n     *\r\n     * @param {Object} bulk the current bulk state data\r\n     * @param {Boolean} selected if the activity is selected.\r\n     */\r\n    _refreshActivityCard(bulk, selected) {\r\n        this.getElement(this.selectors.INPLACEEDITABLE)?.classList.toggle(this.classes.HIDE, bulk.enabled);\r\n        this.getElement(this.selectors.CARD)?.classList.toggle(this.classes.SELECTED, selected);\r\n        this.element.classList.toggle(this.classes.SELECTED, selected);\r\n    }\r\n\r\n    /**\r\n     * Modify the checkbox element.\r\n     * @param {Boolean} checked the new checked value\r\n     * @param {Boolean} disabled the new disabled value\r\n     */\r\n    _setCheckboxValue(checked, disabled) {\r\n        const checkbox = this.getElement(this.selectors.BULKCHECKBOX);\r\n        if (!checkbox) {\r\n            return;\r\n        }\r\n        checkbox.checked = checked;\r\n        checkbox.disabled = disabled;\r\n        // Is selectable is used to easily scan the page for bulk checkboxes.\r\n        if (disabled) {\r\n            checkbox.removeAttribute('data-is-selectable');\r\n        } else {\r\n            checkbox.dataset.isSelectable = 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if cm bulk selection is available.\r\n     * @param {Object} bulk the current state bulk attribute\r\n     * @returns {Boolean}\r\n     */\r\n    _isCmBulkEnabled(bulk) {\r\n        if (!bulk.enabled) {\r\n            return false;\r\n        }\r\n        return (bulk.selectedType === '' || bulk.selectedType === 'cm');\r\n    }\r\n\r\n    /**\r\n     * Check if the cm id is part of the current bulk selection.\r\n     * @param {Object} bulk the current state bulk attribute\r\n     * @returns {Boolean}\r\n     */\r\n    _isSelected(bulk) {\r\n        if (bulk.selectedType !== 'cm') {\r\n            return false;\r\n        }\r\n        return bulk.selection.includes(this.id);\r\n    }\r\n}\r\n"],"names":["e","_dndcmitem","__esModule","default","_default","DndCmItem","create","this","name","selectors","BULKSELECT","BULKCHECKBOX","CARD","DRAGICON","INPLACEEDITABLE","classes","LOCKED","HIDE","SELECTED","id","element","dataset","stateReady","state","configDragDrop","getElement","classList","add","_refreshBulk","getWatchers","watch","handler","unregister","_refreshCm","setDragImage","_ref","toggle","DRAGGING","dragging","locked","_ref2","bulk","setDraggable","enabled","action","preventDefault","removeAttribute","disabled","_isCmBulkEnabled","selected","_isSelected","_refreshActivityCard","_setCheckboxValue","checked","checkbox","isSelectable","selectedType","selection","includes","_exports"],"mappings":"oJA0BuE,IAAAA;;;;;;;;;;qFAAvEC,YAAuED,EAAvEC,aAAuED,EAAAE,WAAAF,EAAAG,CAAAA,QAAAH,GAExD,MAAAI,iBAAcC,WAAAA,QAKzBC,MAAAA,GAEIC,KAAKC,KAAO,yBAEZD,KAAKE,UAAY,CACbC,WAAY,4BACZC,aAAc,sBACdC,KAAM,gCACNC,SAAU,gBACVC,gBAAiB,+DAGrBP,KAAKQ,QAAU,CACXC,OAAQ,iBACRC,KAAM,SACNC,SAAU,YAGdX,KAAKY,GAAKZ,KAAKa,QAAQC,QAAQF,EACnC,CAMAG,UAAAA,CAAWC,OACPhB,KAAKiB,eAAejB,KAAKY,IACzBZ,KAAKkB,WAAWlB,KAAKE,UAAUI,WAAWa,UAAUC,IAAIpB,KAAKQ,QAAQF,UACrEN,KAAKqB,aAAa,CAACL,aACvB,CAOAM,WAAAA,GACI,MAAO,CACH,CAACC,MAAO,MAAMvB,KAAKY,cAAeY,QAASxB,KAAKyB,YAChD,CAACF,MAAO,MAAMvB,KAAKY,cAAeY,QAASxB,KAAK0B,YAChD,CAACH,MAAO,eAAgBC,QAASxB,KAAKqB,cAE9C,CASAM,YAAAA,GACI,OAAO3B,KAAKkB,WAAWlB,KAAKE,UAAUG,KAC1C,CAQAqB,UAAAA,CAAUE,MAAY,IAAXf,QAACA,SAAQe,KAEhB5B,KAAKa,QAAQM,UAAUU,OAAO7B,KAAKQ,QAAQsB,SAAUjB,QAAQkB,WAAY,GACzE/B,KAAKa,QAAQM,UAAUU,OAAO7B,KAAKQ,QAAQC,OAAQI,QAAQmB,SAAU,GACrEhC,KAAKgC,OAASnB,QAAQmB,MAC1B,CAQAX,YAAAA,CAAYY,OAAU,IAATjB,MAACA,OAAMiB,MAChB,MAAMC,KAAOlB,MAAMkB,KAEnBlC,KAAKmC,cAAcD,KAAKE,SAEpBF,KAAKE,SACLpC,KAAKa,QAAQC,QAAQuB,OAAS,oBAC9BrC,KAAKa,QAAQC,QAAQwB,eAAiB,IAEtCtC,KAAKa,QAAQ0B,gBAAgB,eAC7BvC,KAAKa,QAAQ0B,gBAAgB,wBAGjCvC,KAAKkB,WAAWlB,KAAKE,UAAUC,aAAagB,UAAUU,OAAO7B,KAAKQ,QAAQE,MAAOwB,KAAKE,SAEtF,MAAMI,UAAYxC,KAAKyC,iBAAiBP,MAClCQ,SAAW1C,KAAK2C,YAAYT,MAClClC,KAAK4C,qBAAqBV,KAAMQ,UAChC1C,KAAK6C,kBAAkBH,SAAUF,SACrC,CAQAI,oBAAAA,CAAqBV,KAAMQ,UACvB1C,KAAKkB,WAAWlB,KAAKE,UAAUK,kBAAkBY,UAAUU,OAAO7B,KAAKQ,QAAQE,KAAMwB,KAAKE,SAC1FpC,KAAKkB,WAAWlB,KAAKE,UAAUG,OAAOc,UAAUU,OAAO7B,KAAKQ,QAAQG,SAAU+B,UAC9E1C,KAAKa,QAAQM,UAAUU,OAAO7B,KAAKQ,QAAQG,SAAU+B,SACzD,CAOAG,iBAAAA,CAAkBC,QAASN,UACvB,MAAMO,SAAW/C,KAAKkB,WAAWlB,KAAKE,UAAUE,cAC3C2C,WAGLA,SAASD,QAAUA,QACnBC,SAASP,SAAWA,SAEhBA,SACAO,SAASR,gBAAgB,sBAEzBQ,SAASjC,QAAQkC,aAAe,EAExC,CAOAP,gBAAAA,CAAiBP,MACb,QAAKA,KAAKE,UAGoB,KAAtBF,KAAKe,cAA6C,OAAtBf,KAAKe,aAC7C,CAOAN,WAAAA,CAAYT,MACR,MAA0B,OAAtBA,KAAKe,cAGFf,KAAKgB,UAAUC,SAASnD,KAAKY,GACxC,EACH,OAAAwC,SAAAxD,QAAAC,SAAAuD,SAAAxD,OAAA"}