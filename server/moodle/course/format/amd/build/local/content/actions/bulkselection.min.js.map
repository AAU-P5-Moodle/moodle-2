{"version":3,"file":"bulkselection.min.js","sources":["../../../../src/local/content/actions/bulkselection.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Bulk selection auxiliar methods.\r\n *\r\n * @module     core_courseformat/local/content/actions/bulkselection\r\n * @class      core_courseformat/local/content/actions/bulkselection\r\n * @copyright  2023 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nclass BulkSelector {\r\n\r\n    /**\r\n     * The class constructor.\r\n     * @param {CourseEditor} courseEditor the original actions component.\r\n     */\r\n    constructor(courseEditor) {\r\n        this.courseEditor = courseEditor;\r\n        this.selectors = {\r\n            BULKCMCHECKBOX: `[data-bulkcheckbox][data-action='toggleSelectionCm']`,\r\n            BULKSECTIONCHECKBOX: `[data-bulkcheckbox][data-action='toggleSelectionSection']`,\r\n            CONTENT: `#region-main`,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Process a new selection.\r\n     * @param {Number} id\r\n     * @param {String} elementType cm or section\r\n     * @param {Object} settings special selection settings\r\n     * @param {Boolean} settings.all if the action is over all elements of the same type\r\n     * @param {Boolean} settings.range if the action is over a range of elements\r\n     */\r\n    processNewSelection(id, elementType, settings) {\r\n        const value = !this._isBulkSelected(id, elementType);\r\n        if (settings.all && settings.range) {\r\n            this.switchCurrentSelection();\r\n            return;\r\n        }\r\n        if (!this._isSelectable(id, elementType)) {\r\n            return;\r\n        }\r\n        if (settings.all) {\r\n            if (elementType == 'cm') {\r\n                this._updateBulkCmSiblings(id, value);\r\n            } else {\r\n                this._updateBulkSelectionAll(elementType, value);\r\n            }\r\n            return;\r\n        }\r\n        if (settings.range) {\r\n            this._updateBulkSelectionRange(id, elementType, value);\r\n            return;\r\n        }\r\n        this._updateBulkSelection([id], elementType, value);\r\n    }\r\n\r\n    /**\r\n     * Switch between section and cm selection.\r\n     */\r\n    switchCurrentSelection() {\r\n        const bulk = this.courseEditor.get('bulk');\r\n        if (bulk.selectedType === '' || bulk.selection.length == 0) {\r\n            return;\r\n        }\r\n        const newSelectedType = (bulk.selectedType === 'section') ? 'cm' : 'section';\r\n        let newSelectedIds;\r\n        if (bulk.selectedType === 'section') {\r\n            newSelectedIds = this._getCmIdsFromSections(bulk.selection);\r\n        } else {\r\n            newSelectedIds = this._getSectionIdsFromCms(bulk.selection);\r\n        }\r\n        // Formats can display only a few activities of the section,\r\n        // We need to select on the activities present in the page.\r\n        const affectedIds = [];\r\n        newSelectedIds.forEach(newId => {\r\n            if (this._getSelector(newId, newSelectedType)) {\r\n                affectedIds.push(newId);\r\n            }\r\n        });\r\n        this.courseEditor.dispatch('bulkEnable', true);\r\n        if (affectedIds.length != 0) {\r\n            this._updateBulkSelection(affectedIds, newSelectedType, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select all elements of the current type.\r\n     * @param {Boolean} value the wanted selected value\r\n     */\r\n    selectAll(value) {\r\n        const bulk = this.courseEditor.get('bulk');\r\n        if (bulk.selectedType == '') {\r\n            return;\r\n        }\r\n        if (!value) {\r\n            this.courseEditor.dispatch('bulkEnable', true);\r\n            return;\r\n        }\r\n        const elementType = bulk.selectedType;\r\n        this._updateBulkSelectionAll(elementType, value);\r\n    }\r\n\r\n    /**\r\n     * Checks if all selectable elements are selected.\r\n     * @returns {Boolean} true if all are selected\r\n     */\r\n    checkAllSelected() {\r\n        const bulk = this.courseEditor.get('bulk');\r\n        if (bulk.selectedType == '') {\r\n            return false;\r\n        }\r\n        return this._getContentCheckboxes(bulk.selectedType).every(bulkSelect => {\r\n            if (bulkSelect.disabled) {\r\n                return true;\r\n            }\r\n            // Some sections may not be selectale for bulk actions.\r\n            if (bulk.selectedType == 'section') {\r\n                const section = this.courseEditor.get('section', bulkSelect.dataset.id);\r\n                if (!section.bulkeditable) {\r\n                    return true;\r\n                }\r\n            }\r\n            return bulk.selection.includes(bulkSelect.dataset.id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if the id is part of the current bulk selection.\r\n     * @private\r\n     * @param {Number} id\r\n     * @param {String} elementType\r\n     * @returns {Boolean} if the element is present in the current selection.\r\n     */\r\n    _isBulkSelected(id, elementType) {\r\n        const bulk = this.courseEditor.get('bulk');\r\n        if (bulk.selectedType !== elementType) {\r\n            return false;\r\n        }\r\n        return bulk.selection.includes(id);\r\n    }\r\n\r\n    /**\r\n     * Update the current bulk selection removing or adding Ids.\r\n     * @private\r\n     * @param {Number[]} ids the user selected element id\r\n     * @param {String} elementType cm or section\r\n     * @param {Boolean} value the wanted selected value\r\n     */\r\n    _updateBulkSelection(ids, elementType, value) {\r\n        let mutation = elementType;\r\n        mutation += (value) ? 'Select' : 'Unselect';\r\n        this.courseEditor.dispatch(mutation, ids);\r\n    }\r\n\r\n    /**\r\n     * Get all content bulk selector checkboxes of one type (section/cm).\r\n     * @private\r\n     * @param {String} elementType section or cm\r\n     * @returns {HTMLElement[]} an array with all checkboxes\r\n     */\r\n    _getContentCheckboxes(elementType) {\r\n        const selector = (elementType == 'cm') ? this.selectors.BULKCMCHECKBOX : this.selectors.BULKSECTIONCHECKBOX;\r\n        const checkboxes = document.querySelectorAll(`${this.selectors.CONTENT} ${selector}`);\r\n        // Converting to array because NodeList has less iteration methods.\r\n        return [...checkboxes];\r\n    }\r\n\r\n    /**\r\n     * Validate if an element is selectable in the current page.\r\n     * @private\r\n     * @param {Number} id the user selected element id\r\n     * @param {String} elementType cm or section\r\n     * @return {Boolean}\r\n     */\r\n    _isSelectable(id, elementType) {\r\n        const bulkSelect = this._getSelector(id, elementType);\r\n        if (!bulkSelect || bulkSelect.disabled) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get as specific element checkbox.\r\n     * @private\r\n     * @param {Number} id\r\n     * @param {String} elementType cm or section\r\n     * @returns {HTMLElement|undefined}\r\n     */\r\n    _getSelector(id, elementType) {\r\n        let selector = (elementType == 'cm') ? this.selectors.BULKCMCHECKBOX : this.selectors.BULKSECTIONCHECKBOX;\r\n        selector += `[data-id='${id}']`;\r\n        return document.querySelector(`${this.selectors.CONTENT} ${selector}`);\r\n    }\r\n\r\n    /**\r\n     * Update the current bulk selection when a user uses shift to select a range.\r\n     * @private\r\n     * @param {Number} id the user selected element id\r\n     * @param {String} elementType cm or section\r\n     * @param {Boolean} value the wanted selected value\r\n     */\r\n    _updateBulkSelectionRange(id, elementType, value) {\r\n        const bulk = this.courseEditor.get('bulk');\r\n        let lastSelectedId = bulk.selection.at(-1);\r\n        if (bulk.selectedType !== elementType || lastSelectedId == id) {\r\n            this._updateBulkSelection([id], elementType, value);\r\n            return;\r\n        }\r\n        const affectedIds = [];\r\n        let found = 0;\r\n        this._getContentCheckboxes(elementType).every(bulkSelect => {\r\n            if (bulkSelect.disabled) {\r\n                return true;\r\n            }\r\n            if (elementType == 'section') {\r\n                const section = this.courseEditor.get('section', bulkSelect.dataset.id);\r\n                if (value && !section?.bulkeditable) {\r\n                    return true;\r\n                }\r\n            }\r\n            if (bulkSelect.dataset.id == id || bulkSelect.dataset.id == lastSelectedId) {\r\n                found++;\r\n            }\r\n            if (found == 0) {\r\n                return true;\r\n            }\r\n            affectedIds.push(bulkSelect.dataset.id);\r\n            return found != 2;\r\n        });\r\n        this._updateBulkSelection(affectedIds, elementType, value);\r\n    }\r\n\r\n    /**\r\n     * Select or unselect all cm siblings.\r\n     * @private\r\n     * @param {Number} cmId the user selected element id\r\n     * @param {Boolean} value the wanted selected value\r\n     */\r\n    _updateBulkCmSiblings(cmId, value) {\r\n        const bulk = this.courseEditor.get('bulk');\r\n        if (bulk.selectedType === 'section') {\r\n            return;\r\n        }\r\n        const cm = this.courseEditor.get('cm', cmId);\r\n        const section = this.courseEditor.get('section', cm.sectionid);\r\n        // Formats can display only a few activities of the section,\r\n        // We need to select on the activities selectable in the page.\r\n        const affectedIds = [];\r\n        section.cmlist.forEach(sectionCmId => {\r\n            if (this._isSelectable(sectionCmId, 'cm')) {\r\n                affectedIds.push(sectionCmId);\r\n            }\r\n        });\r\n        this._updateBulkSelection(affectedIds, 'cm', value);\r\n    }\r\n\r\n    /**\r\n     * Select or unselects al elements of the same type.\r\n     * @private\r\n     * @param {String} elementType section or cm\r\n     * @param {Boolean} value if the elements must be selected or unselected.\r\n     */\r\n    _updateBulkSelectionAll(elementType, value) {\r\n        const affectedIds = [];\r\n        this._getContentCheckboxes(elementType).forEach(bulkSelect => {\r\n            if (bulkSelect.disabled) {\r\n                return;\r\n            }\r\n            if (elementType == 'section') {\r\n                const section = this.courseEditor.get('section', bulkSelect.dataset.id);\r\n                if (value && !section?.bulkeditable) {\r\n                    return;\r\n                }\r\n            }\r\n            affectedIds.push(bulkSelect.dataset.id);\r\n        });\r\n        this._updateBulkSelection(affectedIds, elementType, value);\r\n    }\r\n\r\n    /**\r\n     * Get all cm ids from a specific section ids.\r\n     * @private\r\n     * @param {Number[]} sectionIds\r\n     * @returns {Number[]} the cm ids\r\n     */\r\n    _getCmIdsFromSections(sectionIds) {\r\n        const result = [];\r\n        sectionIds.forEach(sectionId => {\r\n            const section = this.courseEditor.get('section', sectionId);\r\n            result.push(...section.cmlist);\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get all section ids containing a specific cm ids.\r\n     * @private\r\n     * @param {Number[]} cmIds\r\n     * @returns {Number[]} the section ids\r\n     */\r\n    _getSectionIdsFromCms(cmIds) {\r\n        const result = new Set();\r\n        cmIds.forEach(cmId => {\r\n            const cm = this.courseEditor.get('cm', cmId);\r\n            if (cm.sectionnumber == 0) {\r\n                return;\r\n            }\r\n            result.add(cm.sectionid);\r\n        });\r\n        return [...result];\r\n    }\r\n}\r\n\r\n/**\r\n * Process a bulk selection toggle action.\r\n * @method\r\n * @param {CourseEditor} courseEditor\r\n * @param {HTMLElement} target the action element\r\n * @param {Event} event\r\n * @param {String} elementType cm or section\r\n */\r\nexport const toggleBulkSelectionAction = function(courseEditor, target, event, elementType) {\r\n    const id = target.dataset.id;\r\n    if (!id) {\r\n        return;\r\n    }\r\n    // When the action cames from a form element (checkbox) we should not preventDefault.\r\n    // If we do it the changechecker module will execute the state change twice.\r\n    if (target.dataset.preventDefault) {\r\n        event.preventDefault();\r\n    }\r\n    // Using shift or alt key can produce text selection.\r\n    document.getSelection().removeAllRanges();\r\n\r\n    const bulkSelector = new BulkSelector(courseEditor);\r\n    bulkSelector.processNewSelection(\r\n        id,\r\n        elementType,\r\n        {\r\n            range: event.shiftKey,\r\n            all: event.altKey,\r\n        }\r\n    );\r\n};\r\n\r\n/**\r\n * Switch the current bulk selection.\r\n * @method\r\n * @param {CourseEditor} courseEditor\r\n */\r\nexport const switchBulkSelection = function(courseEditor) {\r\n    const bulkSelector = new BulkSelector(courseEditor);\r\n    bulkSelector.switchCurrentSelection();\r\n};\r\n\r\n/**\r\n * Select/unselect all element of the selected type.\r\n * @method\r\n * @param {CourseEditor} courseEditor\r\n * @param {Boolean} value if the elements must be selected or unselected.\r\n */\r\nexport const selectAllBulk = function(courseEditor, value) {\r\n    const bulkSelector = new BulkSelector(courseEditor);\r\n    bulkSelector.selectAll(value);\r\n};\r\n\r\n/**\r\n * Check if all possible elements are selected.\r\n * @method\r\n * @param {CourseEditor} courseEditor\r\n * @return {Boolean} if all elements of the current type are selected.\r\n */\r\nexport const checkAllBulkSelected = function(courseEditor) {\r\n    const bulkSelector = new BulkSelector(courseEditor);\r\n    return bulkSelector.checkAllSelected();\r\n};\r\n"],"names":["BulkSelector","constructor","courseEditor","this","selectors","BULKCMCHECKBOX","BULKSECTIONCHECKBOX","CONTENT","processNewSelection","id","elementType","settings","value","_isBulkSelected","all","range","switchCurrentSelection","_isSelectable","_updateBulkCmSiblings","_updateBulkSelectionAll","_updateBulkSelectionRange","_updateBulkSelection","bulk","get","selectedType","selection","length","newSelectedType","newSelectedIds","_getCmIdsFromSections","_getSectionIdsFromCms","affectedIds","forEach","newId","_getSelector","push","dispatch","selectAll","checkAllSelected","_getContentCheckboxes","every","bulkSelect","disabled","dataset","bulkeditable","includes","ids","mutation","selector","document","querySelectorAll","querySelector","lastSelectedId","at","found","section","cmId","cm","sectionid","cmlist","sectionCmId","sectionIds","result","sectionId","cmIds","Set","sectionnumber","add","_exports","toggleBulkSelectionAction","target","event","preventDefault","getSelection","removeAllRanges","shiftKey","altKey","switchBulkSelection","selectAllBulk","checkAllBulkSelected"],"mappings":"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"}