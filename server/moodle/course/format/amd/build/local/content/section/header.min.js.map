{"version":3,"file":"header.min.js","sources":["../../../../src/local/content/section/header.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course section header component.\r\n *\r\n * This component is used to control specific course section interactions like drag and drop.\r\n *\r\n * @module     core_courseformat/local/content/section/header\r\n * @class      core_courseformat/local/content/section/header\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport DndSectionItem from 'core_courseformat/local/courseeditor/dndsectionitem';\r\n\r\nexport default class extends DndSectionItem {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     *\r\n     * @param {Object} descriptor\r\n     */\r\n    create(descriptor) {\r\n        // Optional component name for debugging.\r\n        this.name = 'content_section_header';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            ACTIONSMENU: `.section_action_menu`,\r\n            BULKSELECT: `[data-for='sectionBulkSelect']`,\r\n            BULKCHECKBOX: `[data-bulkcheckbox]`,\r\n            CHEVRON: `[data-for='sectiontoggler']`,\r\n        };\r\n        this.classes = {\r\n            HIDE: 'd-none',\r\n            SELECTED: 'selected',\r\n        };\r\n        // Get main info from the descriptor.\r\n        this.id = descriptor.id;\r\n        this.section = descriptor.section;\r\n        this.course = descriptor.course;\r\n        this.fullregion = descriptor.fullregion;\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     *\r\n     * @param {Object} state the initial state\r\n     */\r\n    stateReady(state) {\r\n        this.configDragDrop(this.id, state, this.fullregion);\r\n        this._refreshBulk({state});\r\n    }\r\n\r\n    /**\r\n     * Component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        return [\r\n            {watch: `bulk:updated`, handler: this._refreshBulk},\r\n            {watch: `section[${this.id}].title:updated`, handler: this._refreshSectionTitle},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Update the section when the section name changes.\r\n     *\r\n     * The section header have several HTML that uses the section name\r\n     * for accessibility and behat tests. This method updates them all.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.element the section info\r\n     */\r\n    _refreshSectionTitle(param) {\r\n        const element = param.element;\r\n        this.getElement(this.selectors.CHEVRON)?.setAttribute(\"aria-label\", element.title);\r\n        this._refreshSectionBulkSelector(param);\r\n    }\r\n\r\n    /**\r\n     * Update the bulk checkbox when the section name changes.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.element the section info\r\n     */\r\n    async _refreshSectionBulkSelector({element}) {\r\n        const checkbox = this.getElement(this.selectors.BULKCHECKBOX);\r\n        if (!checkbox) {\r\n            return;\r\n        }\r\n        const newLabel = await this.reactive.getFormatString('selectsection', element.title);\r\n        checkbox.title = newLabel;\r\n        const label = this.getElement(`label[for='${checkbox.id}']`);\r\n        if (label) {\r\n            label.innerText = newLabel;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update a bulk options.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.state the state data\r\n     */\r\n    _refreshBulk({state}) {\r\n        const bulk = state.bulk;\r\n        if (!this._isSectionBulkEditable()) {\r\n            return;\r\n        }\r\n        // For now, dragging elements in bulk is not possible.\r\n        this.setDraggable(!bulk.enabled);\r\n        this.getElement(this.selectors.BULKSELECT)?.classList.toggle(this.classes.HIDE, !bulk.enabled);\r\n\r\n        const disabled = !this._isSectionBulkEnabled(bulk);\r\n        const selected = this._isSelected(bulk);\r\n        this.element.classList.toggle(this.classes.SELECTED, selected);\r\n        this._setCheckboxValue(selected, disabled);\r\n    }\r\n\r\n    /**\r\n     * Modify the checkbox element.\r\n     * @param {Boolean} checked the new checked value\r\n     * @param {Boolean} disabled the new disabled value\r\n     */\r\n    _setCheckboxValue(checked, disabled) {\r\n        const checkbox = this.getElement(this.selectors.BULKCHECKBOX);\r\n        if (!checkbox) {\r\n            return;\r\n        }\r\n        checkbox.checked = checked;\r\n        checkbox.disabled = disabled;\r\n        // Is selectable is used to easily scan the page for bulk checkboxes.\r\n        if (disabled) {\r\n            checkbox.removeAttribute('data-is-selectable');\r\n        } else {\r\n            checkbox.dataset.isSelectable = 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if cm bulk selection is available.\r\n     * @param {Object} bulk the current state bulk attribute\r\n     * @returns {Boolean}\r\n     */\r\n    _isSectionBulkEnabled(bulk) {\r\n        if (!bulk.enabled) {\r\n            return false;\r\n        }\r\n        return (bulk.selectedType === '' || bulk.selectedType === 'section');\r\n    }\r\n\r\n    /**\r\n     * Check if the section is bulk editable.\r\n     * @return {Boolean}\r\n     */\r\n    _isSectionBulkEditable() {\r\n        const section = this.reactive.get('section', this.id);\r\n        return section?.bulkeditable ?? false;\r\n    }\r\n\r\n    /**\r\n     * Check if the cm id is part of the current bulk selection.\r\n     * @param {Object} bulk the current state bulk attribute\r\n     * @returns {Boolean}\r\n     */\r\n    _isSelected(bulk) {\r\n        if (bulk.selectedType !== 'section') {\r\n            return false;\r\n        }\r\n        return bulk.selection.includes(this.id);\r\n    }\r\n}\r\n"],"names":["e","_dndsectionitem","__esModule","default","_default","DndSectionItem","create","descriptor","this","name","selectors","ACTIONSMENU","BULKSELECT","BULKCHECKBOX","CHEVRON","classes","HIDE","SELECTED","id","section","course","fullregion","stateReady","state","configDragDrop","_refreshBulk","getWatchers","watch","handler","_refreshSectionTitle","param","element","getElement","setAttribute","title","_refreshSectionBulkSelector","_ref","checkbox","newLabel","reactive","getFormatString","label","innerText","_ref2","bulk","_isSectionBulkEditable","setDraggable","enabled","classList","toggle","disabled","_isSectionBulkEnabled","selected","_isSelected","_setCheckboxValue","checked","removeAttribute","dataset","isSelectable","selectedType","get","bulkeditable","selection","includes","_exports"],"mappings":"8JA0BiF,IAAAA;;;;;;;;;;qFAAjFC,iBAAiFD,EAAjFC,kBAAiFD,EAAAE,WAAAF,EAAAG,CAAAA,QAAAH,GAElE,MAAAI,iBAAcC,gBAAAA,QAOzBC,MAAAA,CAAOC,YAEHC,KAAKC,KAAO,yBAEZD,KAAKE,UAAY,CACbC,YAAa,uBACbC,WAAY,iCACZC,aAAc,sBACdC,QAAS,+BAEbN,KAAKO,QAAU,CACXC,KAAM,SACNC,SAAU,YAGdT,KAAKU,GAAKX,WAAWW,GACrBV,KAAKW,QAAUZ,WAAWY,QAC1BX,KAAKY,OAASb,WAAWa,OACzBZ,KAAKa,WAAad,WAAWc,UACjC,CAOAC,UAAAA,CAAWC,OACPf,KAAKgB,eAAehB,KAAKU,GAAIK,MAAOf,KAAKa,YACzCb,KAAKiB,aAAa,CAACF,aACvB,CAOAG,WAAAA,GACI,MAAO,CACH,CAACC,MAAO,eAAgBC,QAASpB,KAAKiB,cACtC,CAACE,MAAO,WAAWnB,KAAKU,oBAAqBU,QAASpB,KAAKqB,sBAEnE,CAWAA,oBAAAA,CAAqBC,OACjB,MAAMC,QAAUD,MAAMC,QACtBvB,KAAKwB,WAAWxB,KAAKE,UAAUI,UAAUmB,aAAa,aAAcF,QAAQG,OAC5E1B,KAAK2B,4BAA4BL,MACrC,CAQA,iCAAMK,CAA2BC,MAAY,IAAXL,QAACA,SAAQK,KACvC,MAAMC,SAAW7B,KAAKwB,WAAWxB,KAAKE,UAAUG,cAChD,IAAKwB,SACD,OAEJ,MAAMC,eAAiB9B,KAAK+B,SAASC,gBAAgB,gBAAiBT,QAAQG,OAC9EG,SAASH,MAAQI,SACjB,MAAMG,MAAQjC,KAAKwB,WAAW,cAAcK,SAASnB,QACjDuB,QACAA,MAAMC,UAAYJ,SAE1B,CAQAb,YAAAA,CAAYkB,OAAU,IAATpB,MAACA,OAAMoB,MAChB,MAAMC,KAAOrB,MAAMqB,KACnB,IAAKpC,KAAKqC,yBACN,OAGJrC,KAAKsC,cAAcF,KAAKG,SACxBvC,KAAKwB,WAAWxB,KAAKE,UAAUE,aAAaoC,UAAUC,OAAOzC,KAAKO,QAAQC,MAAO4B,KAAKG,SAEtF,MAAMG,UAAY1C,KAAK2C,sBAAsBP,MACvCQ,SAAW5C,KAAK6C,YAAYT,MAClCpC,KAAKuB,QAAQiB,UAAUC,OAAOzC,KAAKO,QAAQE,SAAUmC,UACrD5C,KAAK8C,kBAAkBF,SAAUF,SACrC,CAOAI,iBAAAA,CAAkBC,QAASL,UACvB,MAAMb,SAAW7B,KAAKwB,WAAWxB,KAAKE,UAAUG,cAC3CwB,WAGLA,SAASkB,QAAUA,QACnBlB,SAASa,SAAWA,SAEhBA,SACAb,SAASmB,gBAAgB,sBAEzBnB,SAASoB,QAAQC,aAAe,EAExC,CAOAP,qBAAAA,CAAsBP,MAClB,QAAKA,KAAKG,UAGoB,KAAtBH,KAAKe,cAA6C,YAAtBf,KAAKe,aAC7C,CAMAd,sBAAAA,GACI,MAAM1B,QAAUX,KAAK+B,SAASqB,IAAI,UAAWpD,KAAKU,IAClD,OAAOC,SAAS0C,eAAgB,CACpC,CAOAR,WAAAA,CAAYT,MACR,MAA0B,YAAtBA,KAAKe,cAGFf,KAAKkB,UAAUC,SAASvD,KAAKU,GACxC,EACH,OAAA8C,SAAA7D,QAAAC,SAAA4D,SAAA7D,OAAA"}