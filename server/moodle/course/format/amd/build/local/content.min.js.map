{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course index main component.\r\n *\r\n * @module     core_courseformat/local/content\r\n * @class      core_courseformat/local/content\r\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {BaseComponent} from 'core/reactive';\r\nimport {debounce} from 'core/utils';\r\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\r\nimport Config from 'core/config';\r\nimport inplaceeditable from 'core/inplace_editable';\r\nimport Section from 'core_courseformat/local/content/section';\r\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\r\nimport Fragment from 'core/fragment';\r\nimport Templates from 'core/templates';\r\nimport DispatchActions from 'core_courseformat/local/content/actions';\r\nimport * as CourseEvents from 'core_course/events';\r\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\r\nimport jQuery from 'jquery';\r\nimport Pending from 'core/pending';\r\n\r\nexport default class Component extends BaseComponent {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     *\r\n     * @param {Object} descriptor the component descriptor\r\n     */\r\n    create(descriptor) {\r\n        // Optional component name for debugging.\r\n        this.name = 'course_format';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            SECTION: `[data-for='section']`,\r\n            SECTION_ITEM: `[data-for='section_title']`,\r\n            SECTION_CMLIST: `[data-for='cmlist']`,\r\n            COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\r\n            CM: `[data-for='cmitem']`,\r\n            TOGGLER: `[data-action=\"togglecoursecontentsection\"]`,\r\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\r\n            TOGGLEALL: `[data-toggle=\"toggleall\"]`,\r\n            // Formats can override the activity tag but a default one is needed to create new elements.\r\n            ACTIVITYTAG: 'li',\r\n            SECTIONTAG: 'li',\r\n        };\r\n        this.selectorGenerators = {\r\n            cmNameFor: (id) => `[data-cm-name-for='${id}']`,\r\n            sectionNameFor: (id) => `[data-section-name-for='${id}']`,\r\n        };\r\n        // Default classes to toggle on refresh.\r\n        this.classes = {\r\n            COLLAPSED: `collapsed`,\r\n            // Course content classes.\r\n            ACTIVITY: `activity`,\r\n            STATEDREADY: `stateready`,\r\n            SECTION: `section`,\r\n        };\r\n        // Array to save dettached elements during element resorting.\r\n        this.dettachedCms = {};\r\n        this.dettachedSections = {};\r\n        // Index of sections and cms components.\r\n        this.sections = {};\r\n        this.cms = {};\r\n        // The page section return.\r\n        this.sectionReturn = descriptor.sectionReturn ?? null;\r\n        this.debouncedReloads = new Map();\r\n    }\r\n\r\n    /**\r\n     * Static method to create a component instance form the mustahce template.\r\n     *\r\n     * @param {string} target the DOM main element or its ID\r\n     * @param {object} selectors optional css selector overrides\r\n     * @param {number} sectionReturn the content section return\r\n     * @return {Component}\r\n     */\r\n    static init(target, selectors, sectionReturn) {\r\n        return new Component({\r\n            element: document.getElementById(target),\r\n            reactive: getCurrentCourseEditor(),\r\n            selectors,\r\n            sectionReturn,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     *\r\n     * @param {Object} state the state data\r\n     */\r\n    stateReady(state) {\r\n        this._indexContents();\r\n        // Activate section togglers.\r\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\r\n\r\n        // Collapse/Expand all sections button.\r\n        const toogleAll = this.getElement(this.selectors.TOGGLEALL);\r\n        if (toogleAll) {\r\n\r\n            // Ensure collapse menu button adds aria-controls attribute referring to each collapsible element.\r\n            const collapseElements = this.getElements(this.selectors.COLLAPSE);\r\n            const collapseElementIds = [...collapseElements].map(element => element.id);\r\n            toogleAll.setAttribute('aria-controls', collapseElementIds.join(' '));\r\n\r\n            this.addEventListener(toogleAll, 'click', this._allSectionToggler);\r\n            this.addEventListener(toogleAll, 'keydown', e => {\r\n                // Collapse/expand all sections when Space key is pressed on the toggle button.\r\n                if (e.key === ' ') {\r\n                    this._allSectionToggler(e);\r\n                }\r\n            });\r\n            this._refreshAllSectionsToggler(state);\r\n        }\r\n\r\n        if (this.reactive.supportComponents) {\r\n            // Actions are only available in edit mode.\r\n            if (this.reactive.isEditing) {\r\n                new DispatchActions(this);\r\n            }\r\n\r\n            // Mark content as state ready.\r\n            this.element.classList.add(this.classes.STATEDREADY);\r\n        }\r\n\r\n        // Capture completion events.\r\n        this.addEventListener(\r\n            this.element,\r\n            CourseEvents.manualCompletionToggled,\r\n            this._completionHandler\r\n        );\r\n\r\n        // Capture page scroll to update page item.\r\n        this.addEventListener(\r\n            document,\r\n            \"scroll\",\r\n            this._scrollHandler\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Setup sections toggler.\r\n     *\r\n     * Toggler click is delegated to the main course content element because new sections can\r\n     * appear at any moment and this way we prevent accidental double bindings.\r\n     *\r\n     * @param {Event} event the triggered event\r\n     */\r\n    _sectionTogglers(event) {\r\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\r\n        const closestCollapse = event.target.closest(this.selectors.COLLAPSE);\r\n        // Assume that chevron is the only collapse toggler in a section heading;\r\n        // I think this is the most efficient way to verify at the moment.\r\n        const isChevron = closestCollapse?.closest(this.selectors.SECTION_ITEM);\r\n\r\n        if (sectionlink || isChevron) {\r\n\r\n            const section = event.target.closest(this.selectors.SECTION);\r\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\r\n            const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\r\n\r\n            const sectionId = section.getAttribute('data-id');\r\n            this.reactive.dispatch(\r\n                'sectionContentCollapsed',\r\n                [sectionId],\r\n                !isCollapsed,\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the collapse/expand all sections button.\r\n     *\r\n     * Toggler click is delegated to the main course content element because new sections can\r\n     * appear at any moment and this way we prevent accidental double bindings.\r\n     *\r\n     * @param {Event} event the triggered event\r\n     */\r\n    _allSectionToggler(event) {\r\n        event.preventDefault();\r\n\r\n        const target = event.target.closest(this.selectors.TOGGLEALL);\r\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\r\n\r\n        const course = this.reactive.get('course');\r\n        this.reactive.dispatch(\r\n            'sectionContentCollapsed',\r\n            course.sectionlist ?? [],\r\n            !isAllCollapsed\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Return the component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        // Section return is a global page variable but most formats define it just before start printing\r\n        // the course content. This is the reason why we define this page setting here.\r\n        this.reactive.sectionReturn = this.sectionReturn;\r\n\r\n        // Check if the course format is compatible with reactive components.\r\n        if (!this.reactive.supportComponents) {\r\n            return [];\r\n        }\r\n        return [\r\n            // State changes that require to reload some course modules.\r\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\r\n            {watch: `cm.stealth:updated`, handler: this._reloadCm},\r\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\r\n            {watch: `cm.indent:updated`, handler: this._reloadCm},\r\n            {watch: `cm.groupmode:updated`, handler: this._reloadCm},\r\n            {watch: `cm.name:updated`, handler: this._refreshCmName},\r\n            // Update section number and title.\r\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\r\n            {watch: `section.title:updated`, handler: this._refreshSectionTitle},\r\n            // Collapse and expand sections.\r\n            {watch: `section.contentcollapsed:updated`, handler: this._refreshSectionCollapsed},\r\n            // Sections and cm sorting.\r\n            {watch: `transaction:start`, handler: this._startProcessing},\r\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\r\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\r\n            // Section visibility.\r\n            {watch: `section.visible:updated`, handler: this._reloadSection},\r\n            // Reindex sections and cms.\r\n            {watch: `state:updated`, handler: this._indexContents},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Update a course module name on the whole page.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshCmName({element}) {\r\n        // Update classes.\r\n        // Replace the text content of the cm name.\r\n        const allCmNamesFor = this.getElements(\r\n            this.selectorGenerators.cmNameFor(element.id)\r\n        );\r\n        allCmNamesFor.forEach((cmNameFor) => {\r\n            cmNameFor.textContent = element.name;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update section collapsed state via bootstrap 4 if necessary.\r\n     *\r\n     * Formats that do not use bootstrap 4 must override this method in order to keep the section\r\n     * toggling working.\r\n     *\r\n     * @param {object} args\r\n     * @param {Object} args.state The state data\r\n     * @param {Object} args.element The element to update\r\n     */\r\n    _refreshSectionCollapsed({state, element}) {\r\n        const target = this.getElement(this.selectors.SECTION, element.id);\r\n        if (!target) {\r\n            throw new Error(`Unknown section with ID ${element.id}`);\r\n        }\r\n        // Check if it is already done.\r\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\r\n        const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\r\n\r\n        if (element.contentcollapsed !== isCollapsed) {\r\n            let collapsibleId = toggler.dataset.target ?? toggler.getAttribute(\"href\");\r\n            if (!collapsibleId) {\r\n                return;\r\n            }\r\n            collapsibleId = collapsibleId.replace('#', '');\r\n            const collapsible = document.getElementById(collapsibleId);\r\n            if (!collapsible) {\r\n                return;\r\n            }\r\n\r\n            // Course index is based on Bootstrap 4 collapsibles. To collapse them we need jQuery to\r\n            // interact with collapsibles methods. Hopefully, this will change in Bootstrap 5 because\r\n            // it does not require jQuery anymore (when MDL-71979 is integrated).\r\n            jQuery(collapsible).collapse(element.contentcollapsed ? 'hide' : 'show');\r\n        }\r\n\r\n        this._refreshAllSectionsToggler(state);\r\n    }\r\n\r\n    /**\r\n     * Refresh the collapse/expand all sections element.\r\n     *\r\n     * @param {Object} state The state data\r\n     */\r\n    _refreshAllSectionsToggler(state) {\r\n        const target = this.getElement(this.selectors.TOGGLEALL);\r\n        if (!target) {\r\n            return;\r\n        }\r\n        // Check if we have all sections collapsed/expanded.\r\n        let allcollapsed = true;\r\n        let allexpanded = true;\r\n        state.section.forEach(\r\n            section => {\r\n                allcollapsed = allcollapsed && section.contentcollapsed;\r\n                allexpanded = allexpanded && !section.contentcollapsed;\r\n            }\r\n        );\r\n        if (allcollapsed) {\r\n            target.classList.add(this.classes.COLLAPSED);\r\n            target.setAttribute('aria-expanded', false);\r\n        }\r\n        if (allexpanded) {\r\n            target.classList.remove(this.classes.COLLAPSED);\r\n            target.setAttribute('aria-expanded', true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the component to start a transaction.\r\n     *\r\n     * Some of the course actions replaces the current DOM element with a new one before updating the\r\n     * course state. This means the component cannot preload any index properly until the transaction starts.\r\n     *\r\n     */\r\n    _startProcessing() {\r\n        // During a section or cm sorting, some elements could be dettached from the DOM and we\r\n        // need to store somewhare in case they are needed later.\r\n        this.dettachedCms = {};\r\n        this.dettachedSections = {};\r\n    }\r\n\r\n    /**\r\n     * Activity manual completion listener.\r\n     *\r\n     * @param {Event} event the custom ecent\r\n     */\r\n    _completionHandler({detail}) {\r\n        if (detail === undefined) {\r\n            return;\r\n        }\r\n        this.reactive.dispatch('cmCompletion', [detail.cmid], detail.completed);\r\n    }\r\n\r\n    /**\r\n     * Check the current page scroll and update the active element if necessary.\r\n     */\r\n    _scrollHandler() {\r\n        const pageOffset = window.scrollY;\r\n        const items = this.reactive.getExporter().allItemsArray(this.reactive.state);\r\n        // Check what is the active element now.\r\n        let pageItem = null;\r\n        items.every(item => {\r\n            const index = (item.type === 'section') ? this.sections : this.cms;\r\n            if (index[item.id] === undefined) {\r\n                return true;\r\n            }\r\n\r\n            const element = index[item.id].element;\r\n            pageItem = item;\r\n            return pageOffset >= element.offsetTop;\r\n        });\r\n        if (pageItem) {\r\n            this.reactive.dispatch('setPageItem', pageItem.type, pageItem.id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update a course section when the section number changes.\r\n     *\r\n     * The courseActions module used for most course section tools still depends on css classes and\r\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\r\n     * the\r\n     *\r\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\r\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\r\n     *\r\n     * @param {Object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshSectionNumber({element}) {\r\n        // Find the element.\r\n        const target = this.getElement(this.selectors.SECTION, element.id);\r\n        if (!target) {\r\n            // Job done. Nothing to refresh.\r\n            return;\r\n        }\r\n        // Update section numbers in all data, css and YUI attributes.\r\n        target.id = `section-${element.number}`;\r\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\r\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\r\n        // use it for legacy purposes.\r\n        target.dataset.sectionid = element.number;\r\n        // The data-number is the attribute used by components to store the section number.\r\n        target.dataset.number = element.number;\r\n\r\n        // Update title and title inplace editable, if any.\r\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\r\n        if (inplace) {\r\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\r\n            // to make sure the inplace editable still represents the same itemid.\r\n            const currentvalue = inplace.getValue();\r\n            const currentitemid = inplace.getItemId();\r\n            // Unnamed sections must be recalculated.\r\n            if (inplace.getValue() === '') {\r\n                // The value to send can be an empty value if it is a default name.\r\n                if (currentitemid == element.id && (currentvalue != element.rawtitle || element.rawtitle == '')) {\r\n                    inplace.setValue(element.rawtitle);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update a course section name on the whole page.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshSectionTitle({element}) {\r\n        // Replace the text content of the section name in the whole page.\r\n        const allSectionNamesFor = document.querySelectorAll(\r\n            this.selectorGenerators.sectionNameFor(element.id)\r\n        );\r\n        allSectionNamesFor.forEach((sectionNameFor) => {\r\n            sectionNameFor.textContent = element.title;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Refresh a section cm list.\r\n     *\r\n     * @param {Object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshSectionCmlist({element}) {\r\n        const cmlist = element.cmlist ?? [];\r\n        const section = this.getElement(this.selectors.SECTION, element.id);\r\n        const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\r\n        // A method to create a fake element to be replaced when the item is ready.\r\n        const createCm = this._createCmItem.bind(this);\r\n        if (listparent) {\r\n            this._fixOrder(listparent, cmlist, this.selectors.CM, this.dettachedCms, createCm);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh the section list.\r\n     *\r\n     * @param {Object} param\r\n     * @param {Object} param.state the full state object.\r\n     */\r\n    _refreshCourseSectionlist({state}) {\r\n        // If we have a section return means we only show a single section so no need to fix order.\r\n        if (this.reactive.sectionReturn !== null) {\r\n            return;\r\n        }\r\n        const sectionlist = this.reactive.getExporter().listedSectionIds(state);\r\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\r\n        // For now section cannot be created at a frontend level.\r\n        const createSection = this._createSectionItem.bind(this);\r\n        if (listparent) {\r\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Regenerate content indexes.\r\n     *\r\n     * This method is used when a legacy action refresh some content element.\r\n     */\r\n    _indexContents() {\r\n        // Find unindexed sections.\r\n        this._scanIndex(\r\n            this.selectors.SECTION,\r\n            this.sections,\r\n            (item) => {\r\n                return new Section(item);\r\n            }\r\n        );\r\n\r\n        // Find unindexed cms.\r\n        this._scanIndex(\r\n            this.selectors.CM,\r\n            this.cms,\r\n            (item) => {\r\n                return new CmItem(item);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Reindex a content (section or cm) of the course content.\r\n     *\r\n     * This method is used internally by _indexContents.\r\n     *\r\n     * @param {string} selector the DOM selector to scan\r\n     * @param {*} index the index attribute to update\r\n     * @param {*} creationhandler method to create a new indexed element\r\n     */\r\n    _scanIndex(selector, index, creationhandler) {\r\n        const items = this.getElements(`${selector}:not([data-indexed])`);\r\n        items.forEach((item) => {\r\n            if (!item?.dataset?.id) {\r\n                return;\r\n            }\r\n            // Delete previous item component.\r\n            if (index[item.dataset.id] !== undefined) {\r\n                index[item.dataset.id].unregister();\r\n            }\r\n            // Create the new component.\r\n            index[item.dataset.id] = creationhandler({\r\n                ...this,\r\n                element: item,\r\n            });\r\n            // Mark as indexed.\r\n            item.dataset.indexed = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reload a course module contents.\r\n     *\r\n     * Most course module HTML is still strongly backend dependant.\r\n     * Some changes require to get a new version of the module.\r\n     *\r\n     * @param {object} param0 the watcher details\r\n     * @param {object} param0.element the state object\r\n     */\r\n    _reloadCm({element}) {\r\n        if (!this.getElement(this.selectors.CM, element.id)) {\r\n            return;\r\n        }\r\n        const debouncedReload = this._getDebouncedReloadCm(element.id);\r\n        debouncedReload();\r\n    }\r\n\r\n    /**\r\n     * Generate or get a reload CM debounced function.\r\n     * @param {Number} cmId\r\n     * @returns {Function} the debounced reload function\r\n     */\r\n    _getDebouncedReloadCm(cmId) {\r\n        const pendingKey = `courseformat/content:reloadCm_${cmId}`;\r\n        let debouncedReload = this.debouncedReloads.get(pendingKey);\r\n        if (debouncedReload) {\r\n            return debouncedReload;\r\n        }\r\n        const reload = () => {\r\n            const pendingReload = new Pending(pendingKey);\r\n            this.debouncedReloads.delete(pendingKey);\r\n            const cmitem = this.getElement(this.selectors.CM, cmId);\r\n            if (!cmitem) {\r\n                return pendingReload.resolve();\r\n            }\r\n            const promise = Fragment.loadFragment(\r\n                'core_courseformat',\r\n                'cmitem',\r\n                Config.courseContextId,\r\n                {\r\n                    id: cmId,\r\n                    courseid: Config.courseId,\r\n                    sr: this.reactive.sectionReturn ?? null,\r\n                }\r\n            );\r\n            promise.then((html, js) => {\r\n                // Other state change can reload the CM or the section before this one.\r\n                if (!document.contains(cmitem)) {\r\n                    pendingReload.resolve();\r\n                    return false;\r\n                }\r\n                Templates.replaceNode(cmitem, html, js);\r\n                this._indexContents();\r\n                pendingReload.resolve();\r\n                return true;\r\n            }).catch(() => {\r\n                pendingReload.resolve();\r\n            });\r\n            return pendingReload;\r\n        };\r\n        debouncedReload = debounce(\r\n            reload,\r\n            200,\r\n            {\r\n                cancel: true, pending: true\r\n            }\r\n        );\r\n        this.debouncedReloads.set(pendingKey, debouncedReload);\r\n        return debouncedReload;\r\n    }\r\n\r\n    /**\r\n     * Cancel the active reload CM debounced function, if any.\r\n     * @param {Number} cmId\r\n     */\r\n    _cancelDebouncedReloadCm(cmId) {\r\n        const pendingKey = `courseformat/content:reloadCm_${cmId}`;\r\n        const debouncedReload = this.debouncedReloads.get(pendingKey);\r\n        if (!debouncedReload) {\r\n            return;\r\n        }\r\n        debouncedReload.cancel();\r\n        this.debouncedReloads.delete(pendingKey);\r\n    }\r\n\r\n    /**\r\n     * Reload a course section contents.\r\n     *\r\n     * Section HTML is still strongly backend dependant.\r\n     * Some changes require to get a new version of the section.\r\n     *\r\n     * @param {details} param0 the watcher details\r\n     * @param {object} param0.element the state object\r\n     */\r\n    _reloadSection({element}) {\r\n        const pendingReload = new Pending(`courseformat/content:reloadSection_${element.id}`);\r\n        const sectionitem = this.getElement(this.selectors.SECTION, element.id);\r\n        if (sectionitem) {\r\n            // Cancel any pending reload because the section will reload cms too.\r\n            for (const cmId of element.cmlist) {\r\n                this._cancelDebouncedReloadCm(cmId);\r\n            }\r\n            const promise = Fragment.loadFragment(\r\n                'core_courseformat',\r\n                'section',\r\n                Config.courseContextId,\r\n                {\r\n                    id: element.id,\r\n                    courseid: Config.courseId,\r\n                    sr: this.reactive.sectionReturn ?? null,\r\n                }\r\n            );\r\n            promise.then((html, js) => {\r\n                Templates.replaceNode(sectionitem, html, js);\r\n                this._indexContents();\r\n                pendingReload.resolve();\r\n            }).catch(() => {\r\n                pendingReload.resolve();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new course module item in a section.\r\n     *\r\n     * Thos method will append a fake item in the container and trigger an ajax request to\r\n     * replace the fake element by the real content.\r\n     *\r\n     * @param {Element} container the container element (section)\r\n     * @param {Number} cmid the course-module ID\r\n     * @returns {Element} the created element\r\n     */\r\n    _createCmItem(container, cmid) {\r\n        const newItem = document.createElement(this.selectors.ACTIVITYTAG);\r\n        newItem.dataset.for = 'cmitem';\r\n        newItem.dataset.id = cmid;\r\n        // The legacy actions.js requires a specific ID and class to refresh the CM.\r\n        newItem.id = `module-${cmid}`;\r\n        newItem.classList.add(this.classes.ACTIVITY);\r\n        container.append(newItem);\r\n        this._reloadCm({\r\n            element: this.reactive.get('cm', cmid),\r\n        });\r\n        return newItem;\r\n    }\r\n\r\n    /**\r\n     * Create a new section item.\r\n     *\r\n     * This method will append a fake item in the container and trigger an ajax request to\r\n     * replace the fake element by the real content.\r\n     *\r\n     * @param {Element} container the container element (section)\r\n     * @param {Number} sectionid the course-module ID\r\n     * @returns {Element} the created element\r\n     */\r\n    _createSectionItem(container, sectionid) {\r\n        const section = this.reactive.get('section', sectionid);\r\n        const newItem = document.createElement(this.selectors.SECTIONTAG);\r\n        newItem.dataset.for = 'section';\r\n        newItem.dataset.id = sectionid;\r\n        newItem.dataset.number = section.number;\r\n        // The legacy actions.js requires a specific ID and class to refresh the section.\r\n        newItem.id = `section-${sectionid}`;\r\n        newItem.classList.add(this.classes.SECTION);\r\n        container.append(newItem);\r\n        this._reloadSection({\r\n            element: section,\r\n        });\r\n        return newItem;\r\n    }\r\n\r\n    /**\r\n     * Fix/reorder the section or cms order.\r\n     *\r\n     * @param {Element} container the HTML element to reorder.\r\n     * @param {Array} neworder an array with the ids order\r\n     * @param {string} selector the element selector\r\n     * @param {Object} dettachedelements a list of dettached elements\r\n     * @param {function} createMethod method to create missing elements\r\n     */\r\n    async _fixOrder(container, neworder, selector, dettachedelements, createMethod) {\r\n        if (container === undefined) {\r\n            return;\r\n        }\r\n\r\n        // Empty lists should not be visible.\r\n        if (!neworder.length) {\r\n            container.classList.add('hidden');\r\n            container.innerHTML = '';\r\n            return;\r\n        }\r\n\r\n        // Grant the list is visible (in case it was empty).\r\n        container.classList.remove('hidden');\r\n\r\n        // Move the elements in order at the beginning of the list.\r\n        neworder.forEach((itemid, index) => {\r\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\r\n            if (item === undefined) {\r\n                // Missing elements cannot be sorted.\r\n                return;\r\n            }\r\n            // Get the current elemnt at that position.\r\n            const currentitem = container.children[index];\r\n            if (currentitem === undefined) {\r\n                container.append(item);\r\n                return;\r\n            }\r\n            if (currentitem !== item) {\r\n                container.insertBefore(item, currentitem);\r\n            }\r\n        });\r\n\r\n        // Dndupload add a fake element we need to keep.\r\n        let dndFakeActivity;\r\n\r\n        // Remove the remaining elements.\r\n        while (container.children.length > neworder.length) {\r\n            const lastchild = container.lastChild;\r\n            if (lastchild?.classList?.contains('dndupload-preview')) {\r\n                dndFakeActivity = lastchild;\r\n            } else {\r\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\r\n            }\r\n            container.removeChild(lastchild);\r\n        }\r\n        // Restore dndupload fake element.\r\n        if (dndFakeActivity) {\r\n            container.append(dndFakeActivity);\r\n        }\r\n    }\r\n}\r\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireDefault","__esModule","default","_config","_inplace_editable","_section","_cmitem","_fragment","_templates","_actions","CourseEvents","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","_jquery","_pending","Component","BaseComponent","create","descriptor","this","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","TOGGLER","COLLAPSE","TOGGLEALL","ACTIVITYTAG","SECTIONTAG","selectorGenerators","cmNameFor","id","sectionNameFor","classes","COLLAPSED","ACTIVITY","STATEDREADY","dettachedCms","dettachedSections","sections","cms","sectionReturn","debouncedReloads","Map","init","target","element","document","getElementById","reactive","getCurrentCourseEditor","stateReady","state","_indexContents","addEventListener","_sectionTogglers","toogleAll","getElement","collapseElementIds","getElements","map","setAttribute","join","_allSectionToggler","key","_refreshAllSectionsToggler","supportComponents","isEditing","DispatchActions","classList","add","manualCompletionToggled","_completionHandler","_scrollHandler","event","sectionlink","closest","closestCollapse","isChevron","section","toggler","querySelector","isCollapsed","contains","sectionId","getAttribute","dispatch","preventDefault","isAllCollapsed","course","sectionlist","getWatchers","watch","handler","_reloadCm","_refreshCmName","_refreshSectionNumber","_refreshSectionTitle","_refreshSectionCollapsed","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","_reloadSection","_ref","forEach","textContent","_ref2","Error","contentcollapsed","collapsibleId","dataset","replace","collapsible","jQuery","collapse","allcollapsed","allexpanded","remove","_ref3","detail","undefined","cmid","completed","pageOffset","window","scrollY","items","getExporter","allItemsArray","pageItem","every","item","index","type","offsetTop","_ref4","number","sectionid","inplace","inplaceeditable","getInplaceEditable","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","_ref5","querySelectorAll","title","_ref6","cmlist","listparent","createCm","_createCmItem","bind","_fixOrder","_ref7","listedSectionIds","createSection","_createSectionItem","_scanIndex","Section","CmItem","selector","creationhandler","unregister","indexed","_ref8","_getDebouncedReloadCm","debouncedReload","cmId","pendingKey","debounce","reload","pendingReload","Pending","delete","cmitem","resolve","Fragment","loadFragment","Config","courseContextId","courseid","courseId","sr","then","html","js","Templates","replaceNode","catch","cancel","pending","_cancelDebouncedReloadCm","_ref9","sectionitem","container","newItem","createElement","for","append","neworder","dettachedelements","createMethod","length","innerHTML","dndFakeActivity","itemid","currentitem","children","insertBefore","lastchild","lastChild","removeChild","_exports"],"mappings":"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"}