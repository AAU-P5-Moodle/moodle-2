{"version":3,"file":"dialogue.min.js","sources":["../../../src/local/activitychooser/dialogue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A type of dialogue used as for choosing options.\r\n *\r\n * @module     core_course/local/activitychooser/dialogue\r\n * @copyright  2019 Mihail Geshoski <mihail@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport $ from 'jquery';\r\nimport * as ModalEvents from 'core/modal_events';\r\nimport selectors from 'core_course/local/activitychooser/selectors';\r\nimport * as Templates from 'core/templates';\r\nimport {end, arrowLeft, arrowRight, home, enter, space} from 'core/key_codes';\r\nimport {addIconToContainer} from 'core/loadingicon';\r\nimport * as Repository from 'core_course/local/activitychooser/repository';\r\nimport Notification from 'core/notification';\r\nimport {debounce} from 'core/utils';\r\nconst getPlugin = pluginName => import(pluginName);\r\n\r\n/**\r\n * Given an event from the main module 'page' navigate to it's help section via a carousel.\r\n *\r\n * @method showModuleHelp\r\n * @param {jQuery} carousel Our initialized carousel to manipulate\r\n * @param {Object} moduleData Data of the module to carousel to\r\n * @param {jQuery} modal We need to figure out if the current modal has a footer.\r\n */\r\nconst showModuleHelp = (carousel, moduleData, modal = null) => {\r\n    // If we have a real footer then we need to change temporarily.\r\n    if (modal !== null && moduleData.showFooter === true) {\r\n        modal.setFooter(Templates.render('core_course/local/activitychooser/footer_partial', moduleData));\r\n    }\r\n    const help = carousel.find(selectors.regions.help)[0];\r\n    help.innerHTML = '';\r\n    help.classList.add('m-auto');\r\n\r\n    // Add a spinner.\r\n    const spinnerPromise = addIconToContainer(help);\r\n\r\n    // Used later...\r\n    let transitionPromiseResolver = null;\r\n    const transitionPromise = new Promise(resolve => {\r\n        transitionPromiseResolver = resolve;\r\n    });\r\n\r\n    // Build up the html & js ready to place into the help section.\r\n    const contentPromise = Templates.renderForPromise('core_course/local/activitychooser/help', moduleData);\r\n\r\n    // Wait for the content to be ready, and for the transition to be complet.\r\n    Promise.all([contentPromise, spinnerPromise, transitionPromise])\r\n        .then(([{html, js}]) => Templates.replaceNodeContents(help, html, js))\r\n        .then(() => {\r\n            help.querySelector(selectors.regions.chooserSummary.header).focus();\r\n            return help;\r\n        })\r\n        .catch(Notification.exception);\r\n\r\n    // Move to the next slide, and resolve the transition promise when it's done.\r\n    carousel.one('slid.bs.carousel', () => {\r\n        transitionPromiseResolver();\r\n    });\r\n    // Trigger the transition between 'pages'.\r\n    carousel.carousel('next');\r\n};\r\n\r\n/**\r\n * Given a user wants to change the favourite state of a module we either add or remove the status.\r\n * We also propergate this change across our map of modals.\r\n *\r\n * @method manageFavouriteState\r\n * @param {HTMLElement} modalBody The DOM node of the modal to manipulate\r\n * @param {HTMLElement} caller\r\n * @param {Function} partialFavourite Partially applied function we need to manage favourite status\r\n */\r\nconst manageFavouriteState = async(modalBody, caller, partialFavourite) => {\r\n    const isFavourite = caller.dataset.favourited;\r\n    const id = caller.dataset.id;\r\n    const name = caller.dataset.name;\r\n    const internal = caller.dataset.internal;\r\n    // Switch on fave or not.\r\n    if (isFavourite === 'true') {\r\n        await Repository.unfavouriteModule(name, id);\r\n\r\n        partialFavourite(internal, false, modalBody);\r\n    } else {\r\n        await Repository.favouriteModule(name, id);\r\n\r\n        partialFavourite(internal, true, modalBody);\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Register chooser related event listeners.\r\n *\r\n * @method registerListenerEvents\r\n * @param {Promise} modal Our modal that we are working with\r\n * @param {Map} mappedModules A map of all of the modules we are working with with K: mod_name V: {Object}\r\n * @param {Function} partialFavourite Partially applied function we need to manage favourite status\r\n * @param {Object} footerData Our base footer object.\r\n */\r\nconst registerListenerEvents = (modal, mappedModules, partialFavourite, footerData) => {\r\n    const bodyClickListener = async(e) => {\r\n        if (e.target.closest(selectors.actions.optionActions.showSummary)) {\r\n            const carousel = $(modal.getBody()[0].querySelector(selectors.regions.carousel));\r\n\r\n            const module = e.target.closest(selectors.regions.chooserOption.container);\r\n            const moduleName = module.dataset.modname;\r\n            const moduleData = mappedModules.get(moduleName);\r\n            // We need to know if the overall modal has a footer so we know when to show a real / vs fake footer.\r\n            moduleData.showFooter = modal.hasFooterContent();\r\n            showModuleHelp(carousel, moduleData, modal);\r\n        }\r\n\r\n        if (e.target.closest(selectors.actions.optionActions.manageFavourite)) {\r\n            const caller = e.target.closest(selectors.actions.optionActions.manageFavourite);\r\n            await manageFavouriteState(modal.getBody()[0], caller, partialFavourite);\r\n            const activeSectionId = modal.getBody()[0].querySelector(selectors.elements.activetab).getAttribute(\"href\");\r\n            const sectionChooserOptions = modal.getBody()[0]\r\n                .querySelector(selectors.regions.getSectionChooserOptions(activeSectionId));\r\n            const firstChooserOption = sectionChooserOptions\r\n                .querySelector(selectors.regions.chooserOption.container);\r\n            toggleFocusableChooserOption(firstChooserOption, true);\r\n            initChooserOptionsKeyboardNavigation(modal.getBody()[0], mappedModules, sectionChooserOptions, modal);\r\n        }\r\n\r\n        // From the help screen go back to the module overview.\r\n        if (e.target.matches(selectors.actions.closeOption)) {\r\n            const carousel = $(modal.getBody()[0].querySelector(selectors.regions.carousel));\r\n\r\n            // Trigger the transition between 'pages'.\r\n            carousel.carousel('prev');\r\n            carousel.on('slid.bs.carousel', () => {\r\n                const allModules = modal.getBody()[0].querySelector(selectors.regions.modules);\r\n                const caller = allModules.querySelector(selectors.regions.getModuleSelector(e.target.dataset.modname));\r\n                caller.focus();\r\n            });\r\n        }\r\n\r\n        // The \"clear search\" button is triggered.\r\n        if (e.target.closest(selectors.actions.clearSearch)) {\r\n            // Clear the entered search query in the search bar and hide the search results container.\r\n            const searchInput = modal.getBody()[0].querySelector(selectors.actions.search);\r\n            searchInput.value = \"\";\r\n            searchInput.focus();\r\n            toggleSearchResultsView(modal, mappedModules, searchInput.value);\r\n        }\r\n    };\r\n\r\n    // We essentially have two types of footer.\r\n    // A fake one that is handled within the template for chooser_help and then all of the stuff for\r\n    // modal.footer. We need to ensure we know exactly what type of footer we are using so we know what we\r\n    // need to manage. The below code handles a real footer going to a mnet carousel item.\r\n    const footerClickListener = async(e) => {\r\n        if (footerData.footer === true) {\r\n            const footerjs = await getPlugin(footerData.customfooterjs);\r\n            await footerjs.footerClickListener(e, footerData, modal);\r\n        }\r\n    };\r\n\r\n    modal.getBodyPromise()\r\n\r\n    // The return value of getBodyPromise is a jquery object containing the body NodeElement.\r\n    .then(body => body[0])\r\n\r\n    // Set up the carousel.\r\n    .then(body => {\r\n        $(body.querySelector(selectors.regions.carousel))\r\n            .carousel({\r\n                interval: false,\r\n                pause: true,\r\n                keyboard: false\r\n            });\r\n\r\n        return body;\r\n    })\r\n\r\n    // Add the listener for clicks on the body.\r\n    .then(body => {\r\n        body.addEventListener('click', bodyClickListener);\r\n        return body;\r\n    })\r\n\r\n    // Add a listener for an input change in the activity chooser's search bar.\r\n    .then(body => {\r\n        const searchInput = body.querySelector(selectors.actions.search);\r\n        // The search input is triggered.\r\n        searchInput.addEventListener('input', debounce(() => {\r\n            // Display the search results.\r\n            toggleSearchResultsView(modal, mappedModules, searchInput.value);\r\n        }, 300));\r\n        return body;\r\n    })\r\n\r\n    // Register event listeners related to the keyboard navigation controls.\r\n    .then(body => {\r\n        // Get the active chooser options section.\r\n        const activeSectionId = body.querySelector(selectors.elements.activetab).getAttribute(\"href\");\r\n        const sectionChooserOptions = body.querySelector(selectors.regions.getSectionChooserOptions(activeSectionId));\r\n        const firstChooserOption = sectionChooserOptions.querySelector(selectors.regions.chooserOption.container);\r\n\r\n        toggleFocusableChooserOption(firstChooserOption, true);\r\n        initChooserOptionsKeyboardNavigation(body, mappedModules, sectionChooserOptions, modal);\r\n\r\n        return body;\r\n    })\r\n    .catch();\r\n\r\n    modal.getFooterPromise()\r\n\r\n    // The return value of getBodyPromise is a jquery object containing the body NodeElement.\r\n    .then(footer => footer[0])\r\n    // Add the listener for clicks on the footer.\r\n    .then(footer => {\r\n        footer.addEventListener('click', footerClickListener);\r\n        return footer;\r\n    })\r\n    .catch();\r\n};\r\n\r\n/**\r\n * Initialise the keyboard navigation controls for the chooser options.\r\n *\r\n * @method initChooserOptionsKeyboardNavigation\r\n * @param {HTMLElement} body Our modal that we are working with\r\n * @param {Map} mappedModules A map of all of the modules we are working with with K: mod_name V: {Object}\r\n * @param {HTMLElement} chooserOptionsContainer The section that contains the chooser items\r\n * @param {Object} modal Our created modal for the section\r\n */\r\nconst initChooserOptionsKeyboardNavigation = (body, mappedModules, chooserOptionsContainer, modal = null) => {\r\n    const chooserOptions = chooserOptionsContainer.querySelectorAll(selectors.regions.chooserOption.container);\r\n\r\n    Array.from(chooserOptions).forEach((element) => {\r\n        return element.addEventListener('keydown', (e) => {\r\n\r\n            // Check for enter/ space triggers for showing the help.\r\n            if (e.keyCode === enter || e.keyCode === space) {\r\n                if (e.target.matches(selectors.actions.optionActions.showSummary)) {\r\n                    e.preventDefault();\r\n                    const module = e.target.closest(selectors.regions.chooserOption.container);\r\n                    const moduleName = module.dataset.modname;\r\n                    const moduleData = mappedModules.get(moduleName);\r\n                    const carousel = $(body.querySelector(selectors.regions.carousel));\r\n                    carousel.carousel({\r\n                        interval: false,\r\n                        pause: true,\r\n                        keyboard: false\r\n                    });\r\n\r\n                    // We need to know if the overall modal has a footer so we know when to show a real / vs fake footer.\r\n                    moduleData.showFooter = modal.hasFooterContent();\r\n                    showModuleHelp(carousel, moduleData, modal);\r\n                }\r\n            }\r\n\r\n            // Next.\r\n            if (e.keyCode === arrowRight) {\r\n                e.preventDefault();\r\n                const currentOption = e.target.closest(selectors.regions.chooserOption.container);\r\n                const nextOption = currentOption.nextElementSibling;\r\n                const firstOption = chooserOptionsContainer.firstElementChild;\r\n                const toFocusOption = clickErrorHandler(nextOption, firstOption);\r\n                focusChooserOption(toFocusOption, currentOption);\r\n            }\r\n\r\n            // Previous.\r\n            if (e.keyCode === arrowLeft) {\r\n                e.preventDefault();\r\n                const currentOption = e.target.closest(selectors.regions.chooserOption.container);\r\n                const previousOption = currentOption.previousElementSibling;\r\n                const lastOption = chooserOptionsContainer.lastElementChild;\r\n                const toFocusOption = clickErrorHandler(previousOption, lastOption);\r\n                focusChooserOption(toFocusOption, currentOption);\r\n            }\r\n\r\n            if (e.keyCode === home) {\r\n                e.preventDefault();\r\n                const currentOption = e.target.closest(selectors.regions.chooserOption.container);\r\n                const firstOption = chooserOptionsContainer.firstElementChild;\r\n                focusChooserOption(firstOption, currentOption);\r\n            }\r\n\r\n            if (e.keyCode === end) {\r\n                e.preventDefault();\r\n                const currentOption = e.target.closest(selectors.regions.chooserOption.container);\r\n                const lastOption = chooserOptionsContainer.lastElementChild;\r\n                focusChooserOption(lastOption, currentOption);\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Focus on a chooser option element and remove the previous chooser element from the focus order\r\n *\r\n * @method focusChooserOption\r\n * @param {HTMLElement} currentChooserOption The current chooser option element that we want to focus\r\n * @param {HTMLElement|null} previousChooserOption The previous focused option element\r\n */\r\nconst focusChooserOption = (currentChooserOption, previousChooserOption = null) => {\r\n    if (previousChooserOption !== null) {\r\n        toggleFocusableChooserOption(previousChooserOption, false);\r\n    }\r\n\r\n    toggleFocusableChooserOption(currentChooserOption, true);\r\n    currentChooserOption.focus();\r\n};\r\n\r\n/**\r\n * Add or remove a chooser option from the focus order.\r\n *\r\n * @method toggleFocusableChooserOption\r\n * @param {HTMLElement} chooserOption The chooser option element which should be added or removed from the focus order\r\n * @param {Boolean} isFocusable Whether the chooser element is focusable or not\r\n */\r\nconst toggleFocusableChooserOption = (chooserOption, isFocusable) => {\r\n    const chooserOptionLink = chooserOption.querySelector(selectors.actions.addChooser);\r\n    const chooserOptionHelp = chooserOption.querySelector(selectors.actions.optionActions.showSummary);\r\n    const chooserOptionFavourite = chooserOption.querySelector(selectors.actions.optionActions.manageFavourite);\r\n\r\n    if (isFocusable) {\r\n        // Set tabindex to 0 to add current chooser option element to the focus order.\r\n        chooserOption.tabIndex = 0;\r\n        chooserOptionLink.tabIndex = 0;\r\n        chooserOptionHelp.tabIndex = 0;\r\n        chooserOptionFavourite.tabIndex = 0;\r\n    } else {\r\n        // Set tabindex to -1 to remove the previous chooser option element from the focus order.\r\n        chooserOption.tabIndex = -1;\r\n        chooserOptionLink.tabIndex = -1;\r\n        chooserOptionHelp.tabIndex = -1;\r\n        chooserOptionFavourite.tabIndex = -1;\r\n    }\r\n};\r\n\r\n/**\r\n * Small error handling function to make sure the navigated to object exists\r\n *\r\n * @method clickErrorHandler\r\n * @param {HTMLElement} item What we want to check exists\r\n * @param {HTMLElement} fallback If we dont match anything fallback the focus\r\n * @return {HTMLElement}\r\n */\r\nconst clickErrorHandler = (item, fallback) => {\r\n    if (item !== null) {\r\n        return item;\r\n    } else {\r\n        return fallback;\r\n    }\r\n};\r\n\r\n/**\r\n * Render the search results in a defined container\r\n *\r\n * @method renderSearchResults\r\n * @param {HTMLElement} searchResultsContainer The container where the data should be rendered\r\n * @param {Object} searchResultsData Data containing the module items that satisfy the search criteria\r\n */\r\nconst renderSearchResults = async(searchResultsContainer, searchResultsData) => {\r\n    const templateData = {\r\n        'searchresultsnumber': searchResultsData.length,\r\n        'searchresults': searchResultsData\r\n    };\r\n    // Build up the html & js ready to place into the help section.\r\n    const {html, js} = await Templates.renderForPromise('core_course/local/activitychooser/search_results', templateData);\r\n    await Templates.replaceNodeContents(searchResultsContainer, html, js);\r\n};\r\n\r\n/**\r\n * Toggle (display/hide) the search results depending on the value of the search query\r\n *\r\n * @method toggleSearchResultsView\r\n * @param {Object} modal Our created modal for the section\r\n * @param {Map} mappedModules A map of all of the modules we are working with with K: mod_name V: {Object}\r\n * @param {String} searchQuery The search query\r\n */\r\nconst toggleSearchResultsView = async(modal, mappedModules, searchQuery) => {\r\n    const modalBody = modal.getBody()[0];\r\n    const searchResultsContainer = modalBody.querySelector(selectors.regions.searchResults);\r\n    const chooserContainer = modalBody.querySelector(selectors.regions.chooser);\r\n    const clearSearchButton = modalBody.querySelector(selectors.actions.clearSearch);\r\n\r\n    if (searchQuery.length > 0) { // Search query is present.\r\n        const searchResultsData = searchModules(mappedModules, searchQuery);\r\n        await renderSearchResults(searchResultsContainer, searchResultsData);\r\n        const searchResultItemsContainer = searchResultsContainer.querySelector(selectors.regions.searchResultItems);\r\n        const firstSearchResultItem = searchResultItemsContainer.querySelector(selectors.regions.chooserOption.container);\r\n        if (firstSearchResultItem) {\r\n            // Set the first result item to be focusable.\r\n            toggleFocusableChooserOption(firstSearchResultItem, true);\r\n            // Register keyboard events on the created search result items.\r\n            initChooserOptionsKeyboardNavigation(modalBody, mappedModules, searchResultItemsContainer, modal);\r\n        }\r\n        // Display the \"clear\" search button in the activity chooser search bar.\r\n        clearSearchButton.classList.remove('d-none');\r\n        // Hide the default chooser options container.\r\n        chooserContainer.setAttribute('hidden', 'hidden');\r\n        // Display the search results container.\r\n        searchResultsContainer.removeAttribute('hidden');\r\n    } else { // Search query is not present.\r\n        // Hide the \"clear\" search button in the activity chooser search bar.\r\n        clearSearchButton.classList.add('d-none');\r\n        // Hide the search results container.\r\n        searchResultsContainer.setAttribute('hidden', 'hidden');\r\n        // Display the default chooser options container.\r\n        chooserContainer.removeAttribute('hidden');\r\n    }\r\n};\r\n\r\n/**\r\n * Return the list of modules which have a name or description that matches the given search term.\r\n *\r\n * @method searchModules\r\n * @param {Array} modules List of available modules\r\n * @param {String} searchTerm The search term to match\r\n * @return {Array}\r\n */\r\nconst searchModules = (modules, searchTerm) => {\r\n    if (searchTerm === '') {\r\n        return modules;\r\n    }\r\n    searchTerm = searchTerm.toLowerCase();\r\n    const searchResults = [];\r\n    modules.forEach((activity) => {\r\n        const activityName = activity.title.toLowerCase();\r\n        const activityDesc = activity.help.toLowerCase();\r\n        if (activityName.includes(searchTerm) || activityDesc.includes(searchTerm)) {\r\n            searchResults.push(activity);\r\n        }\r\n    });\r\n\r\n    return searchResults;\r\n};\r\n\r\n/**\r\n * Set up our tabindex information across the chooser.\r\n *\r\n * @method setupKeyboardAccessibility\r\n * @param {Promise} modal Our created modal for the section\r\n * @param {Map} mappedModules A map of all of the built module information\r\n */\r\nconst setupKeyboardAccessibility = (modal, mappedModules) => {\r\n    modal.getModal()[0].tabIndex = -1;\r\n\r\n    modal.getBodyPromise().then(body => {\r\n        $(selectors.elements.tab).on('shown.bs.tab', (e) => {\r\n            const activeSectionId = e.target.getAttribute(\"href\");\r\n            const activeSectionChooserOptions = body[0]\r\n                .querySelector(selectors.regions.getSectionChooserOptions(activeSectionId));\r\n            const firstChooserOption = activeSectionChooserOptions\r\n                .querySelector(selectors.regions.chooserOption.container);\r\n            const prevActiveSectionId = e.relatedTarget.getAttribute(\"href\");\r\n            const prevActiveSectionChooserOptions = body[0]\r\n                .querySelector(selectors.regions.getSectionChooserOptions(prevActiveSectionId));\r\n\r\n            // Disable the focus of every chooser option in the previous active section.\r\n            disableFocusAllChooserOptions(prevActiveSectionChooserOptions);\r\n            // Enable the focus of the first chooser option in the current active section.\r\n            toggleFocusableChooserOption(firstChooserOption, true);\r\n            initChooserOptionsKeyboardNavigation(body[0], mappedModules, activeSectionChooserOptions, modal);\r\n        });\r\n        return;\r\n    }).catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Disable the focus of all chooser options in a specific container (section).\r\n *\r\n * @method disableFocusAllChooserOptions\r\n * @param {HTMLElement} sectionChooserOptions The section that contains the chooser items\r\n */\r\nconst disableFocusAllChooserOptions = (sectionChooserOptions) => {\r\n    const allChooserOptions = sectionChooserOptions.querySelectorAll(selectors.regions.chooserOption.container);\r\n    allChooserOptions.forEach((chooserOption) => {\r\n        toggleFocusableChooserOption(chooserOption, false);\r\n    });\r\n};\r\n\r\n/**\r\n * Display the module chooser.\r\n *\r\n * @method displayChooser\r\n * @param {Promise} modalPromise Our created modal for the section\r\n * @param {Array} sectionModules An array of all of the built module information\r\n * @param {Function} partialFavourite Partially applied function we need to manage favourite status\r\n * @param {Object} footerData Our base footer object.\r\n */\r\nexport const displayChooser = (modalPromise, sectionModules, partialFavourite, footerData) => {\r\n    // Make a map so we can quickly fetch a specific module's object for either rendering or searching.\r\n    const mappedModules = new Map();\r\n    sectionModules.forEach((module) => {\r\n        mappedModules.set(module.componentname + '_' + module.link, module);\r\n    });\r\n\r\n    // Register event listeners.\r\n    modalPromise.then(modal => {\r\n        registerListenerEvents(modal, mappedModules, partialFavourite, footerData);\r\n\r\n        // We want to focus on the first chooser option element as soon as the modal is opened.\r\n        setupKeyboardAccessibility(modal, mappedModules);\r\n\r\n        // We want to focus on the action select when the dialog is closed.\r\n        modal.getRoot().on(ModalEvents.hidden, () => {\r\n            modal.destroy();\r\n        });\r\n\r\n        return modal;\r\n    }).catch();\r\n};\r\n"],"names":["_jquery","_interopRequireDefault","ModalEvents","_interopRequireWildcard","_selectors","Templates","Repository","_notification","_systemImportTransformerGlobalIdentifier","window","self","global","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","showModuleHelp","carousel","moduleData","modal","arguments","length","undefined","showFooter","setFooter","render","help","find","selectors","regions","innerHTML","classList","add","spinnerPromise","addIconToContainer","transitionPromiseResolver","transitionPromise","Promise","resolve","contentPromise","renderForPromise","all","then","_ref","html","js","replaceNodeContents","querySelector","chooserSummary","header","focus","catch","Notification","exception","one","registerListenerEvents","mappedModules","partialFavourite","footerData","bodyClickListener","async","target","closest","actions","optionActions","showSummary","$","getBody","moduleName","chooserOption","container","dataset","modname","hasFooterContent","manageFavourite","caller","modalBody","isFavourite","favourited","id","name","internal","unfavouriteModule","favouriteModule","manageFavouriteState","activeSectionId","elements","activetab","getAttribute","sectionChooserOptions","getSectionChooserOptions","firstChooserOption","toggleFocusableChooserOption","initChooserOptionsKeyboardNavigation","matches","closeOption","on","modules","getModuleSelector","clearSearch","searchInput","search","value","toggleSearchResultsView","footerClickListener","footer","footerjs","pluginName","customfooterjs","define","amd","reject","require","module","exports","component","loader","getBodyPromise","body","interval","pause","keyboard","addEventListener","debounce","getFooterPromise","chooserOptionsContainer","chooserOptions","querySelectorAll","Array","from","forEach","element","keyCode","enter","space","preventDefault","arrowRight","currentOption","nextOption","nextElementSibling","firstOption","firstElementChild","toFocusOption","clickErrorHandler","focusChooserOption","arrowLeft","previousOption","previousElementSibling","lastOption","lastElementChild","home","end","currentChooserOption","previousChooserOption","isFocusable","chooserOptionLink","addChooser","chooserOptionHelp","chooserOptionFavourite","tabIndex","item","fallback","searchQuery","searchResultsContainer","searchResults","chooserContainer","chooser","clearSearchButton","searchResultsData","searchModules","templateData","searchresultsnumber","searchresults","renderSearchResults","searchResultItemsContainer","searchResultItems","firstSearchResultItem","remove","setAttribute","removeAttribute","searchTerm","toLowerCase","activity","activityName","title","activityDesc","includes","push","disableFocusAllChooserOptions","_exports","displayChooser","modalPromise","sectionModules","Map","componentname","link","setupKeyboardAccessibility","getModal","tab","activeSectionChooserOptions","prevActiveSectionId","relatedTarget","prevActiveSectionChooserOptions","getRoot","hidden","destroy"],"mappings":"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"}