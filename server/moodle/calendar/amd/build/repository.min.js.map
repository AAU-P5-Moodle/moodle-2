{"version":3,"file":"repository.min.js","sources":["../src/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A javascript module to handle calendar ajax actions.\r\n *\r\n * @module     core_calendar/repository\r\n * @copyright  2017 Simey Lameze <lameze@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport Ajax from 'core/ajax';\r\n\r\n/**\r\n * Delete a calendar event.\r\n *\r\n * @method deleteEvent\r\n * @param {number} eventId The event id.\r\n * @param {boolean} deleteSeries Whether to delete all events in the series\r\n * @return {promise} Resolved with requested calendar event\r\n */\r\nexport const deleteEvent = (eventId, deleteSeries = false) => {\r\n    const request = {\r\n        methodname: 'core_calendar_delete_calendar_events',\r\n        args: {\r\n            events: [{\r\n                eventid: eventId,\r\n                repeat: deleteSeries,\r\n            }]\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Get a calendar event by id.\r\n *\r\n * @method getEventById\r\n * @param {number} eventId The event id.\r\n * @return {promise} Resolved with requested calendar event\r\n */\r\nexport const getEventById = (eventId) => {\r\n\r\n    const request = {\r\n        methodname: 'core_calendar_get_calendar_event_by_id',\r\n        args: {\r\n            eventid: eventId\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Submit the form data for the event form.\r\n *\r\n * @method submitCreateUpdateForm\r\n * @param {string} formData The URL encoded values from the form\r\n * @return {promise} Resolved with the new or edited event\r\n */\r\nexport const submitCreateUpdateForm = (formData) => {\r\n    const request = {\r\n        methodname: 'core_calendar_submit_create_update_form',\r\n        args: {\r\n            formdata: formData\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Get calendar data for the month view.\r\n *\r\n * @method getCalendarMonthData\r\n * @param {number} year Year\r\n * @param {number} month Month\r\n * @param {number} courseId The course id.\r\n * @param {number} categoryId The category id.\r\n * @param {boolean} includeNavigation Whether to include navigation.\r\n * @param {boolean} mini Whether the month is in mini view.\r\n * @param {number} day Day (optional)\r\n * @param {string} view The calendar view mode.\r\n * @return {promise} Resolved with the month view data.\r\n */\r\nexport const getCalendarMonthData = (year, month, courseId, categoryId, includeNavigation, mini, day = 1, view = 'month') => {\r\n    const request = {\r\n        methodname: 'core_calendar_get_calendar_monthly_view',\r\n        args: {\r\n            year,\r\n            month,\r\n            courseid: courseId,\r\n            categoryid: categoryId,\r\n            includenavigation: includeNavigation,\r\n            mini,\r\n            day,\r\n            view,\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Get calendar data for the day view.\r\n *\r\n * @method getCalendarDayData\r\n * @param {number} year Year\r\n * @param {number} month Month\r\n * @param {number} day Day\r\n * @param {number} courseId The course id.\r\n * @param {number} categoryId The id of the category whose events are shown\r\n * @return {promise} Resolved with the day view data.\r\n */\r\nexport const getCalendarDayData = (year, month, day, courseId, categoryId) => {\r\n    const request = {\r\n        methodname: 'core_calendar_get_calendar_day_view',\r\n        args: {\r\n            year,\r\n            month,\r\n            day,\r\n            courseid: courseId,\r\n            categoryid: categoryId,\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Change the start day for the given event id. The day timestamp\r\n * only has to be any time during the target day because only the\r\n * date information is extracted, the time of the day is ignored.\r\n *\r\n * @param {int} eventId The id of the event to update\r\n * @param {int} dayTimestamp A timestamp for some time during the target day\r\n * @return {promise}\r\n */\r\nexport const updateEventStartDay = (eventId, dayTimestamp) => {\r\n    const request = {\r\n        methodname: 'core_calendar_update_event_start_day',\r\n        args: {\r\n            eventid: eventId,\r\n            daytimestamp: dayTimestamp\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Get calendar upcoming data.\r\n *\r\n * @method getCalendarUpcomingData\r\n * @param {number} courseId The course id.\r\n * @param {number} categoryId The category id.\r\n * @return {promise} Resolved with the month view data.\r\n */\r\nexport const getCalendarUpcomingData = (courseId, categoryId) => {\r\n    const request = {\r\n        methodname: 'core_calendar_get_calendar_upcoming_view',\r\n        args: {\r\n            courseid: courseId,\r\n            categoryid: categoryId,\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Get the groups by course id.\r\n *\r\n * @param {Number} courseId The course id to fetch the groups from.\r\n * @return {promise} Resolved with the course groups.\r\n */\r\nexport const getCourseGroupsData = (courseId) => {\r\n    const request = {\r\n        methodname: 'core_group_get_course_groups',\r\n        args: {\r\n            courseid: courseId\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Delete calendar subscription by id.\r\n *\r\n * @param {Number} subscriptionId The subscription id\r\n * @return {promise}\r\n */\r\nexport const deleteSubscription = (subscriptionId) => {\r\n    const request = {\r\n        methodname: 'core_calendar_delete_subscription',\r\n        args: {\r\n            subscriptionid: subscriptionId\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n"],"names":["e","_ajax","__esModule","default","_exports","deleteEvent","eventId","request","methodname","args","events","eventid","repeat","arguments","length","undefined","Ajax","call","getEventById","submitCreateUpdateForm","formData","formdata","getCalendarMonthData","year","month","courseId","categoryId","includeNavigation","mini","courseid","categoryid","includenavigation","day","view","getCalendarDayData","updateEventStartDay","dayTimestamp","daytimestamp","getCalendarUpcomingData","getCourseGroupsData","deleteSubscription","subscriptionId","subscriptionid"],"mappings":"oFAsB6B,IAAAA;;;;;;;gUAA7BC,OAA6BD,EAA7BC,QAA6BD,EAAAE,WAAAF,EAAAG,CAAAA,QAAAH,GAsB3BI,SAAAC,YAZyB,SAACC,SACxB,MAAMC,QAAU,CACZC,WAAY,uCACZC,KAAM,CACFC,OAAQ,CAAC,CACLC,QAASL,QACTM,OANiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,OAW7C,OAAOG,MAAAA,QAAKC,KAAK,CAACV,UAAU,IAoB9BH,SAAAc,aAV2BZ,UAEzB,MAAMC,QAAU,CACZC,WAAY,yCACZC,KAAM,CACFE,QAASL,UAIjB,OAAOU,MAAAA,QAAKC,KAAK,CAACV,UAAU,EAAE,EAmBhCH,SAAAe,uBATqCC,WACnC,MAAMb,QAAU,CACZC,WAAY,0CACZC,KAAM,CACFY,SAAUD,WAIlB,OAAOJ,MAAAA,QAAKC,KAAK,CAACV,UAAU,EAAE,EAiChCH,SAAAkB,qBAhBkC,SAACC,KAAMC,MAAOC,SAAUC,WAAYC,kBAAmBC,MACvF,MAAMrB,QAAU,CACZC,WAAY,0CACZC,KAAM,CACFc,UACAC,YACAK,SAAUJ,SACVK,WAAYJ,WACZK,kBAAmBJ,kBACnBC,UACAI,IAVwFnB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAW3FoB,KAXkGpB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,UAe7G,OAAOG,MAAAA,QAAKC,KAAK,CAACV,UAAU,IA2B9BH,SAAA8B,mBAbgCA,CAACX,KAAMC,MAAOQ,IAAKP,SAAUC,cAC3D,MAAMnB,QAAU,CACZC,WAAY,sCACZC,KAAM,CACFc,UACAC,YACAQ,QACAH,SAAUJ,SACVK,WAAYJ,aAIpB,OAAOV,MAAAA,QAAKC,KAAK,CAACV,UAAU,EAAE,EAsBhCH,SAAA+B,oBAViCA,CAAC7B,QAAS8B,gBACzC,MAAM7B,QAAU,CACZC,WAAY,uCACZC,KAAM,CACFE,QAASL,QACT+B,aAAcD,eAItB,OAAOpB,MAAAA,QAAKC,KAAK,CAACV,UAAU,EAAE,EAqBhCH,SAAAkC,wBAVqCA,CAACb,SAAUC,cAC9C,MAAMnB,QAAU,CACZC,WAAY,2CACZC,KAAM,CACFoB,SAAUJ,SACVK,WAAYJ,aAIpB,OAAOV,MAAAA,QAAKC,KAAK,CAACV,UAAU,EAAE,EAkBhCH,SAAAmC,oBATkCd,WAChC,MAAMlB,QAAU,CACZC,WAAY,+BACZC,KAAM,CACFoB,SAAUJ,WAIlB,OAAOT,MAAAA,QAAKC,KAAK,CAACV,UAAU,EAAE,EAkBhCH,SAAAoC,mBATiCC,iBAC/B,MAAMlC,QAAU,CACZC,WAAY,oCACZC,KAAM,CACFiC,eAAgBD,iBAIxB,OAAOzB,MAAAA,QAAKC,KAAK,CAACV,UAAU,EAAE,CAChC"}