{"version":3,"file":"calendar_view.min.js","sources":["../src/calendar_view.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * This module is responsible for handle calendar day and upcoming view.\r\n *\r\n * @module     core_calendar/calendar_view\r\n * @copyright  2017 Simey Lameze <simey@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/notification',\r\n    'core_calendar/selectors',\r\n    'core_calendar/events',\r\n    'core_calendar/view_manager',\r\n    'core_calendar/crud'\r\n],\r\nfunction(\r\n    $,\r\n    Notification,\r\n    CalendarSelectors,\r\n    CalendarEvents,\r\n    CalendarViewManager,\r\n    CalendarCrud\r\n) {\r\n\r\n        var registerEventListeners = function(root, type) {\r\n            var body = $('body');\r\n\r\n            CalendarCrud.registerRemove(root);\r\n\r\n            var reloadFunction = 'reloadCurrent' + type.charAt(0).toUpperCase() + type.slice(1);\r\n\r\n            body.on(CalendarEvents.created, function() {\r\n                CalendarViewManager[reloadFunction](root);\r\n            });\r\n            body.on(CalendarEvents.deleted, function() {\r\n                CalendarViewManager[reloadFunction](root);\r\n            });\r\n            body.on(CalendarEvents.updated, function() {\r\n                CalendarViewManager[reloadFunction](root);\r\n            });\r\n\r\n            root.on('change', CalendarSelectors.courseSelector, function() {\r\n                var selectElement = $(this);\r\n                var courseId = selectElement.val();\r\n                const courseName = $(\"option:selected\", selectElement).text();\r\n                CalendarViewManager[reloadFunction](root, courseId, null)\r\n                    .then(function() {\r\n                        // We need to get the selector again because the content has changed.\r\n                        return root.find(CalendarSelectors.courseSelector).val(courseId);\r\n                    })\r\n                    .then(function() {\r\n                        CalendarViewManager.updateUrl('?view=' + type + '&course=' + courseId);\r\n                        CalendarViewManager.handleCourseChange(Number(courseId), courseName);\r\n                        return;\r\n                    })\r\n                    .fail(Notification.exception);\r\n            });\r\n\r\n            body.on(CalendarEvents.filterChanged, function(e, data) {\r\n                var daysWithEvent = root.find(CalendarSelectors.eventType[data.type]);\r\n                if (data.hidden == true) {\r\n                    daysWithEvent.addClass('hidden');\r\n                } else {\r\n                    daysWithEvent.removeClass('hidden');\r\n                }\r\n                CalendarViewManager.foldDayEvents(root);\r\n            });\r\n\r\n            var eventFormPromise = CalendarCrud.registerEventFormModal(root);\r\n            CalendarCrud.registerEditListeners(root, eventFormPromise);\r\n        };\r\n\r\n        return {\r\n            init: function(root, type, isCalendarBlock = false) {\r\n                root = $(root);\r\n\r\n                CalendarViewManager.init(root, type, isCalendarBlock);\r\n                registerEventListeners(root, type, isCalendarBlock);\r\n            }\r\n        };\r\n    });\r\n"],"names":["define","$","Notification","CalendarSelectors","CalendarEvents","CalendarViewManager","CalendarCrud","init","root","type","isCalendarBlock","arguments","length","undefined","body","registerRemove","reloadFunction","charAt","toUpperCase","slice","on","created","deleted","updated","courseSelector","selectElement","this","courseId","val","courseName","text","then","find","updateUrl","handleCourseChange","Number","fail","exception","filterChanged","e","data","daysWithEvent","eventType","hidden","addClass","removeClass","foldDayEvents","eventFormPromise","registerEventFormModal","registerEditListeners","registerEventListeners"],"mappings":";;;;;;;AAsBAA,OAAM,8BAAC,CACH,SACA,oBACA,0BACA,uBACA,6BACA,uBAEJ,SACIC,EACAC,aACAC,kBACAC,eACAC,oBACAC,cAmDI,MAAO,CACHC,KAAM,SAASC,KAAMC,MAA+B,IAAzBC,gBAAeC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACtCH,KAAOP,EAAEO,MAETH,oBAAoBE,KAAKC,KAAMC,KAAMC,iBApDhB,SAASF,KAAMC,MACxC,IAAIK,KAAOb,EAAE,QAEbK,aAAaS,eAAeP,MAE5B,IAAIQ,eAAiB,gBAAkBP,KAAKQ,OAAO,GAAGC,cAAgBT,KAAKU,MAAM,GAEjFL,KAAKM,GAAGhB,eAAeiB,SAAS,WAC5BhB,oBAAoBW,gBAAgBR,KACxC,IACAM,KAAKM,GAAGhB,eAAekB,SAAS,WAC5BjB,oBAAoBW,gBAAgBR,KACxC,IACAM,KAAKM,GAAGhB,eAAemB,SAAS,WAC5BlB,oBAAoBW,gBAAgBR,KACxC,IAEAA,KAAKY,GAAG,SAAUjB,kBAAkBqB,gBAAgB,WAChD,IAAIC,cAAgBxB,EAAEyB,MAClBC,SAAWF,cAAcG,MAC7B,MAAMC,WAAa5B,EAAE,kBAAmBwB,eAAeK,OACvDzB,oBAAoBW,gBAAgBR,KAAMmB,SAAU,MAC/CI,MAAK,WAEF,OAAOvB,KAAKwB,KAAK7B,kBAAkBqB,gBAAgBI,IAAID,SAC3D,IACCI,MAAK,WACF1B,oBAAoB4B,UAAU,SAAWxB,KAAO,WAAakB,UAC7DtB,oBAAoB6B,mBAAmBC,OAAOR,UAAWE,WAE5D,IACAO,KAAKlC,aAAamC,UAC3B,IAEAvB,KAAKM,GAAGhB,eAAekC,eAAe,SAASC,EAAGC,MAC9C,IAAIC,cAAgBjC,KAAKwB,KAAK7B,kBAAkBuC,UAAUF,KAAK/B,OAC5C,GAAf+B,KAAKG,OACLF,cAAcG,SAAS,UAEvBH,cAAcI,YAAY,UAE9BxC,oBAAoByC,cAActC,KACtC,IAEA,IAAIuC,iBAAmBzC,aAAa0C,uBAAuBxC,MAC3DF,aAAa2C,sBAAsBzC,KAAMuC,kBAQrCG,CAAuB1C,KAAMC,KACjC,EAER"}