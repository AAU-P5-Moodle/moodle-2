{"version":3,"file":"crud.min.js","sources":["../src/crud.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A module to handle CRUD operations within the UI.\r\n *\r\n * @module     core_calendar/crud\r\n * @copyright  2017 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/str',\r\n    'core/notification',\r\n    'core/modal_events',\r\n    'core_calendar/modal_event_form',\r\n    'core_calendar/repository',\r\n    'core_calendar/events',\r\n    'core_calendar/modal_delete',\r\n    'core_calendar/selectors',\r\n    'core/pending',\r\n    'core/modal_save_cancel',\r\n    'core/config',\r\n],\r\nfunction(\r\n    $,\r\n    Str,\r\n    Notification,\r\n    ModalEvents,\r\n    ModalEventForm,\r\n    CalendarRepository,\r\n    CalendarEvents,\r\n    CalendarModalDelete,\r\n    CalendarSelectors,\r\n    Pending,\r\n    ModalSaveCancel,\r\n    Config,\r\n) {\r\n\r\n    /**\r\n     * Prepares the action for the summary modal's delete action.\r\n     *\r\n     * @param {Number} eventId The ID of the event.\r\n     * @param {string} eventTitle The event title.\r\n     * @param {Number} eventCount The number of events in the series.\r\n     * @return {Promise}\r\n     */\r\n    function confirmDeletion(eventId, eventTitle, eventCount) {\r\n        var pendingPromise = new Pending('core_calendar/crud:confirmDeletion');\r\n        var deleteStrings = [\r\n            {\r\n                key: 'deleteevent',\r\n                component: 'calendar'\r\n            },\r\n        ];\r\n\r\n        eventCount = parseInt(eventCount, 10);\r\n        var deletePromise;\r\n        var isRepeatedEvent = eventCount > 1;\r\n        if (isRepeatedEvent) {\r\n            deleteStrings.push({\r\n                key: 'confirmeventseriesdelete',\r\n                component: 'calendar',\r\n                param: {\r\n                    name: eventTitle,\r\n                    count: eventCount,\r\n                },\r\n            });\r\n\r\n            deletePromise = CalendarModalDelete.create();\r\n        } else {\r\n            deleteStrings.push({\r\n                key: 'confirmeventdelete',\r\n                component: 'calendar',\r\n                param: eventTitle\r\n            });\r\n\r\n\r\n            deletePromise = ModalSaveCancel.create();\r\n        }\r\n\r\n        var stringsPromise = Str.get_strings(deleteStrings);\r\n\r\n        var finalPromise = $.when(stringsPromise, deletePromise)\r\n        .then(function(strings, deleteModal) {\r\n            deleteModal.setRemoveOnClose(true);\r\n            deleteModal.setTitle(strings[0]);\r\n            deleteModal.setBody(strings[1]);\r\n            if (!isRepeatedEvent) {\r\n                deleteModal.setSaveButtonText(strings[0]);\r\n            }\r\n\r\n            deleteModal.show();\r\n\r\n            deleteModal.getRoot().on(ModalEvents.save, function() {\r\n                var pendingPromise = new Pending('calendar/crud:initModal:deletedevent');\r\n                CalendarRepository.deleteEvent(eventId, false)\r\n                    .then(function() {\r\n                        $('body').trigger(CalendarEvents.deleted, [eventId, false]);\r\n                        return;\r\n                    })\r\n                    .then(pendingPromise.resolve)\r\n                    .catch(Notification.exception);\r\n            });\r\n\r\n            deleteModal.getRoot().on(CalendarEvents.deleteAll, function() {\r\n                var pendingPromise = new Pending('calendar/crud:initModal:deletedallevent');\r\n                CalendarRepository.deleteEvent(eventId, true)\r\n                    .then(function() {\r\n                        $('body').trigger(CalendarEvents.deleted, [eventId, true]);\r\n                        return;\r\n                    })\r\n                    .then(pendingPromise.resolve)\r\n                    .catch(Notification.exception);\r\n            });\r\n\r\n            return deleteModal;\r\n        })\r\n        .then(function(modal) {\r\n            pendingPromise.resolve();\r\n\r\n            return modal;\r\n        })\r\n        .catch(Notification.exception);\r\n\r\n        return finalPromise;\r\n    }\r\n\r\n    /**\r\n     * Create the event form modal for creating new events and\r\n     * editing existing events.\r\n     *\r\n     * @method registerEventFormModal\r\n     * @param {object} root The calendar root element\r\n     * @return {object} The create modal promise\r\n     */\r\n    var registerEventFormModal = function(root) {\r\n        var eventFormPromise = ModalEventForm.create();\r\n\r\n        // Bind click event on the new event button.\r\n        root.on('click', CalendarSelectors.actions.create, function(e) {\r\n            eventFormPromise.then(function(modal) {\r\n                var wrapper = root.find(CalendarSelectors.wrapper);\r\n\r\n                var categoryId = wrapper.data('categoryid');\r\n                const courseId = wrapper.data('courseid');\r\n                if (typeof categoryId !== 'undefined' && courseId != Config.siteId) {\r\n                    modal.setCategoryId(categoryId);\r\n                }\r\n\r\n                // Attempt to find the cell for today.\r\n                // If it can't be found, then use the start time of the first day on the calendar.\r\n                var today = root.find(CalendarSelectors.today);\r\n                var firstDay = root.find(CalendarSelectors.day);\r\n                if (!today.length && firstDay.length) {\r\n                    modal.setStartTime(firstDay.data('newEventTimestamp'));\r\n                }\r\n\r\n                modal.setContextId(wrapper.data('contextId'));\r\n                modal.setCourseId(wrapper.data('courseid'));\r\n                modal.show();\r\n                return;\r\n            })\r\n            .catch(Notification.exception);\r\n\r\n            e.preventDefault();\r\n        });\r\n\r\n        root.on('click', CalendarSelectors.actions.edit, function(e) {\r\n            e.preventDefault();\r\n            var target = $(e.currentTarget),\r\n                calendarWrapper = target.closest(CalendarSelectors.wrapper),\r\n                eventWrapper = target.closest(CalendarSelectors.eventItem);\r\n\r\n            eventFormPromise.then(function(modal) {\r\n                // When something within the calendar tells us the user wants\r\n                // to edit an event then show the event form modal.\r\n                modal.setEventId(eventWrapper.data('eventId'));\r\n\r\n                modal.setContextId(calendarWrapper.data('contextId'));\r\n                modal.setCourseId(eventWrapper.data('courseId'));\r\n                modal.show();\r\n\r\n                e.stopImmediatePropagation();\r\n                return;\r\n            }).catch(Notification.exception);\r\n        });\r\n\r\n\r\n        return eventFormPromise;\r\n    };\r\n    /**\r\n     * Register the listeners required to remove the event.\r\n     *\r\n     * @param   {jQuery} root\r\n     */\r\n    function registerRemove(root) {\r\n        root.on('click', CalendarSelectors.actions.remove, function(e) {\r\n            // Fetch the event title, count, and pass them into the new dialogue.\r\n            var eventSource = $(this).closest(CalendarSelectors.eventItem);\r\n            var eventId = eventSource.data('eventId'),\r\n                eventTitle = eventSource.data('eventTitle'),\r\n                eventCount = eventSource.data('eventCount');\r\n            confirmDeletion(eventId, eventTitle, eventCount);\r\n\r\n            e.preventDefault();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Register the listeners required to edit the event.\r\n     *\r\n     * @param   {jQuery} root\r\n     * @param   {Promise} eventFormModalPromise\r\n     * @returns {Promise}\r\n     */\r\n    function registerEditListeners(root, eventFormModalPromise) {\r\n        var pendingPromise = new Pending('core_calendar/crud:registerEditListeners');\r\n\r\n        return eventFormModalPromise\r\n        .then(function(modal) {\r\n            // When something within the calendar tells us the user wants\r\n            // to edit an event then show the event form modal.\r\n            $('body').on(CalendarEvents.editEvent, function(e, eventId) {\r\n                var target = root.find(`[data-event-id=${eventId}]`),\r\n                    calendarWrapper = root.find(CalendarSelectors.wrapper);\r\n\r\n                modal.setEventId(eventId);\r\n                modal.setContextId(calendarWrapper.data('contextId'));\r\n                modal.setReturnElement(target);\r\n                modal.show();\r\n\r\n                e.stopImmediatePropagation();\r\n            });\r\n            return modal;\r\n        })\r\n        .then(function(modal) {\r\n            pendingPromise.resolve();\r\n\r\n            return modal;\r\n        })\r\n        .catch(Notification.exception);\r\n    }\r\n\r\n    return {\r\n        registerRemove: registerRemove,\r\n        registerEditListeners: registerEditListeners,\r\n        registerEventFormModal: registerEventFormModal\r\n    };\r\n});\r\n"],"names":["define","$","Str","Notification","ModalEvents","ModalEventForm","CalendarRepository","CalendarEvents","CalendarModalDelete","CalendarSelectors","Pending","ModalSaveCancel","Config","registerRemove","root","on","actions","remove","e","eventSource","this","closest","eventItem","eventId","eventTitle","eventCount","deletePromise","pendingPromise","deleteStrings","key","component","isRepeatedEvent","parseInt","push","param","name","count","create","stringsPromise","get_strings","when","then","strings","deleteModal","setRemoveOnClose","setTitle","setBody","setSaveButtonText","show","getRoot","save","deleteEvent","trigger","deleted","resolve","catch","exception","deleteAll","modal","confirmDeletion","data","preventDefault","registerEditListeners","eventFormModalPromise","editEvent","target","find","calendarWrapper","wrapper","setEventId","setContextId","setReturnElement","stopImmediatePropagation","registerEventFormModal","eventFormPromise","categoryId","courseId","siteId","setCategoryId","today","firstDay","day","length","setStartTime","setCourseId","edit","currentTarget","eventWrapper"],"mappings":"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"}