{"version":3,"file":"admin.min.js","sources":["../src/admin.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Comments admin management\r\n *\r\n * @module      core_comment/admin\r\n * @copyright   2022 Paul Holden <paulh@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {dispatchEvent} from 'core/event_dispatcher';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\nimport {prefetchStrings} from 'core/prefetch';\r\nimport {getString} from 'core/str';\r\nimport {deleteComment, deleteComments} from 'core_comment/repository';\r\nimport * as reportEvents from 'core_reportbuilder/local/events';\r\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\r\n\r\nconst Selectors = {\r\n    commentDelete: '[data-action=\"comment-delete\"]',\r\n    commentDeleteChecked: '[data-togglegroup=\"report-select-all\"][data-toggle=\"slave\"]:checked',\r\n    commentDeleteSelected: '[data-action=\"comment-delete-selected\"]',\r\n};\r\n\r\n/**\r\n * Initialise module\r\n */\r\nexport const init = () => {\r\n    prefetchStrings('core_admin', [\r\n        'confirmdeletecomments',\r\n    ]);\r\n\r\n    prefetchStrings('core', [\r\n        'delete',\r\n        'deleteselected'\r\n    ]);\r\n\r\n    document.addEventListener('click', event => {\r\n        const commentDelete = event.target.closest(Selectors.commentDelete);\r\n        if (commentDelete) {\r\n            event.preventDefault();\r\n\r\n            // Use triggerElement to return focus to the action menu toggle.\r\n            const triggerElement = commentDelete.closest('.dropdown').querySelector('.dropdown-toggle');\r\n            Notification.saveCancelPromise(\r\n                getString('delete', 'core'),\r\n                getString('confirmdeletecomments', 'core_admin'),\r\n                getString('delete', 'core'),\r\n                {triggerElement}\r\n            ).then(() => {\r\n                const pendingPromise = new Pending('core_comment/comment:delete');\r\n                const reportElement = event.target.closest(reportSelectors.regions.report);\r\n\r\n                return deleteComment(commentDelete.dataset.commentId)\r\n                    .then(() => {\r\n                        dispatchEvent(reportEvents.tableReload, {preservePagination: true}, reportElement);\r\n                        return pendingPromise.resolve();\r\n                    })\r\n                    .catch(Notification.exception);\r\n            }).catch(() => {\r\n                return;\r\n            });\r\n        }\r\n\r\n        const commentDeleteSelected = event.target.closest(Selectors.commentDeleteSelected);\r\n        if (commentDeleteSelected) {\r\n            event.preventDefault();\r\n\r\n            const reportElement = document.querySelector(reportSelectors.regions.report);\r\n            const commentDeleteChecked = reportElement.querySelectorAll(Selectors.commentDeleteChecked);\r\n            if (commentDeleteChecked.length === 0) {\r\n                return;\r\n            }\r\n\r\n            Notification.saveCancelPromise(\r\n                getString('deleteselected', 'core'),\r\n                getString('confirmdeletecomments', 'core_admin'),\r\n                getString('delete', 'core'),\r\n                {triggerElement: commentDeleteSelected}\r\n            ).then(() => {\r\n                const pendingPromise = new Pending('core_comment/comments:delete');\r\n                const deleteCommentIds = [...commentDeleteChecked].map(check => check.value);\r\n\r\n                return deleteComments(deleteCommentIds)\r\n                    .then(() => {\r\n                        dispatchEvent(reportEvents.tableReload, {preservePagination: true}, reportElement);\r\n                        return pendingPromise.resolve();\r\n                    })\r\n                    .catch(Notification.exception);\r\n            }).catch(() => {\r\n                return;\r\n            });\r\n        }\r\n    });\r\n};\r\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireDefault","_exports","value","init","_notification","_pending","reportEvents","reportSelectors","Selectors","prefetchStrings","document","addEventListener","event","commentDelete","target","closest","preventDefault","triggerElement","querySelector","Notification","saveCancelPromise","getString","then","pendingPromise","Pending","reportElement","regions","report","deleteComment","dataset","commentId","dispatchEvent","tableReload","preservePagination","resolve","catch","exception","commentDeleteSelected","commentDeleteChecked","querySelectorAll","length","deleteCommentIds","map","check","deleteComments"],"mappings":"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"}