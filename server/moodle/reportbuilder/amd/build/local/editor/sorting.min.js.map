{"version":3,"file":"sorting.min.js","sources":["../../../src/local/editor/sorting.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Report builder columns sorting editor\r\n *\r\n * @module      core_reportbuilder/local/editor/sorting\r\n * @copyright   2021 David Matamoros <davidmc@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport $ from 'jquery';\r\nimport 'core/inplace_editable';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\nimport {subscribe} from 'core/pubsub';\r\nimport SortableList from 'core/sortable_list';\r\nimport {getString} from 'core/str';\r\nimport {add as addToast} from 'core/toast';\r\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\r\nimport {reorderColumnSorting, toggleColumnSorting} from 'core_reportbuilder/local/repository/sorting';\r\nimport Templates from 'core/templates';\r\nimport {dispatchEvent} from 'core/event_dispatcher';\r\nimport * as reportEvents from 'core_reportbuilder/local/events';\r\n\r\n// These constants match PHP consts SORT_ASC, SORT_DESC.\r\nconst SORTORDER = {\r\n    ASCENDING: 4,\r\n    DESCENDING: 3,\r\n};\r\n\r\n/**\r\n * Reload sorting settings region\r\n *\r\n * @param {Object} context\r\n * @return {Promise}\r\n */\r\nconst reloadSettingsSortingRegion = context => {\r\n    const pendingPromise = new Pending('core_reportbuilder/sorting:reload');\r\n    const settingsSortingRegion = document.querySelector(reportSelectors.regions.settingsSorting);\r\n\r\n    return Templates.renderForPromise('core_reportbuilder/local/settings/sorting', {sorting: context})\r\n        .then(({html, js}) => {\r\n            Templates.replaceNode(settingsSortingRegion, html, js);\r\n            return pendingPromise.resolve();\r\n        });\r\n};\r\n\r\n/**\r\n * Updates column sorting\r\n *\r\n * @param {Element} reportElement\r\n * @param {Element} element\r\n * @param {Number} sortenabled\r\n * @param {Number} sortdirection\r\n * @return {Promise}\r\n */\r\nconst updateSorting = (reportElement, element, sortenabled, sortdirection) => {\r\n    const reportId = reportElement.dataset.reportId;\r\n    const listElement = element.closest('li');\r\n    const columnId = listElement.dataset.columnSortId;\r\n    const columnName = listElement.dataset.columnSortName;\r\n\r\n    return toggleColumnSorting(reportId, columnId, sortenabled, sortdirection)\r\n        .then(reloadSettingsSortingRegion)\r\n        .then(() => getString('columnsortupdated', 'core_reportbuilder', columnName))\r\n        .then(addToast)\r\n        .then(() => {\r\n            dispatchEvent(reportEvents.tableReload, {}, reportElement);\r\n            return null;\r\n        });\r\n};\r\n\r\n/**\r\n * Initialise module\r\n *\r\n * @param {Boolean} initialized Ensure we only add our listeners once\r\n */\r\nexport const init = (initialized) => {\r\n    if (initialized) {\r\n        return;\r\n    }\r\n\r\n    // Update sorting region each time report columns are updated (added or removed).\r\n    subscribe(reportEvents.publish.reportColumnsUpdated, data => reloadSettingsSortingRegion(data)\r\n        .catch(Notification.exception)\r\n    );\r\n\r\n    document.addEventListener('click', event => {\r\n\r\n        // Enable/disable sorting on columns.\r\n        const toggleSorting = event.target.closest(reportSelectors.actions.reportToggleColumnSort);\r\n        if (toggleSorting) {\r\n            event.preventDefault();\r\n\r\n            const pendingPromise = new Pending('core_reportbuilder/sorting:toggle');\r\n            const reportElement = toggleSorting.closest(reportSelectors.regions.report);\r\n            const sortdirection = parseInt(toggleSorting.closest('li').dataset.columnSortDirection);\r\n\r\n            updateSorting(reportElement, toggleSorting, toggleSorting.checked, sortdirection)\r\n                .then(() => {\r\n                    // Re-focus the toggle sorting element after reloading the region.\r\n                    const toggleSortingElement = document.getElementById(toggleSorting.id);\r\n                    toggleSortingElement?.focus();\r\n                    return pendingPromise.resolve();\r\n                })\r\n                .catch(Notification.exception);\r\n        }\r\n\r\n        // Change column sort direction.\r\n        const toggleSortDirection = event.target.closest(reportSelectors.actions.reportToggleColumnSortDirection);\r\n        if (toggleSortDirection) {\r\n            event.preventDefault();\r\n\r\n            const pendingPromise = new Pending('core_reportbuilder/sorting:direction');\r\n            const reportElement = toggleSortDirection.closest(reportSelectors.regions.report);\r\n            const listElement = toggleSortDirection.closest('li');\r\n            const toggleSorting = listElement.querySelector(reportSelectors.actions.reportToggleColumnSort);\r\n\r\n            let sortdirection = parseInt(listElement.dataset.columnSortDirection);\r\n            if (sortdirection === SORTORDER.ASCENDING) {\r\n                sortdirection = SORTORDER.DESCENDING;\r\n            } else if (sortdirection === SORTORDER.DESCENDING) {\r\n                sortdirection = SORTORDER.ASCENDING;\r\n            }\r\n\r\n            updateSorting(reportElement, toggleSortDirection, toggleSorting.checked, sortdirection)\r\n                .then(() => {\r\n                    // Re-focus the toggle sort direction element after reloading the region.\r\n                    const toggleSortDirectionElement = document.getElementById(toggleSortDirection.id);\r\n                    toggleSortDirectionElement?.focus();\r\n                    return pendingPromise.resolve();\r\n                })\r\n                .catch(Notification.exception);\r\n        }\r\n    });\r\n\r\n    // Initialize sortable list to handle column sorting moving (note JQuery dependency, see MDL-72293 for resolution).\r\n    var columnsSortingSortableList = new SortableList(`${reportSelectors.regions.settingsSorting} ul`, {isHorizontal: false});\r\n    columnsSortingSortableList.getElementName = element => Promise.resolve(element.data('columnSortName'));\r\n\r\n    $(document).on(SortableList.EVENTS.DROP, `${reportSelectors.regions.report} li[data-column-sort-id]`, (event, info) => {\r\n        if (info.positionChanged) {\r\n            const pendingPromise = new Pending('core_reportbuilder/sorting:reorder');\r\n            const reportElement = event.target.closest(reportSelectors.regions.report);\r\n            const columnId = info.element.data('columnSortId');\r\n            const columnPosition = info.element.data('columnSortPosition');\r\n\r\n            // Select target position, if moving to the end then count number of element siblings.\r\n            let targetColumnSortPosition = info.targetNextElement.data('columnSortPosition') || info.element.siblings().length + 2;\r\n            if (targetColumnSortPosition > columnPosition) {\r\n                targetColumnSortPosition--;\r\n            }\r\n\r\n            // Re-order column sorting, giving drop event transition time to finish.\r\n            const reorderPromise = reorderColumnSorting(reportElement.dataset.reportId, columnId, targetColumnSortPosition);\r\n            Promise.all([reorderPromise, new Promise(resolve => setTimeout(resolve, 1000))])\r\n                .then(([data]) => reloadSettingsSortingRegion(data))\r\n                .then(() => getString('columnsortupdated', 'core_reportbuilder', info.element.data('columnSortName')))\r\n                .then(addToast)\r\n                .then(() => {\r\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\r\n                    return pendingPromise.resolve();\r\n                })\r\n                .catch(Notification.exception);\r\n        }\r\n    });\r\n};\r\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireDefault","_exports","value","init","_jquery","_notification","_pending","_sortable_list","reportSelectors","_templates","reportEvents","SORTORDER","reloadSettingsSortingRegion","context","pendingPromise","Pending","settingsSortingRegion","document","querySelector","regions","settingsSorting","Templates","renderForPromise","sorting","then","_ref","html","js","replaceNode","resolve","updateSorting","reportElement","element","sortenabled","sortdirection","reportId","dataset","listElement","closest","columnId","columnSortId","columnName","columnSortName","toggleColumnSorting","getString","addToast","dispatchEvent","tableReload","initialized","subscribe","publish","reportColumnsUpdated","data","catch","Notification","exception","addEventListener","event","toggleSorting","target","actions","reportToggleColumnSort","preventDefault","report","parseInt","columnSortDirection","checked","toggleSortingElement","getElementById","id","focus","toggleSortDirection","reportToggleColumnSortDirection","toggleSortDirectionElement","SortableList","isHorizontal","getElementName","Promise","$","on","EVENTS","DROP","info","positionChanged","columnPosition","targetColumnSortPosition","targetNextElement","siblings","length","reorderPromise","reorderColumnSorting","all","setTimeout","_ref2","add"],"mappings":"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"}