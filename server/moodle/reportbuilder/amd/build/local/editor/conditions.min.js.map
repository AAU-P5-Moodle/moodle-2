{"version":3,"file":"conditions.min.js","sources":["../../../src/local/editor/conditions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Report builder conditions editor\r\n *\r\n * @module      core_reportbuilder/local/editor/conditions\r\n * @copyright   2021 Paul Holden <paulh@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport $ from 'jquery';\r\nimport {dispatchEvent} from 'core/event_dispatcher';\r\nimport AutoComplete from 'core/form-autocomplete';\r\nimport 'core/inplace_editable';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\nimport {prefetchStrings} from 'core/prefetch';\r\nimport SortableList from 'core/sortable_list';\r\nimport {getString} from 'core/str';\r\nimport Templates from 'core/templates';\r\nimport {add as addToast} from 'core/toast';\r\nimport DynamicForm from 'core_form/dynamicform';\r\nimport * as reportEvents from 'core_reportbuilder/local/events';\r\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\r\nimport {addCondition, deleteCondition, reorderCondition, resetConditions} from 'core_reportbuilder/local/repository/conditions';\r\n\r\n/**\r\n * Reload conditions settings region\r\n *\r\n * @param {Element} reportElement\r\n * @param {Object} templateContext\r\n * @return {Promise}\r\n */\r\nconst reloadSettingsConditionsRegion = (reportElement, templateContext) => {\r\n    const pendingPromise = new Pending('core_reportbuilder/conditions:reload');\r\n    const settingsConditionsRegion = reportElement.querySelector(reportSelectors.regions.settingsConditions);\r\n\r\n    return Templates.renderForPromise('core_reportbuilder/local/settings/conditions', {conditions: templateContext})\r\n        .then(({html, js}) => {\r\n            const conditionsjs = $.parseHTML(templateContext.javascript, null, true).map(node => node.innerHTML).join(\"\\n\");\r\n            Templates.replaceNode(settingsConditionsRegion, html, js + conditionsjs);\r\n\r\n            initConditionsForm();\r\n\r\n            // Re-focus the add condition element after reloading the region.\r\n            const reportAddCondition = reportElement.querySelector(reportSelectors.actions.reportAddCondition);\r\n            reportAddCondition?.focus();\r\n\r\n            return pendingPromise.resolve();\r\n        });\r\n};\r\n\r\n/**\r\n * Initialise conditions form, must be called on each init because the form container is re-created when switching editor modes\r\n */\r\nconst initConditionsForm = () => {\r\n    const reportElement = document.querySelector(reportSelectors.regions.report);\r\n\r\n    // Enhance condition selector.\r\n    const reportAddCondition = reportElement.querySelector(reportSelectors.actions.reportAddCondition);\r\n    AutoComplete.enhanceField(reportAddCondition, false, '', getString('selectacondition', 'core_reportbuilder'))\r\n        .catch(Notification.exception);\r\n\r\n    // Handle dynamic conditions form.\r\n    const conditionFormContainer = reportElement.querySelector(reportSelectors.regions.settingsConditions);\r\n    if (!conditionFormContainer) {\r\n        return;\r\n    }\r\n    const conditionForm = new DynamicForm(conditionFormContainer, '\\\\core_reportbuilder\\\\form\\\\condition');\r\n\r\n    // Submit report conditions.\r\n    conditionForm.addEventListener(conditionForm.events.FORM_SUBMITTED, event => {\r\n        event.preventDefault();\r\n\r\n        getString('conditionsapplied', 'core_reportbuilder')\r\n            .then(addToast)\r\n            .catch(Notification.exception);\r\n\r\n        // After the form has been submitted, we should trigger report table reload.\r\n        dispatchEvent(reportEvents.tableReload, {}, reportElement);\r\n    });\r\n\r\n    // Reset report conditions.\r\n    conditionForm.addEventListener(conditionForm.events.NOSUBMIT_BUTTON_PRESSED, event => {\r\n        event.preventDefault();\r\n\r\n        Notification.saveCancelPromise(\r\n            getString('resetconditions', 'core_reportbuilder'),\r\n            getString('resetconditionsconfirm', 'core_reportbuilder'),\r\n            getString('resetall', 'core_reportbuilder'),\r\n            {triggerElement: event.detail}\r\n        ).then(() => {\r\n            const pendingPromise = new Pending('core_reportbuilder/conditions:reset');\r\n\r\n            return resetConditions(reportElement.dataset.reportId)\r\n                .then(data => reloadSettingsConditionsRegion(reportElement, data))\r\n                .then(() => addToast(getString('conditionsreset', 'core_reportbuilder')))\r\n                .then(() => {\r\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\r\n                    return pendingPromise.resolve();\r\n                })\r\n                .catch(Notification.exception);\r\n        }).catch(() => {\r\n            return;\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Initialise module, prefetch all required strings\r\n *\r\n * @param {Boolean} initialized Ensure we only add our listeners once\r\n */\r\nexport const init = initialized => {\r\n    prefetchStrings('core_reportbuilder', [\r\n        'conditionadded',\r\n        'conditiondeleted',\r\n        'conditionmoved',\r\n        'conditionsapplied',\r\n        'conditionsreset',\r\n        'deletecondition',\r\n        'deleteconditionconfirm',\r\n        'resetall',\r\n        'resetconditions',\r\n        'resetconditionsconfirm',\r\n        'selectacondition',\r\n    ]);\r\n\r\n    prefetchStrings('core', [\r\n        'delete',\r\n    ]);\r\n\r\n    initConditionsForm();\r\n    if (initialized) {\r\n        return;\r\n    }\r\n\r\n    // Add condition to report.\r\n    document.addEventListener('change', event => {\r\n        const reportAddCondition = event.target.closest(reportSelectors.actions.reportAddCondition);\r\n        if (reportAddCondition) {\r\n            event.preventDefault();\r\n\r\n            // Check if dropdown is closed with no condition selected.\r\n            if (reportAddCondition.value === \"\" || reportAddCondition.value === \"0\") {\r\n                return;\r\n            }\r\n\r\n            const reportElement = reportAddCondition.closest(reportSelectors.regions.report);\r\n            const pendingPromise = new Pending('core_reportbuilder/conditions:add');\r\n\r\n            addCondition(reportElement.dataset.reportId, reportAddCondition.value)\r\n                .then(data => reloadSettingsConditionsRegion(reportElement, data))\r\n                .then(() => getString('conditionadded', 'core_reportbuilder',\r\n                    reportAddCondition.options[reportAddCondition.selectedIndex].text))\r\n                .then(addToast)\r\n                .then(() => {\r\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\r\n                    return pendingPromise.resolve();\r\n                })\r\n                .catch(Notification.exception);\r\n        }\r\n    });\r\n\r\n    document.addEventListener('click', event => {\r\n\r\n        // Remove condition from report.\r\n        const reportRemoveCondition = event.target.closest(reportSelectors.actions.reportRemoveCondition);\r\n        if (reportRemoveCondition) {\r\n            event.preventDefault();\r\n\r\n            const reportElement = reportRemoveCondition.closest(reportSelectors.regions.report);\r\n            const conditionContainer = reportRemoveCondition.closest(reportSelectors.regions.activeCondition);\r\n            const conditionName = conditionContainer.dataset.conditionName;\r\n\r\n            Notification.saveCancelPromise(\r\n                getString('deletecondition', 'core_reportbuilder', conditionName),\r\n                getString('deleteconditionconfirm', 'core_reportbuilder', conditionName),\r\n                getString('delete', 'core'),\r\n                {triggerElement: reportRemoveCondition}\r\n            ).then(() => {\r\n                const pendingPromise = new Pending('core_reportbuilder/conditions:remove');\r\n\r\n                return deleteCondition(reportElement.dataset.reportId, conditionContainer.dataset.conditionId)\r\n                    .then(data => reloadSettingsConditionsRegion(reportElement, data))\r\n                    .then(() => addToast(getString('conditiondeleted', 'core_reportbuilder', conditionName)))\r\n                    .then(() => {\r\n                        dispatchEvent(reportEvents.tableReload, {}, reportElement);\r\n                        return pendingPromise.resolve();\r\n                    })\r\n                    .catch(Notification.exception);\r\n            }).catch(() => {\r\n                return;\r\n            });\r\n        }\r\n    });\r\n\r\n    // Initialize sortable list to handle active conditions moving (note JQuery dependency, see MDL-72293 for resolution).\r\n    var activeConditionsSortableList = new SortableList(`${reportSelectors.regions.activeConditions}`,\r\n        {isHorizontal: false});\r\n    activeConditionsSortableList.getElementName = element => Promise.resolve(element.data('conditionName'));\r\n\r\n    $(document).on(SortableList.EVENTS.DROP, reportSelectors.regions.activeCondition, (event, info) => {\r\n        if (info.positionChanged) {\r\n            const pendingPromise = new Pending('core_reportbuilder/conditions:reorder');\r\n            const reportElement = event.target.closest(reportSelectors.regions.report);\r\n            const conditionId = info.element.data('conditionId');\r\n            const conditionPosition = info.element.data('conditionPosition');\r\n\r\n            // Select target position, if moving to the end then count number of element siblings.\r\n            let targetConditionPosition = info.targetNextElement.data('conditionPosition') || info.element.siblings().length + 2;\r\n            if (targetConditionPosition > conditionPosition) {\r\n                targetConditionPosition--;\r\n            }\r\n\r\n            // Re-order condition, giving drop event transition time to finish.\r\n            const reorderPromise = reorderCondition(reportElement.dataset.reportId, conditionId, targetConditionPosition);\r\n            Promise.all([reorderPromise, new Promise(resolve => setTimeout(resolve, 1000))])\r\n                .then(([data]) => reloadSettingsConditionsRegion(reportElement, data))\r\n                .then(() => getString('conditionmoved', 'core_reportbuilder', info.element.data('conditionName')))\r\n                .then(addToast)\r\n                .then(() => {\r\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\r\n                    return pendingPromise.resolve();\r\n                })\r\n                .catch(Notification.exception);\r\n        }\r\n    });\r\n};\r\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireDefault","_exports","value","init","_jquery","_formAutocomplete","_notification","_pending","_sortable_list","_templates","_dynamicform","reportEvents","reportSelectors","reloadSettingsConditionsRegion","reportElement","templateContext","pendingPromise","Pending","settingsConditionsRegion","querySelector","regions","settingsConditions","Templates","renderForPromise","conditions","then","_ref","html","js","conditionsjs","$","parseHTML","javascript","map","node","innerHTML","join","replaceNode","initConditionsForm","reportAddCondition","actions","focus","resolve","document","report","AutoComplete","enhanceField","getString","catch","Notification","exception","conditionFormContainer","conditionForm","DynamicForm","addEventListener","events","FORM_SUBMITTED","event","preventDefault","addToast","dispatchEvent","tableReload","NOSUBMIT_BUTTON_PRESSED","saveCancelPromise","triggerElement","detail","resetConditions","dataset","reportId","data","add","initialized","prefetchStrings","target","closest","addCondition","options","selectedIndex","text","reportRemoveCondition","conditionContainer","activeCondition","conditionName","deleteCondition","conditionId","SortableList","activeConditions","isHorizontal","getElementName","element","Promise","on","EVENTS","DROP","info","positionChanged","conditionPosition","targetConditionPosition","targetNextElement","siblings","length","reorderPromise","reorderCondition","all","setTimeout","_ref2"],"mappings":"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"}