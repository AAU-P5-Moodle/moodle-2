{"version":3,"file":"filters.min.js","sources":["../src/filters.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Report builder filter management\r\n *\r\n * @module      core_reportbuilder/filters\r\n * @copyright   2021 Paul Holden <paulh@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {dispatchEvent} from 'core/event_dispatcher';\r\nimport {loadFragment} from 'core/fragment';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\nimport {getString} from 'core/str';\r\nimport Templates from 'core/templates';\r\nimport {add as addToast} from 'core/toast';\r\nimport DynamicForm from 'core_form/dynamicform';\r\nimport * as reportEvents from 'core_reportbuilder/local/events';\r\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\r\nimport {resetFilters} from 'core_reportbuilder/local/repository/filters';\r\n\r\n/**\r\n * Update filter button text to indicate applied filter count\r\n *\r\n * @param {Element} reportElement\r\n * @param {Number} filterCount\r\n */\r\nconst setFilterButtonCount = async(reportElement, filterCount) => {\r\n    const filterButtonLabel = reportElement.querySelector(reportSelectors.regions.filterButtonLabel);\r\n\r\n    if (filterCount > 0) {\r\n        filterButtonLabel.textContent = await getString('filtersappliedx', 'core_reportbuilder', filterCount);\r\n    } else {\r\n        filterButtonLabel.textContent = await getString('filters', 'moodle');\r\n    }\r\n};\r\n\r\n/**\r\n * Initialise module for given report\r\n *\r\n * @method\r\n * @param {Number} reportId\r\n * @param {Number} contextId\r\n */\r\nexport const init = (reportId, contextId) => {\r\n    const reportElement = document.querySelector(reportSelectors.forReport(reportId));\r\n    const filterFormContainer = reportElement.querySelector(reportSelectors.regions.filtersForm);\r\n\r\n    // Ensure we only add our listeners once (can be called multiple times by mustache template).\r\n    if (filterFormContainer.dataset.initialized) {\r\n        return;\r\n    }\r\n    filterFormContainer.dataset.initialized = true;\r\n\r\n    const filterForm = new DynamicForm(filterFormContainer, '\\\\core_reportbuilder\\\\form\\\\filter');\r\n\r\n    // Submit report filters.\r\n    filterForm.addEventListener(filterForm.events.FORM_SUBMITTED, event => {\r\n        event.preventDefault();\r\n\r\n        // After the form has been submitted, we should trigger report table reload.\r\n        dispatchEvent(reportEvents.tableReload, {}, reportElement);\r\n        setFilterButtonCount(reportElement, event.detail);\r\n\r\n        getString('filtersapplied', 'core_reportbuilder')\r\n            .then(addToast)\r\n            .catch(Notification.exception);\r\n    });\r\n\r\n    // Reset report filters.\r\n    filterForm.addEventListener(filterForm.events.NOSUBMIT_BUTTON_PRESSED, event => {\r\n        event.preventDefault();\r\n\r\n        const pendingPromise = new Pending('core_reportbuilder/filters:reset');\r\n        const reportParameters = reportElement.dataset.parameter;\r\n\r\n        resetFilters(reportId, reportParameters)\r\n            .then(() => getString('filtersreset', 'core_reportbuilder'))\r\n            .then(addToast)\r\n            .then(() => loadFragment('core_reportbuilder', 'filters_form', contextId, {\r\n                reportid: reportId,\r\n                parameters: reportParameters,\r\n            }))\r\n            .then((html, js) => {\r\n                Templates.replaceNodeContents(filterFormContainer, html, js);\r\n\r\n                dispatchEvent(reportEvents.tableReload, {}, reportElement);\r\n                setFilterButtonCount(reportElement, 0);\r\n\r\n                return pendingPromise.resolve();\r\n            })\r\n            .catch(Notification.exception);\r\n    });\r\n\r\n    // Modify \"region-main\" overflow for big filter forms.\r\n    document.querySelector('#region-main').style.overflowX = \"visible\";\r\n};\r\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireDefault","_notification","_pending","_templates","_dynamicform","reportEvents","reportSelectors","setFilterButtonCount","async","reportElement","filterCount","filterButtonLabel","querySelector","regions","textContent","getString","_exports","init","reportId","contextId","document","forReport","filterFormContainer","filtersForm","dataset","initialized","filterForm","DynamicForm","addEventListener","events","FORM_SUBMITTED","event","preventDefault","dispatchEvent","tableReload","detail","then","addToast","catch","Notification","exception","NOSUBMIT_BUTTON_PRESSED","pendingPromise","Pending","reportParameters","parameter","resetFilters","loadFragment","reportid","parameters","html","js","Templates","replaceNodeContents","resolve","style","overflowX"],"mappings":"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"}