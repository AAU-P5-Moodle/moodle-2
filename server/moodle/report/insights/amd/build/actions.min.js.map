{"version":3,"file":"actions.min.js","sources":["../src/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Module to manage report insights actions that are executed using AJAX.\r\n *\r\n * @copyright  2017 David Monllao {@link http://www.davidmonllao.com}\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n/**\r\n * This module manages prediction actions that require AJAX requests.\r\n *\r\n * @module report_insights/actions\r\n */\r\n\r\nimport {get_string as getString} from 'core/str';\r\nimport Ajax from 'core/ajax';\r\nimport Notification from 'core/notification';\r\nimport Url from 'core/url';\r\nimport ModalEvents from 'core/modal_events';\r\nimport ModalSaveCancel from 'core/modal_save_cancel';\r\n\r\n\r\n/**\r\n * Executes the provided action.\r\n *\r\n * @param  {Array}  predictionids\r\n * @param  {String} actionname\r\n * @return {Promise}\r\n */\r\nconst markActionExecuted = (predictionids, actionname) => Ajax.call([\r\n    {\r\n        methodname: 'report_insights_action_executed',\r\n        args: {\r\n            actionname,\r\n            predictionids,\r\n        },\r\n    }\r\n])[0];\r\n\r\nconst getPredictionTable = (predictionContainers) => {\r\n    for (const el of predictionContainers) {\r\n        if (el.closest('table')) {\r\n            return el.closest('table');\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nconst executeAction = (predictionIds, predictionContainers, actionName) => {\r\n    markActionExecuted(predictionIds, actionName).then(() => {\r\n        // Remove the selected elements from the list.\r\n        const tableNode = getPredictionTable(predictionContainers);\r\n        predictionContainers.forEach((el) => el.remove());\r\n\r\n        if (!tableNode.querySelector('tbody > tr')) {\r\n            const params = {\r\n                contextid: tableNode.closest('div.insight-container').dataset.contextId,\r\n                modelid: tableNode.closest('div.insight-container').dataset.modelId,\r\n            };\r\n            window.location.assign(Url.relativeUrl(\"report/insights/insights.php\", params, false));\r\n        }\r\n        return;\r\n    }).catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Attach on click handlers for bulk actions.\r\n *\r\n * @param {String} rootNode\r\n * @access public\r\n */\r\nexport const initBulk = (rootNode) => {\r\n    document.addEventListener('click', (e) => {\r\n        const action = e.target.closest(`${rootNode} [data-bulk-actionname]`);\r\n        if (!action) {\r\n            return;\r\n        }\r\n\r\n        e.preventDefault();\r\n        const actionName = action.dataset.bulkActionname;\r\n        const actionVisibleName = action.textContent.trim();\r\n\r\n        const predictionContainers = Array.from(document.querySelectorAll(\r\n            '.insights-list input[data-togglegroup^=\"insight-bulk-action-\"][data-toggle=\"slave\"]:checked',\r\n        )).map((checkbox) => checkbox.closest('tr[data-prediction-id]'));\r\n        const predictionIds = predictionContainers.map((el) => el.dataset.predictionId);\r\n\r\n        if (predictionIds.length === 0) {\r\n            // No items selected message.\r\n            return;\r\n        }\r\n\r\n        const stringParams = {\r\n            action: actionVisibleName,\r\n            nitems: predictionIds.length,\r\n        };\r\n\r\n        ModalSaveCancel.create({\r\n            title: actionVisibleName,\r\n            body: getString('confirmbulkaction', 'report_insights', stringParams),\r\n            buttons: {\r\n                save: getString('confirm'),\r\n            },\r\n            show: true,\r\n        }).then((modal) => {\r\n            modal.getRoot().on(ModalEvents.save, function() {\r\n                // The action is now confirmed, sending an action for it.\r\n                return executeAction(predictionIds, predictionContainers, actionName);\r\n            });\r\n\r\n            return modal;\r\n        }).catch(Notification.exception);\r\n    });\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_ajax","_notification","_url","_modal_events","_modal_save_cancel","executeAction","predictionIds","predictionContainers","actionName","markActionExecuted","predictionids","actionname","Ajax","call","methodname","args","then","tableNode","el","closest","getPredictionTable","forEach","remove","querySelector","params","contextid","dataset","contextId","modelid","modelId","window","location","assign","Url","relativeUrl","catch","Notification","exception","_exports","initBulk","rootNode","document","addEventListener","action","target","preventDefault","bulkActionname","actionVisibleName","textContent","trim","Array","from","querySelectorAll","map","checkbox","predictionId","length","stringParams","nitems","ModalSaveCancel","create","title","body","getString","get_string","buttons","save","show","modal","getRoot","on","ModalEvents"],"mappings":"mOAiCqD,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;sFAJrDG,MAAAJ,uBAAAI,OACAC,cAAAL,uBAAAK,eACAC,KAAAN,uBAAAM,MACAC,cAAAP,uBAAAO,eACAC,mBAAAR,uBAAAQ,oBAUA,MAoBMC,cAAgBA,CAACC,cAAeC,qBAAsBC,cApBjCC,IAACC,cAAeC,YAAfD,cAqBLJ,cArBoBK,WAqBLH,WArBoBI,MAAIb,QAACc,KAAK,CAChE,CACIC,WAAY,kCACZC,KAAM,CACFJ,sBACAD,gCAGT,IAa+CM,MAAK,KAE/C,MAAMC,UAbcV,wBACxB,IAAK,MAAMW,MAAMX,qBACb,GAAIW,GAAGC,QAAQ,SACX,OAAOD,GAAGC,QAAQ,SAI1B,OAAO,IAAI,EAMWC,CAAmBb,sBAGrC,GAFAA,qBAAqBc,SAASH,IAAOA,GAAGI,YAEnCL,UAAUM,cAAc,cAAe,CACxC,MAAMC,OAAS,CACXC,UAAWR,UAAUE,QAAQ,yBAAyBO,QAAQC,UAC9DC,QAASX,UAAUE,QAAQ,yBAAyBO,QAAQG,SAEhEC,OAAOC,SAASC,OAAOC,KAAGlC,QAACmC,YAAY,+BAAgCV,QAAQ,GACnF,CACA,IACDW,MAAMC,cAAYrC,QAACsC,UAAU,EAmDlCC,SAAAC,SA1CuBC,WACrBC,SAASC,iBAAiB,SAAU7C,IAChC,MAAM8C,OAAS9C,EAAE+C,OAAOzB,QAAQ,GAAGqB,mCACnC,IAAKG,OACD,OAGJ9C,EAAEgD,iBACF,MAAMrC,WAAamC,OAAOjB,QAAQoB,eAC5BC,kBAAoBJ,OAAOK,YAAYC,OAEvC1C,qBAAuB2C,MAAMC,KAAKV,SAASW,iBAC7C,gGACDC,KAAKC,UAAaA,SAASnC,QAAQ,4BAChCb,cAAgBC,qBAAqB8C,KAAKnC,IAAOA,GAAGQ,QAAQ6B,eAElE,GAA6B,IAAzBjD,cAAckD,OAEd,OAGJ,MAAMC,aAAe,CACjBd,OAAQI,kBACRW,OAAQpD,cAAckD,QAG1BG,mBAAe5D,QAAC6D,OAAO,CACnBC,MAAOd,kBACPe,MAAM,EAAAC,KAASC,YAAC,oBAAqB,kBAAmBP,cACxDQ,QAAS,CACLC,MAAM,EAAAH,KAASC,YAAC,YAEpBG,MAAM,IACPnD,MAAMoD,QACLA,MAAMC,UAAUC,GAAGC,cAAWxE,QAACmE,MAAM,WAEjC,OAAO7D,cAAcC,cAAeC,qBAAsBC,WAC9D,IAEO4D,SACRjC,MAAMC,cAAYrC,QAACsC,UAAU,GAClC,CACJ"}