{"version":3,"file":"message_users.min.js","sources":["../src/message_users.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Message users.\r\n *\r\n * @module     report_insights/message_users\r\n * @copyright  2019 David Monllao\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/str', 'core/log', 'core/modal_save_cancel', 'core/modal_events', 'core/templates',\r\n    'core/notification', 'core/ajax'],\r\n        function($, Str, Log, ModalSaveCancel, ModalEvents, Templates, Notification, Ajax) {\r\n\r\n    var SELECTORS = {\r\n        BULKACTIONSELECT: \"#formactionid\"\r\n    };\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {String} rootNode\r\n     * @param {String} actionName\r\n     */\r\n    var MessageUsers = function(rootNode, actionName) {\r\n        this.actionName = actionName;\r\n        this.attachEventListeners(rootNode);\r\n    };\r\n\r\n    /**\r\n     * @var {String} actionName\r\n     * @private\r\n     */\r\n    MessageUsers.prototype.actionName = null;\r\n\r\n    /**\r\n     * @var {Modal} modal\r\n     * @private\r\n     */\r\n    MessageUsers.prototype.modal = null;\r\n\r\n    /**\r\n     * Attach the event listener to the send message bulk action.\r\n     * @param {String} rootNode\r\n     */\r\n    MessageUsers.prototype.attachEventListeners = function(rootNode) {\r\n        $(rootNode + ' button[data-bulk-sendmessage]').on('click', function(e) {\r\n            e.preventDefault();\r\n            var cTarget = $(e.currentTarget);\r\n\r\n            // Using an associative array in case there is more than 1 prediction for the same user.\r\n            var users = {};\r\n            var predictionToUserMapping = cTarget.data('prediction-to-user-id');\r\n\r\n            var checkedSelector = '.insights-list input[data-togglegroup^=\"insight-bulk-action\"][data-toggle=\"slave\"]:checked';\r\n            $(checkedSelector).each(function(index, value) {\r\n                var predictionId = $(value).closest('tr[data-prediction-id]').data('prediction-id');\r\n\r\n                if (typeof predictionToUserMapping[predictionId] === 'undefined') {\r\n                    Log.error('Unknown user for prediction ' + predictionId);\r\n                    return;\r\n                }\r\n\r\n                var userId = predictionToUserMapping[predictionId];\r\n                users[predictionId] = userId;\r\n\r\n            });\r\n\r\n            if (Object.keys(users).length === 0) {\r\n                return this;\r\n            }\r\n\r\n            this.showSendMessage(users);\r\n\r\n            return this;\r\n        }.bind(this));\r\n    };\r\n\r\n    /**\r\n     * Show the send message popup.\r\n     *\r\n     * @method showSendMessage\r\n     * @private\r\n     * @param {Object} users Prediction id to user id mapping.\r\n     * @returns {Promise}\r\n     */\r\n    MessageUsers.prototype.showSendMessage = function(users) {\r\n\r\n        var userIds = new Set(Object.values(users));\r\n\r\n        if (userIds.length == 0) {\r\n            // Nothing to do.\r\n            return $.Deferred().resolve().promise();\r\n        }\r\n        var titlePromise = null;\r\n        if (userIds.size == 1) {\r\n            titlePromise = Str.get_string('sendbulkmessagesingle', 'core_message');\r\n        } else {\r\n            titlePromise = Str.get_string('sendbulkmessage', 'core_message', userIds.size);\r\n        }\r\n\r\n        // eslint-disable-next-line promise/catch-or-return\r\n        ModalSaveCancel.create({\r\n            body: Templates.render('core_user/send_bulk_message', {}),\r\n            title: titlePromise,\r\n            buttons: {\r\n                save: titlePromise,\r\n            },\r\n            show: true,\r\n        })\r\n        .then(function(modal) {\r\n            // Keep a reference to the modal.\r\n            this.modal = modal;\r\n\r\n            // We want to focus on the action select when the dialog is closed.\r\n            this.modal.getRoot().on(ModalEvents.hidden, function() {\r\n                $(SELECTORS.BULKACTIONSELECT).focus();\r\n                this.modal.getRoot().remove();\r\n            }.bind(this));\r\n\r\n            this.modal.getRoot().on(ModalEvents.save, this.submitSendMessage.bind(this, users));\r\n\r\n            return this.modal;\r\n        }.bind(this));\r\n    };\r\n\r\n    /**\r\n     * Send a message to these users.\r\n     *\r\n     * @method submitSendMessage\r\n     * @private\r\n     * @param {Object} users Prediction id to user id mapping.\r\n     * @returns {Promise}\r\n     */\r\n    MessageUsers.prototype.submitSendMessage = function(users) {\r\n\r\n        var messageText = this.modal.getRoot().find('form textarea').val();\r\n\r\n        var messages = [];\r\n\r\n        var userIds = new Set(Object.values(users));\r\n        userIds.forEach(function(userId) {\r\n            messages.push({touserid: userId, text: messageText});\r\n        });\r\n\r\n        var actionName = this.actionName;\r\n        var message = null;\r\n        return Ajax.call([{\r\n            methodname: 'core_message_send_instant_messages',\r\n            args: {messages: messages}\r\n        }])[0].then(function(messageIds) {\r\n            if (messageIds.length == 1) {\r\n                return Str.get_string('sendbulkmessagesentsingle', 'core_message');\r\n            } else {\r\n                return Str.get_string('sendbulkmessagesent', 'core_message', messageIds.length);\r\n            }\r\n        }).then(function(msg) {\r\n\r\n            // Save this for the following callback. Now that we got everything\r\n            // done we can flag this action as executed.\r\n            message = msg;\r\n\r\n            return Ajax.call([{\r\n                methodname: 'report_insights_action_executed',\r\n                args: {\r\n                    actionname: actionName,\r\n                    predictionids: Object.keys(users)\r\n                }\r\n            }])[0];\r\n        }).then(function() {\r\n            Notification.addNotification({\r\n                message: message,\r\n                type: \"success\"\r\n            });\r\n            return true;\r\n        }).catch(Notification.exception);\r\n    };\r\n\r\n    return /** @alias module:report_insights/message_users */ {\r\n        // Public variables and functions.\r\n\r\n        /**\r\n         * @method init\r\n         * @param {String} rootNode\r\n         * @param {String} actionName\r\n         * @returns {MessageUsers}\r\n         */\r\n        'init': function(rootNode, actionName) {\r\n            return new MessageUsers(rootNode, actionName);\r\n        }\r\n    };\r\n});\r\n"],"names":["define","$","Str","Log","ModalSaveCancel","ModalEvents","Templates","Notification","Ajax","SELECTORS","MessageUsers","rootNode","actionName","this","attachEventListeners","prototype","modal","on","e","preventDefault","cTarget","currentTarget","users","predictionToUserMapping","data","each","index","value","predictionId","closest","userId","error","Object","keys","length","showSendMessage","bind","userIds","Set","values","Deferred","resolve","promise","titlePromise","size","get_string","create","body","render","title","buttons","save","show","then","getRoot","hidden","focus","remove","submitSendMessage","messageText","find","val","messages","forEach","push","touserid","text","message","call","methodname","args","messageIds","msg","actionname","predictionids","addNotification","type","catch","exception","init"],"mappings":"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"}